
rpm_current.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f154  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000704  0800f218  0800f218  0001f218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f91c  0800f91c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800f91c  0800f91c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f91c  0800f91c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f91c  0800f91c  0001f91c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f920  0800f920  0001f920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800f924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c1c  200001e8  0800fb08  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000e04  0800fb08  00020e04  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f551  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004afd  00000000  00000000  0003f75d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001968  00000000  00000000  00044260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001730  00000000  00000000  00045bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000073f3  00000000  00000000  000472f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023517  00000000  00000000  0004e6eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8fb0  00000000  00000000  00071c02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011abb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006dc8  00000000  00000000  0011ac04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e8 	.word	0x200001e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800f1fc 	.word	0x0800f1fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ec 	.word	0x200001ec
 8000104:	0800f1fc 	.word	0x0800f1fc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fe27 	bl	8002090 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fd77 	bl	8001f40 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fe19 	bl	8002090 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fe0f 	bl	8002090 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fd9f 	bl	8001fc4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fd95 	bl	8001fc4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fb55 	bl	8000b60 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fae1 	bl	8000a88 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb47 	bl	8000b60 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fb3d 	bl	8000b60 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 faed 	bl	8000ad4 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fae3 	bl	8000ad4 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_fadd>:
 800051c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800051e:	46c6      	mov	lr, r8
 8000520:	0243      	lsls	r3, r0, #9
 8000522:	0a5b      	lsrs	r3, r3, #9
 8000524:	024e      	lsls	r6, r1, #9
 8000526:	0045      	lsls	r5, r0, #1
 8000528:	004f      	lsls	r7, r1, #1
 800052a:	00da      	lsls	r2, r3, #3
 800052c:	0fc4      	lsrs	r4, r0, #31
 800052e:	469c      	mov	ip, r3
 8000530:	0a70      	lsrs	r0, r6, #9
 8000532:	4690      	mov	r8, r2
 8000534:	b500      	push	{lr}
 8000536:	0e2d      	lsrs	r5, r5, #24
 8000538:	0e3f      	lsrs	r7, r7, #24
 800053a:	0fc9      	lsrs	r1, r1, #31
 800053c:	09b6      	lsrs	r6, r6, #6
 800053e:	428c      	cmp	r4, r1
 8000540:	d04b      	beq.n	80005da <__aeabi_fadd+0xbe>
 8000542:	1bea      	subs	r2, r5, r7
 8000544:	2a00      	cmp	r2, #0
 8000546:	dd36      	ble.n	80005b6 <__aeabi_fadd+0x9a>
 8000548:	2f00      	cmp	r7, #0
 800054a:	d061      	beq.n	8000610 <__aeabi_fadd+0xf4>
 800054c:	2dff      	cmp	r5, #255	; 0xff
 800054e:	d100      	bne.n	8000552 <__aeabi_fadd+0x36>
 8000550:	e0ad      	b.n	80006ae <__aeabi_fadd+0x192>
 8000552:	2380      	movs	r3, #128	; 0x80
 8000554:	04db      	lsls	r3, r3, #19
 8000556:	431e      	orrs	r6, r3
 8000558:	2a1b      	cmp	r2, #27
 800055a:	dc00      	bgt.n	800055e <__aeabi_fadd+0x42>
 800055c:	e0d3      	b.n	8000706 <__aeabi_fadd+0x1ea>
 800055e:	2001      	movs	r0, #1
 8000560:	4643      	mov	r3, r8
 8000562:	1a18      	subs	r0, r3, r0
 8000564:	0143      	lsls	r3, r0, #5
 8000566:	d400      	bmi.n	800056a <__aeabi_fadd+0x4e>
 8000568:	e08c      	b.n	8000684 <__aeabi_fadd+0x168>
 800056a:	0180      	lsls	r0, r0, #6
 800056c:	0987      	lsrs	r7, r0, #6
 800056e:	0038      	movs	r0, r7
 8000570:	f002 fd6a 	bl	8003048 <__clzsi2>
 8000574:	3805      	subs	r0, #5
 8000576:	4087      	lsls	r7, r0
 8000578:	4285      	cmp	r5, r0
 800057a:	dc00      	bgt.n	800057e <__aeabi_fadd+0x62>
 800057c:	e0b6      	b.n	80006ec <__aeabi_fadd+0x1d0>
 800057e:	1a2d      	subs	r5, r5, r0
 8000580:	48b3      	ldr	r0, [pc, #716]	; (8000850 <__aeabi_fadd+0x334>)
 8000582:	4038      	ands	r0, r7
 8000584:	0743      	lsls	r3, r0, #29
 8000586:	d004      	beq.n	8000592 <__aeabi_fadd+0x76>
 8000588:	230f      	movs	r3, #15
 800058a:	4003      	ands	r3, r0
 800058c:	2b04      	cmp	r3, #4
 800058e:	d000      	beq.n	8000592 <__aeabi_fadd+0x76>
 8000590:	3004      	adds	r0, #4
 8000592:	0143      	lsls	r3, r0, #5
 8000594:	d400      	bmi.n	8000598 <__aeabi_fadd+0x7c>
 8000596:	e078      	b.n	800068a <__aeabi_fadd+0x16e>
 8000598:	1c6a      	adds	r2, r5, #1
 800059a:	2dfe      	cmp	r5, #254	; 0xfe
 800059c:	d065      	beq.n	800066a <__aeabi_fadd+0x14e>
 800059e:	0180      	lsls	r0, r0, #6
 80005a0:	0a43      	lsrs	r3, r0, #9
 80005a2:	469c      	mov	ip, r3
 80005a4:	b2d2      	uxtb	r2, r2
 80005a6:	4663      	mov	r3, ip
 80005a8:	05d0      	lsls	r0, r2, #23
 80005aa:	4318      	orrs	r0, r3
 80005ac:	07e4      	lsls	r4, r4, #31
 80005ae:	4320      	orrs	r0, r4
 80005b0:	bc80      	pop	{r7}
 80005b2:	46b8      	mov	r8, r7
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	2a00      	cmp	r2, #0
 80005b8:	d035      	beq.n	8000626 <__aeabi_fadd+0x10a>
 80005ba:	1b7a      	subs	r2, r7, r5
 80005bc:	2d00      	cmp	r5, #0
 80005be:	d000      	beq.n	80005c2 <__aeabi_fadd+0xa6>
 80005c0:	e0af      	b.n	8000722 <__aeabi_fadd+0x206>
 80005c2:	4643      	mov	r3, r8
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d100      	bne.n	80005ca <__aeabi_fadd+0xae>
 80005c8:	e0a7      	b.n	800071a <__aeabi_fadd+0x1fe>
 80005ca:	1e53      	subs	r3, r2, #1
 80005cc:	2a01      	cmp	r2, #1
 80005ce:	d100      	bne.n	80005d2 <__aeabi_fadd+0xb6>
 80005d0:	e12f      	b.n	8000832 <__aeabi_fadd+0x316>
 80005d2:	2aff      	cmp	r2, #255	; 0xff
 80005d4:	d069      	beq.n	80006aa <__aeabi_fadd+0x18e>
 80005d6:	001a      	movs	r2, r3
 80005d8:	e0aa      	b.n	8000730 <__aeabi_fadd+0x214>
 80005da:	1be9      	subs	r1, r5, r7
 80005dc:	2900      	cmp	r1, #0
 80005de:	dd70      	ble.n	80006c2 <__aeabi_fadd+0x1a6>
 80005e0:	2f00      	cmp	r7, #0
 80005e2:	d037      	beq.n	8000654 <__aeabi_fadd+0x138>
 80005e4:	2dff      	cmp	r5, #255	; 0xff
 80005e6:	d062      	beq.n	80006ae <__aeabi_fadd+0x192>
 80005e8:	2380      	movs	r3, #128	; 0x80
 80005ea:	04db      	lsls	r3, r3, #19
 80005ec:	431e      	orrs	r6, r3
 80005ee:	291b      	cmp	r1, #27
 80005f0:	dc00      	bgt.n	80005f4 <__aeabi_fadd+0xd8>
 80005f2:	e0b0      	b.n	8000756 <__aeabi_fadd+0x23a>
 80005f4:	2001      	movs	r0, #1
 80005f6:	4440      	add	r0, r8
 80005f8:	0143      	lsls	r3, r0, #5
 80005fa:	d543      	bpl.n	8000684 <__aeabi_fadd+0x168>
 80005fc:	3501      	adds	r5, #1
 80005fe:	2dff      	cmp	r5, #255	; 0xff
 8000600:	d033      	beq.n	800066a <__aeabi_fadd+0x14e>
 8000602:	2301      	movs	r3, #1
 8000604:	4a93      	ldr	r2, [pc, #588]	; (8000854 <__aeabi_fadd+0x338>)
 8000606:	4003      	ands	r3, r0
 8000608:	0840      	lsrs	r0, r0, #1
 800060a:	4010      	ands	r0, r2
 800060c:	4318      	orrs	r0, r3
 800060e:	e7b9      	b.n	8000584 <__aeabi_fadd+0x68>
 8000610:	2e00      	cmp	r6, #0
 8000612:	d100      	bne.n	8000616 <__aeabi_fadd+0xfa>
 8000614:	e083      	b.n	800071e <__aeabi_fadd+0x202>
 8000616:	1e51      	subs	r1, r2, #1
 8000618:	2a01      	cmp	r2, #1
 800061a:	d100      	bne.n	800061e <__aeabi_fadd+0x102>
 800061c:	e0d8      	b.n	80007d0 <__aeabi_fadd+0x2b4>
 800061e:	2aff      	cmp	r2, #255	; 0xff
 8000620:	d045      	beq.n	80006ae <__aeabi_fadd+0x192>
 8000622:	000a      	movs	r2, r1
 8000624:	e798      	b.n	8000558 <__aeabi_fadd+0x3c>
 8000626:	27fe      	movs	r7, #254	; 0xfe
 8000628:	1c6a      	adds	r2, r5, #1
 800062a:	4217      	tst	r7, r2
 800062c:	d000      	beq.n	8000630 <__aeabi_fadd+0x114>
 800062e:	e086      	b.n	800073e <__aeabi_fadd+0x222>
 8000630:	2d00      	cmp	r5, #0
 8000632:	d000      	beq.n	8000636 <__aeabi_fadd+0x11a>
 8000634:	e0b7      	b.n	80007a6 <__aeabi_fadd+0x28a>
 8000636:	4643      	mov	r3, r8
 8000638:	2b00      	cmp	r3, #0
 800063a:	d100      	bne.n	800063e <__aeabi_fadd+0x122>
 800063c:	e0f3      	b.n	8000826 <__aeabi_fadd+0x30a>
 800063e:	2200      	movs	r2, #0
 8000640:	2e00      	cmp	r6, #0
 8000642:	d0b0      	beq.n	80005a6 <__aeabi_fadd+0x8a>
 8000644:	1b98      	subs	r0, r3, r6
 8000646:	0143      	lsls	r3, r0, #5
 8000648:	d400      	bmi.n	800064c <__aeabi_fadd+0x130>
 800064a:	e0fa      	b.n	8000842 <__aeabi_fadd+0x326>
 800064c:	4643      	mov	r3, r8
 800064e:	000c      	movs	r4, r1
 8000650:	1af0      	subs	r0, r6, r3
 8000652:	e797      	b.n	8000584 <__aeabi_fadd+0x68>
 8000654:	2e00      	cmp	r6, #0
 8000656:	d100      	bne.n	800065a <__aeabi_fadd+0x13e>
 8000658:	e0c8      	b.n	80007ec <__aeabi_fadd+0x2d0>
 800065a:	1e4a      	subs	r2, r1, #1
 800065c:	2901      	cmp	r1, #1
 800065e:	d100      	bne.n	8000662 <__aeabi_fadd+0x146>
 8000660:	e0ae      	b.n	80007c0 <__aeabi_fadd+0x2a4>
 8000662:	29ff      	cmp	r1, #255	; 0xff
 8000664:	d023      	beq.n	80006ae <__aeabi_fadd+0x192>
 8000666:	0011      	movs	r1, r2
 8000668:	e7c1      	b.n	80005ee <__aeabi_fadd+0xd2>
 800066a:	2300      	movs	r3, #0
 800066c:	22ff      	movs	r2, #255	; 0xff
 800066e:	469c      	mov	ip, r3
 8000670:	e799      	b.n	80005a6 <__aeabi_fadd+0x8a>
 8000672:	21fe      	movs	r1, #254	; 0xfe
 8000674:	1c6a      	adds	r2, r5, #1
 8000676:	4211      	tst	r1, r2
 8000678:	d077      	beq.n	800076a <__aeabi_fadd+0x24e>
 800067a:	2aff      	cmp	r2, #255	; 0xff
 800067c:	d0f5      	beq.n	800066a <__aeabi_fadd+0x14e>
 800067e:	0015      	movs	r5, r2
 8000680:	4446      	add	r6, r8
 8000682:	0870      	lsrs	r0, r6, #1
 8000684:	0743      	lsls	r3, r0, #29
 8000686:	d000      	beq.n	800068a <__aeabi_fadd+0x16e>
 8000688:	e77e      	b.n	8000588 <__aeabi_fadd+0x6c>
 800068a:	08c3      	lsrs	r3, r0, #3
 800068c:	2dff      	cmp	r5, #255	; 0xff
 800068e:	d00e      	beq.n	80006ae <__aeabi_fadd+0x192>
 8000690:	025b      	lsls	r3, r3, #9
 8000692:	0a5b      	lsrs	r3, r3, #9
 8000694:	469c      	mov	ip, r3
 8000696:	b2ea      	uxtb	r2, r5
 8000698:	e785      	b.n	80005a6 <__aeabi_fadd+0x8a>
 800069a:	2e00      	cmp	r6, #0
 800069c:	d007      	beq.n	80006ae <__aeabi_fadd+0x192>
 800069e:	2280      	movs	r2, #128	; 0x80
 80006a0:	03d2      	lsls	r2, r2, #15
 80006a2:	4213      	tst	r3, r2
 80006a4:	d003      	beq.n	80006ae <__aeabi_fadd+0x192>
 80006a6:	4210      	tst	r0, r2
 80006a8:	d101      	bne.n	80006ae <__aeabi_fadd+0x192>
 80006aa:	000c      	movs	r4, r1
 80006ac:	0003      	movs	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d0db      	beq.n	800066a <__aeabi_fadd+0x14e>
 80006b2:	2080      	movs	r0, #128	; 0x80
 80006b4:	03c0      	lsls	r0, r0, #15
 80006b6:	4318      	orrs	r0, r3
 80006b8:	0240      	lsls	r0, r0, #9
 80006ba:	0a43      	lsrs	r3, r0, #9
 80006bc:	469c      	mov	ip, r3
 80006be:	22ff      	movs	r2, #255	; 0xff
 80006c0:	e771      	b.n	80005a6 <__aeabi_fadd+0x8a>
 80006c2:	2900      	cmp	r1, #0
 80006c4:	d0d5      	beq.n	8000672 <__aeabi_fadd+0x156>
 80006c6:	1b7a      	subs	r2, r7, r5
 80006c8:	2d00      	cmp	r5, #0
 80006ca:	d160      	bne.n	800078e <__aeabi_fadd+0x272>
 80006cc:	4643      	mov	r3, r8
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d024      	beq.n	800071c <__aeabi_fadd+0x200>
 80006d2:	1e53      	subs	r3, r2, #1
 80006d4:	2a01      	cmp	r2, #1
 80006d6:	d073      	beq.n	80007c0 <__aeabi_fadd+0x2a4>
 80006d8:	2aff      	cmp	r2, #255	; 0xff
 80006da:	d0e7      	beq.n	80006ac <__aeabi_fadd+0x190>
 80006dc:	001a      	movs	r2, r3
 80006de:	2a1b      	cmp	r2, #27
 80006e0:	dc00      	bgt.n	80006e4 <__aeabi_fadd+0x1c8>
 80006e2:	e085      	b.n	80007f0 <__aeabi_fadd+0x2d4>
 80006e4:	2001      	movs	r0, #1
 80006e6:	003d      	movs	r5, r7
 80006e8:	1980      	adds	r0, r0, r6
 80006ea:	e785      	b.n	80005f8 <__aeabi_fadd+0xdc>
 80006ec:	2320      	movs	r3, #32
 80006ee:	003a      	movs	r2, r7
 80006f0:	1b45      	subs	r5, r0, r5
 80006f2:	0038      	movs	r0, r7
 80006f4:	3501      	adds	r5, #1
 80006f6:	40ea      	lsrs	r2, r5
 80006f8:	1b5d      	subs	r5, r3, r5
 80006fa:	40a8      	lsls	r0, r5
 80006fc:	1e43      	subs	r3, r0, #1
 80006fe:	4198      	sbcs	r0, r3
 8000700:	2500      	movs	r5, #0
 8000702:	4310      	orrs	r0, r2
 8000704:	e73e      	b.n	8000584 <__aeabi_fadd+0x68>
 8000706:	2320      	movs	r3, #32
 8000708:	0030      	movs	r0, r6
 800070a:	1a9b      	subs	r3, r3, r2
 800070c:	0031      	movs	r1, r6
 800070e:	4098      	lsls	r0, r3
 8000710:	40d1      	lsrs	r1, r2
 8000712:	1e43      	subs	r3, r0, #1
 8000714:	4198      	sbcs	r0, r3
 8000716:	4308      	orrs	r0, r1
 8000718:	e722      	b.n	8000560 <__aeabi_fadd+0x44>
 800071a:	000c      	movs	r4, r1
 800071c:	0003      	movs	r3, r0
 800071e:	0015      	movs	r5, r2
 8000720:	e7b4      	b.n	800068c <__aeabi_fadd+0x170>
 8000722:	2fff      	cmp	r7, #255	; 0xff
 8000724:	d0c1      	beq.n	80006aa <__aeabi_fadd+0x18e>
 8000726:	2380      	movs	r3, #128	; 0x80
 8000728:	4640      	mov	r0, r8
 800072a:	04db      	lsls	r3, r3, #19
 800072c:	4318      	orrs	r0, r3
 800072e:	4680      	mov	r8, r0
 8000730:	2a1b      	cmp	r2, #27
 8000732:	dd51      	ble.n	80007d8 <__aeabi_fadd+0x2bc>
 8000734:	2001      	movs	r0, #1
 8000736:	000c      	movs	r4, r1
 8000738:	003d      	movs	r5, r7
 800073a:	1a30      	subs	r0, r6, r0
 800073c:	e712      	b.n	8000564 <__aeabi_fadd+0x48>
 800073e:	4643      	mov	r3, r8
 8000740:	1b9f      	subs	r7, r3, r6
 8000742:	017b      	lsls	r3, r7, #5
 8000744:	d42b      	bmi.n	800079e <__aeabi_fadd+0x282>
 8000746:	2f00      	cmp	r7, #0
 8000748:	d000      	beq.n	800074c <__aeabi_fadd+0x230>
 800074a:	e710      	b.n	800056e <__aeabi_fadd+0x52>
 800074c:	2300      	movs	r3, #0
 800074e:	2400      	movs	r4, #0
 8000750:	2200      	movs	r2, #0
 8000752:	469c      	mov	ip, r3
 8000754:	e727      	b.n	80005a6 <__aeabi_fadd+0x8a>
 8000756:	2320      	movs	r3, #32
 8000758:	0032      	movs	r2, r6
 800075a:	0030      	movs	r0, r6
 800075c:	40ca      	lsrs	r2, r1
 800075e:	1a59      	subs	r1, r3, r1
 8000760:	4088      	lsls	r0, r1
 8000762:	1e43      	subs	r3, r0, #1
 8000764:	4198      	sbcs	r0, r3
 8000766:	4310      	orrs	r0, r2
 8000768:	e745      	b.n	80005f6 <__aeabi_fadd+0xda>
 800076a:	2d00      	cmp	r5, #0
 800076c:	d14a      	bne.n	8000804 <__aeabi_fadd+0x2e8>
 800076e:	4643      	mov	r3, r8
 8000770:	2b00      	cmp	r3, #0
 8000772:	d063      	beq.n	800083c <__aeabi_fadd+0x320>
 8000774:	2200      	movs	r2, #0
 8000776:	2e00      	cmp	r6, #0
 8000778:	d100      	bne.n	800077c <__aeabi_fadd+0x260>
 800077a:	e714      	b.n	80005a6 <__aeabi_fadd+0x8a>
 800077c:	0030      	movs	r0, r6
 800077e:	4440      	add	r0, r8
 8000780:	0143      	lsls	r3, r0, #5
 8000782:	d400      	bmi.n	8000786 <__aeabi_fadd+0x26a>
 8000784:	e77e      	b.n	8000684 <__aeabi_fadd+0x168>
 8000786:	4b32      	ldr	r3, [pc, #200]	; (8000850 <__aeabi_fadd+0x334>)
 8000788:	3501      	adds	r5, #1
 800078a:	4018      	ands	r0, r3
 800078c:	e77a      	b.n	8000684 <__aeabi_fadd+0x168>
 800078e:	2fff      	cmp	r7, #255	; 0xff
 8000790:	d08c      	beq.n	80006ac <__aeabi_fadd+0x190>
 8000792:	2380      	movs	r3, #128	; 0x80
 8000794:	4641      	mov	r1, r8
 8000796:	04db      	lsls	r3, r3, #19
 8000798:	4319      	orrs	r1, r3
 800079a:	4688      	mov	r8, r1
 800079c:	e79f      	b.n	80006de <__aeabi_fadd+0x1c2>
 800079e:	4643      	mov	r3, r8
 80007a0:	000c      	movs	r4, r1
 80007a2:	1af7      	subs	r7, r6, r3
 80007a4:	e6e3      	b.n	800056e <__aeabi_fadd+0x52>
 80007a6:	4642      	mov	r2, r8
 80007a8:	2a00      	cmp	r2, #0
 80007aa:	d000      	beq.n	80007ae <__aeabi_fadd+0x292>
 80007ac:	e775      	b.n	800069a <__aeabi_fadd+0x17e>
 80007ae:	2e00      	cmp	r6, #0
 80007b0:	d000      	beq.n	80007b4 <__aeabi_fadd+0x298>
 80007b2:	e77a      	b.n	80006aa <__aeabi_fadd+0x18e>
 80007b4:	2380      	movs	r3, #128	; 0x80
 80007b6:	03db      	lsls	r3, r3, #15
 80007b8:	2400      	movs	r4, #0
 80007ba:	469c      	mov	ip, r3
 80007bc:	22ff      	movs	r2, #255	; 0xff
 80007be:	e6f2      	b.n	80005a6 <__aeabi_fadd+0x8a>
 80007c0:	0030      	movs	r0, r6
 80007c2:	4440      	add	r0, r8
 80007c4:	2501      	movs	r5, #1
 80007c6:	0143      	lsls	r3, r0, #5
 80007c8:	d400      	bmi.n	80007cc <__aeabi_fadd+0x2b0>
 80007ca:	e75b      	b.n	8000684 <__aeabi_fadd+0x168>
 80007cc:	2502      	movs	r5, #2
 80007ce:	e718      	b.n	8000602 <__aeabi_fadd+0xe6>
 80007d0:	4643      	mov	r3, r8
 80007d2:	2501      	movs	r5, #1
 80007d4:	1b98      	subs	r0, r3, r6
 80007d6:	e6c5      	b.n	8000564 <__aeabi_fadd+0x48>
 80007d8:	2320      	movs	r3, #32
 80007da:	4644      	mov	r4, r8
 80007dc:	4640      	mov	r0, r8
 80007de:	40d4      	lsrs	r4, r2
 80007e0:	1a9a      	subs	r2, r3, r2
 80007e2:	4090      	lsls	r0, r2
 80007e4:	1e43      	subs	r3, r0, #1
 80007e6:	4198      	sbcs	r0, r3
 80007e8:	4320      	orrs	r0, r4
 80007ea:	e7a4      	b.n	8000736 <__aeabi_fadd+0x21a>
 80007ec:	000d      	movs	r5, r1
 80007ee:	e74d      	b.n	800068c <__aeabi_fadd+0x170>
 80007f0:	2320      	movs	r3, #32
 80007f2:	4641      	mov	r1, r8
 80007f4:	4640      	mov	r0, r8
 80007f6:	40d1      	lsrs	r1, r2
 80007f8:	1a9a      	subs	r2, r3, r2
 80007fa:	4090      	lsls	r0, r2
 80007fc:	1e43      	subs	r3, r0, #1
 80007fe:	4198      	sbcs	r0, r3
 8000800:	4308      	orrs	r0, r1
 8000802:	e770      	b.n	80006e6 <__aeabi_fadd+0x1ca>
 8000804:	4642      	mov	r2, r8
 8000806:	2a00      	cmp	r2, #0
 8000808:	d100      	bne.n	800080c <__aeabi_fadd+0x2f0>
 800080a:	e74f      	b.n	80006ac <__aeabi_fadd+0x190>
 800080c:	2e00      	cmp	r6, #0
 800080e:	d100      	bne.n	8000812 <__aeabi_fadd+0x2f6>
 8000810:	e74d      	b.n	80006ae <__aeabi_fadd+0x192>
 8000812:	2280      	movs	r2, #128	; 0x80
 8000814:	03d2      	lsls	r2, r2, #15
 8000816:	4213      	tst	r3, r2
 8000818:	d100      	bne.n	800081c <__aeabi_fadd+0x300>
 800081a:	e748      	b.n	80006ae <__aeabi_fadd+0x192>
 800081c:	4210      	tst	r0, r2
 800081e:	d000      	beq.n	8000822 <__aeabi_fadd+0x306>
 8000820:	e745      	b.n	80006ae <__aeabi_fadd+0x192>
 8000822:	0003      	movs	r3, r0
 8000824:	e743      	b.n	80006ae <__aeabi_fadd+0x192>
 8000826:	2e00      	cmp	r6, #0
 8000828:	d090      	beq.n	800074c <__aeabi_fadd+0x230>
 800082a:	000c      	movs	r4, r1
 800082c:	4684      	mov	ip, r0
 800082e:	2200      	movs	r2, #0
 8000830:	e6b9      	b.n	80005a6 <__aeabi_fadd+0x8a>
 8000832:	4643      	mov	r3, r8
 8000834:	000c      	movs	r4, r1
 8000836:	1af0      	subs	r0, r6, r3
 8000838:	3501      	adds	r5, #1
 800083a:	e693      	b.n	8000564 <__aeabi_fadd+0x48>
 800083c:	4684      	mov	ip, r0
 800083e:	2200      	movs	r2, #0
 8000840:	e6b1      	b.n	80005a6 <__aeabi_fadd+0x8a>
 8000842:	2800      	cmp	r0, #0
 8000844:	d000      	beq.n	8000848 <__aeabi_fadd+0x32c>
 8000846:	e71d      	b.n	8000684 <__aeabi_fadd+0x168>
 8000848:	2300      	movs	r3, #0
 800084a:	2400      	movs	r4, #0
 800084c:	469c      	mov	ip, r3
 800084e:	e6aa      	b.n	80005a6 <__aeabi_fadd+0x8a>
 8000850:	fbffffff 	.word	0xfbffffff
 8000854:	7dffffff 	.word	0x7dffffff

08000858 <__aeabi_fdiv>:
 8000858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800085a:	464f      	mov	r7, r9
 800085c:	4646      	mov	r6, r8
 800085e:	46d6      	mov	lr, sl
 8000860:	0245      	lsls	r5, r0, #9
 8000862:	b5c0      	push	{r6, r7, lr}
 8000864:	0047      	lsls	r7, r0, #1
 8000866:	1c0c      	adds	r4, r1, #0
 8000868:	0a6d      	lsrs	r5, r5, #9
 800086a:	0e3f      	lsrs	r7, r7, #24
 800086c:	0fc6      	lsrs	r6, r0, #31
 800086e:	2f00      	cmp	r7, #0
 8000870:	d100      	bne.n	8000874 <__aeabi_fdiv+0x1c>
 8000872:	e070      	b.n	8000956 <__aeabi_fdiv+0xfe>
 8000874:	2fff      	cmp	r7, #255	; 0xff
 8000876:	d100      	bne.n	800087a <__aeabi_fdiv+0x22>
 8000878:	e075      	b.n	8000966 <__aeabi_fdiv+0x10e>
 800087a:	00eb      	lsls	r3, r5, #3
 800087c:	2580      	movs	r5, #128	; 0x80
 800087e:	04ed      	lsls	r5, r5, #19
 8000880:	431d      	orrs	r5, r3
 8000882:	2300      	movs	r3, #0
 8000884:	4699      	mov	r9, r3
 8000886:	469a      	mov	sl, r3
 8000888:	3f7f      	subs	r7, #127	; 0x7f
 800088a:	0260      	lsls	r0, r4, #9
 800088c:	0a43      	lsrs	r3, r0, #9
 800088e:	4698      	mov	r8, r3
 8000890:	0063      	lsls	r3, r4, #1
 8000892:	0e1b      	lsrs	r3, r3, #24
 8000894:	0fe4      	lsrs	r4, r4, #31
 8000896:	2b00      	cmp	r3, #0
 8000898:	d04e      	beq.n	8000938 <__aeabi_fdiv+0xe0>
 800089a:	2bff      	cmp	r3, #255	; 0xff
 800089c:	d046      	beq.n	800092c <__aeabi_fdiv+0xd4>
 800089e:	4642      	mov	r2, r8
 80008a0:	00d0      	lsls	r0, r2, #3
 80008a2:	2280      	movs	r2, #128	; 0x80
 80008a4:	04d2      	lsls	r2, r2, #19
 80008a6:	4302      	orrs	r2, r0
 80008a8:	4690      	mov	r8, r2
 80008aa:	2200      	movs	r2, #0
 80008ac:	3b7f      	subs	r3, #127	; 0x7f
 80008ae:	0031      	movs	r1, r6
 80008b0:	1aff      	subs	r7, r7, r3
 80008b2:	464b      	mov	r3, r9
 80008b4:	4061      	eors	r1, r4
 80008b6:	b2c9      	uxtb	r1, r1
 80008b8:	4313      	orrs	r3, r2
 80008ba:	2b0f      	cmp	r3, #15
 80008bc:	d900      	bls.n	80008c0 <__aeabi_fdiv+0x68>
 80008be:	e0b5      	b.n	8000a2c <__aeabi_fdiv+0x1d4>
 80008c0:	486e      	ldr	r0, [pc, #440]	; (8000a7c <__aeabi_fdiv+0x224>)
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	58c3      	ldr	r3, [r0, r3]
 80008c6:	469f      	mov	pc, r3
 80008c8:	2300      	movs	r3, #0
 80008ca:	4698      	mov	r8, r3
 80008cc:	0026      	movs	r6, r4
 80008ce:	4645      	mov	r5, r8
 80008d0:	4692      	mov	sl, r2
 80008d2:	4653      	mov	r3, sl
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	d100      	bne.n	80008da <__aeabi_fdiv+0x82>
 80008d8:	e089      	b.n	80009ee <__aeabi_fdiv+0x196>
 80008da:	2b03      	cmp	r3, #3
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fdiv+0x88>
 80008de:	e09e      	b.n	8000a1e <__aeabi_fdiv+0x1c6>
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d018      	beq.n	8000916 <__aeabi_fdiv+0xbe>
 80008e4:	003b      	movs	r3, r7
 80008e6:	337f      	adds	r3, #127	; 0x7f
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	dd69      	ble.n	80009c0 <__aeabi_fdiv+0x168>
 80008ec:	076a      	lsls	r2, r5, #29
 80008ee:	d004      	beq.n	80008fa <__aeabi_fdiv+0xa2>
 80008f0:	220f      	movs	r2, #15
 80008f2:	402a      	ands	r2, r5
 80008f4:	2a04      	cmp	r2, #4
 80008f6:	d000      	beq.n	80008fa <__aeabi_fdiv+0xa2>
 80008f8:	3504      	adds	r5, #4
 80008fa:	012a      	lsls	r2, r5, #4
 80008fc:	d503      	bpl.n	8000906 <__aeabi_fdiv+0xae>
 80008fe:	4b60      	ldr	r3, [pc, #384]	; (8000a80 <__aeabi_fdiv+0x228>)
 8000900:	401d      	ands	r5, r3
 8000902:	003b      	movs	r3, r7
 8000904:	3380      	adds	r3, #128	; 0x80
 8000906:	2bfe      	cmp	r3, #254	; 0xfe
 8000908:	dd00      	ble.n	800090c <__aeabi_fdiv+0xb4>
 800090a:	e070      	b.n	80009ee <__aeabi_fdiv+0x196>
 800090c:	01ad      	lsls	r5, r5, #6
 800090e:	0a6d      	lsrs	r5, r5, #9
 8000910:	b2d8      	uxtb	r0, r3
 8000912:	e002      	b.n	800091a <__aeabi_fdiv+0xc2>
 8000914:	000e      	movs	r6, r1
 8000916:	2000      	movs	r0, #0
 8000918:	2500      	movs	r5, #0
 800091a:	05c0      	lsls	r0, r0, #23
 800091c:	4328      	orrs	r0, r5
 800091e:	07f6      	lsls	r6, r6, #31
 8000920:	4330      	orrs	r0, r6
 8000922:	bce0      	pop	{r5, r6, r7}
 8000924:	46ba      	mov	sl, r7
 8000926:	46b1      	mov	r9, r6
 8000928:	46a8      	mov	r8, r5
 800092a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800092c:	4643      	mov	r3, r8
 800092e:	2b00      	cmp	r3, #0
 8000930:	d13f      	bne.n	80009b2 <__aeabi_fdiv+0x15a>
 8000932:	2202      	movs	r2, #2
 8000934:	3fff      	subs	r7, #255	; 0xff
 8000936:	e003      	b.n	8000940 <__aeabi_fdiv+0xe8>
 8000938:	4643      	mov	r3, r8
 800093a:	2b00      	cmp	r3, #0
 800093c:	d12d      	bne.n	800099a <__aeabi_fdiv+0x142>
 800093e:	2201      	movs	r2, #1
 8000940:	0031      	movs	r1, r6
 8000942:	464b      	mov	r3, r9
 8000944:	4061      	eors	r1, r4
 8000946:	b2c9      	uxtb	r1, r1
 8000948:	4313      	orrs	r3, r2
 800094a:	2b0f      	cmp	r3, #15
 800094c:	d834      	bhi.n	80009b8 <__aeabi_fdiv+0x160>
 800094e:	484d      	ldr	r0, [pc, #308]	; (8000a84 <__aeabi_fdiv+0x22c>)
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	58c3      	ldr	r3, [r0, r3]
 8000954:	469f      	mov	pc, r3
 8000956:	2d00      	cmp	r5, #0
 8000958:	d113      	bne.n	8000982 <__aeabi_fdiv+0x12a>
 800095a:	2304      	movs	r3, #4
 800095c:	4699      	mov	r9, r3
 800095e:	3b03      	subs	r3, #3
 8000960:	2700      	movs	r7, #0
 8000962:	469a      	mov	sl, r3
 8000964:	e791      	b.n	800088a <__aeabi_fdiv+0x32>
 8000966:	2d00      	cmp	r5, #0
 8000968:	d105      	bne.n	8000976 <__aeabi_fdiv+0x11e>
 800096a:	2308      	movs	r3, #8
 800096c:	4699      	mov	r9, r3
 800096e:	3b06      	subs	r3, #6
 8000970:	27ff      	movs	r7, #255	; 0xff
 8000972:	469a      	mov	sl, r3
 8000974:	e789      	b.n	800088a <__aeabi_fdiv+0x32>
 8000976:	230c      	movs	r3, #12
 8000978:	4699      	mov	r9, r3
 800097a:	3b09      	subs	r3, #9
 800097c:	27ff      	movs	r7, #255	; 0xff
 800097e:	469a      	mov	sl, r3
 8000980:	e783      	b.n	800088a <__aeabi_fdiv+0x32>
 8000982:	0028      	movs	r0, r5
 8000984:	f002 fb60 	bl	8003048 <__clzsi2>
 8000988:	2776      	movs	r7, #118	; 0x76
 800098a:	1f43      	subs	r3, r0, #5
 800098c:	409d      	lsls	r5, r3
 800098e:	2300      	movs	r3, #0
 8000990:	427f      	negs	r7, r7
 8000992:	4699      	mov	r9, r3
 8000994:	469a      	mov	sl, r3
 8000996:	1a3f      	subs	r7, r7, r0
 8000998:	e777      	b.n	800088a <__aeabi_fdiv+0x32>
 800099a:	4640      	mov	r0, r8
 800099c:	f002 fb54 	bl	8003048 <__clzsi2>
 80009a0:	4642      	mov	r2, r8
 80009a2:	1f43      	subs	r3, r0, #5
 80009a4:	409a      	lsls	r2, r3
 80009a6:	2376      	movs	r3, #118	; 0x76
 80009a8:	425b      	negs	r3, r3
 80009aa:	4690      	mov	r8, r2
 80009ac:	1a1b      	subs	r3, r3, r0
 80009ae:	2200      	movs	r2, #0
 80009b0:	e77d      	b.n	80008ae <__aeabi_fdiv+0x56>
 80009b2:	23ff      	movs	r3, #255	; 0xff
 80009b4:	2203      	movs	r2, #3
 80009b6:	e77a      	b.n	80008ae <__aeabi_fdiv+0x56>
 80009b8:	000e      	movs	r6, r1
 80009ba:	20ff      	movs	r0, #255	; 0xff
 80009bc:	2500      	movs	r5, #0
 80009be:	e7ac      	b.n	800091a <__aeabi_fdiv+0xc2>
 80009c0:	2001      	movs	r0, #1
 80009c2:	1ac0      	subs	r0, r0, r3
 80009c4:	281b      	cmp	r0, #27
 80009c6:	dca6      	bgt.n	8000916 <__aeabi_fdiv+0xbe>
 80009c8:	379e      	adds	r7, #158	; 0x9e
 80009ca:	002a      	movs	r2, r5
 80009cc:	40bd      	lsls	r5, r7
 80009ce:	40c2      	lsrs	r2, r0
 80009d0:	1e6b      	subs	r3, r5, #1
 80009d2:	419d      	sbcs	r5, r3
 80009d4:	4315      	orrs	r5, r2
 80009d6:	076b      	lsls	r3, r5, #29
 80009d8:	d004      	beq.n	80009e4 <__aeabi_fdiv+0x18c>
 80009da:	230f      	movs	r3, #15
 80009dc:	402b      	ands	r3, r5
 80009de:	2b04      	cmp	r3, #4
 80009e0:	d000      	beq.n	80009e4 <__aeabi_fdiv+0x18c>
 80009e2:	3504      	adds	r5, #4
 80009e4:	016b      	lsls	r3, r5, #5
 80009e6:	d544      	bpl.n	8000a72 <__aeabi_fdiv+0x21a>
 80009e8:	2001      	movs	r0, #1
 80009ea:	2500      	movs	r5, #0
 80009ec:	e795      	b.n	800091a <__aeabi_fdiv+0xc2>
 80009ee:	20ff      	movs	r0, #255	; 0xff
 80009f0:	2500      	movs	r5, #0
 80009f2:	e792      	b.n	800091a <__aeabi_fdiv+0xc2>
 80009f4:	2580      	movs	r5, #128	; 0x80
 80009f6:	2600      	movs	r6, #0
 80009f8:	20ff      	movs	r0, #255	; 0xff
 80009fa:	03ed      	lsls	r5, r5, #15
 80009fc:	e78d      	b.n	800091a <__aeabi_fdiv+0xc2>
 80009fe:	2300      	movs	r3, #0
 8000a00:	4698      	mov	r8, r3
 8000a02:	2080      	movs	r0, #128	; 0x80
 8000a04:	03c0      	lsls	r0, r0, #15
 8000a06:	4205      	tst	r5, r0
 8000a08:	d009      	beq.n	8000a1e <__aeabi_fdiv+0x1c6>
 8000a0a:	4643      	mov	r3, r8
 8000a0c:	4203      	tst	r3, r0
 8000a0e:	d106      	bne.n	8000a1e <__aeabi_fdiv+0x1c6>
 8000a10:	4645      	mov	r5, r8
 8000a12:	4305      	orrs	r5, r0
 8000a14:	026d      	lsls	r5, r5, #9
 8000a16:	0026      	movs	r6, r4
 8000a18:	20ff      	movs	r0, #255	; 0xff
 8000a1a:	0a6d      	lsrs	r5, r5, #9
 8000a1c:	e77d      	b.n	800091a <__aeabi_fdiv+0xc2>
 8000a1e:	2080      	movs	r0, #128	; 0x80
 8000a20:	03c0      	lsls	r0, r0, #15
 8000a22:	4305      	orrs	r5, r0
 8000a24:	026d      	lsls	r5, r5, #9
 8000a26:	20ff      	movs	r0, #255	; 0xff
 8000a28:	0a6d      	lsrs	r5, r5, #9
 8000a2a:	e776      	b.n	800091a <__aeabi_fdiv+0xc2>
 8000a2c:	4642      	mov	r2, r8
 8000a2e:	016b      	lsls	r3, r5, #5
 8000a30:	0150      	lsls	r0, r2, #5
 8000a32:	4283      	cmp	r3, r0
 8000a34:	d219      	bcs.n	8000a6a <__aeabi_fdiv+0x212>
 8000a36:	221b      	movs	r2, #27
 8000a38:	2500      	movs	r5, #0
 8000a3a:	3f01      	subs	r7, #1
 8000a3c:	2601      	movs	r6, #1
 8000a3e:	001c      	movs	r4, r3
 8000a40:	006d      	lsls	r5, r5, #1
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	2c00      	cmp	r4, #0
 8000a46:	db01      	blt.n	8000a4c <__aeabi_fdiv+0x1f4>
 8000a48:	4298      	cmp	r0, r3
 8000a4a:	d801      	bhi.n	8000a50 <__aeabi_fdiv+0x1f8>
 8000a4c:	1a1b      	subs	r3, r3, r0
 8000a4e:	4335      	orrs	r5, r6
 8000a50:	3a01      	subs	r2, #1
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	d1f3      	bne.n	8000a3e <__aeabi_fdiv+0x1e6>
 8000a56:	1e5a      	subs	r2, r3, #1
 8000a58:	4193      	sbcs	r3, r2
 8000a5a:	431d      	orrs	r5, r3
 8000a5c:	003b      	movs	r3, r7
 8000a5e:	337f      	adds	r3, #127	; 0x7f
 8000a60:	000e      	movs	r6, r1
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	dd00      	ble.n	8000a68 <__aeabi_fdiv+0x210>
 8000a66:	e741      	b.n	80008ec <__aeabi_fdiv+0x94>
 8000a68:	e7aa      	b.n	80009c0 <__aeabi_fdiv+0x168>
 8000a6a:	221a      	movs	r2, #26
 8000a6c:	2501      	movs	r5, #1
 8000a6e:	1a1b      	subs	r3, r3, r0
 8000a70:	e7e4      	b.n	8000a3c <__aeabi_fdiv+0x1e4>
 8000a72:	01ad      	lsls	r5, r5, #6
 8000a74:	2000      	movs	r0, #0
 8000a76:	0a6d      	lsrs	r5, r5, #9
 8000a78:	e74f      	b.n	800091a <__aeabi_fdiv+0xc2>
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	0800f330 	.word	0x0800f330
 8000a80:	f7ffffff 	.word	0xf7ffffff
 8000a84:	0800f370 	.word	0x0800f370

08000a88 <__eqsf2>:
 8000a88:	b570      	push	{r4, r5, r6, lr}
 8000a8a:	0042      	lsls	r2, r0, #1
 8000a8c:	0245      	lsls	r5, r0, #9
 8000a8e:	024e      	lsls	r6, r1, #9
 8000a90:	004c      	lsls	r4, r1, #1
 8000a92:	0fc3      	lsrs	r3, r0, #31
 8000a94:	0a6d      	lsrs	r5, r5, #9
 8000a96:	2001      	movs	r0, #1
 8000a98:	0e12      	lsrs	r2, r2, #24
 8000a9a:	0a76      	lsrs	r6, r6, #9
 8000a9c:	0e24      	lsrs	r4, r4, #24
 8000a9e:	0fc9      	lsrs	r1, r1, #31
 8000aa0:	2aff      	cmp	r2, #255	; 0xff
 8000aa2:	d006      	beq.n	8000ab2 <__eqsf2+0x2a>
 8000aa4:	2cff      	cmp	r4, #255	; 0xff
 8000aa6:	d003      	beq.n	8000ab0 <__eqsf2+0x28>
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d101      	bne.n	8000ab0 <__eqsf2+0x28>
 8000aac:	42b5      	cmp	r5, r6
 8000aae:	d006      	beq.n	8000abe <__eqsf2+0x36>
 8000ab0:	bd70      	pop	{r4, r5, r6, pc}
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d1fc      	bne.n	8000ab0 <__eqsf2+0x28>
 8000ab6:	2cff      	cmp	r4, #255	; 0xff
 8000ab8:	d1fa      	bne.n	8000ab0 <__eqsf2+0x28>
 8000aba:	2e00      	cmp	r6, #0
 8000abc:	d1f8      	bne.n	8000ab0 <__eqsf2+0x28>
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d006      	beq.n	8000ad0 <__eqsf2+0x48>
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	d1f3      	bne.n	8000ab0 <__eqsf2+0x28>
 8000ac8:	0028      	movs	r0, r5
 8000aca:	1e43      	subs	r3, r0, #1
 8000acc:	4198      	sbcs	r0, r3
 8000ace:	e7ef      	b.n	8000ab0 <__eqsf2+0x28>
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	e7ed      	b.n	8000ab0 <__eqsf2+0x28>

08000ad4 <__gesf2>:
 8000ad4:	b570      	push	{r4, r5, r6, lr}
 8000ad6:	0042      	lsls	r2, r0, #1
 8000ad8:	0245      	lsls	r5, r0, #9
 8000ada:	024e      	lsls	r6, r1, #9
 8000adc:	004c      	lsls	r4, r1, #1
 8000ade:	0fc3      	lsrs	r3, r0, #31
 8000ae0:	0a6d      	lsrs	r5, r5, #9
 8000ae2:	0e12      	lsrs	r2, r2, #24
 8000ae4:	0a76      	lsrs	r6, r6, #9
 8000ae6:	0e24      	lsrs	r4, r4, #24
 8000ae8:	0fc8      	lsrs	r0, r1, #31
 8000aea:	2aff      	cmp	r2, #255	; 0xff
 8000aec:	d01b      	beq.n	8000b26 <__gesf2+0x52>
 8000aee:	2cff      	cmp	r4, #255	; 0xff
 8000af0:	d00e      	beq.n	8000b10 <__gesf2+0x3c>
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	d11b      	bne.n	8000b2e <__gesf2+0x5a>
 8000af6:	2c00      	cmp	r4, #0
 8000af8:	d101      	bne.n	8000afe <__gesf2+0x2a>
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	d01c      	beq.n	8000b38 <__gesf2+0x64>
 8000afe:	2d00      	cmp	r5, #0
 8000b00:	d00c      	beq.n	8000b1c <__gesf2+0x48>
 8000b02:	4283      	cmp	r3, r0
 8000b04:	d01c      	beq.n	8000b40 <__gesf2+0x6c>
 8000b06:	2102      	movs	r1, #2
 8000b08:	1e58      	subs	r0, r3, #1
 8000b0a:	4008      	ands	r0, r1
 8000b0c:	3801      	subs	r0, #1
 8000b0e:	bd70      	pop	{r4, r5, r6, pc}
 8000b10:	2e00      	cmp	r6, #0
 8000b12:	d122      	bne.n	8000b5a <__gesf2+0x86>
 8000b14:	2a00      	cmp	r2, #0
 8000b16:	d1f4      	bne.n	8000b02 <__gesf2+0x2e>
 8000b18:	2d00      	cmp	r5, #0
 8000b1a:	d1f2      	bne.n	8000b02 <__gesf2+0x2e>
 8000b1c:	2800      	cmp	r0, #0
 8000b1e:	d1f6      	bne.n	8000b0e <__gesf2+0x3a>
 8000b20:	2001      	movs	r0, #1
 8000b22:	4240      	negs	r0, r0
 8000b24:	e7f3      	b.n	8000b0e <__gesf2+0x3a>
 8000b26:	2d00      	cmp	r5, #0
 8000b28:	d117      	bne.n	8000b5a <__gesf2+0x86>
 8000b2a:	2cff      	cmp	r4, #255	; 0xff
 8000b2c:	d0f0      	beq.n	8000b10 <__gesf2+0x3c>
 8000b2e:	2c00      	cmp	r4, #0
 8000b30:	d1e7      	bne.n	8000b02 <__gesf2+0x2e>
 8000b32:	2e00      	cmp	r6, #0
 8000b34:	d1e5      	bne.n	8000b02 <__gesf2+0x2e>
 8000b36:	e7e6      	b.n	8000b06 <__gesf2+0x32>
 8000b38:	2000      	movs	r0, #0
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	d0e7      	beq.n	8000b0e <__gesf2+0x3a>
 8000b3e:	e7e2      	b.n	8000b06 <__gesf2+0x32>
 8000b40:	42a2      	cmp	r2, r4
 8000b42:	dc05      	bgt.n	8000b50 <__gesf2+0x7c>
 8000b44:	dbea      	blt.n	8000b1c <__gesf2+0x48>
 8000b46:	42b5      	cmp	r5, r6
 8000b48:	d802      	bhi.n	8000b50 <__gesf2+0x7c>
 8000b4a:	d3e7      	bcc.n	8000b1c <__gesf2+0x48>
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	e7de      	b.n	8000b0e <__gesf2+0x3a>
 8000b50:	4243      	negs	r3, r0
 8000b52:	4158      	adcs	r0, r3
 8000b54:	0040      	lsls	r0, r0, #1
 8000b56:	3801      	subs	r0, #1
 8000b58:	e7d9      	b.n	8000b0e <__gesf2+0x3a>
 8000b5a:	2002      	movs	r0, #2
 8000b5c:	4240      	negs	r0, r0
 8000b5e:	e7d6      	b.n	8000b0e <__gesf2+0x3a>

08000b60 <__lesf2>:
 8000b60:	b570      	push	{r4, r5, r6, lr}
 8000b62:	0042      	lsls	r2, r0, #1
 8000b64:	0245      	lsls	r5, r0, #9
 8000b66:	024e      	lsls	r6, r1, #9
 8000b68:	004c      	lsls	r4, r1, #1
 8000b6a:	0fc3      	lsrs	r3, r0, #31
 8000b6c:	0a6d      	lsrs	r5, r5, #9
 8000b6e:	0e12      	lsrs	r2, r2, #24
 8000b70:	0a76      	lsrs	r6, r6, #9
 8000b72:	0e24      	lsrs	r4, r4, #24
 8000b74:	0fc8      	lsrs	r0, r1, #31
 8000b76:	2aff      	cmp	r2, #255	; 0xff
 8000b78:	d00b      	beq.n	8000b92 <__lesf2+0x32>
 8000b7a:	2cff      	cmp	r4, #255	; 0xff
 8000b7c:	d00d      	beq.n	8000b9a <__lesf2+0x3a>
 8000b7e:	2a00      	cmp	r2, #0
 8000b80:	d11f      	bne.n	8000bc2 <__lesf2+0x62>
 8000b82:	2c00      	cmp	r4, #0
 8000b84:	d116      	bne.n	8000bb4 <__lesf2+0x54>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	d114      	bne.n	8000bb4 <__lesf2+0x54>
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	2d00      	cmp	r5, #0
 8000b8e:	d010      	beq.n	8000bb2 <__lesf2+0x52>
 8000b90:	e009      	b.n	8000ba6 <__lesf2+0x46>
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	d10c      	bne.n	8000bb0 <__lesf2+0x50>
 8000b96:	2cff      	cmp	r4, #255	; 0xff
 8000b98:	d113      	bne.n	8000bc2 <__lesf2+0x62>
 8000b9a:	2e00      	cmp	r6, #0
 8000b9c:	d108      	bne.n	8000bb0 <__lesf2+0x50>
 8000b9e:	2a00      	cmp	r2, #0
 8000ba0:	d008      	beq.n	8000bb4 <__lesf2+0x54>
 8000ba2:	4283      	cmp	r3, r0
 8000ba4:	d012      	beq.n	8000bcc <__lesf2+0x6c>
 8000ba6:	2102      	movs	r1, #2
 8000ba8:	1e58      	subs	r0, r3, #1
 8000baa:	4008      	ands	r0, r1
 8000bac:	3801      	subs	r0, #1
 8000bae:	e000      	b.n	8000bb2 <__lesf2+0x52>
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	bd70      	pop	{r4, r5, r6, pc}
 8000bb4:	2d00      	cmp	r5, #0
 8000bb6:	d1f4      	bne.n	8000ba2 <__lesf2+0x42>
 8000bb8:	2800      	cmp	r0, #0
 8000bba:	d1fa      	bne.n	8000bb2 <__lesf2+0x52>
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	4240      	negs	r0, r0
 8000bc0:	e7f7      	b.n	8000bb2 <__lesf2+0x52>
 8000bc2:	2c00      	cmp	r4, #0
 8000bc4:	d1ed      	bne.n	8000ba2 <__lesf2+0x42>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d1eb      	bne.n	8000ba2 <__lesf2+0x42>
 8000bca:	e7ec      	b.n	8000ba6 <__lesf2+0x46>
 8000bcc:	42a2      	cmp	r2, r4
 8000bce:	dc05      	bgt.n	8000bdc <__lesf2+0x7c>
 8000bd0:	dbf2      	blt.n	8000bb8 <__lesf2+0x58>
 8000bd2:	42b5      	cmp	r5, r6
 8000bd4:	d802      	bhi.n	8000bdc <__lesf2+0x7c>
 8000bd6:	d3ef      	bcc.n	8000bb8 <__lesf2+0x58>
 8000bd8:	2000      	movs	r0, #0
 8000bda:	e7ea      	b.n	8000bb2 <__lesf2+0x52>
 8000bdc:	4243      	negs	r3, r0
 8000bde:	4158      	adcs	r0, r3
 8000be0:	0040      	lsls	r0, r0, #1
 8000be2:	3801      	subs	r0, #1
 8000be4:	e7e5      	b.n	8000bb2 <__lesf2+0x52>
 8000be6:	46c0      	nop			; (mov r8, r8)

08000be8 <__aeabi_fmul>:
 8000be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bea:	464f      	mov	r7, r9
 8000bec:	4646      	mov	r6, r8
 8000bee:	46d6      	mov	lr, sl
 8000bf0:	0244      	lsls	r4, r0, #9
 8000bf2:	0045      	lsls	r5, r0, #1
 8000bf4:	b5c0      	push	{r6, r7, lr}
 8000bf6:	0a64      	lsrs	r4, r4, #9
 8000bf8:	1c0f      	adds	r7, r1, #0
 8000bfa:	0e2d      	lsrs	r5, r5, #24
 8000bfc:	0fc6      	lsrs	r6, r0, #31
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	d100      	bne.n	8000c04 <__aeabi_fmul+0x1c>
 8000c02:	e08d      	b.n	8000d20 <__aeabi_fmul+0x138>
 8000c04:	2dff      	cmp	r5, #255	; 0xff
 8000c06:	d100      	bne.n	8000c0a <__aeabi_fmul+0x22>
 8000c08:	e092      	b.n	8000d30 <__aeabi_fmul+0x148>
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	2080      	movs	r0, #128	; 0x80
 8000c0e:	4699      	mov	r9, r3
 8000c10:	469a      	mov	sl, r3
 8000c12:	00e4      	lsls	r4, r4, #3
 8000c14:	04c0      	lsls	r0, r0, #19
 8000c16:	4304      	orrs	r4, r0
 8000c18:	3d7f      	subs	r5, #127	; 0x7f
 8000c1a:	0278      	lsls	r0, r7, #9
 8000c1c:	0a43      	lsrs	r3, r0, #9
 8000c1e:	4698      	mov	r8, r3
 8000c20:	007b      	lsls	r3, r7, #1
 8000c22:	0e1b      	lsrs	r3, r3, #24
 8000c24:	0fff      	lsrs	r7, r7, #31
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d100      	bne.n	8000c2c <__aeabi_fmul+0x44>
 8000c2a:	e070      	b.n	8000d0e <__aeabi_fmul+0x126>
 8000c2c:	2bff      	cmp	r3, #255	; 0xff
 8000c2e:	d100      	bne.n	8000c32 <__aeabi_fmul+0x4a>
 8000c30:	e086      	b.n	8000d40 <__aeabi_fmul+0x158>
 8000c32:	4642      	mov	r2, r8
 8000c34:	00d0      	lsls	r0, r2, #3
 8000c36:	2280      	movs	r2, #128	; 0x80
 8000c38:	3b7f      	subs	r3, #127	; 0x7f
 8000c3a:	18ed      	adds	r5, r5, r3
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	04d2      	lsls	r2, r2, #19
 8000c40:	4302      	orrs	r2, r0
 8000c42:	4690      	mov	r8, r2
 8000c44:	469c      	mov	ip, r3
 8000c46:	0031      	movs	r1, r6
 8000c48:	464b      	mov	r3, r9
 8000c4a:	4079      	eors	r1, r7
 8000c4c:	1c68      	adds	r0, r5, #1
 8000c4e:	2b0f      	cmp	r3, #15
 8000c50:	d81c      	bhi.n	8000c8c <__aeabi_fmul+0xa4>
 8000c52:	4a76      	ldr	r2, [pc, #472]	; (8000e2c <__aeabi_fmul+0x244>)
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	58d3      	ldr	r3, [r2, r3]
 8000c58:	469f      	mov	pc, r3
 8000c5a:	0039      	movs	r1, r7
 8000c5c:	4644      	mov	r4, r8
 8000c5e:	46e2      	mov	sl, ip
 8000c60:	4653      	mov	r3, sl
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d00f      	beq.n	8000c86 <__aeabi_fmul+0x9e>
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d100      	bne.n	8000c6c <__aeabi_fmul+0x84>
 8000c6a:	e0d7      	b.n	8000e1c <__aeabi_fmul+0x234>
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d137      	bne.n	8000ce0 <__aeabi_fmul+0xf8>
 8000c70:	2000      	movs	r0, #0
 8000c72:	2400      	movs	r4, #0
 8000c74:	05c0      	lsls	r0, r0, #23
 8000c76:	4320      	orrs	r0, r4
 8000c78:	07c9      	lsls	r1, r1, #31
 8000c7a:	4308      	orrs	r0, r1
 8000c7c:	bce0      	pop	{r5, r6, r7}
 8000c7e:	46ba      	mov	sl, r7
 8000c80:	46b1      	mov	r9, r6
 8000c82:	46a8      	mov	r8, r5
 8000c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c86:	20ff      	movs	r0, #255	; 0xff
 8000c88:	2400      	movs	r4, #0
 8000c8a:	e7f3      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000c8c:	0c26      	lsrs	r6, r4, #16
 8000c8e:	0424      	lsls	r4, r4, #16
 8000c90:	0c22      	lsrs	r2, r4, #16
 8000c92:	4644      	mov	r4, r8
 8000c94:	0424      	lsls	r4, r4, #16
 8000c96:	0c24      	lsrs	r4, r4, #16
 8000c98:	4643      	mov	r3, r8
 8000c9a:	0027      	movs	r7, r4
 8000c9c:	0c1b      	lsrs	r3, r3, #16
 8000c9e:	4357      	muls	r7, r2
 8000ca0:	4374      	muls	r4, r6
 8000ca2:	435a      	muls	r2, r3
 8000ca4:	435e      	muls	r6, r3
 8000ca6:	1912      	adds	r2, r2, r4
 8000ca8:	0c3b      	lsrs	r3, r7, #16
 8000caa:	189b      	adds	r3, r3, r2
 8000cac:	429c      	cmp	r4, r3
 8000cae:	d903      	bls.n	8000cb8 <__aeabi_fmul+0xd0>
 8000cb0:	2280      	movs	r2, #128	; 0x80
 8000cb2:	0252      	lsls	r2, r2, #9
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	4466      	add	r6, ip
 8000cb8:	043f      	lsls	r7, r7, #16
 8000cba:	041a      	lsls	r2, r3, #16
 8000cbc:	0c3f      	lsrs	r7, r7, #16
 8000cbe:	19d2      	adds	r2, r2, r7
 8000cc0:	0194      	lsls	r4, r2, #6
 8000cc2:	1e67      	subs	r7, r4, #1
 8000cc4:	41bc      	sbcs	r4, r7
 8000cc6:	0c1b      	lsrs	r3, r3, #16
 8000cc8:	0e92      	lsrs	r2, r2, #26
 8000cca:	199b      	adds	r3, r3, r6
 8000ccc:	4314      	orrs	r4, r2
 8000cce:	019b      	lsls	r3, r3, #6
 8000cd0:	431c      	orrs	r4, r3
 8000cd2:	011b      	lsls	r3, r3, #4
 8000cd4:	d400      	bmi.n	8000cd8 <__aeabi_fmul+0xf0>
 8000cd6:	e09b      	b.n	8000e10 <__aeabi_fmul+0x228>
 8000cd8:	2301      	movs	r3, #1
 8000cda:	0862      	lsrs	r2, r4, #1
 8000cdc:	401c      	ands	r4, r3
 8000cde:	4314      	orrs	r4, r2
 8000ce0:	0002      	movs	r2, r0
 8000ce2:	327f      	adds	r2, #127	; 0x7f
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	dd64      	ble.n	8000db2 <__aeabi_fmul+0x1ca>
 8000ce8:	0763      	lsls	r3, r4, #29
 8000cea:	d004      	beq.n	8000cf6 <__aeabi_fmul+0x10e>
 8000cec:	230f      	movs	r3, #15
 8000cee:	4023      	ands	r3, r4
 8000cf0:	2b04      	cmp	r3, #4
 8000cf2:	d000      	beq.n	8000cf6 <__aeabi_fmul+0x10e>
 8000cf4:	3404      	adds	r4, #4
 8000cf6:	0123      	lsls	r3, r4, #4
 8000cf8:	d503      	bpl.n	8000d02 <__aeabi_fmul+0x11a>
 8000cfa:	0002      	movs	r2, r0
 8000cfc:	4b4c      	ldr	r3, [pc, #304]	; (8000e30 <__aeabi_fmul+0x248>)
 8000cfe:	3280      	adds	r2, #128	; 0x80
 8000d00:	401c      	ands	r4, r3
 8000d02:	2afe      	cmp	r2, #254	; 0xfe
 8000d04:	dcbf      	bgt.n	8000c86 <__aeabi_fmul+0x9e>
 8000d06:	01a4      	lsls	r4, r4, #6
 8000d08:	0a64      	lsrs	r4, r4, #9
 8000d0a:	b2d0      	uxtb	r0, r2
 8000d0c:	e7b2      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000d0e:	4643      	mov	r3, r8
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d13d      	bne.n	8000d90 <__aeabi_fmul+0x1a8>
 8000d14:	464a      	mov	r2, r9
 8000d16:	3301      	adds	r3, #1
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	4691      	mov	r9, r2
 8000d1c:	469c      	mov	ip, r3
 8000d1e:	e792      	b.n	8000c46 <__aeabi_fmul+0x5e>
 8000d20:	2c00      	cmp	r4, #0
 8000d22:	d129      	bne.n	8000d78 <__aeabi_fmul+0x190>
 8000d24:	2304      	movs	r3, #4
 8000d26:	4699      	mov	r9, r3
 8000d28:	3b03      	subs	r3, #3
 8000d2a:	2500      	movs	r5, #0
 8000d2c:	469a      	mov	sl, r3
 8000d2e:	e774      	b.n	8000c1a <__aeabi_fmul+0x32>
 8000d30:	2c00      	cmp	r4, #0
 8000d32:	d11b      	bne.n	8000d6c <__aeabi_fmul+0x184>
 8000d34:	2308      	movs	r3, #8
 8000d36:	4699      	mov	r9, r3
 8000d38:	3b06      	subs	r3, #6
 8000d3a:	25ff      	movs	r5, #255	; 0xff
 8000d3c:	469a      	mov	sl, r3
 8000d3e:	e76c      	b.n	8000c1a <__aeabi_fmul+0x32>
 8000d40:	4643      	mov	r3, r8
 8000d42:	35ff      	adds	r5, #255	; 0xff
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d10b      	bne.n	8000d60 <__aeabi_fmul+0x178>
 8000d48:	2302      	movs	r3, #2
 8000d4a:	464a      	mov	r2, r9
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	4691      	mov	r9, r2
 8000d50:	469c      	mov	ip, r3
 8000d52:	e778      	b.n	8000c46 <__aeabi_fmul+0x5e>
 8000d54:	4653      	mov	r3, sl
 8000d56:	0031      	movs	r1, r6
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d000      	beq.n	8000d5e <__aeabi_fmul+0x176>
 8000d5c:	e783      	b.n	8000c66 <__aeabi_fmul+0x7e>
 8000d5e:	e792      	b.n	8000c86 <__aeabi_fmul+0x9e>
 8000d60:	2303      	movs	r3, #3
 8000d62:	464a      	mov	r2, r9
 8000d64:	431a      	orrs	r2, r3
 8000d66:	4691      	mov	r9, r2
 8000d68:	469c      	mov	ip, r3
 8000d6a:	e76c      	b.n	8000c46 <__aeabi_fmul+0x5e>
 8000d6c:	230c      	movs	r3, #12
 8000d6e:	4699      	mov	r9, r3
 8000d70:	3b09      	subs	r3, #9
 8000d72:	25ff      	movs	r5, #255	; 0xff
 8000d74:	469a      	mov	sl, r3
 8000d76:	e750      	b.n	8000c1a <__aeabi_fmul+0x32>
 8000d78:	0020      	movs	r0, r4
 8000d7a:	f002 f965 	bl	8003048 <__clzsi2>
 8000d7e:	2576      	movs	r5, #118	; 0x76
 8000d80:	1f43      	subs	r3, r0, #5
 8000d82:	409c      	lsls	r4, r3
 8000d84:	2300      	movs	r3, #0
 8000d86:	426d      	negs	r5, r5
 8000d88:	4699      	mov	r9, r3
 8000d8a:	469a      	mov	sl, r3
 8000d8c:	1a2d      	subs	r5, r5, r0
 8000d8e:	e744      	b.n	8000c1a <__aeabi_fmul+0x32>
 8000d90:	4640      	mov	r0, r8
 8000d92:	f002 f959 	bl	8003048 <__clzsi2>
 8000d96:	4642      	mov	r2, r8
 8000d98:	1f43      	subs	r3, r0, #5
 8000d9a:	409a      	lsls	r2, r3
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	1a2d      	subs	r5, r5, r0
 8000da0:	4690      	mov	r8, r2
 8000da2:	469c      	mov	ip, r3
 8000da4:	3d76      	subs	r5, #118	; 0x76
 8000da6:	e74e      	b.n	8000c46 <__aeabi_fmul+0x5e>
 8000da8:	2480      	movs	r4, #128	; 0x80
 8000daa:	2100      	movs	r1, #0
 8000dac:	20ff      	movs	r0, #255	; 0xff
 8000dae:	03e4      	lsls	r4, r4, #15
 8000db0:	e760      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000db2:	2301      	movs	r3, #1
 8000db4:	1a9b      	subs	r3, r3, r2
 8000db6:	2b1b      	cmp	r3, #27
 8000db8:	dd00      	ble.n	8000dbc <__aeabi_fmul+0x1d4>
 8000dba:	e759      	b.n	8000c70 <__aeabi_fmul+0x88>
 8000dbc:	0022      	movs	r2, r4
 8000dbe:	309e      	adds	r0, #158	; 0x9e
 8000dc0:	40da      	lsrs	r2, r3
 8000dc2:	4084      	lsls	r4, r0
 8000dc4:	0013      	movs	r3, r2
 8000dc6:	1e62      	subs	r2, r4, #1
 8000dc8:	4194      	sbcs	r4, r2
 8000dca:	431c      	orrs	r4, r3
 8000dcc:	0763      	lsls	r3, r4, #29
 8000dce:	d004      	beq.n	8000dda <__aeabi_fmul+0x1f2>
 8000dd0:	230f      	movs	r3, #15
 8000dd2:	4023      	ands	r3, r4
 8000dd4:	2b04      	cmp	r3, #4
 8000dd6:	d000      	beq.n	8000dda <__aeabi_fmul+0x1f2>
 8000dd8:	3404      	adds	r4, #4
 8000dda:	0163      	lsls	r3, r4, #5
 8000ddc:	d51a      	bpl.n	8000e14 <__aeabi_fmul+0x22c>
 8000dde:	2001      	movs	r0, #1
 8000de0:	2400      	movs	r4, #0
 8000de2:	e747      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000de4:	2080      	movs	r0, #128	; 0x80
 8000de6:	03c0      	lsls	r0, r0, #15
 8000de8:	4204      	tst	r4, r0
 8000dea:	d009      	beq.n	8000e00 <__aeabi_fmul+0x218>
 8000dec:	4643      	mov	r3, r8
 8000dee:	4203      	tst	r3, r0
 8000df0:	d106      	bne.n	8000e00 <__aeabi_fmul+0x218>
 8000df2:	4644      	mov	r4, r8
 8000df4:	4304      	orrs	r4, r0
 8000df6:	0264      	lsls	r4, r4, #9
 8000df8:	0039      	movs	r1, r7
 8000dfa:	20ff      	movs	r0, #255	; 0xff
 8000dfc:	0a64      	lsrs	r4, r4, #9
 8000dfe:	e739      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000e00:	2080      	movs	r0, #128	; 0x80
 8000e02:	03c0      	lsls	r0, r0, #15
 8000e04:	4304      	orrs	r4, r0
 8000e06:	0264      	lsls	r4, r4, #9
 8000e08:	0031      	movs	r1, r6
 8000e0a:	20ff      	movs	r0, #255	; 0xff
 8000e0c:	0a64      	lsrs	r4, r4, #9
 8000e0e:	e731      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000e10:	0028      	movs	r0, r5
 8000e12:	e765      	b.n	8000ce0 <__aeabi_fmul+0xf8>
 8000e14:	01a4      	lsls	r4, r4, #6
 8000e16:	2000      	movs	r0, #0
 8000e18:	0a64      	lsrs	r4, r4, #9
 8000e1a:	e72b      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000e1c:	2080      	movs	r0, #128	; 0x80
 8000e1e:	03c0      	lsls	r0, r0, #15
 8000e20:	4304      	orrs	r4, r0
 8000e22:	0264      	lsls	r4, r4, #9
 8000e24:	20ff      	movs	r0, #255	; 0xff
 8000e26:	0a64      	lsrs	r4, r4, #9
 8000e28:	e724      	b.n	8000c74 <__aeabi_fmul+0x8c>
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	0800f3b0 	.word	0x0800f3b0
 8000e30:	f7ffffff 	.word	0xf7ffffff

08000e34 <__aeabi_fsub>:
 8000e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e36:	46ce      	mov	lr, r9
 8000e38:	4647      	mov	r7, r8
 8000e3a:	0243      	lsls	r3, r0, #9
 8000e3c:	0a5b      	lsrs	r3, r3, #9
 8000e3e:	024e      	lsls	r6, r1, #9
 8000e40:	00da      	lsls	r2, r3, #3
 8000e42:	4694      	mov	ip, r2
 8000e44:	0a72      	lsrs	r2, r6, #9
 8000e46:	4691      	mov	r9, r2
 8000e48:	0045      	lsls	r5, r0, #1
 8000e4a:	004a      	lsls	r2, r1, #1
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	0e2d      	lsrs	r5, r5, #24
 8000e50:	001f      	movs	r7, r3
 8000e52:	0fc4      	lsrs	r4, r0, #31
 8000e54:	0e12      	lsrs	r2, r2, #24
 8000e56:	0fc9      	lsrs	r1, r1, #31
 8000e58:	09b6      	lsrs	r6, r6, #6
 8000e5a:	2aff      	cmp	r2, #255	; 0xff
 8000e5c:	d05b      	beq.n	8000f16 <__aeabi_fsub+0xe2>
 8000e5e:	2001      	movs	r0, #1
 8000e60:	4041      	eors	r1, r0
 8000e62:	428c      	cmp	r4, r1
 8000e64:	d039      	beq.n	8000eda <__aeabi_fsub+0xa6>
 8000e66:	1aa8      	subs	r0, r5, r2
 8000e68:	2800      	cmp	r0, #0
 8000e6a:	dd5a      	ble.n	8000f22 <__aeabi_fsub+0xee>
 8000e6c:	2a00      	cmp	r2, #0
 8000e6e:	d06a      	beq.n	8000f46 <__aeabi_fsub+0x112>
 8000e70:	2dff      	cmp	r5, #255	; 0xff
 8000e72:	d100      	bne.n	8000e76 <__aeabi_fsub+0x42>
 8000e74:	e0d9      	b.n	800102a <__aeabi_fsub+0x1f6>
 8000e76:	2280      	movs	r2, #128	; 0x80
 8000e78:	04d2      	lsls	r2, r2, #19
 8000e7a:	4316      	orrs	r6, r2
 8000e7c:	281b      	cmp	r0, #27
 8000e7e:	dc00      	bgt.n	8000e82 <__aeabi_fsub+0x4e>
 8000e80:	e0e9      	b.n	8001056 <__aeabi_fsub+0x222>
 8000e82:	2001      	movs	r0, #1
 8000e84:	4663      	mov	r3, ip
 8000e86:	1a18      	subs	r0, r3, r0
 8000e88:	0143      	lsls	r3, r0, #5
 8000e8a:	d400      	bmi.n	8000e8e <__aeabi_fsub+0x5a>
 8000e8c:	e0b4      	b.n	8000ff8 <__aeabi_fsub+0x1c4>
 8000e8e:	0180      	lsls	r0, r0, #6
 8000e90:	0987      	lsrs	r7, r0, #6
 8000e92:	0038      	movs	r0, r7
 8000e94:	f002 f8d8 	bl	8003048 <__clzsi2>
 8000e98:	3805      	subs	r0, #5
 8000e9a:	4087      	lsls	r7, r0
 8000e9c:	4285      	cmp	r5, r0
 8000e9e:	dc00      	bgt.n	8000ea2 <__aeabi_fsub+0x6e>
 8000ea0:	e0cc      	b.n	800103c <__aeabi_fsub+0x208>
 8000ea2:	1a2d      	subs	r5, r5, r0
 8000ea4:	48b5      	ldr	r0, [pc, #724]	; (800117c <__aeabi_fsub+0x348>)
 8000ea6:	4038      	ands	r0, r7
 8000ea8:	0743      	lsls	r3, r0, #29
 8000eaa:	d004      	beq.n	8000eb6 <__aeabi_fsub+0x82>
 8000eac:	230f      	movs	r3, #15
 8000eae:	4003      	ands	r3, r0
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	d000      	beq.n	8000eb6 <__aeabi_fsub+0x82>
 8000eb4:	3004      	adds	r0, #4
 8000eb6:	0143      	lsls	r3, r0, #5
 8000eb8:	d400      	bmi.n	8000ebc <__aeabi_fsub+0x88>
 8000eba:	e0a0      	b.n	8000ffe <__aeabi_fsub+0x1ca>
 8000ebc:	1c6a      	adds	r2, r5, #1
 8000ebe:	2dfe      	cmp	r5, #254	; 0xfe
 8000ec0:	d100      	bne.n	8000ec4 <__aeabi_fsub+0x90>
 8000ec2:	e08d      	b.n	8000fe0 <__aeabi_fsub+0x1ac>
 8000ec4:	0180      	lsls	r0, r0, #6
 8000ec6:	0a47      	lsrs	r7, r0, #9
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	05d0      	lsls	r0, r2, #23
 8000ecc:	4338      	orrs	r0, r7
 8000ece:	07e4      	lsls	r4, r4, #31
 8000ed0:	4320      	orrs	r0, r4
 8000ed2:	bcc0      	pop	{r6, r7}
 8000ed4:	46b9      	mov	r9, r7
 8000ed6:	46b0      	mov	r8, r6
 8000ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000eda:	1aa8      	subs	r0, r5, r2
 8000edc:	4680      	mov	r8, r0
 8000ede:	2800      	cmp	r0, #0
 8000ee0:	dd45      	ble.n	8000f6e <__aeabi_fsub+0x13a>
 8000ee2:	2a00      	cmp	r2, #0
 8000ee4:	d070      	beq.n	8000fc8 <__aeabi_fsub+0x194>
 8000ee6:	2dff      	cmp	r5, #255	; 0xff
 8000ee8:	d100      	bne.n	8000eec <__aeabi_fsub+0xb8>
 8000eea:	e09e      	b.n	800102a <__aeabi_fsub+0x1f6>
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	04db      	lsls	r3, r3, #19
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	4643      	mov	r3, r8
 8000ef4:	2b1b      	cmp	r3, #27
 8000ef6:	dc00      	bgt.n	8000efa <__aeabi_fsub+0xc6>
 8000ef8:	e0d2      	b.n	80010a0 <__aeabi_fsub+0x26c>
 8000efa:	2001      	movs	r0, #1
 8000efc:	4460      	add	r0, ip
 8000efe:	0143      	lsls	r3, r0, #5
 8000f00:	d57a      	bpl.n	8000ff8 <__aeabi_fsub+0x1c4>
 8000f02:	3501      	adds	r5, #1
 8000f04:	2dff      	cmp	r5, #255	; 0xff
 8000f06:	d06b      	beq.n	8000fe0 <__aeabi_fsub+0x1ac>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	4a9d      	ldr	r2, [pc, #628]	; (8001180 <__aeabi_fsub+0x34c>)
 8000f0c:	4003      	ands	r3, r0
 8000f0e:	0840      	lsrs	r0, r0, #1
 8000f10:	4010      	ands	r0, r2
 8000f12:	4318      	orrs	r0, r3
 8000f14:	e7c8      	b.n	8000ea8 <__aeabi_fsub+0x74>
 8000f16:	2e00      	cmp	r6, #0
 8000f18:	d020      	beq.n	8000f5c <__aeabi_fsub+0x128>
 8000f1a:	428c      	cmp	r4, r1
 8000f1c:	d023      	beq.n	8000f66 <__aeabi_fsub+0x132>
 8000f1e:	0028      	movs	r0, r5
 8000f20:	38ff      	subs	r0, #255	; 0xff
 8000f22:	2800      	cmp	r0, #0
 8000f24:	d039      	beq.n	8000f9a <__aeabi_fsub+0x166>
 8000f26:	1b57      	subs	r7, r2, r5
 8000f28:	2d00      	cmp	r5, #0
 8000f2a:	d000      	beq.n	8000f2e <__aeabi_fsub+0xfa>
 8000f2c:	e09d      	b.n	800106a <__aeabi_fsub+0x236>
 8000f2e:	4663      	mov	r3, ip
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d100      	bne.n	8000f36 <__aeabi_fsub+0x102>
 8000f34:	e0db      	b.n	80010ee <__aeabi_fsub+0x2ba>
 8000f36:	1e7b      	subs	r3, r7, #1
 8000f38:	2f01      	cmp	r7, #1
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_fsub+0x10a>
 8000f3c:	e10d      	b.n	800115a <__aeabi_fsub+0x326>
 8000f3e:	2fff      	cmp	r7, #255	; 0xff
 8000f40:	d071      	beq.n	8001026 <__aeabi_fsub+0x1f2>
 8000f42:	001f      	movs	r7, r3
 8000f44:	e098      	b.n	8001078 <__aeabi_fsub+0x244>
 8000f46:	2e00      	cmp	r6, #0
 8000f48:	d100      	bne.n	8000f4c <__aeabi_fsub+0x118>
 8000f4a:	e0a7      	b.n	800109c <__aeabi_fsub+0x268>
 8000f4c:	1e42      	subs	r2, r0, #1
 8000f4e:	2801      	cmp	r0, #1
 8000f50:	d100      	bne.n	8000f54 <__aeabi_fsub+0x120>
 8000f52:	e0e6      	b.n	8001122 <__aeabi_fsub+0x2ee>
 8000f54:	28ff      	cmp	r0, #255	; 0xff
 8000f56:	d068      	beq.n	800102a <__aeabi_fsub+0x1f6>
 8000f58:	0010      	movs	r0, r2
 8000f5a:	e78f      	b.n	8000e7c <__aeabi_fsub+0x48>
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	4041      	eors	r1, r0
 8000f60:	42a1      	cmp	r1, r4
 8000f62:	d000      	beq.n	8000f66 <__aeabi_fsub+0x132>
 8000f64:	e77f      	b.n	8000e66 <__aeabi_fsub+0x32>
 8000f66:	20ff      	movs	r0, #255	; 0xff
 8000f68:	4240      	negs	r0, r0
 8000f6a:	4680      	mov	r8, r0
 8000f6c:	44a8      	add	r8, r5
 8000f6e:	4640      	mov	r0, r8
 8000f70:	2800      	cmp	r0, #0
 8000f72:	d038      	beq.n	8000fe6 <__aeabi_fsub+0x1b2>
 8000f74:	1b51      	subs	r1, r2, r5
 8000f76:	2d00      	cmp	r5, #0
 8000f78:	d100      	bne.n	8000f7c <__aeabi_fsub+0x148>
 8000f7a:	e0ae      	b.n	80010da <__aeabi_fsub+0x2a6>
 8000f7c:	2aff      	cmp	r2, #255	; 0xff
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_fsub+0x14e>
 8000f80:	e0df      	b.n	8001142 <__aeabi_fsub+0x30e>
 8000f82:	2380      	movs	r3, #128	; 0x80
 8000f84:	4660      	mov	r0, ip
 8000f86:	04db      	lsls	r3, r3, #19
 8000f88:	4318      	orrs	r0, r3
 8000f8a:	4684      	mov	ip, r0
 8000f8c:	291b      	cmp	r1, #27
 8000f8e:	dc00      	bgt.n	8000f92 <__aeabi_fsub+0x15e>
 8000f90:	e0d9      	b.n	8001146 <__aeabi_fsub+0x312>
 8000f92:	2001      	movs	r0, #1
 8000f94:	0015      	movs	r5, r2
 8000f96:	1980      	adds	r0, r0, r6
 8000f98:	e7b1      	b.n	8000efe <__aeabi_fsub+0xca>
 8000f9a:	20fe      	movs	r0, #254	; 0xfe
 8000f9c:	1c6a      	adds	r2, r5, #1
 8000f9e:	4210      	tst	r0, r2
 8000fa0:	d171      	bne.n	8001086 <__aeabi_fsub+0x252>
 8000fa2:	2d00      	cmp	r5, #0
 8000fa4:	d000      	beq.n	8000fa8 <__aeabi_fsub+0x174>
 8000fa6:	e0a6      	b.n	80010f6 <__aeabi_fsub+0x2c2>
 8000fa8:	4663      	mov	r3, ip
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d100      	bne.n	8000fb0 <__aeabi_fsub+0x17c>
 8000fae:	e0d9      	b.n	8001164 <__aeabi_fsub+0x330>
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2e00      	cmp	r6, #0
 8000fb4:	d100      	bne.n	8000fb8 <__aeabi_fsub+0x184>
 8000fb6:	e788      	b.n	8000eca <__aeabi_fsub+0x96>
 8000fb8:	1b98      	subs	r0, r3, r6
 8000fba:	0143      	lsls	r3, r0, #5
 8000fbc:	d400      	bmi.n	8000fc0 <__aeabi_fsub+0x18c>
 8000fbe:	e0e1      	b.n	8001184 <__aeabi_fsub+0x350>
 8000fc0:	4663      	mov	r3, ip
 8000fc2:	000c      	movs	r4, r1
 8000fc4:	1af0      	subs	r0, r6, r3
 8000fc6:	e76f      	b.n	8000ea8 <__aeabi_fsub+0x74>
 8000fc8:	2e00      	cmp	r6, #0
 8000fca:	d100      	bne.n	8000fce <__aeabi_fsub+0x19a>
 8000fcc:	e0b7      	b.n	800113e <__aeabi_fsub+0x30a>
 8000fce:	0002      	movs	r2, r0
 8000fd0:	3a01      	subs	r2, #1
 8000fd2:	2801      	cmp	r0, #1
 8000fd4:	d100      	bne.n	8000fd8 <__aeabi_fsub+0x1a4>
 8000fd6:	e09c      	b.n	8001112 <__aeabi_fsub+0x2de>
 8000fd8:	28ff      	cmp	r0, #255	; 0xff
 8000fda:	d026      	beq.n	800102a <__aeabi_fsub+0x1f6>
 8000fdc:	4690      	mov	r8, r2
 8000fde:	e788      	b.n	8000ef2 <__aeabi_fsub+0xbe>
 8000fe0:	22ff      	movs	r2, #255	; 0xff
 8000fe2:	2700      	movs	r7, #0
 8000fe4:	e771      	b.n	8000eca <__aeabi_fsub+0x96>
 8000fe6:	20fe      	movs	r0, #254	; 0xfe
 8000fe8:	1c6a      	adds	r2, r5, #1
 8000fea:	4210      	tst	r0, r2
 8000fec:	d064      	beq.n	80010b8 <__aeabi_fsub+0x284>
 8000fee:	2aff      	cmp	r2, #255	; 0xff
 8000ff0:	d0f6      	beq.n	8000fe0 <__aeabi_fsub+0x1ac>
 8000ff2:	0015      	movs	r5, r2
 8000ff4:	4466      	add	r6, ip
 8000ff6:	0870      	lsrs	r0, r6, #1
 8000ff8:	0743      	lsls	r3, r0, #29
 8000ffa:	d000      	beq.n	8000ffe <__aeabi_fsub+0x1ca>
 8000ffc:	e756      	b.n	8000eac <__aeabi_fsub+0x78>
 8000ffe:	08c3      	lsrs	r3, r0, #3
 8001000:	2dff      	cmp	r5, #255	; 0xff
 8001002:	d012      	beq.n	800102a <__aeabi_fsub+0x1f6>
 8001004:	025b      	lsls	r3, r3, #9
 8001006:	0a5f      	lsrs	r7, r3, #9
 8001008:	b2ea      	uxtb	r2, r5
 800100a:	e75e      	b.n	8000eca <__aeabi_fsub+0x96>
 800100c:	4662      	mov	r2, ip
 800100e:	2a00      	cmp	r2, #0
 8001010:	d100      	bne.n	8001014 <__aeabi_fsub+0x1e0>
 8001012:	e096      	b.n	8001142 <__aeabi_fsub+0x30e>
 8001014:	2e00      	cmp	r6, #0
 8001016:	d008      	beq.n	800102a <__aeabi_fsub+0x1f6>
 8001018:	2280      	movs	r2, #128	; 0x80
 800101a:	03d2      	lsls	r2, r2, #15
 800101c:	4213      	tst	r3, r2
 800101e:	d004      	beq.n	800102a <__aeabi_fsub+0x1f6>
 8001020:	4648      	mov	r0, r9
 8001022:	4210      	tst	r0, r2
 8001024:	d101      	bne.n	800102a <__aeabi_fsub+0x1f6>
 8001026:	000c      	movs	r4, r1
 8001028:	464b      	mov	r3, r9
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0d8      	beq.n	8000fe0 <__aeabi_fsub+0x1ac>
 800102e:	2780      	movs	r7, #128	; 0x80
 8001030:	03ff      	lsls	r7, r7, #15
 8001032:	431f      	orrs	r7, r3
 8001034:	027f      	lsls	r7, r7, #9
 8001036:	22ff      	movs	r2, #255	; 0xff
 8001038:	0a7f      	lsrs	r7, r7, #9
 800103a:	e746      	b.n	8000eca <__aeabi_fsub+0x96>
 800103c:	2320      	movs	r3, #32
 800103e:	003a      	movs	r2, r7
 8001040:	1b45      	subs	r5, r0, r5
 8001042:	0038      	movs	r0, r7
 8001044:	3501      	adds	r5, #1
 8001046:	40ea      	lsrs	r2, r5
 8001048:	1b5d      	subs	r5, r3, r5
 800104a:	40a8      	lsls	r0, r5
 800104c:	1e43      	subs	r3, r0, #1
 800104e:	4198      	sbcs	r0, r3
 8001050:	2500      	movs	r5, #0
 8001052:	4310      	orrs	r0, r2
 8001054:	e728      	b.n	8000ea8 <__aeabi_fsub+0x74>
 8001056:	2320      	movs	r3, #32
 8001058:	1a1b      	subs	r3, r3, r0
 800105a:	0032      	movs	r2, r6
 800105c:	409e      	lsls	r6, r3
 800105e:	40c2      	lsrs	r2, r0
 8001060:	0030      	movs	r0, r6
 8001062:	1e43      	subs	r3, r0, #1
 8001064:	4198      	sbcs	r0, r3
 8001066:	4310      	orrs	r0, r2
 8001068:	e70c      	b.n	8000e84 <__aeabi_fsub+0x50>
 800106a:	2aff      	cmp	r2, #255	; 0xff
 800106c:	d0db      	beq.n	8001026 <__aeabi_fsub+0x1f2>
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	4660      	mov	r0, ip
 8001072:	04db      	lsls	r3, r3, #19
 8001074:	4318      	orrs	r0, r3
 8001076:	4684      	mov	ip, r0
 8001078:	2f1b      	cmp	r7, #27
 800107a:	dd56      	ble.n	800112a <__aeabi_fsub+0x2f6>
 800107c:	2001      	movs	r0, #1
 800107e:	000c      	movs	r4, r1
 8001080:	0015      	movs	r5, r2
 8001082:	1a30      	subs	r0, r6, r0
 8001084:	e700      	b.n	8000e88 <__aeabi_fsub+0x54>
 8001086:	4663      	mov	r3, ip
 8001088:	1b9f      	subs	r7, r3, r6
 800108a:	017b      	lsls	r3, r7, #5
 800108c:	d43d      	bmi.n	800110a <__aeabi_fsub+0x2d6>
 800108e:	2f00      	cmp	r7, #0
 8001090:	d000      	beq.n	8001094 <__aeabi_fsub+0x260>
 8001092:	e6fe      	b.n	8000e92 <__aeabi_fsub+0x5e>
 8001094:	2400      	movs	r4, #0
 8001096:	2200      	movs	r2, #0
 8001098:	2700      	movs	r7, #0
 800109a:	e716      	b.n	8000eca <__aeabi_fsub+0x96>
 800109c:	0005      	movs	r5, r0
 800109e:	e7af      	b.n	8001000 <__aeabi_fsub+0x1cc>
 80010a0:	0032      	movs	r2, r6
 80010a2:	4643      	mov	r3, r8
 80010a4:	4641      	mov	r1, r8
 80010a6:	40da      	lsrs	r2, r3
 80010a8:	2320      	movs	r3, #32
 80010aa:	1a5b      	subs	r3, r3, r1
 80010ac:	409e      	lsls	r6, r3
 80010ae:	0030      	movs	r0, r6
 80010b0:	1e43      	subs	r3, r0, #1
 80010b2:	4198      	sbcs	r0, r3
 80010b4:	4310      	orrs	r0, r2
 80010b6:	e721      	b.n	8000efc <__aeabi_fsub+0xc8>
 80010b8:	2d00      	cmp	r5, #0
 80010ba:	d1a7      	bne.n	800100c <__aeabi_fsub+0x1d8>
 80010bc:	4663      	mov	r3, ip
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d059      	beq.n	8001176 <__aeabi_fsub+0x342>
 80010c2:	2200      	movs	r2, #0
 80010c4:	2e00      	cmp	r6, #0
 80010c6:	d100      	bne.n	80010ca <__aeabi_fsub+0x296>
 80010c8:	e6ff      	b.n	8000eca <__aeabi_fsub+0x96>
 80010ca:	0030      	movs	r0, r6
 80010cc:	4460      	add	r0, ip
 80010ce:	0143      	lsls	r3, r0, #5
 80010d0:	d592      	bpl.n	8000ff8 <__aeabi_fsub+0x1c4>
 80010d2:	4b2a      	ldr	r3, [pc, #168]	; (800117c <__aeabi_fsub+0x348>)
 80010d4:	3501      	adds	r5, #1
 80010d6:	4018      	ands	r0, r3
 80010d8:	e78e      	b.n	8000ff8 <__aeabi_fsub+0x1c4>
 80010da:	4663      	mov	r3, ip
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d047      	beq.n	8001170 <__aeabi_fsub+0x33c>
 80010e0:	1e4b      	subs	r3, r1, #1
 80010e2:	2901      	cmp	r1, #1
 80010e4:	d015      	beq.n	8001112 <__aeabi_fsub+0x2de>
 80010e6:	29ff      	cmp	r1, #255	; 0xff
 80010e8:	d02b      	beq.n	8001142 <__aeabi_fsub+0x30e>
 80010ea:	0019      	movs	r1, r3
 80010ec:	e74e      	b.n	8000f8c <__aeabi_fsub+0x158>
 80010ee:	000c      	movs	r4, r1
 80010f0:	464b      	mov	r3, r9
 80010f2:	003d      	movs	r5, r7
 80010f4:	e784      	b.n	8001000 <__aeabi_fsub+0x1cc>
 80010f6:	4662      	mov	r2, ip
 80010f8:	2a00      	cmp	r2, #0
 80010fa:	d18b      	bne.n	8001014 <__aeabi_fsub+0x1e0>
 80010fc:	2e00      	cmp	r6, #0
 80010fe:	d192      	bne.n	8001026 <__aeabi_fsub+0x1f2>
 8001100:	2780      	movs	r7, #128	; 0x80
 8001102:	2400      	movs	r4, #0
 8001104:	22ff      	movs	r2, #255	; 0xff
 8001106:	03ff      	lsls	r7, r7, #15
 8001108:	e6df      	b.n	8000eca <__aeabi_fsub+0x96>
 800110a:	4663      	mov	r3, ip
 800110c:	000c      	movs	r4, r1
 800110e:	1af7      	subs	r7, r6, r3
 8001110:	e6bf      	b.n	8000e92 <__aeabi_fsub+0x5e>
 8001112:	0030      	movs	r0, r6
 8001114:	4460      	add	r0, ip
 8001116:	2501      	movs	r5, #1
 8001118:	0143      	lsls	r3, r0, #5
 800111a:	d400      	bmi.n	800111e <__aeabi_fsub+0x2ea>
 800111c:	e76c      	b.n	8000ff8 <__aeabi_fsub+0x1c4>
 800111e:	2502      	movs	r5, #2
 8001120:	e6f2      	b.n	8000f08 <__aeabi_fsub+0xd4>
 8001122:	4663      	mov	r3, ip
 8001124:	2501      	movs	r5, #1
 8001126:	1b98      	subs	r0, r3, r6
 8001128:	e6ae      	b.n	8000e88 <__aeabi_fsub+0x54>
 800112a:	2320      	movs	r3, #32
 800112c:	4664      	mov	r4, ip
 800112e:	4660      	mov	r0, ip
 8001130:	40fc      	lsrs	r4, r7
 8001132:	1bdf      	subs	r7, r3, r7
 8001134:	40b8      	lsls	r0, r7
 8001136:	1e43      	subs	r3, r0, #1
 8001138:	4198      	sbcs	r0, r3
 800113a:	4320      	orrs	r0, r4
 800113c:	e79f      	b.n	800107e <__aeabi_fsub+0x24a>
 800113e:	0005      	movs	r5, r0
 8001140:	e75e      	b.n	8001000 <__aeabi_fsub+0x1cc>
 8001142:	464b      	mov	r3, r9
 8001144:	e771      	b.n	800102a <__aeabi_fsub+0x1f6>
 8001146:	2320      	movs	r3, #32
 8001148:	4665      	mov	r5, ip
 800114a:	4660      	mov	r0, ip
 800114c:	40cd      	lsrs	r5, r1
 800114e:	1a59      	subs	r1, r3, r1
 8001150:	4088      	lsls	r0, r1
 8001152:	1e43      	subs	r3, r0, #1
 8001154:	4198      	sbcs	r0, r3
 8001156:	4328      	orrs	r0, r5
 8001158:	e71c      	b.n	8000f94 <__aeabi_fsub+0x160>
 800115a:	4663      	mov	r3, ip
 800115c:	000c      	movs	r4, r1
 800115e:	2501      	movs	r5, #1
 8001160:	1af0      	subs	r0, r6, r3
 8001162:	e691      	b.n	8000e88 <__aeabi_fsub+0x54>
 8001164:	2e00      	cmp	r6, #0
 8001166:	d095      	beq.n	8001094 <__aeabi_fsub+0x260>
 8001168:	000c      	movs	r4, r1
 800116a:	464f      	mov	r7, r9
 800116c:	2200      	movs	r2, #0
 800116e:	e6ac      	b.n	8000eca <__aeabi_fsub+0x96>
 8001170:	464b      	mov	r3, r9
 8001172:	000d      	movs	r5, r1
 8001174:	e744      	b.n	8001000 <__aeabi_fsub+0x1cc>
 8001176:	464f      	mov	r7, r9
 8001178:	2200      	movs	r2, #0
 800117a:	e6a6      	b.n	8000eca <__aeabi_fsub+0x96>
 800117c:	fbffffff 	.word	0xfbffffff
 8001180:	7dffffff 	.word	0x7dffffff
 8001184:	2800      	cmp	r0, #0
 8001186:	d000      	beq.n	800118a <__aeabi_fsub+0x356>
 8001188:	e736      	b.n	8000ff8 <__aeabi_fsub+0x1c4>
 800118a:	2400      	movs	r4, #0
 800118c:	2700      	movs	r7, #0
 800118e:	e69c      	b.n	8000eca <__aeabi_fsub+0x96>

08001190 <__aeabi_fcmpun>:
 8001190:	0243      	lsls	r3, r0, #9
 8001192:	024a      	lsls	r2, r1, #9
 8001194:	0040      	lsls	r0, r0, #1
 8001196:	0049      	lsls	r1, r1, #1
 8001198:	0a5b      	lsrs	r3, r3, #9
 800119a:	0a52      	lsrs	r2, r2, #9
 800119c:	0e09      	lsrs	r1, r1, #24
 800119e:	0e00      	lsrs	r0, r0, #24
 80011a0:	28ff      	cmp	r0, #255	; 0xff
 80011a2:	d006      	beq.n	80011b2 <__aeabi_fcmpun+0x22>
 80011a4:	2000      	movs	r0, #0
 80011a6:	29ff      	cmp	r1, #255	; 0xff
 80011a8:	d102      	bne.n	80011b0 <__aeabi_fcmpun+0x20>
 80011aa:	1e53      	subs	r3, r2, #1
 80011ac:	419a      	sbcs	r2, r3
 80011ae:	0010      	movs	r0, r2
 80011b0:	4770      	bx	lr
 80011b2:	38fe      	subs	r0, #254	; 0xfe
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1fb      	bne.n	80011b0 <__aeabi_fcmpun+0x20>
 80011b8:	e7f4      	b.n	80011a4 <__aeabi_fcmpun+0x14>
 80011ba:	46c0      	nop			; (mov r8, r8)

080011bc <__aeabi_i2f>:
 80011bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011be:	2800      	cmp	r0, #0
 80011c0:	d013      	beq.n	80011ea <__aeabi_i2f+0x2e>
 80011c2:	17c3      	asrs	r3, r0, #31
 80011c4:	18c6      	adds	r6, r0, r3
 80011c6:	405e      	eors	r6, r3
 80011c8:	0fc4      	lsrs	r4, r0, #31
 80011ca:	0030      	movs	r0, r6
 80011cc:	f001 ff3c 	bl	8003048 <__clzsi2>
 80011d0:	239e      	movs	r3, #158	; 0x9e
 80011d2:	0005      	movs	r5, r0
 80011d4:	1a1b      	subs	r3, r3, r0
 80011d6:	2b96      	cmp	r3, #150	; 0x96
 80011d8:	dc0f      	bgt.n	80011fa <__aeabi_i2f+0x3e>
 80011da:	2808      	cmp	r0, #8
 80011dc:	dd01      	ble.n	80011e2 <__aeabi_i2f+0x26>
 80011de:	3d08      	subs	r5, #8
 80011e0:	40ae      	lsls	r6, r5
 80011e2:	0276      	lsls	r6, r6, #9
 80011e4:	0a76      	lsrs	r6, r6, #9
 80011e6:	b2d8      	uxtb	r0, r3
 80011e8:	e002      	b.n	80011f0 <__aeabi_i2f+0x34>
 80011ea:	2400      	movs	r4, #0
 80011ec:	2000      	movs	r0, #0
 80011ee:	2600      	movs	r6, #0
 80011f0:	05c0      	lsls	r0, r0, #23
 80011f2:	4330      	orrs	r0, r6
 80011f4:	07e4      	lsls	r4, r4, #31
 80011f6:	4320      	orrs	r0, r4
 80011f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011fa:	2b99      	cmp	r3, #153	; 0x99
 80011fc:	dd0c      	ble.n	8001218 <__aeabi_i2f+0x5c>
 80011fe:	2205      	movs	r2, #5
 8001200:	0031      	movs	r1, r6
 8001202:	1a12      	subs	r2, r2, r0
 8001204:	40d1      	lsrs	r1, r2
 8001206:	000a      	movs	r2, r1
 8001208:	0001      	movs	r1, r0
 800120a:	0030      	movs	r0, r6
 800120c:	311b      	adds	r1, #27
 800120e:	4088      	lsls	r0, r1
 8001210:	1e41      	subs	r1, r0, #1
 8001212:	4188      	sbcs	r0, r1
 8001214:	4302      	orrs	r2, r0
 8001216:	0016      	movs	r6, r2
 8001218:	2d05      	cmp	r5, #5
 800121a:	dc12      	bgt.n	8001242 <__aeabi_i2f+0x86>
 800121c:	0031      	movs	r1, r6
 800121e:	4f0d      	ldr	r7, [pc, #52]	; (8001254 <__aeabi_i2f+0x98>)
 8001220:	4039      	ands	r1, r7
 8001222:	0772      	lsls	r2, r6, #29
 8001224:	d009      	beq.n	800123a <__aeabi_i2f+0x7e>
 8001226:	200f      	movs	r0, #15
 8001228:	4030      	ands	r0, r6
 800122a:	2804      	cmp	r0, #4
 800122c:	d005      	beq.n	800123a <__aeabi_i2f+0x7e>
 800122e:	3104      	adds	r1, #4
 8001230:	014a      	lsls	r2, r1, #5
 8001232:	d502      	bpl.n	800123a <__aeabi_i2f+0x7e>
 8001234:	239f      	movs	r3, #159	; 0x9f
 8001236:	4039      	ands	r1, r7
 8001238:	1b5b      	subs	r3, r3, r5
 800123a:	0189      	lsls	r1, r1, #6
 800123c:	0a4e      	lsrs	r6, r1, #9
 800123e:	b2d8      	uxtb	r0, r3
 8001240:	e7d6      	b.n	80011f0 <__aeabi_i2f+0x34>
 8001242:	1f6a      	subs	r2, r5, #5
 8001244:	4096      	lsls	r6, r2
 8001246:	0031      	movs	r1, r6
 8001248:	4f02      	ldr	r7, [pc, #8]	; (8001254 <__aeabi_i2f+0x98>)
 800124a:	4039      	ands	r1, r7
 800124c:	0772      	lsls	r2, r6, #29
 800124e:	d0f4      	beq.n	800123a <__aeabi_i2f+0x7e>
 8001250:	e7e9      	b.n	8001226 <__aeabi_i2f+0x6a>
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	fbffffff 	.word	0xfbffffff

08001258 <__aeabi_ui2f>:
 8001258:	b570      	push	{r4, r5, r6, lr}
 800125a:	1e05      	subs	r5, r0, #0
 800125c:	d00e      	beq.n	800127c <__aeabi_ui2f+0x24>
 800125e:	f001 fef3 	bl	8003048 <__clzsi2>
 8001262:	239e      	movs	r3, #158	; 0x9e
 8001264:	0004      	movs	r4, r0
 8001266:	1a1b      	subs	r3, r3, r0
 8001268:	2b96      	cmp	r3, #150	; 0x96
 800126a:	dc0c      	bgt.n	8001286 <__aeabi_ui2f+0x2e>
 800126c:	2808      	cmp	r0, #8
 800126e:	dd01      	ble.n	8001274 <__aeabi_ui2f+0x1c>
 8001270:	3c08      	subs	r4, #8
 8001272:	40a5      	lsls	r5, r4
 8001274:	026d      	lsls	r5, r5, #9
 8001276:	0a6d      	lsrs	r5, r5, #9
 8001278:	b2d8      	uxtb	r0, r3
 800127a:	e001      	b.n	8001280 <__aeabi_ui2f+0x28>
 800127c:	2000      	movs	r0, #0
 800127e:	2500      	movs	r5, #0
 8001280:	05c0      	lsls	r0, r0, #23
 8001282:	4328      	orrs	r0, r5
 8001284:	bd70      	pop	{r4, r5, r6, pc}
 8001286:	2b99      	cmp	r3, #153	; 0x99
 8001288:	dd09      	ble.n	800129e <__aeabi_ui2f+0x46>
 800128a:	0002      	movs	r2, r0
 800128c:	0029      	movs	r1, r5
 800128e:	321b      	adds	r2, #27
 8001290:	4091      	lsls	r1, r2
 8001292:	1e4a      	subs	r2, r1, #1
 8001294:	4191      	sbcs	r1, r2
 8001296:	2205      	movs	r2, #5
 8001298:	1a12      	subs	r2, r2, r0
 800129a:	40d5      	lsrs	r5, r2
 800129c:	430d      	orrs	r5, r1
 800129e:	2c05      	cmp	r4, #5
 80012a0:	dc12      	bgt.n	80012c8 <__aeabi_ui2f+0x70>
 80012a2:	0029      	movs	r1, r5
 80012a4:	4e0c      	ldr	r6, [pc, #48]	; (80012d8 <__aeabi_ui2f+0x80>)
 80012a6:	4031      	ands	r1, r6
 80012a8:	076a      	lsls	r2, r5, #29
 80012aa:	d009      	beq.n	80012c0 <__aeabi_ui2f+0x68>
 80012ac:	200f      	movs	r0, #15
 80012ae:	4028      	ands	r0, r5
 80012b0:	2804      	cmp	r0, #4
 80012b2:	d005      	beq.n	80012c0 <__aeabi_ui2f+0x68>
 80012b4:	3104      	adds	r1, #4
 80012b6:	014a      	lsls	r2, r1, #5
 80012b8:	d502      	bpl.n	80012c0 <__aeabi_ui2f+0x68>
 80012ba:	239f      	movs	r3, #159	; 0x9f
 80012bc:	4031      	ands	r1, r6
 80012be:	1b1b      	subs	r3, r3, r4
 80012c0:	0189      	lsls	r1, r1, #6
 80012c2:	0a4d      	lsrs	r5, r1, #9
 80012c4:	b2d8      	uxtb	r0, r3
 80012c6:	e7db      	b.n	8001280 <__aeabi_ui2f+0x28>
 80012c8:	1f62      	subs	r2, r4, #5
 80012ca:	4095      	lsls	r5, r2
 80012cc:	0029      	movs	r1, r5
 80012ce:	4e02      	ldr	r6, [pc, #8]	; (80012d8 <__aeabi_ui2f+0x80>)
 80012d0:	4031      	ands	r1, r6
 80012d2:	076a      	lsls	r2, r5, #29
 80012d4:	d0f4      	beq.n	80012c0 <__aeabi_ui2f+0x68>
 80012d6:	e7e9      	b.n	80012ac <__aeabi_ui2f+0x54>
 80012d8:	fbffffff 	.word	0xfbffffff

080012dc <__aeabi_dadd>:
 80012dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012de:	464f      	mov	r7, r9
 80012e0:	4646      	mov	r6, r8
 80012e2:	46d6      	mov	lr, sl
 80012e4:	000d      	movs	r5, r1
 80012e6:	0004      	movs	r4, r0
 80012e8:	b5c0      	push	{r6, r7, lr}
 80012ea:	001f      	movs	r7, r3
 80012ec:	0011      	movs	r1, r2
 80012ee:	0328      	lsls	r0, r5, #12
 80012f0:	0f62      	lsrs	r2, r4, #29
 80012f2:	0a40      	lsrs	r0, r0, #9
 80012f4:	4310      	orrs	r0, r2
 80012f6:	007a      	lsls	r2, r7, #1
 80012f8:	0d52      	lsrs	r2, r2, #21
 80012fa:	00e3      	lsls	r3, r4, #3
 80012fc:	033c      	lsls	r4, r7, #12
 80012fe:	4691      	mov	r9, r2
 8001300:	0a64      	lsrs	r4, r4, #9
 8001302:	0ffa      	lsrs	r2, r7, #31
 8001304:	0f4f      	lsrs	r7, r1, #29
 8001306:	006e      	lsls	r6, r5, #1
 8001308:	4327      	orrs	r7, r4
 800130a:	4692      	mov	sl, r2
 800130c:	46b8      	mov	r8, r7
 800130e:	0d76      	lsrs	r6, r6, #21
 8001310:	0fed      	lsrs	r5, r5, #31
 8001312:	00c9      	lsls	r1, r1, #3
 8001314:	4295      	cmp	r5, r2
 8001316:	d100      	bne.n	800131a <__aeabi_dadd+0x3e>
 8001318:	e099      	b.n	800144e <__aeabi_dadd+0x172>
 800131a:	464c      	mov	r4, r9
 800131c:	1b34      	subs	r4, r6, r4
 800131e:	46a4      	mov	ip, r4
 8001320:	2c00      	cmp	r4, #0
 8001322:	dc00      	bgt.n	8001326 <__aeabi_dadd+0x4a>
 8001324:	e07c      	b.n	8001420 <__aeabi_dadd+0x144>
 8001326:	464a      	mov	r2, r9
 8001328:	2a00      	cmp	r2, #0
 800132a:	d100      	bne.n	800132e <__aeabi_dadd+0x52>
 800132c:	e0b8      	b.n	80014a0 <__aeabi_dadd+0x1c4>
 800132e:	4ac5      	ldr	r2, [pc, #788]	; (8001644 <__aeabi_dadd+0x368>)
 8001330:	4296      	cmp	r6, r2
 8001332:	d100      	bne.n	8001336 <__aeabi_dadd+0x5a>
 8001334:	e11c      	b.n	8001570 <__aeabi_dadd+0x294>
 8001336:	2280      	movs	r2, #128	; 0x80
 8001338:	003c      	movs	r4, r7
 800133a:	0412      	lsls	r2, r2, #16
 800133c:	4314      	orrs	r4, r2
 800133e:	46a0      	mov	r8, r4
 8001340:	4662      	mov	r2, ip
 8001342:	2a38      	cmp	r2, #56	; 0x38
 8001344:	dd00      	ble.n	8001348 <__aeabi_dadd+0x6c>
 8001346:	e161      	b.n	800160c <__aeabi_dadd+0x330>
 8001348:	2a1f      	cmp	r2, #31
 800134a:	dd00      	ble.n	800134e <__aeabi_dadd+0x72>
 800134c:	e1cc      	b.n	80016e8 <__aeabi_dadd+0x40c>
 800134e:	4664      	mov	r4, ip
 8001350:	2220      	movs	r2, #32
 8001352:	1b12      	subs	r2, r2, r4
 8001354:	4644      	mov	r4, r8
 8001356:	4094      	lsls	r4, r2
 8001358:	000f      	movs	r7, r1
 800135a:	46a1      	mov	r9, r4
 800135c:	4664      	mov	r4, ip
 800135e:	4091      	lsls	r1, r2
 8001360:	40e7      	lsrs	r7, r4
 8001362:	464c      	mov	r4, r9
 8001364:	1e4a      	subs	r2, r1, #1
 8001366:	4191      	sbcs	r1, r2
 8001368:	433c      	orrs	r4, r7
 800136a:	4642      	mov	r2, r8
 800136c:	4321      	orrs	r1, r4
 800136e:	4664      	mov	r4, ip
 8001370:	40e2      	lsrs	r2, r4
 8001372:	1a80      	subs	r0, r0, r2
 8001374:	1a5c      	subs	r4, r3, r1
 8001376:	42a3      	cmp	r3, r4
 8001378:	419b      	sbcs	r3, r3
 800137a:	425f      	negs	r7, r3
 800137c:	1bc7      	subs	r7, r0, r7
 800137e:	023b      	lsls	r3, r7, #8
 8001380:	d400      	bmi.n	8001384 <__aeabi_dadd+0xa8>
 8001382:	e0d0      	b.n	8001526 <__aeabi_dadd+0x24a>
 8001384:	027f      	lsls	r7, r7, #9
 8001386:	0a7f      	lsrs	r7, r7, #9
 8001388:	2f00      	cmp	r7, #0
 800138a:	d100      	bne.n	800138e <__aeabi_dadd+0xb2>
 800138c:	e0ff      	b.n	800158e <__aeabi_dadd+0x2b2>
 800138e:	0038      	movs	r0, r7
 8001390:	f001 fe5a 	bl	8003048 <__clzsi2>
 8001394:	0001      	movs	r1, r0
 8001396:	3908      	subs	r1, #8
 8001398:	2320      	movs	r3, #32
 800139a:	0022      	movs	r2, r4
 800139c:	1a5b      	subs	r3, r3, r1
 800139e:	408f      	lsls	r7, r1
 80013a0:	40da      	lsrs	r2, r3
 80013a2:	408c      	lsls	r4, r1
 80013a4:	4317      	orrs	r7, r2
 80013a6:	42b1      	cmp	r1, r6
 80013a8:	da00      	bge.n	80013ac <__aeabi_dadd+0xd0>
 80013aa:	e0ff      	b.n	80015ac <__aeabi_dadd+0x2d0>
 80013ac:	1b89      	subs	r1, r1, r6
 80013ae:	1c4b      	adds	r3, r1, #1
 80013b0:	2b1f      	cmp	r3, #31
 80013b2:	dd00      	ble.n	80013b6 <__aeabi_dadd+0xda>
 80013b4:	e0a8      	b.n	8001508 <__aeabi_dadd+0x22c>
 80013b6:	2220      	movs	r2, #32
 80013b8:	0039      	movs	r1, r7
 80013ba:	1ad2      	subs	r2, r2, r3
 80013bc:	0020      	movs	r0, r4
 80013be:	4094      	lsls	r4, r2
 80013c0:	4091      	lsls	r1, r2
 80013c2:	40d8      	lsrs	r0, r3
 80013c4:	1e62      	subs	r2, r4, #1
 80013c6:	4194      	sbcs	r4, r2
 80013c8:	40df      	lsrs	r7, r3
 80013ca:	2600      	movs	r6, #0
 80013cc:	4301      	orrs	r1, r0
 80013ce:	430c      	orrs	r4, r1
 80013d0:	0763      	lsls	r3, r4, #29
 80013d2:	d009      	beq.n	80013e8 <__aeabi_dadd+0x10c>
 80013d4:	230f      	movs	r3, #15
 80013d6:	4023      	ands	r3, r4
 80013d8:	2b04      	cmp	r3, #4
 80013da:	d005      	beq.n	80013e8 <__aeabi_dadd+0x10c>
 80013dc:	1d23      	adds	r3, r4, #4
 80013de:	42a3      	cmp	r3, r4
 80013e0:	41a4      	sbcs	r4, r4
 80013e2:	4264      	negs	r4, r4
 80013e4:	193f      	adds	r7, r7, r4
 80013e6:	001c      	movs	r4, r3
 80013e8:	023b      	lsls	r3, r7, #8
 80013ea:	d400      	bmi.n	80013ee <__aeabi_dadd+0x112>
 80013ec:	e09e      	b.n	800152c <__aeabi_dadd+0x250>
 80013ee:	4b95      	ldr	r3, [pc, #596]	; (8001644 <__aeabi_dadd+0x368>)
 80013f0:	3601      	adds	r6, #1
 80013f2:	429e      	cmp	r6, r3
 80013f4:	d100      	bne.n	80013f8 <__aeabi_dadd+0x11c>
 80013f6:	e0b7      	b.n	8001568 <__aeabi_dadd+0x28c>
 80013f8:	4a93      	ldr	r2, [pc, #588]	; (8001648 <__aeabi_dadd+0x36c>)
 80013fa:	08e4      	lsrs	r4, r4, #3
 80013fc:	4017      	ands	r7, r2
 80013fe:	077b      	lsls	r3, r7, #29
 8001400:	0571      	lsls	r1, r6, #21
 8001402:	027f      	lsls	r7, r7, #9
 8001404:	4323      	orrs	r3, r4
 8001406:	0b3f      	lsrs	r7, r7, #12
 8001408:	0d4a      	lsrs	r2, r1, #21
 800140a:	0512      	lsls	r2, r2, #20
 800140c:	433a      	orrs	r2, r7
 800140e:	07ed      	lsls	r5, r5, #31
 8001410:	432a      	orrs	r2, r5
 8001412:	0018      	movs	r0, r3
 8001414:	0011      	movs	r1, r2
 8001416:	bce0      	pop	{r5, r6, r7}
 8001418:	46ba      	mov	sl, r7
 800141a:	46b1      	mov	r9, r6
 800141c:	46a8      	mov	r8, r5
 800141e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001420:	2c00      	cmp	r4, #0
 8001422:	d04b      	beq.n	80014bc <__aeabi_dadd+0x1e0>
 8001424:	464c      	mov	r4, r9
 8001426:	1ba4      	subs	r4, r4, r6
 8001428:	46a4      	mov	ip, r4
 800142a:	2e00      	cmp	r6, #0
 800142c:	d000      	beq.n	8001430 <__aeabi_dadd+0x154>
 800142e:	e123      	b.n	8001678 <__aeabi_dadd+0x39c>
 8001430:	0004      	movs	r4, r0
 8001432:	431c      	orrs	r4, r3
 8001434:	d100      	bne.n	8001438 <__aeabi_dadd+0x15c>
 8001436:	e1af      	b.n	8001798 <__aeabi_dadd+0x4bc>
 8001438:	4662      	mov	r2, ip
 800143a:	1e54      	subs	r4, r2, #1
 800143c:	2a01      	cmp	r2, #1
 800143e:	d100      	bne.n	8001442 <__aeabi_dadd+0x166>
 8001440:	e215      	b.n	800186e <__aeabi_dadd+0x592>
 8001442:	4d80      	ldr	r5, [pc, #512]	; (8001644 <__aeabi_dadd+0x368>)
 8001444:	45ac      	cmp	ip, r5
 8001446:	d100      	bne.n	800144a <__aeabi_dadd+0x16e>
 8001448:	e1c8      	b.n	80017dc <__aeabi_dadd+0x500>
 800144a:	46a4      	mov	ip, r4
 800144c:	e11b      	b.n	8001686 <__aeabi_dadd+0x3aa>
 800144e:	464a      	mov	r2, r9
 8001450:	1ab2      	subs	r2, r6, r2
 8001452:	4694      	mov	ip, r2
 8001454:	2a00      	cmp	r2, #0
 8001456:	dc00      	bgt.n	800145a <__aeabi_dadd+0x17e>
 8001458:	e0ac      	b.n	80015b4 <__aeabi_dadd+0x2d8>
 800145a:	464a      	mov	r2, r9
 800145c:	2a00      	cmp	r2, #0
 800145e:	d043      	beq.n	80014e8 <__aeabi_dadd+0x20c>
 8001460:	4a78      	ldr	r2, [pc, #480]	; (8001644 <__aeabi_dadd+0x368>)
 8001462:	4296      	cmp	r6, r2
 8001464:	d100      	bne.n	8001468 <__aeabi_dadd+0x18c>
 8001466:	e1af      	b.n	80017c8 <__aeabi_dadd+0x4ec>
 8001468:	2280      	movs	r2, #128	; 0x80
 800146a:	003c      	movs	r4, r7
 800146c:	0412      	lsls	r2, r2, #16
 800146e:	4314      	orrs	r4, r2
 8001470:	46a0      	mov	r8, r4
 8001472:	4662      	mov	r2, ip
 8001474:	2a38      	cmp	r2, #56	; 0x38
 8001476:	dc67      	bgt.n	8001548 <__aeabi_dadd+0x26c>
 8001478:	2a1f      	cmp	r2, #31
 800147a:	dc00      	bgt.n	800147e <__aeabi_dadd+0x1a2>
 800147c:	e15f      	b.n	800173e <__aeabi_dadd+0x462>
 800147e:	4647      	mov	r7, r8
 8001480:	3a20      	subs	r2, #32
 8001482:	40d7      	lsrs	r7, r2
 8001484:	4662      	mov	r2, ip
 8001486:	2a20      	cmp	r2, #32
 8001488:	d005      	beq.n	8001496 <__aeabi_dadd+0x1ba>
 800148a:	4664      	mov	r4, ip
 800148c:	2240      	movs	r2, #64	; 0x40
 800148e:	1b12      	subs	r2, r2, r4
 8001490:	4644      	mov	r4, r8
 8001492:	4094      	lsls	r4, r2
 8001494:	4321      	orrs	r1, r4
 8001496:	1e4a      	subs	r2, r1, #1
 8001498:	4191      	sbcs	r1, r2
 800149a:	000c      	movs	r4, r1
 800149c:	433c      	orrs	r4, r7
 800149e:	e057      	b.n	8001550 <__aeabi_dadd+0x274>
 80014a0:	003a      	movs	r2, r7
 80014a2:	430a      	orrs	r2, r1
 80014a4:	d100      	bne.n	80014a8 <__aeabi_dadd+0x1cc>
 80014a6:	e105      	b.n	80016b4 <__aeabi_dadd+0x3d8>
 80014a8:	0022      	movs	r2, r4
 80014aa:	3a01      	subs	r2, #1
 80014ac:	2c01      	cmp	r4, #1
 80014ae:	d100      	bne.n	80014b2 <__aeabi_dadd+0x1d6>
 80014b0:	e182      	b.n	80017b8 <__aeabi_dadd+0x4dc>
 80014b2:	4c64      	ldr	r4, [pc, #400]	; (8001644 <__aeabi_dadd+0x368>)
 80014b4:	45a4      	cmp	ip, r4
 80014b6:	d05b      	beq.n	8001570 <__aeabi_dadd+0x294>
 80014b8:	4694      	mov	ip, r2
 80014ba:	e741      	b.n	8001340 <__aeabi_dadd+0x64>
 80014bc:	4c63      	ldr	r4, [pc, #396]	; (800164c <__aeabi_dadd+0x370>)
 80014be:	1c77      	adds	r7, r6, #1
 80014c0:	4227      	tst	r7, r4
 80014c2:	d000      	beq.n	80014c6 <__aeabi_dadd+0x1ea>
 80014c4:	e0c4      	b.n	8001650 <__aeabi_dadd+0x374>
 80014c6:	0004      	movs	r4, r0
 80014c8:	431c      	orrs	r4, r3
 80014ca:	2e00      	cmp	r6, #0
 80014cc:	d000      	beq.n	80014d0 <__aeabi_dadd+0x1f4>
 80014ce:	e169      	b.n	80017a4 <__aeabi_dadd+0x4c8>
 80014d0:	2c00      	cmp	r4, #0
 80014d2:	d100      	bne.n	80014d6 <__aeabi_dadd+0x1fa>
 80014d4:	e1bf      	b.n	8001856 <__aeabi_dadd+0x57a>
 80014d6:	4644      	mov	r4, r8
 80014d8:	430c      	orrs	r4, r1
 80014da:	d000      	beq.n	80014de <__aeabi_dadd+0x202>
 80014dc:	e1d0      	b.n	8001880 <__aeabi_dadd+0x5a4>
 80014de:	0742      	lsls	r2, r0, #29
 80014e0:	08db      	lsrs	r3, r3, #3
 80014e2:	4313      	orrs	r3, r2
 80014e4:	08c0      	lsrs	r0, r0, #3
 80014e6:	e029      	b.n	800153c <__aeabi_dadd+0x260>
 80014e8:	003a      	movs	r2, r7
 80014ea:	430a      	orrs	r2, r1
 80014ec:	d100      	bne.n	80014f0 <__aeabi_dadd+0x214>
 80014ee:	e170      	b.n	80017d2 <__aeabi_dadd+0x4f6>
 80014f0:	4662      	mov	r2, ip
 80014f2:	4664      	mov	r4, ip
 80014f4:	3a01      	subs	r2, #1
 80014f6:	2c01      	cmp	r4, #1
 80014f8:	d100      	bne.n	80014fc <__aeabi_dadd+0x220>
 80014fa:	e0e0      	b.n	80016be <__aeabi_dadd+0x3e2>
 80014fc:	4c51      	ldr	r4, [pc, #324]	; (8001644 <__aeabi_dadd+0x368>)
 80014fe:	45a4      	cmp	ip, r4
 8001500:	d100      	bne.n	8001504 <__aeabi_dadd+0x228>
 8001502:	e161      	b.n	80017c8 <__aeabi_dadd+0x4ec>
 8001504:	4694      	mov	ip, r2
 8001506:	e7b4      	b.n	8001472 <__aeabi_dadd+0x196>
 8001508:	003a      	movs	r2, r7
 800150a:	391f      	subs	r1, #31
 800150c:	40ca      	lsrs	r2, r1
 800150e:	0011      	movs	r1, r2
 8001510:	2b20      	cmp	r3, #32
 8001512:	d003      	beq.n	800151c <__aeabi_dadd+0x240>
 8001514:	2240      	movs	r2, #64	; 0x40
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	409f      	lsls	r7, r3
 800151a:	433c      	orrs	r4, r7
 800151c:	1e63      	subs	r3, r4, #1
 800151e:	419c      	sbcs	r4, r3
 8001520:	2700      	movs	r7, #0
 8001522:	2600      	movs	r6, #0
 8001524:	430c      	orrs	r4, r1
 8001526:	0763      	lsls	r3, r4, #29
 8001528:	d000      	beq.n	800152c <__aeabi_dadd+0x250>
 800152a:	e753      	b.n	80013d4 <__aeabi_dadd+0xf8>
 800152c:	46b4      	mov	ip, r6
 800152e:	08e4      	lsrs	r4, r4, #3
 8001530:	077b      	lsls	r3, r7, #29
 8001532:	4323      	orrs	r3, r4
 8001534:	08f8      	lsrs	r0, r7, #3
 8001536:	4a43      	ldr	r2, [pc, #268]	; (8001644 <__aeabi_dadd+0x368>)
 8001538:	4594      	cmp	ip, r2
 800153a:	d01d      	beq.n	8001578 <__aeabi_dadd+0x29c>
 800153c:	4662      	mov	r2, ip
 800153e:	0307      	lsls	r7, r0, #12
 8001540:	0552      	lsls	r2, r2, #21
 8001542:	0b3f      	lsrs	r7, r7, #12
 8001544:	0d52      	lsrs	r2, r2, #21
 8001546:	e760      	b.n	800140a <__aeabi_dadd+0x12e>
 8001548:	4644      	mov	r4, r8
 800154a:	430c      	orrs	r4, r1
 800154c:	1e62      	subs	r2, r4, #1
 800154e:	4194      	sbcs	r4, r2
 8001550:	18e4      	adds	r4, r4, r3
 8001552:	429c      	cmp	r4, r3
 8001554:	419b      	sbcs	r3, r3
 8001556:	425f      	negs	r7, r3
 8001558:	183f      	adds	r7, r7, r0
 800155a:	023b      	lsls	r3, r7, #8
 800155c:	d5e3      	bpl.n	8001526 <__aeabi_dadd+0x24a>
 800155e:	4b39      	ldr	r3, [pc, #228]	; (8001644 <__aeabi_dadd+0x368>)
 8001560:	3601      	adds	r6, #1
 8001562:	429e      	cmp	r6, r3
 8001564:	d000      	beq.n	8001568 <__aeabi_dadd+0x28c>
 8001566:	e0b5      	b.n	80016d4 <__aeabi_dadd+0x3f8>
 8001568:	0032      	movs	r2, r6
 800156a:	2700      	movs	r7, #0
 800156c:	2300      	movs	r3, #0
 800156e:	e74c      	b.n	800140a <__aeabi_dadd+0x12e>
 8001570:	0742      	lsls	r2, r0, #29
 8001572:	08db      	lsrs	r3, r3, #3
 8001574:	4313      	orrs	r3, r2
 8001576:	08c0      	lsrs	r0, r0, #3
 8001578:	001a      	movs	r2, r3
 800157a:	4302      	orrs	r2, r0
 800157c:	d100      	bne.n	8001580 <__aeabi_dadd+0x2a4>
 800157e:	e1e1      	b.n	8001944 <__aeabi_dadd+0x668>
 8001580:	2780      	movs	r7, #128	; 0x80
 8001582:	033f      	lsls	r7, r7, #12
 8001584:	4307      	orrs	r7, r0
 8001586:	033f      	lsls	r7, r7, #12
 8001588:	4a2e      	ldr	r2, [pc, #184]	; (8001644 <__aeabi_dadd+0x368>)
 800158a:	0b3f      	lsrs	r7, r7, #12
 800158c:	e73d      	b.n	800140a <__aeabi_dadd+0x12e>
 800158e:	0020      	movs	r0, r4
 8001590:	f001 fd5a 	bl	8003048 <__clzsi2>
 8001594:	0001      	movs	r1, r0
 8001596:	3118      	adds	r1, #24
 8001598:	291f      	cmp	r1, #31
 800159a:	dc00      	bgt.n	800159e <__aeabi_dadd+0x2c2>
 800159c:	e6fc      	b.n	8001398 <__aeabi_dadd+0xbc>
 800159e:	3808      	subs	r0, #8
 80015a0:	4084      	lsls	r4, r0
 80015a2:	0027      	movs	r7, r4
 80015a4:	2400      	movs	r4, #0
 80015a6:	42b1      	cmp	r1, r6
 80015a8:	db00      	blt.n	80015ac <__aeabi_dadd+0x2d0>
 80015aa:	e6ff      	b.n	80013ac <__aeabi_dadd+0xd0>
 80015ac:	4a26      	ldr	r2, [pc, #152]	; (8001648 <__aeabi_dadd+0x36c>)
 80015ae:	1a76      	subs	r6, r6, r1
 80015b0:	4017      	ands	r7, r2
 80015b2:	e70d      	b.n	80013d0 <__aeabi_dadd+0xf4>
 80015b4:	2a00      	cmp	r2, #0
 80015b6:	d02f      	beq.n	8001618 <__aeabi_dadd+0x33c>
 80015b8:	464a      	mov	r2, r9
 80015ba:	1b92      	subs	r2, r2, r6
 80015bc:	4694      	mov	ip, r2
 80015be:	2e00      	cmp	r6, #0
 80015c0:	d100      	bne.n	80015c4 <__aeabi_dadd+0x2e8>
 80015c2:	e0ad      	b.n	8001720 <__aeabi_dadd+0x444>
 80015c4:	4a1f      	ldr	r2, [pc, #124]	; (8001644 <__aeabi_dadd+0x368>)
 80015c6:	4591      	cmp	r9, r2
 80015c8:	d100      	bne.n	80015cc <__aeabi_dadd+0x2f0>
 80015ca:	e10f      	b.n	80017ec <__aeabi_dadd+0x510>
 80015cc:	2280      	movs	r2, #128	; 0x80
 80015ce:	0412      	lsls	r2, r2, #16
 80015d0:	4310      	orrs	r0, r2
 80015d2:	4662      	mov	r2, ip
 80015d4:	2a38      	cmp	r2, #56	; 0x38
 80015d6:	dd00      	ble.n	80015da <__aeabi_dadd+0x2fe>
 80015d8:	e10f      	b.n	80017fa <__aeabi_dadd+0x51e>
 80015da:	2a1f      	cmp	r2, #31
 80015dc:	dd00      	ble.n	80015e0 <__aeabi_dadd+0x304>
 80015de:	e180      	b.n	80018e2 <__aeabi_dadd+0x606>
 80015e0:	4664      	mov	r4, ip
 80015e2:	2220      	movs	r2, #32
 80015e4:	001e      	movs	r6, r3
 80015e6:	1b12      	subs	r2, r2, r4
 80015e8:	4667      	mov	r7, ip
 80015ea:	0004      	movs	r4, r0
 80015ec:	4093      	lsls	r3, r2
 80015ee:	4094      	lsls	r4, r2
 80015f0:	40fe      	lsrs	r6, r7
 80015f2:	1e5a      	subs	r2, r3, #1
 80015f4:	4193      	sbcs	r3, r2
 80015f6:	40f8      	lsrs	r0, r7
 80015f8:	4334      	orrs	r4, r6
 80015fa:	431c      	orrs	r4, r3
 80015fc:	4480      	add	r8, r0
 80015fe:	1864      	adds	r4, r4, r1
 8001600:	428c      	cmp	r4, r1
 8001602:	41bf      	sbcs	r7, r7
 8001604:	427f      	negs	r7, r7
 8001606:	464e      	mov	r6, r9
 8001608:	4447      	add	r7, r8
 800160a:	e7a6      	b.n	800155a <__aeabi_dadd+0x27e>
 800160c:	4642      	mov	r2, r8
 800160e:	430a      	orrs	r2, r1
 8001610:	0011      	movs	r1, r2
 8001612:	1e4a      	subs	r2, r1, #1
 8001614:	4191      	sbcs	r1, r2
 8001616:	e6ad      	b.n	8001374 <__aeabi_dadd+0x98>
 8001618:	4c0c      	ldr	r4, [pc, #48]	; (800164c <__aeabi_dadd+0x370>)
 800161a:	1c72      	adds	r2, r6, #1
 800161c:	4222      	tst	r2, r4
 800161e:	d000      	beq.n	8001622 <__aeabi_dadd+0x346>
 8001620:	e0a1      	b.n	8001766 <__aeabi_dadd+0x48a>
 8001622:	0002      	movs	r2, r0
 8001624:	431a      	orrs	r2, r3
 8001626:	2e00      	cmp	r6, #0
 8001628:	d000      	beq.n	800162c <__aeabi_dadd+0x350>
 800162a:	e0fa      	b.n	8001822 <__aeabi_dadd+0x546>
 800162c:	2a00      	cmp	r2, #0
 800162e:	d100      	bne.n	8001632 <__aeabi_dadd+0x356>
 8001630:	e145      	b.n	80018be <__aeabi_dadd+0x5e2>
 8001632:	003a      	movs	r2, r7
 8001634:	430a      	orrs	r2, r1
 8001636:	d000      	beq.n	800163a <__aeabi_dadd+0x35e>
 8001638:	e146      	b.n	80018c8 <__aeabi_dadd+0x5ec>
 800163a:	0742      	lsls	r2, r0, #29
 800163c:	08db      	lsrs	r3, r3, #3
 800163e:	4313      	orrs	r3, r2
 8001640:	08c0      	lsrs	r0, r0, #3
 8001642:	e77b      	b.n	800153c <__aeabi_dadd+0x260>
 8001644:	000007ff 	.word	0x000007ff
 8001648:	ff7fffff 	.word	0xff7fffff
 800164c:	000007fe 	.word	0x000007fe
 8001650:	4647      	mov	r7, r8
 8001652:	1a5c      	subs	r4, r3, r1
 8001654:	1bc2      	subs	r2, r0, r7
 8001656:	42a3      	cmp	r3, r4
 8001658:	41bf      	sbcs	r7, r7
 800165a:	427f      	negs	r7, r7
 800165c:	46b9      	mov	r9, r7
 800165e:	0017      	movs	r7, r2
 8001660:	464a      	mov	r2, r9
 8001662:	1abf      	subs	r7, r7, r2
 8001664:	023a      	lsls	r2, r7, #8
 8001666:	d500      	bpl.n	800166a <__aeabi_dadd+0x38e>
 8001668:	e08d      	b.n	8001786 <__aeabi_dadd+0x4aa>
 800166a:	0023      	movs	r3, r4
 800166c:	433b      	orrs	r3, r7
 800166e:	d000      	beq.n	8001672 <__aeabi_dadd+0x396>
 8001670:	e68a      	b.n	8001388 <__aeabi_dadd+0xac>
 8001672:	2000      	movs	r0, #0
 8001674:	2500      	movs	r5, #0
 8001676:	e761      	b.n	800153c <__aeabi_dadd+0x260>
 8001678:	4cb4      	ldr	r4, [pc, #720]	; (800194c <__aeabi_dadd+0x670>)
 800167a:	45a1      	cmp	r9, r4
 800167c:	d100      	bne.n	8001680 <__aeabi_dadd+0x3a4>
 800167e:	e0ad      	b.n	80017dc <__aeabi_dadd+0x500>
 8001680:	2480      	movs	r4, #128	; 0x80
 8001682:	0424      	lsls	r4, r4, #16
 8001684:	4320      	orrs	r0, r4
 8001686:	4664      	mov	r4, ip
 8001688:	2c38      	cmp	r4, #56	; 0x38
 800168a:	dc3d      	bgt.n	8001708 <__aeabi_dadd+0x42c>
 800168c:	4662      	mov	r2, ip
 800168e:	2c1f      	cmp	r4, #31
 8001690:	dd00      	ble.n	8001694 <__aeabi_dadd+0x3b8>
 8001692:	e0b7      	b.n	8001804 <__aeabi_dadd+0x528>
 8001694:	2520      	movs	r5, #32
 8001696:	001e      	movs	r6, r3
 8001698:	1b2d      	subs	r5, r5, r4
 800169a:	0004      	movs	r4, r0
 800169c:	40ab      	lsls	r3, r5
 800169e:	40ac      	lsls	r4, r5
 80016a0:	40d6      	lsrs	r6, r2
 80016a2:	40d0      	lsrs	r0, r2
 80016a4:	4642      	mov	r2, r8
 80016a6:	1e5d      	subs	r5, r3, #1
 80016a8:	41ab      	sbcs	r3, r5
 80016aa:	4334      	orrs	r4, r6
 80016ac:	1a12      	subs	r2, r2, r0
 80016ae:	4690      	mov	r8, r2
 80016b0:	4323      	orrs	r3, r4
 80016b2:	e02c      	b.n	800170e <__aeabi_dadd+0x432>
 80016b4:	0742      	lsls	r2, r0, #29
 80016b6:	08db      	lsrs	r3, r3, #3
 80016b8:	4313      	orrs	r3, r2
 80016ba:	08c0      	lsrs	r0, r0, #3
 80016bc:	e73b      	b.n	8001536 <__aeabi_dadd+0x25a>
 80016be:	185c      	adds	r4, r3, r1
 80016c0:	429c      	cmp	r4, r3
 80016c2:	419b      	sbcs	r3, r3
 80016c4:	4440      	add	r0, r8
 80016c6:	425b      	negs	r3, r3
 80016c8:	18c7      	adds	r7, r0, r3
 80016ca:	2601      	movs	r6, #1
 80016cc:	023b      	lsls	r3, r7, #8
 80016ce:	d400      	bmi.n	80016d2 <__aeabi_dadd+0x3f6>
 80016d0:	e729      	b.n	8001526 <__aeabi_dadd+0x24a>
 80016d2:	2602      	movs	r6, #2
 80016d4:	4a9e      	ldr	r2, [pc, #632]	; (8001950 <__aeabi_dadd+0x674>)
 80016d6:	0863      	lsrs	r3, r4, #1
 80016d8:	4017      	ands	r7, r2
 80016da:	2201      	movs	r2, #1
 80016dc:	4014      	ands	r4, r2
 80016de:	431c      	orrs	r4, r3
 80016e0:	07fb      	lsls	r3, r7, #31
 80016e2:	431c      	orrs	r4, r3
 80016e4:	087f      	lsrs	r7, r7, #1
 80016e6:	e673      	b.n	80013d0 <__aeabi_dadd+0xf4>
 80016e8:	4644      	mov	r4, r8
 80016ea:	3a20      	subs	r2, #32
 80016ec:	40d4      	lsrs	r4, r2
 80016ee:	4662      	mov	r2, ip
 80016f0:	2a20      	cmp	r2, #32
 80016f2:	d005      	beq.n	8001700 <__aeabi_dadd+0x424>
 80016f4:	4667      	mov	r7, ip
 80016f6:	2240      	movs	r2, #64	; 0x40
 80016f8:	1bd2      	subs	r2, r2, r7
 80016fa:	4647      	mov	r7, r8
 80016fc:	4097      	lsls	r7, r2
 80016fe:	4339      	orrs	r1, r7
 8001700:	1e4a      	subs	r2, r1, #1
 8001702:	4191      	sbcs	r1, r2
 8001704:	4321      	orrs	r1, r4
 8001706:	e635      	b.n	8001374 <__aeabi_dadd+0x98>
 8001708:	4303      	orrs	r3, r0
 800170a:	1e58      	subs	r0, r3, #1
 800170c:	4183      	sbcs	r3, r0
 800170e:	1acc      	subs	r4, r1, r3
 8001710:	42a1      	cmp	r1, r4
 8001712:	41bf      	sbcs	r7, r7
 8001714:	4643      	mov	r3, r8
 8001716:	427f      	negs	r7, r7
 8001718:	4655      	mov	r5, sl
 800171a:	464e      	mov	r6, r9
 800171c:	1bdf      	subs	r7, r3, r7
 800171e:	e62e      	b.n	800137e <__aeabi_dadd+0xa2>
 8001720:	0002      	movs	r2, r0
 8001722:	431a      	orrs	r2, r3
 8001724:	d100      	bne.n	8001728 <__aeabi_dadd+0x44c>
 8001726:	e0bd      	b.n	80018a4 <__aeabi_dadd+0x5c8>
 8001728:	4662      	mov	r2, ip
 800172a:	4664      	mov	r4, ip
 800172c:	3a01      	subs	r2, #1
 800172e:	2c01      	cmp	r4, #1
 8001730:	d100      	bne.n	8001734 <__aeabi_dadd+0x458>
 8001732:	e0e5      	b.n	8001900 <__aeabi_dadd+0x624>
 8001734:	4c85      	ldr	r4, [pc, #532]	; (800194c <__aeabi_dadd+0x670>)
 8001736:	45a4      	cmp	ip, r4
 8001738:	d058      	beq.n	80017ec <__aeabi_dadd+0x510>
 800173a:	4694      	mov	ip, r2
 800173c:	e749      	b.n	80015d2 <__aeabi_dadd+0x2f6>
 800173e:	4664      	mov	r4, ip
 8001740:	2220      	movs	r2, #32
 8001742:	1b12      	subs	r2, r2, r4
 8001744:	4644      	mov	r4, r8
 8001746:	4094      	lsls	r4, r2
 8001748:	000f      	movs	r7, r1
 800174a:	46a1      	mov	r9, r4
 800174c:	4664      	mov	r4, ip
 800174e:	4091      	lsls	r1, r2
 8001750:	40e7      	lsrs	r7, r4
 8001752:	464c      	mov	r4, r9
 8001754:	1e4a      	subs	r2, r1, #1
 8001756:	4191      	sbcs	r1, r2
 8001758:	433c      	orrs	r4, r7
 800175a:	4642      	mov	r2, r8
 800175c:	430c      	orrs	r4, r1
 800175e:	4661      	mov	r1, ip
 8001760:	40ca      	lsrs	r2, r1
 8001762:	1880      	adds	r0, r0, r2
 8001764:	e6f4      	b.n	8001550 <__aeabi_dadd+0x274>
 8001766:	4c79      	ldr	r4, [pc, #484]	; (800194c <__aeabi_dadd+0x670>)
 8001768:	42a2      	cmp	r2, r4
 800176a:	d100      	bne.n	800176e <__aeabi_dadd+0x492>
 800176c:	e6fd      	b.n	800156a <__aeabi_dadd+0x28e>
 800176e:	1859      	adds	r1, r3, r1
 8001770:	4299      	cmp	r1, r3
 8001772:	419b      	sbcs	r3, r3
 8001774:	4440      	add	r0, r8
 8001776:	425f      	negs	r7, r3
 8001778:	19c7      	adds	r7, r0, r7
 800177a:	07fc      	lsls	r4, r7, #31
 800177c:	0849      	lsrs	r1, r1, #1
 800177e:	0016      	movs	r6, r2
 8001780:	430c      	orrs	r4, r1
 8001782:	087f      	lsrs	r7, r7, #1
 8001784:	e6cf      	b.n	8001526 <__aeabi_dadd+0x24a>
 8001786:	1acc      	subs	r4, r1, r3
 8001788:	42a1      	cmp	r1, r4
 800178a:	41bf      	sbcs	r7, r7
 800178c:	4643      	mov	r3, r8
 800178e:	427f      	negs	r7, r7
 8001790:	1a18      	subs	r0, r3, r0
 8001792:	4655      	mov	r5, sl
 8001794:	1bc7      	subs	r7, r0, r7
 8001796:	e5f7      	b.n	8001388 <__aeabi_dadd+0xac>
 8001798:	08c9      	lsrs	r1, r1, #3
 800179a:	077b      	lsls	r3, r7, #29
 800179c:	4655      	mov	r5, sl
 800179e:	430b      	orrs	r3, r1
 80017a0:	08f8      	lsrs	r0, r7, #3
 80017a2:	e6c8      	b.n	8001536 <__aeabi_dadd+0x25a>
 80017a4:	2c00      	cmp	r4, #0
 80017a6:	d000      	beq.n	80017aa <__aeabi_dadd+0x4ce>
 80017a8:	e081      	b.n	80018ae <__aeabi_dadd+0x5d2>
 80017aa:	4643      	mov	r3, r8
 80017ac:	430b      	orrs	r3, r1
 80017ae:	d115      	bne.n	80017dc <__aeabi_dadd+0x500>
 80017b0:	2080      	movs	r0, #128	; 0x80
 80017b2:	2500      	movs	r5, #0
 80017b4:	0300      	lsls	r0, r0, #12
 80017b6:	e6e3      	b.n	8001580 <__aeabi_dadd+0x2a4>
 80017b8:	1a5c      	subs	r4, r3, r1
 80017ba:	42a3      	cmp	r3, r4
 80017bc:	419b      	sbcs	r3, r3
 80017be:	1bc7      	subs	r7, r0, r7
 80017c0:	425b      	negs	r3, r3
 80017c2:	2601      	movs	r6, #1
 80017c4:	1aff      	subs	r7, r7, r3
 80017c6:	e5da      	b.n	800137e <__aeabi_dadd+0xa2>
 80017c8:	0742      	lsls	r2, r0, #29
 80017ca:	08db      	lsrs	r3, r3, #3
 80017cc:	4313      	orrs	r3, r2
 80017ce:	08c0      	lsrs	r0, r0, #3
 80017d0:	e6d2      	b.n	8001578 <__aeabi_dadd+0x29c>
 80017d2:	0742      	lsls	r2, r0, #29
 80017d4:	08db      	lsrs	r3, r3, #3
 80017d6:	4313      	orrs	r3, r2
 80017d8:	08c0      	lsrs	r0, r0, #3
 80017da:	e6ac      	b.n	8001536 <__aeabi_dadd+0x25a>
 80017dc:	4643      	mov	r3, r8
 80017de:	4642      	mov	r2, r8
 80017e0:	08c9      	lsrs	r1, r1, #3
 80017e2:	075b      	lsls	r3, r3, #29
 80017e4:	4655      	mov	r5, sl
 80017e6:	430b      	orrs	r3, r1
 80017e8:	08d0      	lsrs	r0, r2, #3
 80017ea:	e6c5      	b.n	8001578 <__aeabi_dadd+0x29c>
 80017ec:	4643      	mov	r3, r8
 80017ee:	4642      	mov	r2, r8
 80017f0:	075b      	lsls	r3, r3, #29
 80017f2:	08c9      	lsrs	r1, r1, #3
 80017f4:	430b      	orrs	r3, r1
 80017f6:	08d0      	lsrs	r0, r2, #3
 80017f8:	e6be      	b.n	8001578 <__aeabi_dadd+0x29c>
 80017fa:	4303      	orrs	r3, r0
 80017fc:	001c      	movs	r4, r3
 80017fe:	1e63      	subs	r3, r4, #1
 8001800:	419c      	sbcs	r4, r3
 8001802:	e6fc      	b.n	80015fe <__aeabi_dadd+0x322>
 8001804:	0002      	movs	r2, r0
 8001806:	3c20      	subs	r4, #32
 8001808:	40e2      	lsrs	r2, r4
 800180a:	0014      	movs	r4, r2
 800180c:	4662      	mov	r2, ip
 800180e:	2a20      	cmp	r2, #32
 8001810:	d003      	beq.n	800181a <__aeabi_dadd+0x53e>
 8001812:	2540      	movs	r5, #64	; 0x40
 8001814:	1aad      	subs	r5, r5, r2
 8001816:	40a8      	lsls	r0, r5
 8001818:	4303      	orrs	r3, r0
 800181a:	1e58      	subs	r0, r3, #1
 800181c:	4183      	sbcs	r3, r0
 800181e:	4323      	orrs	r3, r4
 8001820:	e775      	b.n	800170e <__aeabi_dadd+0x432>
 8001822:	2a00      	cmp	r2, #0
 8001824:	d0e2      	beq.n	80017ec <__aeabi_dadd+0x510>
 8001826:	003a      	movs	r2, r7
 8001828:	430a      	orrs	r2, r1
 800182a:	d0cd      	beq.n	80017c8 <__aeabi_dadd+0x4ec>
 800182c:	0742      	lsls	r2, r0, #29
 800182e:	08db      	lsrs	r3, r3, #3
 8001830:	4313      	orrs	r3, r2
 8001832:	2280      	movs	r2, #128	; 0x80
 8001834:	08c0      	lsrs	r0, r0, #3
 8001836:	0312      	lsls	r2, r2, #12
 8001838:	4210      	tst	r0, r2
 800183a:	d006      	beq.n	800184a <__aeabi_dadd+0x56e>
 800183c:	08fc      	lsrs	r4, r7, #3
 800183e:	4214      	tst	r4, r2
 8001840:	d103      	bne.n	800184a <__aeabi_dadd+0x56e>
 8001842:	0020      	movs	r0, r4
 8001844:	08cb      	lsrs	r3, r1, #3
 8001846:	077a      	lsls	r2, r7, #29
 8001848:	4313      	orrs	r3, r2
 800184a:	0f5a      	lsrs	r2, r3, #29
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	0752      	lsls	r2, r2, #29
 8001850:	08db      	lsrs	r3, r3, #3
 8001852:	4313      	orrs	r3, r2
 8001854:	e690      	b.n	8001578 <__aeabi_dadd+0x29c>
 8001856:	4643      	mov	r3, r8
 8001858:	430b      	orrs	r3, r1
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x582>
 800185c:	e709      	b.n	8001672 <__aeabi_dadd+0x396>
 800185e:	4643      	mov	r3, r8
 8001860:	4642      	mov	r2, r8
 8001862:	08c9      	lsrs	r1, r1, #3
 8001864:	075b      	lsls	r3, r3, #29
 8001866:	4655      	mov	r5, sl
 8001868:	430b      	orrs	r3, r1
 800186a:	08d0      	lsrs	r0, r2, #3
 800186c:	e666      	b.n	800153c <__aeabi_dadd+0x260>
 800186e:	1acc      	subs	r4, r1, r3
 8001870:	42a1      	cmp	r1, r4
 8001872:	4189      	sbcs	r1, r1
 8001874:	1a3f      	subs	r7, r7, r0
 8001876:	4249      	negs	r1, r1
 8001878:	4655      	mov	r5, sl
 800187a:	2601      	movs	r6, #1
 800187c:	1a7f      	subs	r7, r7, r1
 800187e:	e57e      	b.n	800137e <__aeabi_dadd+0xa2>
 8001880:	4642      	mov	r2, r8
 8001882:	1a5c      	subs	r4, r3, r1
 8001884:	1a87      	subs	r7, r0, r2
 8001886:	42a3      	cmp	r3, r4
 8001888:	4192      	sbcs	r2, r2
 800188a:	4252      	negs	r2, r2
 800188c:	1abf      	subs	r7, r7, r2
 800188e:	023a      	lsls	r2, r7, #8
 8001890:	d53d      	bpl.n	800190e <__aeabi_dadd+0x632>
 8001892:	1acc      	subs	r4, r1, r3
 8001894:	42a1      	cmp	r1, r4
 8001896:	4189      	sbcs	r1, r1
 8001898:	4643      	mov	r3, r8
 800189a:	4249      	negs	r1, r1
 800189c:	1a1f      	subs	r7, r3, r0
 800189e:	4655      	mov	r5, sl
 80018a0:	1a7f      	subs	r7, r7, r1
 80018a2:	e595      	b.n	80013d0 <__aeabi_dadd+0xf4>
 80018a4:	077b      	lsls	r3, r7, #29
 80018a6:	08c9      	lsrs	r1, r1, #3
 80018a8:	430b      	orrs	r3, r1
 80018aa:	08f8      	lsrs	r0, r7, #3
 80018ac:	e643      	b.n	8001536 <__aeabi_dadd+0x25a>
 80018ae:	4644      	mov	r4, r8
 80018b0:	08db      	lsrs	r3, r3, #3
 80018b2:	430c      	orrs	r4, r1
 80018b4:	d130      	bne.n	8001918 <__aeabi_dadd+0x63c>
 80018b6:	0742      	lsls	r2, r0, #29
 80018b8:	4313      	orrs	r3, r2
 80018ba:	08c0      	lsrs	r0, r0, #3
 80018bc:	e65c      	b.n	8001578 <__aeabi_dadd+0x29c>
 80018be:	077b      	lsls	r3, r7, #29
 80018c0:	08c9      	lsrs	r1, r1, #3
 80018c2:	430b      	orrs	r3, r1
 80018c4:	08f8      	lsrs	r0, r7, #3
 80018c6:	e639      	b.n	800153c <__aeabi_dadd+0x260>
 80018c8:	185c      	adds	r4, r3, r1
 80018ca:	429c      	cmp	r4, r3
 80018cc:	419b      	sbcs	r3, r3
 80018ce:	4440      	add	r0, r8
 80018d0:	425b      	negs	r3, r3
 80018d2:	18c7      	adds	r7, r0, r3
 80018d4:	023b      	lsls	r3, r7, #8
 80018d6:	d400      	bmi.n	80018da <__aeabi_dadd+0x5fe>
 80018d8:	e625      	b.n	8001526 <__aeabi_dadd+0x24a>
 80018da:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <__aeabi_dadd+0x674>)
 80018dc:	2601      	movs	r6, #1
 80018de:	401f      	ands	r7, r3
 80018e0:	e621      	b.n	8001526 <__aeabi_dadd+0x24a>
 80018e2:	0004      	movs	r4, r0
 80018e4:	3a20      	subs	r2, #32
 80018e6:	40d4      	lsrs	r4, r2
 80018e8:	4662      	mov	r2, ip
 80018ea:	2a20      	cmp	r2, #32
 80018ec:	d004      	beq.n	80018f8 <__aeabi_dadd+0x61c>
 80018ee:	2240      	movs	r2, #64	; 0x40
 80018f0:	4666      	mov	r6, ip
 80018f2:	1b92      	subs	r2, r2, r6
 80018f4:	4090      	lsls	r0, r2
 80018f6:	4303      	orrs	r3, r0
 80018f8:	1e5a      	subs	r2, r3, #1
 80018fa:	4193      	sbcs	r3, r2
 80018fc:	431c      	orrs	r4, r3
 80018fe:	e67e      	b.n	80015fe <__aeabi_dadd+0x322>
 8001900:	185c      	adds	r4, r3, r1
 8001902:	428c      	cmp	r4, r1
 8001904:	4189      	sbcs	r1, r1
 8001906:	4440      	add	r0, r8
 8001908:	4249      	negs	r1, r1
 800190a:	1847      	adds	r7, r0, r1
 800190c:	e6dd      	b.n	80016ca <__aeabi_dadd+0x3ee>
 800190e:	0023      	movs	r3, r4
 8001910:	433b      	orrs	r3, r7
 8001912:	d100      	bne.n	8001916 <__aeabi_dadd+0x63a>
 8001914:	e6ad      	b.n	8001672 <__aeabi_dadd+0x396>
 8001916:	e606      	b.n	8001526 <__aeabi_dadd+0x24a>
 8001918:	0744      	lsls	r4, r0, #29
 800191a:	4323      	orrs	r3, r4
 800191c:	2480      	movs	r4, #128	; 0x80
 800191e:	08c0      	lsrs	r0, r0, #3
 8001920:	0324      	lsls	r4, r4, #12
 8001922:	4220      	tst	r0, r4
 8001924:	d008      	beq.n	8001938 <__aeabi_dadd+0x65c>
 8001926:	4642      	mov	r2, r8
 8001928:	08d6      	lsrs	r6, r2, #3
 800192a:	4226      	tst	r6, r4
 800192c:	d104      	bne.n	8001938 <__aeabi_dadd+0x65c>
 800192e:	4655      	mov	r5, sl
 8001930:	0030      	movs	r0, r6
 8001932:	08cb      	lsrs	r3, r1, #3
 8001934:	0751      	lsls	r1, r2, #29
 8001936:	430b      	orrs	r3, r1
 8001938:	0f5a      	lsrs	r2, r3, #29
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	08db      	lsrs	r3, r3, #3
 800193e:	0752      	lsls	r2, r2, #29
 8001940:	4313      	orrs	r3, r2
 8001942:	e619      	b.n	8001578 <__aeabi_dadd+0x29c>
 8001944:	2300      	movs	r3, #0
 8001946:	4a01      	ldr	r2, [pc, #4]	; (800194c <__aeabi_dadd+0x670>)
 8001948:	001f      	movs	r7, r3
 800194a:	e55e      	b.n	800140a <__aeabi_dadd+0x12e>
 800194c:	000007ff 	.word	0x000007ff
 8001950:	ff7fffff 	.word	0xff7fffff

08001954 <__aeabi_ddiv>:
 8001954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001956:	4657      	mov	r7, sl
 8001958:	464e      	mov	r6, r9
 800195a:	4645      	mov	r5, r8
 800195c:	46de      	mov	lr, fp
 800195e:	b5e0      	push	{r5, r6, r7, lr}
 8001960:	4681      	mov	r9, r0
 8001962:	0005      	movs	r5, r0
 8001964:	030c      	lsls	r4, r1, #12
 8001966:	0048      	lsls	r0, r1, #1
 8001968:	4692      	mov	sl, r2
 800196a:	001f      	movs	r7, r3
 800196c:	b085      	sub	sp, #20
 800196e:	0b24      	lsrs	r4, r4, #12
 8001970:	0d40      	lsrs	r0, r0, #21
 8001972:	0fce      	lsrs	r6, r1, #31
 8001974:	2800      	cmp	r0, #0
 8001976:	d100      	bne.n	800197a <__aeabi_ddiv+0x26>
 8001978:	e156      	b.n	8001c28 <__aeabi_ddiv+0x2d4>
 800197a:	4bd4      	ldr	r3, [pc, #848]	; (8001ccc <__aeabi_ddiv+0x378>)
 800197c:	4298      	cmp	r0, r3
 800197e:	d100      	bne.n	8001982 <__aeabi_ddiv+0x2e>
 8001980:	e172      	b.n	8001c68 <__aeabi_ddiv+0x314>
 8001982:	0f6b      	lsrs	r3, r5, #29
 8001984:	00e4      	lsls	r4, r4, #3
 8001986:	431c      	orrs	r4, r3
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	041b      	lsls	r3, r3, #16
 800198c:	4323      	orrs	r3, r4
 800198e:	4698      	mov	r8, r3
 8001990:	4bcf      	ldr	r3, [pc, #828]	; (8001cd0 <__aeabi_ddiv+0x37c>)
 8001992:	00ed      	lsls	r5, r5, #3
 8001994:	469b      	mov	fp, r3
 8001996:	2300      	movs	r3, #0
 8001998:	4699      	mov	r9, r3
 800199a:	4483      	add	fp, r0
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	033c      	lsls	r4, r7, #12
 80019a0:	007b      	lsls	r3, r7, #1
 80019a2:	4650      	mov	r0, sl
 80019a4:	0b24      	lsrs	r4, r4, #12
 80019a6:	0d5b      	lsrs	r3, r3, #21
 80019a8:	0fff      	lsrs	r7, r7, #31
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d100      	bne.n	80019b0 <__aeabi_ddiv+0x5c>
 80019ae:	e11f      	b.n	8001bf0 <__aeabi_ddiv+0x29c>
 80019b0:	4ac6      	ldr	r2, [pc, #792]	; (8001ccc <__aeabi_ddiv+0x378>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d100      	bne.n	80019b8 <__aeabi_ddiv+0x64>
 80019b6:	e162      	b.n	8001c7e <__aeabi_ddiv+0x32a>
 80019b8:	49c5      	ldr	r1, [pc, #788]	; (8001cd0 <__aeabi_ddiv+0x37c>)
 80019ba:	0f42      	lsrs	r2, r0, #29
 80019bc:	468c      	mov	ip, r1
 80019be:	00e4      	lsls	r4, r4, #3
 80019c0:	4659      	mov	r1, fp
 80019c2:	4314      	orrs	r4, r2
 80019c4:	2280      	movs	r2, #128	; 0x80
 80019c6:	4463      	add	r3, ip
 80019c8:	0412      	lsls	r2, r2, #16
 80019ca:	1acb      	subs	r3, r1, r3
 80019cc:	4314      	orrs	r4, r2
 80019ce:	469b      	mov	fp, r3
 80019d0:	00c2      	lsls	r2, r0, #3
 80019d2:	2000      	movs	r0, #0
 80019d4:	0033      	movs	r3, r6
 80019d6:	407b      	eors	r3, r7
 80019d8:	469a      	mov	sl, r3
 80019da:	464b      	mov	r3, r9
 80019dc:	2b0f      	cmp	r3, #15
 80019de:	d827      	bhi.n	8001a30 <__aeabi_ddiv+0xdc>
 80019e0:	49bc      	ldr	r1, [pc, #752]	; (8001cd4 <__aeabi_ddiv+0x380>)
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	58cb      	ldr	r3, [r1, r3]
 80019e6:	469f      	mov	pc, r3
 80019e8:	46b2      	mov	sl, r6
 80019ea:	9b00      	ldr	r3, [sp, #0]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d016      	beq.n	8001a1e <__aeabi_ddiv+0xca>
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	d100      	bne.n	80019f6 <__aeabi_ddiv+0xa2>
 80019f4:	e28e      	b.n	8001f14 <__aeabi_ddiv+0x5c0>
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d000      	beq.n	80019fc <__aeabi_ddiv+0xa8>
 80019fa:	e0d9      	b.n	8001bb0 <__aeabi_ddiv+0x25c>
 80019fc:	2300      	movs	r3, #0
 80019fe:	2400      	movs	r4, #0
 8001a00:	2500      	movs	r5, #0
 8001a02:	4652      	mov	r2, sl
 8001a04:	051b      	lsls	r3, r3, #20
 8001a06:	4323      	orrs	r3, r4
 8001a08:	07d2      	lsls	r2, r2, #31
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	0028      	movs	r0, r5
 8001a0e:	0019      	movs	r1, r3
 8001a10:	b005      	add	sp, #20
 8001a12:	bcf0      	pop	{r4, r5, r6, r7}
 8001a14:	46bb      	mov	fp, r7
 8001a16:	46b2      	mov	sl, r6
 8001a18:	46a9      	mov	r9, r5
 8001a1a:	46a0      	mov	r8, r4
 8001a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a1e:	2400      	movs	r4, #0
 8001a20:	2500      	movs	r5, #0
 8001a22:	4baa      	ldr	r3, [pc, #680]	; (8001ccc <__aeabi_ddiv+0x378>)
 8001a24:	e7ed      	b.n	8001a02 <__aeabi_ddiv+0xae>
 8001a26:	46ba      	mov	sl, r7
 8001a28:	46a0      	mov	r8, r4
 8001a2a:	0015      	movs	r5, r2
 8001a2c:	9000      	str	r0, [sp, #0]
 8001a2e:	e7dc      	b.n	80019ea <__aeabi_ddiv+0x96>
 8001a30:	4544      	cmp	r4, r8
 8001a32:	d200      	bcs.n	8001a36 <__aeabi_ddiv+0xe2>
 8001a34:	e1c7      	b.n	8001dc6 <__aeabi_ddiv+0x472>
 8001a36:	d100      	bne.n	8001a3a <__aeabi_ddiv+0xe6>
 8001a38:	e1c2      	b.n	8001dc0 <__aeabi_ddiv+0x46c>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	425b      	negs	r3, r3
 8001a3e:	469c      	mov	ip, r3
 8001a40:	002e      	movs	r6, r5
 8001a42:	4640      	mov	r0, r8
 8001a44:	2500      	movs	r5, #0
 8001a46:	44e3      	add	fp, ip
 8001a48:	0223      	lsls	r3, r4, #8
 8001a4a:	0e14      	lsrs	r4, r2, #24
 8001a4c:	431c      	orrs	r4, r3
 8001a4e:	0c1b      	lsrs	r3, r3, #16
 8001a50:	4699      	mov	r9, r3
 8001a52:	0423      	lsls	r3, r4, #16
 8001a54:	0c1f      	lsrs	r7, r3, #16
 8001a56:	0212      	lsls	r2, r2, #8
 8001a58:	4649      	mov	r1, r9
 8001a5a:	9200      	str	r2, [sp, #0]
 8001a5c:	9701      	str	r7, [sp, #4]
 8001a5e:	f7fe fbf5 	bl	800024c <__aeabi_uidivmod>
 8001a62:	0002      	movs	r2, r0
 8001a64:	437a      	muls	r2, r7
 8001a66:	040b      	lsls	r3, r1, #16
 8001a68:	0c31      	lsrs	r1, r6, #16
 8001a6a:	4680      	mov	r8, r0
 8001a6c:	4319      	orrs	r1, r3
 8001a6e:	428a      	cmp	r2, r1
 8001a70:	d907      	bls.n	8001a82 <__aeabi_ddiv+0x12e>
 8001a72:	2301      	movs	r3, #1
 8001a74:	425b      	negs	r3, r3
 8001a76:	469c      	mov	ip, r3
 8001a78:	1909      	adds	r1, r1, r4
 8001a7a:	44e0      	add	r8, ip
 8001a7c:	428c      	cmp	r4, r1
 8001a7e:	d800      	bhi.n	8001a82 <__aeabi_ddiv+0x12e>
 8001a80:	e207      	b.n	8001e92 <__aeabi_ddiv+0x53e>
 8001a82:	1a88      	subs	r0, r1, r2
 8001a84:	4649      	mov	r1, r9
 8001a86:	f7fe fbe1 	bl	800024c <__aeabi_uidivmod>
 8001a8a:	0409      	lsls	r1, r1, #16
 8001a8c:	468c      	mov	ip, r1
 8001a8e:	0431      	lsls	r1, r6, #16
 8001a90:	4666      	mov	r6, ip
 8001a92:	9a01      	ldr	r2, [sp, #4]
 8001a94:	0c09      	lsrs	r1, r1, #16
 8001a96:	4342      	muls	r2, r0
 8001a98:	0003      	movs	r3, r0
 8001a9a:	4331      	orrs	r1, r6
 8001a9c:	428a      	cmp	r2, r1
 8001a9e:	d904      	bls.n	8001aaa <__aeabi_ddiv+0x156>
 8001aa0:	1909      	adds	r1, r1, r4
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	428c      	cmp	r4, r1
 8001aa6:	d800      	bhi.n	8001aaa <__aeabi_ddiv+0x156>
 8001aa8:	e1ed      	b.n	8001e86 <__aeabi_ddiv+0x532>
 8001aaa:	1a88      	subs	r0, r1, r2
 8001aac:	4642      	mov	r2, r8
 8001aae:	0412      	lsls	r2, r2, #16
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	4690      	mov	r8, r2
 8001ab4:	4641      	mov	r1, r8
 8001ab6:	9b00      	ldr	r3, [sp, #0]
 8001ab8:	040e      	lsls	r6, r1, #16
 8001aba:	0c1b      	lsrs	r3, r3, #16
 8001abc:	001f      	movs	r7, r3
 8001abe:	9302      	str	r3, [sp, #8]
 8001ac0:	9b00      	ldr	r3, [sp, #0]
 8001ac2:	0c36      	lsrs	r6, r6, #16
 8001ac4:	041b      	lsls	r3, r3, #16
 8001ac6:	0c19      	lsrs	r1, r3, #16
 8001ac8:	000b      	movs	r3, r1
 8001aca:	4373      	muls	r3, r6
 8001acc:	0c12      	lsrs	r2, r2, #16
 8001ace:	437e      	muls	r6, r7
 8001ad0:	9103      	str	r1, [sp, #12]
 8001ad2:	4351      	muls	r1, r2
 8001ad4:	437a      	muls	r2, r7
 8001ad6:	0c1f      	lsrs	r7, r3, #16
 8001ad8:	46bc      	mov	ip, r7
 8001ada:	1876      	adds	r6, r6, r1
 8001adc:	4466      	add	r6, ip
 8001ade:	42b1      	cmp	r1, r6
 8001ae0:	d903      	bls.n	8001aea <__aeabi_ddiv+0x196>
 8001ae2:	2180      	movs	r1, #128	; 0x80
 8001ae4:	0249      	lsls	r1, r1, #9
 8001ae6:	468c      	mov	ip, r1
 8001ae8:	4462      	add	r2, ip
 8001aea:	0c31      	lsrs	r1, r6, #16
 8001aec:	188a      	adds	r2, r1, r2
 8001aee:	0431      	lsls	r1, r6, #16
 8001af0:	041e      	lsls	r6, r3, #16
 8001af2:	0c36      	lsrs	r6, r6, #16
 8001af4:	198e      	adds	r6, r1, r6
 8001af6:	4290      	cmp	r0, r2
 8001af8:	d302      	bcc.n	8001b00 <__aeabi_ddiv+0x1ac>
 8001afa:	d112      	bne.n	8001b22 <__aeabi_ddiv+0x1ce>
 8001afc:	42b5      	cmp	r5, r6
 8001afe:	d210      	bcs.n	8001b22 <__aeabi_ddiv+0x1ce>
 8001b00:	4643      	mov	r3, r8
 8001b02:	1e59      	subs	r1, r3, #1
 8001b04:	9b00      	ldr	r3, [sp, #0]
 8001b06:	469c      	mov	ip, r3
 8001b08:	4465      	add	r5, ip
 8001b0a:	001f      	movs	r7, r3
 8001b0c:	429d      	cmp	r5, r3
 8001b0e:	419b      	sbcs	r3, r3
 8001b10:	425b      	negs	r3, r3
 8001b12:	191b      	adds	r3, r3, r4
 8001b14:	18c0      	adds	r0, r0, r3
 8001b16:	4284      	cmp	r4, r0
 8001b18:	d200      	bcs.n	8001b1c <__aeabi_ddiv+0x1c8>
 8001b1a:	e1a0      	b.n	8001e5e <__aeabi_ddiv+0x50a>
 8001b1c:	d100      	bne.n	8001b20 <__aeabi_ddiv+0x1cc>
 8001b1e:	e19b      	b.n	8001e58 <__aeabi_ddiv+0x504>
 8001b20:	4688      	mov	r8, r1
 8001b22:	1bae      	subs	r6, r5, r6
 8001b24:	42b5      	cmp	r5, r6
 8001b26:	41ad      	sbcs	r5, r5
 8001b28:	1a80      	subs	r0, r0, r2
 8001b2a:	426d      	negs	r5, r5
 8001b2c:	1b40      	subs	r0, r0, r5
 8001b2e:	4284      	cmp	r4, r0
 8001b30:	d100      	bne.n	8001b34 <__aeabi_ddiv+0x1e0>
 8001b32:	e1d5      	b.n	8001ee0 <__aeabi_ddiv+0x58c>
 8001b34:	4649      	mov	r1, r9
 8001b36:	f7fe fb89 	bl	800024c <__aeabi_uidivmod>
 8001b3a:	9a01      	ldr	r2, [sp, #4]
 8001b3c:	040b      	lsls	r3, r1, #16
 8001b3e:	4342      	muls	r2, r0
 8001b40:	0c31      	lsrs	r1, r6, #16
 8001b42:	0005      	movs	r5, r0
 8001b44:	4319      	orrs	r1, r3
 8001b46:	428a      	cmp	r2, r1
 8001b48:	d900      	bls.n	8001b4c <__aeabi_ddiv+0x1f8>
 8001b4a:	e16c      	b.n	8001e26 <__aeabi_ddiv+0x4d2>
 8001b4c:	1a88      	subs	r0, r1, r2
 8001b4e:	4649      	mov	r1, r9
 8001b50:	f7fe fb7c 	bl	800024c <__aeabi_uidivmod>
 8001b54:	9a01      	ldr	r2, [sp, #4]
 8001b56:	0436      	lsls	r6, r6, #16
 8001b58:	4342      	muls	r2, r0
 8001b5a:	0409      	lsls	r1, r1, #16
 8001b5c:	0c36      	lsrs	r6, r6, #16
 8001b5e:	0003      	movs	r3, r0
 8001b60:	430e      	orrs	r6, r1
 8001b62:	42b2      	cmp	r2, r6
 8001b64:	d900      	bls.n	8001b68 <__aeabi_ddiv+0x214>
 8001b66:	e153      	b.n	8001e10 <__aeabi_ddiv+0x4bc>
 8001b68:	9803      	ldr	r0, [sp, #12]
 8001b6a:	1ab6      	subs	r6, r6, r2
 8001b6c:	0002      	movs	r2, r0
 8001b6e:	042d      	lsls	r5, r5, #16
 8001b70:	431d      	orrs	r5, r3
 8001b72:	9f02      	ldr	r7, [sp, #8]
 8001b74:	042b      	lsls	r3, r5, #16
 8001b76:	0c1b      	lsrs	r3, r3, #16
 8001b78:	435a      	muls	r2, r3
 8001b7a:	437b      	muls	r3, r7
 8001b7c:	469c      	mov	ip, r3
 8001b7e:	0c29      	lsrs	r1, r5, #16
 8001b80:	4348      	muls	r0, r1
 8001b82:	0c13      	lsrs	r3, r2, #16
 8001b84:	4484      	add	ip, r0
 8001b86:	4463      	add	r3, ip
 8001b88:	4379      	muls	r1, r7
 8001b8a:	4298      	cmp	r0, r3
 8001b8c:	d903      	bls.n	8001b96 <__aeabi_ddiv+0x242>
 8001b8e:	2080      	movs	r0, #128	; 0x80
 8001b90:	0240      	lsls	r0, r0, #9
 8001b92:	4684      	mov	ip, r0
 8001b94:	4461      	add	r1, ip
 8001b96:	0c18      	lsrs	r0, r3, #16
 8001b98:	0412      	lsls	r2, r2, #16
 8001b9a:	041b      	lsls	r3, r3, #16
 8001b9c:	0c12      	lsrs	r2, r2, #16
 8001b9e:	1841      	adds	r1, r0, r1
 8001ba0:	189b      	adds	r3, r3, r2
 8001ba2:	428e      	cmp	r6, r1
 8001ba4:	d200      	bcs.n	8001ba8 <__aeabi_ddiv+0x254>
 8001ba6:	e0ff      	b.n	8001da8 <__aeabi_ddiv+0x454>
 8001ba8:	d100      	bne.n	8001bac <__aeabi_ddiv+0x258>
 8001baa:	e0fa      	b.n	8001da2 <__aeabi_ddiv+0x44e>
 8001bac:	2301      	movs	r3, #1
 8001bae:	431d      	orrs	r5, r3
 8001bb0:	4a49      	ldr	r2, [pc, #292]	; (8001cd8 <__aeabi_ddiv+0x384>)
 8001bb2:	445a      	add	r2, fp
 8001bb4:	2a00      	cmp	r2, #0
 8001bb6:	dc00      	bgt.n	8001bba <__aeabi_ddiv+0x266>
 8001bb8:	e0aa      	b.n	8001d10 <__aeabi_ddiv+0x3bc>
 8001bba:	076b      	lsls	r3, r5, #29
 8001bbc:	d000      	beq.n	8001bc0 <__aeabi_ddiv+0x26c>
 8001bbe:	e13d      	b.n	8001e3c <__aeabi_ddiv+0x4e8>
 8001bc0:	08ed      	lsrs	r5, r5, #3
 8001bc2:	4643      	mov	r3, r8
 8001bc4:	01db      	lsls	r3, r3, #7
 8001bc6:	d506      	bpl.n	8001bd6 <__aeabi_ddiv+0x282>
 8001bc8:	4642      	mov	r2, r8
 8001bca:	4b44      	ldr	r3, [pc, #272]	; (8001cdc <__aeabi_ddiv+0x388>)
 8001bcc:	401a      	ands	r2, r3
 8001bce:	4690      	mov	r8, r2
 8001bd0:	2280      	movs	r2, #128	; 0x80
 8001bd2:	00d2      	lsls	r2, r2, #3
 8001bd4:	445a      	add	r2, fp
 8001bd6:	4b42      	ldr	r3, [pc, #264]	; (8001ce0 <__aeabi_ddiv+0x38c>)
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	dd00      	ble.n	8001bde <__aeabi_ddiv+0x28a>
 8001bdc:	e71f      	b.n	8001a1e <__aeabi_ddiv+0xca>
 8001bde:	4643      	mov	r3, r8
 8001be0:	075b      	lsls	r3, r3, #29
 8001be2:	431d      	orrs	r5, r3
 8001be4:	4643      	mov	r3, r8
 8001be6:	0552      	lsls	r2, r2, #21
 8001be8:	025c      	lsls	r4, r3, #9
 8001bea:	0b24      	lsrs	r4, r4, #12
 8001bec:	0d53      	lsrs	r3, r2, #21
 8001bee:	e708      	b.n	8001a02 <__aeabi_ddiv+0xae>
 8001bf0:	4652      	mov	r2, sl
 8001bf2:	4322      	orrs	r2, r4
 8001bf4:	d100      	bne.n	8001bf8 <__aeabi_ddiv+0x2a4>
 8001bf6:	e07b      	b.n	8001cf0 <__aeabi_ddiv+0x39c>
 8001bf8:	2c00      	cmp	r4, #0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_ddiv+0x2aa>
 8001bfc:	e0fa      	b.n	8001df4 <__aeabi_ddiv+0x4a0>
 8001bfe:	0020      	movs	r0, r4
 8001c00:	f001 fa22 	bl	8003048 <__clzsi2>
 8001c04:	0002      	movs	r2, r0
 8001c06:	3a0b      	subs	r2, #11
 8001c08:	231d      	movs	r3, #29
 8001c0a:	0001      	movs	r1, r0
 8001c0c:	1a9b      	subs	r3, r3, r2
 8001c0e:	4652      	mov	r2, sl
 8001c10:	3908      	subs	r1, #8
 8001c12:	40da      	lsrs	r2, r3
 8001c14:	408c      	lsls	r4, r1
 8001c16:	4314      	orrs	r4, r2
 8001c18:	4652      	mov	r2, sl
 8001c1a:	408a      	lsls	r2, r1
 8001c1c:	4b31      	ldr	r3, [pc, #196]	; (8001ce4 <__aeabi_ddiv+0x390>)
 8001c1e:	4458      	add	r0, fp
 8001c20:	469b      	mov	fp, r3
 8001c22:	4483      	add	fp, r0
 8001c24:	2000      	movs	r0, #0
 8001c26:	e6d5      	b.n	80019d4 <__aeabi_ddiv+0x80>
 8001c28:	464b      	mov	r3, r9
 8001c2a:	4323      	orrs	r3, r4
 8001c2c:	4698      	mov	r8, r3
 8001c2e:	d044      	beq.n	8001cba <__aeabi_ddiv+0x366>
 8001c30:	2c00      	cmp	r4, #0
 8001c32:	d100      	bne.n	8001c36 <__aeabi_ddiv+0x2e2>
 8001c34:	e0ce      	b.n	8001dd4 <__aeabi_ddiv+0x480>
 8001c36:	0020      	movs	r0, r4
 8001c38:	f001 fa06 	bl	8003048 <__clzsi2>
 8001c3c:	0001      	movs	r1, r0
 8001c3e:	0002      	movs	r2, r0
 8001c40:	390b      	subs	r1, #11
 8001c42:	231d      	movs	r3, #29
 8001c44:	1a5b      	subs	r3, r3, r1
 8001c46:	4649      	mov	r1, r9
 8001c48:	0010      	movs	r0, r2
 8001c4a:	40d9      	lsrs	r1, r3
 8001c4c:	3808      	subs	r0, #8
 8001c4e:	4084      	lsls	r4, r0
 8001c50:	000b      	movs	r3, r1
 8001c52:	464d      	mov	r5, r9
 8001c54:	4323      	orrs	r3, r4
 8001c56:	4698      	mov	r8, r3
 8001c58:	4085      	lsls	r5, r0
 8001c5a:	4823      	ldr	r0, [pc, #140]	; (8001ce8 <__aeabi_ddiv+0x394>)
 8001c5c:	1a83      	subs	r3, r0, r2
 8001c5e:	469b      	mov	fp, r3
 8001c60:	2300      	movs	r3, #0
 8001c62:	4699      	mov	r9, r3
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	e69a      	b.n	800199e <__aeabi_ddiv+0x4a>
 8001c68:	464b      	mov	r3, r9
 8001c6a:	4323      	orrs	r3, r4
 8001c6c:	4698      	mov	r8, r3
 8001c6e:	d11d      	bne.n	8001cac <__aeabi_ddiv+0x358>
 8001c70:	2308      	movs	r3, #8
 8001c72:	4699      	mov	r9, r3
 8001c74:	3b06      	subs	r3, #6
 8001c76:	2500      	movs	r5, #0
 8001c78:	4683      	mov	fp, r0
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	e68f      	b.n	800199e <__aeabi_ddiv+0x4a>
 8001c7e:	4652      	mov	r2, sl
 8001c80:	4322      	orrs	r2, r4
 8001c82:	d109      	bne.n	8001c98 <__aeabi_ddiv+0x344>
 8001c84:	2302      	movs	r3, #2
 8001c86:	4649      	mov	r1, r9
 8001c88:	4319      	orrs	r1, r3
 8001c8a:	4b18      	ldr	r3, [pc, #96]	; (8001cec <__aeabi_ddiv+0x398>)
 8001c8c:	4689      	mov	r9, r1
 8001c8e:	469c      	mov	ip, r3
 8001c90:	2400      	movs	r4, #0
 8001c92:	2002      	movs	r0, #2
 8001c94:	44e3      	add	fp, ip
 8001c96:	e69d      	b.n	80019d4 <__aeabi_ddiv+0x80>
 8001c98:	2303      	movs	r3, #3
 8001c9a:	464a      	mov	r2, r9
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	4b13      	ldr	r3, [pc, #76]	; (8001cec <__aeabi_ddiv+0x398>)
 8001ca0:	4691      	mov	r9, r2
 8001ca2:	469c      	mov	ip, r3
 8001ca4:	4652      	mov	r2, sl
 8001ca6:	2003      	movs	r0, #3
 8001ca8:	44e3      	add	fp, ip
 8001caa:	e693      	b.n	80019d4 <__aeabi_ddiv+0x80>
 8001cac:	230c      	movs	r3, #12
 8001cae:	4699      	mov	r9, r3
 8001cb0:	3b09      	subs	r3, #9
 8001cb2:	46a0      	mov	r8, r4
 8001cb4:	4683      	mov	fp, r0
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	e671      	b.n	800199e <__aeabi_ddiv+0x4a>
 8001cba:	2304      	movs	r3, #4
 8001cbc:	4699      	mov	r9, r3
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	469b      	mov	fp, r3
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	2500      	movs	r5, #0
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	e669      	b.n	800199e <__aeabi_ddiv+0x4a>
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	000007ff 	.word	0x000007ff
 8001cd0:	fffffc01 	.word	0xfffffc01
 8001cd4:	0800f3f0 	.word	0x0800f3f0
 8001cd8:	000003ff 	.word	0x000003ff
 8001cdc:	feffffff 	.word	0xfeffffff
 8001ce0:	000007fe 	.word	0x000007fe
 8001ce4:	000003f3 	.word	0x000003f3
 8001ce8:	fffffc0d 	.word	0xfffffc0d
 8001cec:	fffff801 	.word	0xfffff801
 8001cf0:	4649      	mov	r1, r9
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	4319      	orrs	r1, r3
 8001cf6:	4689      	mov	r9, r1
 8001cf8:	2400      	movs	r4, #0
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	e66a      	b.n	80019d4 <__aeabi_ddiv+0x80>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	2480      	movs	r4, #128	; 0x80
 8001d02:	469a      	mov	sl, r3
 8001d04:	2500      	movs	r5, #0
 8001d06:	4b8a      	ldr	r3, [pc, #552]	; (8001f30 <__aeabi_ddiv+0x5dc>)
 8001d08:	0324      	lsls	r4, r4, #12
 8001d0a:	e67a      	b.n	8001a02 <__aeabi_ddiv+0xae>
 8001d0c:	2501      	movs	r5, #1
 8001d0e:	426d      	negs	r5, r5
 8001d10:	2301      	movs	r3, #1
 8001d12:	1a9b      	subs	r3, r3, r2
 8001d14:	2b38      	cmp	r3, #56	; 0x38
 8001d16:	dd00      	ble.n	8001d1a <__aeabi_ddiv+0x3c6>
 8001d18:	e670      	b.n	80019fc <__aeabi_ddiv+0xa8>
 8001d1a:	2b1f      	cmp	r3, #31
 8001d1c:	dc00      	bgt.n	8001d20 <__aeabi_ddiv+0x3cc>
 8001d1e:	e0bf      	b.n	8001ea0 <__aeabi_ddiv+0x54c>
 8001d20:	211f      	movs	r1, #31
 8001d22:	4249      	negs	r1, r1
 8001d24:	1a8a      	subs	r2, r1, r2
 8001d26:	4641      	mov	r1, r8
 8001d28:	40d1      	lsrs	r1, r2
 8001d2a:	000a      	movs	r2, r1
 8001d2c:	2b20      	cmp	r3, #32
 8001d2e:	d004      	beq.n	8001d3a <__aeabi_ddiv+0x3e6>
 8001d30:	4641      	mov	r1, r8
 8001d32:	4b80      	ldr	r3, [pc, #512]	; (8001f34 <__aeabi_ddiv+0x5e0>)
 8001d34:	445b      	add	r3, fp
 8001d36:	4099      	lsls	r1, r3
 8001d38:	430d      	orrs	r5, r1
 8001d3a:	1e6b      	subs	r3, r5, #1
 8001d3c:	419d      	sbcs	r5, r3
 8001d3e:	2307      	movs	r3, #7
 8001d40:	432a      	orrs	r2, r5
 8001d42:	001d      	movs	r5, r3
 8001d44:	2400      	movs	r4, #0
 8001d46:	4015      	ands	r5, r2
 8001d48:	4213      	tst	r3, r2
 8001d4a:	d100      	bne.n	8001d4e <__aeabi_ddiv+0x3fa>
 8001d4c:	e0d4      	b.n	8001ef8 <__aeabi_ddiv+0x5a4>
 8001d4e:	210f      	movs	r1, #15
 8001d50:	2300      	movs	r3, #0
 8001d52:	4011      	ands	r1, r2
 8001d54:	2904      	cmp	r1, #4
 8001d56:	d100      	bne.n	8001d5a <__aeabi_ddiv+0x406>
 8001d58:	e0cb      	b.n	8001ef2 <__aeabi_ddiv+0x59e>
 8001d5a:	1d11      	adds	r1, r2, #4
 8001d5c:	4291      	cmp	r1, r2
 8001d5e:	4192      	sbcs	r2, r2
 8001d60:	4252      	negs	r2, r2
 8001d62:	189b      	adds	r3, r3, r2
 8001d64:	000a      	movs	r2, r1
 8001d66:	0219      	lsls	r1, r3, #8
 8001d68:	d400      	bmi.n	8001d6c <__aeabi_ddiv+0x418>
 8001d6a:	e0c2      	b.n	8001ef2 <__aeabi_ddiv+0x59e>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	2400      	movs	r4, #0
 8001d70:	2500      	movs	r5, #0
 8001d72:	e646      	b.n	8001a02 <__aeabi_ddiv+0xae>
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	4641      	mov	r1, r8
 8001d78:	031b      	lsls	r3, r3, #12
 8001d7a:	4219      	tst	r1, r3
 8001d7c:	d008      	beq.n	8001d90 <__aeabi_ddiv+0x43c>
 8001d7e:	421c      	tst	r4, r3
 8001d80:	d106      	bne.n	8001d90 <__aeabi_ddiv+0x43c>
 8001d82:	431c      	orrs	r4, r3
 8001d84:	0324      	lsls	r4, r4, #12
 8001d86:	46ba      	mov	sl, r7
 8001d88:	0015      	movs	r5, r2
 8001d8a:	4b69      	ldr	r3, [pc, #420]	; (8001f30 <__aeabi_ddiv+0x5dc>)
 8001d8c:	0b24      	lsrs	r4, r4, #12
 8001d8e:	e638      	b.n	8001a02 <__aeabi_ddiv+0xae>
 8001d90:	2480      	movs	r4, #128	; 0x80
 8001d92:	4643      	mov	r3, r8
 8001d94:	0324      	lsls	r4, r4, #12
 8001d96:	431c      	orrs	r4, r3
 8001d98:	0324      	lsls	r4, r4, #12
 8001d9a:	46b2      	mov	sl, r6
 8001d9c:	4b64      	ldr	r3, [pc, #400]	; (8001f30 <__aeabi_ddiv+0x5dc>)
 8001d9e:	0b24      	lsrs	r4, r4, #12
 8001da0:	e62f      	b.n	8001a02 <__aeabi_ddiv+0xae>
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d100      	bne.n	8001da8 <__aeabi_ddiv+0x454>
 8001da6:	e703      	b.n	8001bb0 <__aeabi_ddiv+0x25c>
 8001da8:	19a6      	adds	r6, r4, r6
 8001daa:	1e68      	subs	r0, r5, #1
 8001dac:	42a6      	cmp	r6, r4
 8001dae:	d200      	bcs.n	8001db2 <__aeabi_ddiv+0x45e>
 8001db0:	e08d      	b.n	8001ece <__aeabi_ddiv+0x57a>
 8001db2:	428e      	cmp	r6, r1
 8001db4:	d200      	bcs.n	8001db8 <__aeabi_ddiv+0x464>
 8001db6:	e0a3      	b.n	8001f00 <__aeabi_ddiv+0x5ac>
 8001db8:	d100      	bne.n	8001dbc <__aeabi_ddiv+0x468>
 8001dba:	e0b3      	b.n	8001f24 <__aeabi_ddiv+0x5d0>
 8001dbc:	0005      	movs	r5, r0
 8001dbe:	e6f5      	b.n	8001bac <__aeabi_ddiv+0x258>
 8001dc0:	42aa      	cmp	r2, r5
 8001dc2:	d900      	bls.n	8001dc6 <__aeabi_ddiv+0x472>
 8001dc4:	e639      	b.n	8001a3a <__aeabi_ddiv+0xe6>
 8001dc6:	4643      	mov	r3, r8
 8001dc8:	07de      	lsls	r6, r3, #31
 8001dca:	0858      	lsrs	r0, r3, #1
 8001dcc:	086b      	lsrs	r3, r5, #1
 8001dce:	431e      	orrs	r6, r3
 8001dd0:	07ed      	lsls	r5, r5, #31
 8001dd2:	e639      	b.n	8001a48 <__aeabi_ddiv+0xf4>
 8001dd4:	4648      	mov	r0, r9
 8001dd6:	f001 f937 	bl	8003048 <__clzsi2>
 8001dda:	0001      	movs	r1, r0
 8001ddc:	0002      	movs	r2, r0
 8001dde:	3115      	adds	r1, #21
 8001de0:	3220      	adds	r2, #32
 8001de2:	291c      	cmp	r1, #28
 8001de4:	dc00      	bgt.n	8001de8 <__aeabi_ddiv+0x494>
 8001de6:	e72c      	b.n	8001c42 <__aeabi_ddiv+0x2ee>
 8001de8:	464b      	mov	r3, r9
 8001dea:	3808      	subs	r0, #8
 8001dec:	4083      	lsls	r3, r0
 8001dee:	2500      	movs	r5, #0
 8001df0:	4698      	mov	r8, r3
 8001df2:	e732      	b.n	8001c5a <__aeabi_ddiv+0x306>
 8001df4:	f001 f928 	bl	8003048 <__clzsi2>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	001a      	movs	r2, r3
 8001dfc:	3215      	adds	r2, #21
 8001dfe:	3020      	adds	r0, #32
 8001e00:	2a1c      	cmp	r2, #28
 8001e02:	dc00      	bgt.n	8001e06 <__aeabi_ddiv+0x4b2>
 8001e04:	e700      	b.n	8001c08 <__aeabi_ddiv+0x2b4>
 8001e06:	4654      	mov	r4, sl
 8001e08:	3b08      	subs	r3, #8
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	409c      	lsls	r4, r3
 8001e0e:	e705      	b.n	8001c1c <__aeabi_ddiv+0x2c8>
 8001e10:	1936      	adds	r6, r6, r4
 8001e12:	3b01      	subs	r3, #1
 8001e14:	42b4      	cmp	r4, r6
 8001e16:	d900      	bls.n	8001e1a <__aeabi_ddiv+0x4c6>
 8001e18:	e6a6      	b.n	8001b68 <__aeabi_ddiv+0x214>
 8001e1a:	42b2      	cmp	r2, r6
 8001e1c:	d800      	bhi.n	8001e20 <__aeabi_ddiv+0x4cc>
 8001e1e:	e6a3      	b.n	8001b68 <__aeabi_ddiv+0x214>
 8001e20:	1e83      	subs	r3, r0, #2
 8001e22:	1936      	adds	r6, r6, r4
 8001e24:	e6a0      	b.n	8001b68 <__aeabi_ddiv+0x214>
 8001e26:	1909      	adds	r1, r1, r4
 8001e28:	3d01      	subs	r5, #1
 8001e2a:	428c      	cmp	r4, r1
 8001e2c:	d900      	bls.n	8001e30 <__aeabi_ddiv+0x4dc>
 8001e2e:	e68d      	b.n	8001b4c <__aeabi_ddiv+0x1f8>
 8001e30:	428a      	cmp	r2, r1
 8001e32:	d800      	bhi.n	8001e36 <__aeabi_ddiv+0x4e2>
 8001e34:	e68a      	b.n	8001b4c <__aeabi_ddiv+0x1f8>
 8001e36:	1e85      	subs	r5, r0, #2
 8001e38:	1909      	adds	r1, r1, r4
 8001e3a:	e687      	b.n	8001b4c <__aeabi_ddiv+0x1f8>
 8001e3c:	230f      	movs	r3, #15
 8001e3e:	402b      	ands	r3, r5
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d100      	bne.n	8001e46 <__aeabi_ddiv+0x4f2>
 8001e44:	e6bc      	b.n	8001bc0 <__aeabi_ddiv+0x26c>
 8001e46:	2305      	movs	r3, #5
 8001e48:	425b      	negs	r3, r3
 8001e4a:	42ab      	cmp	r3, r5
 8001e4c:	419b      	sbcs	r3, r3
 8001e4e:	3504      	adds	r5, #4
 8001e50:	425b      	negs	r3, r3
 8001e52:	08ed      	lsrs	r5, r5, #3
 8001e54:	4498      	add	r8, r3
 8001e56:	e6b4      	b.n	8001bc2 <__aeabi_ddiv+0x26e>
 8001e58:	42af      	cmp	r7, r5
 8001e5a:	d900      	bls.n	8001e5e <__aeabi_ddiv+0x50a>
 8001e5c:	e660      	b.n	8001b20 <__aeabi_ddiv+0x1cc>
 8001e5e:	4282      	cmp	r2, r0
 8001e60:	d804      	bhi.n	8001e6c <__aeabi_ddiv+0x518>
 8001e62:	d000      	beq.n	8001e66 <__aeabi_ddiv+0x512>
 8001e64:	e65c      	b.n	8001b20 <__aeabi_ddiv+0x1cc>
 8001e66:	42ae      	cmp	r6, r5
 8001e68:	d800      	bhi.n	8001e6c <__aeabi_ddiv+0x518>
 8001e6a:	e659      	b.n	8001b20 <__aeabi_ddiv+0x1cc>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	425b      	negs	r3, r3
 8001e70:	469c      	mov	ip, r3
 8001e72:	9b00      	ldr	r3, [sp, #0]
 8001e74:	44e0      	add	r8, ip
 8001e76:	469c      	mov	ip, r3
 8001e78:	4465      	add	r5, ip
 8001e7a:	429d      	cmp	r5, r3
 8001e7c:	419b      	sbcs	r3, r3
 8001e7e:	425b      	negs	r3, r3
 8001e80:	191b      	adds	r3, r3, r4
 8001e82:	18c0      	adds	r0, r0, r3
 8001e84:	e64d      	b.n	8001b22 <__aeabi_ddiv+0x1ce>
 8001e86:	428a      	cmp	r2, r1
 8001e88:	d800      	bhi.n	8001e8c <__aeabi_ddiv+0x538>
 8001e8a:	e60e      	b.n	8001aaa <__aeabi_ddiv+0x156>
 8001e8c:	1e83      	subs	r3, r0, #2
 8001e8e:	1909      	adds	r1, r1, r4
 8001e90:	e60b      	b.n	8001aaa <__aeabi_ddiv+0x156>
 8001e92:	428a      	cmp	r2, r1
 8001e94:	d800      	bhi.n	8001e98 <__aeabi_ddiv+0x544>
 8001e96:	e5f4      	b.n	8001a82 <__aeabi_ddiv+0x12e>
 8001e98:	1e83      	subs	r3, r0, #2
 8001e9a:	4698      	mov	r8, r3
 8001e9c:	1909      	adds	r1, r1, r4
 8001e9e:	e5f0      	b.n	8001a82 <__aeabi_ddiv+0x12e>
 8001ea0:	4925      	ldr	r1, [pc, #148]	; (8001f38 <__aeabi_ddiv+0x5e4>)
 8001ea2:	0028      	movs	r0, r5
 8001ea4:	4459      	add	r1, fp
 8001ea6:	408d      	lsls	r5, r1
 8001ea8:	4642      	mov	r2, r8
 8001eaa:	408a      	lsls	r2, r1
 8001eac:	1e69      	subs	r1, r5, #1
 8001eae:	418d      	sbcs	r5, r1
 8001eb0:	4641      	mov	r1, r8
 8001eb2:	40d8      	lsrs	r0, r3
 8001eb4:	40d9      	lsrs	r1, r3
 8001eb6:	4302      	orrs	r2, r0
 8001eb8:	432a      	orrs	r2, r5
 8001eba:	000b      	movs	r3, r1
 8001ebc:	0751      	lsls	r1, r2, #29
 8001ebe:	d100      	bne.n	8001ec2 <__aeabi_ddiv+0x56e>
 8001ec0:	e751      	b.n	8001d66 <__aeabi_ddiv+0x412>
 8001ec2:	210f      	movs	r1, #15
 8001ec4:	4011      	ands	r1, r2
 8001ec6:	2904      	cmp	r1, #4
 8001ec8:	d000      	beq.n	8001ecc <__aeabi_ddiv+0x578>
 8001eca:	e746      	b.n	8001d5a <__aeabi_ddiv+0x406>
 8001ecc:	e74b      	b.n	8001d66 <__aeabi_ddiv+0x412>
 8001ece:	0005      	movs	r5, r0
 8001ed0:	428e      	cmp	r6, r1
 8001ed2:	d000      	beq.n	8001ed6 <__aeabi_ddiv+0x582>
 8001ed4:	e66a      	b.n	8001bac <__aeabi_ddiv+0x258>
 8001ed6:	9a00      	ldr	r2, [sp, #0]
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d000      	beq.n	8001ede <__aeabi_ddiv+0x58a>
 8001edc:	e666      	b.n	8001bac <__aeabi_ddiv+0x258>
 8001ede:	e667      	b.n	8001bb0 <__aeabi_ddiv+0x25c>
 8001ee0:	4a16      	ldr	r2, [pc, #88]	; (8001f3c <__aeabi_ddiv+0x5e8>)
 8001ee2:	445a      	add	r2, fp
 8001ee4:	2a00      	cmp	r2, #0
 8001ee6:	dc00      	bgt.n	8001eea <__aeabi_ddiv+0x596>
 8001ee8:	e710      	b.n	8001d0c <__aeabi_ddiv+0x3b8>
 8001eea:	2301      	movs	r3, #1
 8001eec:	2500      	movs	r5, #0
 8001eee:	4498      	add	r8, r3
 8001ef0:	e667      	b.n	8001bc2 <__aeabi_ddiv+0x26e>
 8001ef2:	075d      	lsls	r5, r3, #29
 8001ef4:	025b      	lsls	r3, r3, #9
 8001ef6:	0b1c      	lsrs	r4, r3, #12
 8001ef8:	08d2      	lsrs	r2, r2, #3
 8001efa:	2300      	movs	r3, #0
 8001efc:	4315      	orrs	r5, r2
 8001efe:	e580      	b.n	8001a02 <__aeabi_ddiv+0xae>
 8001f00:	9800      	ldr	r0, [sp, #0]
 8001f02:	3d02      	subs	r5, #2
 8001f04:	0042      	lsls	r2, r0, #1
 8001f06:	4282      	cmp	r2, r0
 8001f08:	41bf      	sbcs	r7, r7
 8001f0a:	427f      	negs	r7, r7
 8001f0c:	193c      	adds	r4, r7, r4
 8001f0e:	1936      	adds	r6, r6, r4
 8001f10:	9200      	str	r2, [sp, #0]
 8001f12:	e7dd      	b.n	8001ed0 <__aeabi_ddiv+0x57c>
 8001f14:	2480      	movs	r4, #128	; 0x80
 8001f16:	4643      	mov	r3, r8
 8001f18:	0324      	lsls	r4, r4, #12
 8001f1a:	431c      	orrs	r4, r3
 8001f1c:	0324      	lsls	r4, r4, #12
 8001f1e:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <__aeabi_ddiv+0x5dc>)
 8001f20:	0b24      	lsrs	r4, r4, #12
 8001f22:	e56e      	b.n	8001a02 <__aeabi_ddiv+0xae>
 8001f24:	9a00      	ldr	r2, [sp, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d3ea      	bcc.n	8001f00 <__aeabi_ddiv+0x5ac>
 8001f2a:	0005      	movs	r5, r0
 8001f2c:	e7d3      	b.n	8001ed6 <__aeabi_ddiv+0x582>
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	000007ff 	.word	0x000007ff
 8001f34:	0000043e 	.word	0x0000043e
 8001f38:	0000041e 	.word	0x0000041e
 8001f3c:	000003ff 	.word	0x000003ff

08001f40 <__eqdf2>:
 8001f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f42:	464e      	mov	r6, r9
 8001f44:	4645      	mov	r5, r8
 8001f46:	46de      	mov	lr, fp
 8001f48:	4657      	mov	r7, sl
 8001f4a:	4690      	mov	r8, r2
 8001f4c:	b5e0      	push	{r5, r6, r7, lr}
 8001f4e:	0017      	movs	r7, r2
 8001f50:	031a      	lsls	r2, r3, #12
 8001f52:	0b12      	lsrs	r2, r2, #12
 8001f54:	0005      	movs	r5, r0
 8001f56:	4684      	mov	ip, r0
 8001f58:	4819      	ldr	r0, [pc, #100]	; (8001fc0 <__eqdf2+0x80>)
 8001f5a:	030e      	lsls	r6, r1, #12
 8001f5c:	004c      	lsls	r4, r1, #1
 8001f5e:	4691      	mov	r9, r2
 8001f60:	005a      	lsls	r2, r3, #1
 8001f62:	0fdb      	lsrs	r3, r3, #31
 8001f64:	469b      	mov	fp, r3
 8001f66:	0b36      	lsrs	r6, r6, #12
 8001f68:	0d64      	lsrs	r4, r4, #21
 8001f6a:	0fc9      	lsrs	r1, r1, #31
 8001f6c:	0d52      	lsrs	r2, r2, #21
 8001f6e:	4284      	cmp	r4, r0
 8001f70:	d019      	beq.n	8001fa6 <__eqdf2+0x66>
 8001f72:	4282      	cmp	r2, r0
 8001f74:	d010      	beq.n	8001f98 <__eqdf2+0x58>
 8001f76:	2001      	movs	r0, #1
 8001f78:	4294      	cmp	r4, r2
 8001f7a:	d10e      	bne.n	8001f9a <__eqdf2+0x5a>
 8001f7c:	454e      	cmp	r6, r9
 8001f7e:	d10c      	bne.n	8001f9a <__eqdf2+0x5a>
 8001f80:	2001      	movs	r0, #1
 8001f82:	45c4      	cmp	ip, r8
 8001f84:	d109      	bne.n	8001f9a <__eqdf2+0x5a>
 8001f86:	4559      	cmp	r1, fp
 8001f88:	d017      	beq.n	8001fba <__eqdf2+0x7a>
 8001f8a:	2c00      	cmp	r4, #0
 8001f8c:	d105      	bne.n	8001f9a <__eqdf2+0x5a>
 8001f8e:	0030      	movs	r0, r6
 8001f90:	4328      	orrs	r0, r5
 8001f92:	1e43      	subs	r3, r0, #1
 8001f94:	4198      	sbcs	r0, r3
 8001f96:	e000      	b.n	8001f9a <__eqdf2+0x5a>
 8001f98:	2001      	movs	r0, #1
 8001f9a:	bcf0      	pop	{r4, r5, r6, r7}
 8001f9c:	46bb      	mov	fp, r7
 8001f9e:	46b2      	mov	sl, r6
 8001fa0:	46a9      	mov	r9, r5
 8001fa2:	46a0      	mov	r8, r4
 8001fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fa6:	0033      	movs	r3, r6
 8001fa8:	2001      	movs	r0, #1
 8001faa:	432b      	orrs	r3, r5
 8001fac:	d1f5      	bne.n	8001f9a <__eqdf2+0x5a>
 8001fae:	42a2      	cmp	r2, r4
 8001fb0:	d1f3      	bne.n	8001f9a <__eqdf2+0x5a>
 8001fb2:	464b      	mov	r3, r9
 8001fb4:	433b      	orrs	r3, r7
 8001fb6:	d1f0      	bne.n	8001f9a <__eqdf2+0x5a>
 8001fb8:	e7e2      	b.n	8001f80 <__eqdf2+0x40>
 8001fba:	2000      	movs	r0, #0
 8001fbc:	e7ed      	b.n	8001f9a <__eqdf2+0x5a>
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	000007ff 	.word	0x000007ff

08001fc4 <__gedf2>:
 8001fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fc6:	4647      	mov	r7, r8
 8001fc8:	46ce      	mov	lr, r9
 8001fca:	0004      	movs	r4, r0
 8001fcc:	0018      	movs	r0, r3
 8001fce:	0016      	movs	r6, r2
 8001fd0:	031b      	lsls	r3, r3, #12
 8001fd2:	0b1b      	lsrs	r3, r3, #12
 8001fd4:	4d2d      	ldr	r5, [pc, #180]	; (800208c <__gedf2+0xc8>)
 8001fd6:	004a      	lsls	r2, r1, #1
 8001fd8:	4699      	mov	r9, r3
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	0043      	lsls	r3, r0, #1
 8001fde:	030f      	lsls	r7, r1, #12
 8001fe0:	46a4      	mov	ip, r4
 8001fe2:	46b0      	mov	r8, r6
 8001fe4:	0b3f      	lsrs	r7, r7, #12
 8001fe6:	0d52      	lsrs	r2, r2, #21
 8001fe8:	0fc9      	lsrs	r1, r1, #31
 8001fea:	0d5b      	lsrs	r3, r3, #21
 8001fec:	0fc0      	lsrs	r0, r0, #31
 8001fee:	42aa      	cmp	r2, r5
 8001ff0:	d021      	beq.n	8002036 <__gedf2+0x72>
 8001ff2:	42ab      	cmp	r3, r5
 8001ff4:	d013      	beq.n	800201e <__gedf2+0x5a>
 8001ff6:	2a00      	cmp	r2, #0
 8001ff8:	d122      	bne.n	8002040 <__gedf2+0x7c>
 8001ffa:	433c      	orrs	r4, r7
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d102      	bne.n	8002006 <__gedf2+0x42>
 8002000:	464d      	mov	r5, r9
 8002002:	432e      	orrs	r6, r5
 8002004:	d022      	beq.n	800204c <__gedf2+0x88>
 8002006:	2c00      	cmp	r4, #0
 8002008:	d010      	beq.n	800202c <__gedf2+0x68>
 800200a:	4281      	cmp	r1, r0
 800200c:	d022      	beq.n	8002054 <__gedf2+0x90>
 800200e:	2002      	movs	r0, #2
 8002010:	3901      	subs	r1, #1
 8002012:	4008      	ands	r0, r1
 8002014:	3801      	subs	r0, #1
 8002016:	bcc0      	pop	{r6, r7}
 8002018:	46b9      	mov	r9, r7
 800201a:	46b0      	mov	r8, r6
 800201c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800201e:	464d      	mov	r5, r9
 8002020:	432e      	orrs	r6, r5
 8002022:	d129      	bne.n	8002078 <__gedf2+0xb4>
 8002024:	2a00      	cmp	r2, #0
 8002026:	d1f0      	bne.n	800200a <__gedf2+0x46>
 8002028:	433c      	orrs	r4, r7
 800202a:	d1ee      	bne.n	800200a <__gedf2+0x46>
 800202c:	2800      	cmp	r0, #0
 800202e:	d1f2      	bne.n	8002016 <__gedf2+0x52>
 8002030:	2001      	movs	r0, #1
 8002032:	4240      	negs	r0, r0
 8002034:	e7ef      	b.n	8002016 <__gedf2+0x52>
 8002036:	003d      	movs	r5, r7
 8002038:	4325      	orrs	r5, r4
 800203a:	d11d      	bne.n	8002078 <__gedf2+0xb4>
 800203c:	4293      	cmp	r3, r2
 800203e:	d0ee      	beq.n	800201e <__gedf2+0x5a>
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1e2      	bne.n	800200a <__gedf2+0x46>
 8002044:	464c      	mov	r4, r9
 8002046:	4326      	orrs	r6, r4
 8002048:	d1df      	bne.n	800200a <__gedf2+0x46>
 800204a:	e7e0      	b.n	800200e <__gedf2+0x4a>
 800204c:	2000      	movs	r0, #0
 800204e:	2c00      	cmp	r4, #0
 8002050:	d0e1      	beq.n	8002016 <__gedf2+0x52>
 8002052:	e7dc      	b.n	800200e <__gedf2+0x4a>
 8002054:	429a      	cmp	r2, r3
 8002056:	dc0a      	bgt.n	800206e <__gedf2+0xaa>
 8002058:	dbe8      	blt.n	800202c <__gedf2+0x68>
 800205a:	454f      	cmp	r7, r9
 800205c:	d8d7      	bhi.n	800200e <__gedf2+0x4a>
 800205e:	d00e      	beq.n	800207e <__gedf2+0xba>
 8002060:	2000      	movs	r0, #0
 8002062:	454f      	cmp	r7, r9
 8002064:	d2d7      	bcs.n	8002016 <__gedf2+0x52>
 8002066:	2900      	cmp	r1, #0
 8002068:	d0e2      	beq.n	8002030 <__gedf2+0x6c>
 800206a:	0008      	movs	r0, r1
 800206c:	e7d3      	b.n	8002016 <__gedf2+0x52>
 800206e:	4243      	negs	r3, r0
 8002070:	4158      	adcs	r0, r3
 8002072:	0040      	lsls	r0, r0, #1
 8002074:	3801      	subs	r0, #1
 8002076:	e7ce      	b.n	8002016 <__gedf2+0x52>
 8002078:	2002      	movs	r0, #2
 800207a:	4240      	negs	r0, r0
 800207c:	e7cb      	b.n	8002016 <__gedf2+0x52>
 800207e:	45c4      	cmp	ip, r8
 8002080:	d8c5      	bhi.n	800200e <__gedf2+0x4a>
 8002082:	2000      	movs	r0, #0
 8002084:	45c4      	cmp	ip, r8
 8002086:	d2c6      	bcs.n	8002016 <__gedf2+0x52>
 8002088:	e7ed      	b.n	8002066 <__gedf2+0xa2>
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	000007ff 	.word	0x000007ff

08002090 <__ledf2>:
 8002090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002092:	4647      	mov	r7, r8
 8002094:	46ce      	mov	lr, r9
 8002096:	0004      	movs	r4, r0
 8002098:	0018      	movs	r0, r3
 800209a:	0016      	movs	r6, r2
 800209c:	031b      	lsls	r3, r3, #12
 800209e:	0b1b      	lsrs	r3, r3, #12
 80020a0:	4d2c      	ldr	r5, [pc, #176]	; (8002154 <__ledf2+0xc4>)
 80020a2:	004a      	lsls	r2, r1, #1
 80020a4:	4699      	mov	r9, r3
 80020a6:	b580      	push	{r7, lr}
 80020a8:	0043      	lsls	r3, r0, #1
 80020aa:	030f      	lsls	r7, r1, #12
 80020ac:	46a4      	mov	ip, r4
 80020ae:	46b0      	mov	r8, r6
 80020b0:	0b3f      	lsrs	r7, r7, #12
 80020b2:	0d52      	lsrs	r2, r2, #21
 80020b4:	0fc9      	lsrs	r1, r1, #31
 80020b6:	0d5b      	lsrs	r3, r3, #21
 80020b8:	0fc0      	lsrs	r0, r0, #31
 80020ba:	42aa      	cmp	r2, r5
 80020bc:	d00d      	beq.n	80020da <__ledf2+0x4a>
 80020be:	42ab      	cmp	r3, r5
 80020c0:	d010      	beq.n	80020e4 <__ledf2+0x54>
 80020c2:	2a00      	cmp	r2, #0
 80020c4:	d127      	bne.n	8002116 <__ledf2+0x86>
 80020c6:	433c      	orrs	r4, r7
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d111      	bne.n	80020f0 <__ledf2+0x60>
 80020cc:	464d      	mov	r5, r9
 80020ce:	432e      	orrs	r6, r5
 80020d0:	d10e      	bne.n	80020f0 <__ledf2+0x60>
 80020d2:	2000      	movs	r0, #0
 80020d4:	2c00      	cmp	r4, #0
 80020d6:	d015      	beq.n	8002104 <__ledf2+0x74>
 80020d8:	e00e      	b.n	80020f8 <__ledf2+0x68>
 80020da:	003d      	movs	r5, r7
 80020dc:	4325      	orrs	r5, r4
 80020de:	d110      	bne.n	8002102 <__ledf2+0x72>
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d118      	bne.n	8002116 <__ledf2+0x86>
 80020e4:	464d      	mov	r5, r9
 80020e6:	432e      	orrs	r6, r5
 80020e8:	d10b      	bne.n	8002102 <__ledf2+0x72>
 80020ea:	2a00      	cmp	r2, #0
 80020ec:	d102      	bne.n	80020f4 <__ledf2+0x64>
 80020ee:	433c      	orrs	r4, r7
 80020f0:	2c00      	cmp	r4, #0
 80020f2:	d00b      	beq.n	800210c <__ledf2+0x7c>
 80020f4:	4281      	cmp	r1, r0
 80020f6:	d014      	beq.n	8002122 <__ledf2+0x92>
 80020f8:	2002      	movs	r0, #2
 80020fa:	3901      	subs	r1, #1
 80020fc:	4008      	ands	r0, r1
 80020fe:	3801      	subs	r0, #1
 8002100:	e000      	b.n	8002104 <__ledf2+0x74>
 8002102:	2002      	movs	r0, #2
 8002104:	bcc0      	pop	{r6, r7}
 8002106:	46b9      	mov	r9, r7
 8002108:	46b0      	mov	r8, r6
 800210a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800210c:	2800      	cmp	r0, #0
 800210e:	d1f9      	bne.n	8002104 <__ledf2+0x74>
 8002110:	2001      	movs	r0, #1
 8002112:	4240      	negs	r0, r0
 8002114:	e7f6      	b.n	8002104 <__ledf2+0x74>
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1ec      	bne.n	80020f4 <__ledf2+0x64>
 800211a:	464c      	mov	r4, r9
 800211c:	4326      	orrs	r6, r4
 800211e:	d1e9      	bne.n	80020f4 <__ledf2+0x64>
 8002120:	e7ea      	b.n	80020f8 <__ledf2+0x68>
 8002122:	429a      	cmp	r2, r3
 8002124:	dd04      	ble.n	8002130 <__ledf2+0xa0>
 8002126:	4243      	negs	r3, r0
 8002128:	4158      	adcs	r0, r3
 800212a:	0040      	lsls	r0, r0, #1
 800212c:	3801      	subs	r0, #1
 800212e:	e7e9      	b.n	8002104 <__ledf2+0x74>
 8002130:	429a      	cmp	r2, r3
 8002132:	dbeb      	blt.n	800210c <__ledf2+0x7c>
 8002134:	454f      	cmp	r7, r9
 8002136:	d8df      	bhi.n	80020f8 <__ledf2+0x68>
 8002138:	d006      	beq.n	8002148 <__ledf2+0xb8>
 800213a:	2000      	movs	r0, #0
 800213c:	454f      	cmp	r7, r9
 800213e:	d2e1      	bcs.n	8002104 <__ledf2+0x74>
 8002140:	2900      	cmp	r1, #0
 8002142:	d0e5      	beq.n	8002110 <__ledf2+0x80>
 8002144:	0008      	movs	r0, r1
 8002146:	e7dd      	b.n	8002104 <__ledf2+0x74>
 8002148:	45c4      	cmp	ip, r8
 800214a:	d8d5      	bhi.n	80020f8 <__ledf2+0x68>
 800214c:	2000      	movs	r0, #0
 800214e:	45c4      	cmp	ip, r8
 8002150:	d2d8      	bcs.n	8002104 <__ledf2+0x74>
 8002152:	e7f5      	b.n	8002140 <__ledf2+0xb0>
 8002154:	000007ff 	.word	0x000007ff

08002158 <__aeabi_dmul>:
 8002158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800215a:	4657      	mov	r7, sl
 800215c:	464e      	mov	r6, r9
 800215e:	4645      	mov	r5, r8
 8002160:	46de      	mov	lr, fp
 8002162:	b5e0      	push	{r5, r6, r7, lr}
 8002164:	4698      	mov	r8, r3
 8002166:	030c      	lsls	r4, r1, #12
 8002168:	004b      	lsls	r3, r1, #1
 800216a:	0006      	movs	r6, r0
 800216c:	4692      	mov	sl, r2
 800216e:	b087      	sub	sp, #28
 8002170:	0b24      	lsrs	r4, r4, #12
 8002172:	0d5b      	lsrs	r3, r3, #21
 8002174:	0fcf      	lsrs	r7, r1, #31
 8002176:	2b00      	cmp	r3, #0
 8002178:	d100      	bne.n	800217c <__aeabi_dmul+0x24>
 800217a:	e15c      	b.n	8002436 <__aeabi_dmul+0x2de>
 800217c:	4ad9      	ldr	r2, [pc, #868]	; (80024e4 <__aeabi_dmul+0x38c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d100      	bne.n	8002184 <__aeabi_dmul+0x2c>
 8002182:	e175      	b.n	8002470 <__aeabi_dmul+0x318>
 8002184:	0f42      	lsrs	r2, r0, #29
 8002186:	00e4      	lsls	r4, r4, #3
 8002188:	4314      	orrs	r4, r2
 800218a:	2280      	movs	r2, #128	; 0x80
 800218c:	0412      	lsls	r2, r2, #16
 800218e:	4314      	orrs	r4, r2
 8002190:	4ad5      	ldr	r2, [pc, #852]	; (80024e8 <__aeabi_dmul+0x390>)
 8002192:	00c5      	lsls	r5, r0, #3
 8002194:	4694      	mov	ip, r2
 8002196:	4463      	add	r3, ip
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	2300      	movs	r3, #0
 800219c:	4699      	mov	r9, r3
 800219e:	469b      	mov	fp, r3
 80021a0:	4643      	mov	r3, r8
 80021a2:	4642      	mov	r2, r8
 80021a4:	031e      	lsls	r6, r3, #12
 80021a6:	0fd2      	lsrs	r2, r2, #31
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	4650      	mov	r0, sl
 80021ac:	4690      	mov	r8, r2
 80021ae:	0b36      	lsrs	r6, r6, #12
 80021b0:	0d5b      	lsrs	r3, r3, #21
 80021b2:	d100      	bne.n	80021b6 <__aeabi_dmul+0x5e>
 80021b4:	e120      	b.n	80023f8 <__aeabi_dmul+0x2a0>
 80021b6:	4acb      	ldr	r2, [pc, #812]	; (80024e4 <__aeabi_dmul+0x38c>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d100      	bne.n	80021be <__aeabi_dmul+0x66>
 80021bc:	e162      	b.n	8002484 <__aeabi_dmul+0x32c>
 80021be:	49ca      	ldr	r1, [pc, #808]	; (80024e8 <__aeabi_dmul+0x390>)
 80021c0:	0f42      	lsrs	r2, r0, #29
 80021c2:	468c      	mov	ip, r1
 80021c4:	9900      	ldr	r1, [sp, #0]
 80021c6:	4463      	add	r3, ip
 80021c8:	00f6      	lsls	r6, r6, #3
 80021ca:	468c      	mov	ip, r1
 80021cc:	4316      	orrs	r6, r2
 80021ce:	2280      	movs	r2, #128	; 0x80
 80021d0:	449c      	add	ip, r3
 80021d2:	0412      	lsls	r2, r2, #16
 80021d4:	4663      	mov	r3, ip
 80021d6:	4316      	orrs	r6, r2
 80021d8:	00c2      	lsls	r2, r0, #3
 80021da:	2000      	movs	r0, #0
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	9900      	ldr	r1, [sp, #0]
 80021e0:	4643      	mov	r3, r8
 80021e2:	3101      	adds	r1, #1
 80021e4:	468c      	mov	ip, r1
 80021e6:	4649      	mov	r1, r9
 80021e8:	407b      	eors	r3, r7
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	290f      	cmp	r1, #15
 80021ee:	d826      	bhi.n	800223e <__aeabi_dmul+0xe6>
 80021f0:	4bbe      	ldr	r3, [pc, #760]	; (80024ec <__aeabi_dmul+0x394>)
 80021f2:	0089      	lsls	r1, r1, #2
 80021f4:	5859      	ldr	r1, [r3, r1]
 80021f6:	468f      	mov	pc, r1
 80021f8:	4643      	mov	r3, r8
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	0034      	movs	r4, r6
 80021fe:	0015      	movs	r5, r2
 8002200:	4683      	mov	fp, r0
 8002202:	465b      	mov	r3, fp
 8002204:	2b02      	cmp	r3, #2
 8002206:	d016      	beq.n	8002236 <__aeabi_dmul+0xde>
 8002208:	2b03      	cmp	r3, #3
 800220a:	d100      	bne.n	800220e <__aeabi_dmul+0xb6>
 800220c:	e203      	b.n	8002616 <__aeabi_dmul+0x4be>
 800220e:	2b01      	cmp	r3, #1
 8002210:	d000      	beq.n	8002214 <__aeabi_dmul+0xbc>
 8002212:	e0cd      	b.n	80023b0 <__aeabi_dmul+0x258>
 8002214:	2200      	movs	r2, #0
 8002216:	2400      	movs	r4, #0
 8002218:	2500      	movs	r5, #0
 800221a:	9b01      	ldr	r3, [sp, #4]
 800221c:	0512      	lsls	r2, r2, #20
 800221e:	4322      	orrs	r2, r4
 8002220:	07db      	lsls	r3, r3, #31
 8002222:	431a      	orrs	r2, r3
 8002224:	0028      	movs	r0, r5
 8002226:	0011      	movs	r1, r2
 8002228:	b007      	add	sp, #28
 800222a:	bcf0      	pop	{r4, r5, r6, r7}
 800222c:	46bb      	mov	fp, r7
 800222e:	46b2      	mov	sl, r6
 8002230:	46a9      	mov	r9, r5
 8002232:	46a0      	mov	r8, r4
 8002234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002236:	2400      	movs	r4, #0
 8002238:	2500      	movs	r5, #0
 800223a:	4aaa      	ldr	r2, [pc, #680]	; (80024e4 <__aeabi_dmul+0x38c>)
 800223c:	e7ed      	b.n	800221a <__aeabi_dmul+0xc2>
 800223e:	0c28      	lsrs	r0, r5, #16
 8002240:	042d      	lsls	r5, r5, #16
 8002242:	0c2d      	lsrs	r5, r5, #16
 8002244:	002b      	movs	r3, r5
 8002246:	0c11      	lsrs	r1, r2, #16
 8002248:	0412      	lsls	r2, r2, #16
 800224a:	0c12      	lsrs	r2, r2, #16
 800224c:	4353      	muls	r3, r2
 800224e:	4698      	mov	r8, r3
 8002250:	0013      	movs	r3, r2
 8002252:	002f      	movs	r7, r5
 8002254:	4343      	muls	r3, r0
 8002256:	4699      	mov	r9, r3
 8002258:	434f      	muls	r7, r1
 800225a:	444f      	add	r7, r9
 800225c:	46bb      	mov	fp, r7
 800225e:	4647      	mov	r7, r8
 8002260:	000b      	movs	r3, r1
 8002262:	0c3f      	lsrs	r7, r7, #16
 8002264:	46ba      	mov	sl, r7
 8002266:	4343      	muls	r3, r0
 8002268:	44da      	add	sl, fp
 800226a:	9302      	str	r3, [sp, #8]
 800226c:	45d1      	cmp	r9, sl
 800226e:	d904      	bls.n	800227a <__aeabi_dmul+0x122>
 8002270:	2780      	movs	r7, #128	; 0x80
 8002272:	027f      	lsls	r7, r7, #9
 8002274:	46b9      	mov	r9, r7
 8002276:	444b      	add	r3, r9
 8002278:	9302      	str	r3, [sp, #8]
 800227a:	4653      	mov	r3, sl
 800227c:	0c1b      	lsrs	r3, r3, #16
 800227e:	469b      	mov	fp, r3
 8002280:	4653      	mov	r3, sl
 8002282:	041f      	lsls	r7, r3, #16
 8002284:	4643      	mov	r3, r8
 8002286:	041b      	lsls	r3, r3, #16
 8002288:	0c1b      	lsrs	r3, r3, #16
 800228a:	4698      	mov	r8, r3
 800228c:	003b      	movs	r3, r7
 800228e:	4443      	add	r3, r8
 8002290:	9304      	str	r3, [sp, #16]
 8002292:	0c33      	lsrs	r3, r6, #16
 8002294:	0436      	lsls	r6, r6, #16
 8002296:	0c36      	lsrs	r6, r6, #16
 8002298:	4698      	mov	r8, r3
 800229a:	0033      	movs	r3, r6
 800229c:	4343      	muls	r3, r0
 800229e:	4699      	mov	r9, r3
 80022a0:	4643      	mov	r3, r8
 80022a2:	4343      	muls	r3, r0
 80022a4:	002f      	movs	r7, r5
 80022a6:	469a      	mov	sl, r3
 80022a8:	4643      	mov	r3, r8
 80022aa:	4377      	muls	r7, r6
 80022ac:	435d      	muls	r5, r3
 80022ae:	0c38      	lsrs	r0, r7, #16
 80022b0:	444d      	add	r5, r9
 80022b2:	1945      	adds	r5, r0, r5
 80022b4:	45a9      	cmp	r9, r5
 80022b6:	d903      	bls.n	80022c0 <__aeabi_dmul+0x168>
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	025b      	lsls	r3, r3, #9
 80022bc:	4699      	mov	r9, r3
 80022be:	44ca      	add	sl, r9
 80022c0:	043f      	lsls	r7, r7, #16
 80022c2:	0c28      	lsrs	r0, r5, #16
 80022c4:	0c3f      	lsrs	r7, r7, #16
 80022c6:	042d      	lsls	r5, r5, #16
 80022c8:	19ed      	adds	r5, r5, r7
 80022ca:	0c27      	lsrs	r7, r4, #16
 80022cc:	0424      	lsls	r4, r4, #16
 80022ce:	0c24      	lsrs	r4, r4, #16
 80022d0:	0003      	movs	r3, r0
 80022d2:	0020      	movs	r0, r4
 80022d4:	4350      	muls	r0, r2
 80022d6:	437a      	muls	r2, r7
 80022d8:	4691      	mov	r9, r2
 80022da:	003a      	movs	r2, r7
 80022dc:	4453      	add	r3, sl
 80022de:	9305      	str	r3, [sp, #20]
 80022e0:	0c03      	lsrs	r3, r0, #16
 80022e2:	469a      	mov	sl, r3
 80022e4:	434a      	muls	r2, r1
 80022e6:	4361      	muls	r1, r4
 80022e8:	4449      	add	r1, r9
 80022ea:	4451      	add	r1, sl
 80022ec:	44ab      	add	fp, r5
 80022ee:	4589      	cmp	r9, r1
 80022f0:	d903      	bls.n	80022fa <__aeabi_dmul+0x1a2>
 80022f2:	2380      	movs	r3, #128	; 0x80
 80022f4:	025b      	lsls	r3, r3, #9
 80022f6:	4699      	mov	r9, r3
 80022f8:	444a      	add	r2, r9
 80022fa:	0400      	lsls	r0, r0, #16
 80022fc:	0c0b      	lsrs	r3, r1, #16
 80022fe:	0c00      	lsrs	r0, r0, #16
 8002300:	0409      	lsls	r1, r1, #16
 8002302:	1809      	adds	r1, r1, r0
 8002304:	0020      	movs	r0, r4
 8002306:	4699      	mov	r9, r3
 8002308:	4643      	mov	r3, r8
 800230a:	4370      	muls	r0, r6
 800230c:	435c      	muls	r4, r3
 800230e:	437e      	muls	r6, r7
 8002310:	435f      	muls	r7, r3
 8002312:	0c03      	lsrs	r3, r0, #16
 8002314:	4698      	mov	r8, r3
 8002316:	19a4      	adds	r4, r4, r6
 8002318:	4444      	add	r4, r8
 800231a:	444a      	add	r2, r9
 800231c:	9703      	str	r7, [sp, #12]
 800231e:	42a6      	cmp	r6, r4
 8002320:	d904      	bls.n	800232c <__aeabi_dmul+0x1d4>
 8002322:	2380      	movs	r3, #128	; 0x80
 8002324:	025b      	lsls	r3, r3, #9
 8002326:	4698      	mov	r8, r3
 8002328:	4447      	add	r7, r8
 800232a:	9703      	str	r7, [sp, #12]
 800232c:	0423      	lsls	r3, r4, #16
 800232e:	9e02      	ldr	r6, [sp, #8]
 8002330:	469a      	mov	sl, r3
 8002332:	9b05      	ldr	r3, [sp, #20]
 8002334:	445e      	add	r6, fp
 8002336:	4698      	mov	r8, r3
 8002338:	42ae      	cmp	r6, r5
 800233a:	41ad      	sbcs	r5, r5
 800233c:	1876      	adds	r6, r6, r1
 800233e:	428e      	cmp	r6, r1
 8002340:	4189      	sbcs	r1, r1
 8002342:	0400      	lsls	r0, r0, #16
 8002344:	0c00      	lsrs	r0, r0, #16
 8002346:	4450      	add	r0, sl
 8002348:	4440      	add	r0, r8
 800234a:	426d      	negs	r5, r5
 800234c:	1947      	adds	r7, r0, r5
 800234e:	46b8      	mov	r8, r7
 8002350:	4693      	mov	fp, r2
 8002352:	4249      	negs	r1, r1
 8002354:	4689      	mov	r9, r1
 8002356:	44c3      	add	fp, r8
 8002358:	44d9      	add	r9, fp
 800235a:	4298      	cmp	r0, r3
 800235c:	4180      	sbcs	r0, r0
 800235e:	45a8      	cmp	r8, r5
 8002360:	41ad      	sbcs	r5, r5
 8002362:	4593      	cmp	fp, r2
 8002364:	4192      	sbcs	r2, r2
 8002366:	4589      	cmp	r9, r1
 8002368:	4189      	sbcs	r1, r1
 800236a:	426d      	negs	r5, r5
 800236c:	4240      	negs	r0, r0
 800236e:	4328      	orrs	r0, r5
 8002370:	0c24      	lsrs	r4, r4, #16
 8002372:	4252      	negs	r2, r2
 8002374:	4249      	negs	r1, r1
 8002376:	430a      	orrs	r2, r1
 8002378:	9b03      	ldr	r3, [sp, #12]
 800237a:	1900      	adds	r0, r0, r4
 800237c:	1880      	adds	r0, r0, r2
 800237e:	18c7      	adds	r7, r0, r3
 8002380:	464b      	mov	r3, r9
 8002382:	0ddc      	lsrs	r4, r3, #23
 8002384:	9b04      	ldr	r3, [sp, #16]
 8002386:	0275      	lsls	r5, r6, #9
 8002388:	431d      	orrs	r5, r3
 800238a:	1e6a      	subs	r2, r5, #1
 800238c:	4195      	sbcs	r5, r2
 800238e:	464b      	mov	r3, r9
 8002390:	0df6      	lsrs	r6, r6, #23
 8002392:	027f      	lsls	r7, r7, #9
 8002394:	4335      	orrs	r5, r6
 8002396:	025a      	lsls	r2, r3, #9
 8002398:	433c      	orrs	r4, r7
 800239a:	4315      	orrs	r5, r2
 800239c:	01fb      	lsls	r3, r7, #7
 800239e:	d400      	bmi.n	80023a2 <__aeabi_dmul+0x24a>
 80023a0:	e11c      	b.n	80025dc <__aeabi_dmul+0x484>
 80023a2:	2101      	movs	r1, #1
 80023a4:	086a      	lsrs	r2, r5, #1
 80023a6:	400d      	ands	r5, r1
 80023a8:	4315      	orrs	r5, r2
 80023aa:	07e2      	lsls	r2, r4, #31
 80023ac:	4315      	orrs	r5, r2
 80023ae:	0864      	lsrs	r4, r4, #1
 80023b0:	494f      	ldr	r1, [pc, #316]	; (80024f0 <__aeabi_dmul+0x398>)
 80023b2:	4461      	add	r1, ip
 80023b4:	2900      	cmp	r1, #0
 80023b6:	dc00      	bgt.n	80023ba <__aeabi_dmul+0x262>
 80023b8:	e0b0      	b.n	800251c <__aeabi_dmul+0x3c4>
 80023ba:	076b      	lsls	r3, r5, #29
 80023bc:	d009      	beq.n	80023d2 <__aeabi_dmul+0x27a>
 80023be:	220f      	movs	r2, #15
 80023c0:	402a      	ands	r2, r5
 80023c2:	2a04      	cmp	r2, #4
 80023c4:	d005      	beq.n	80023d2 <__aeabi_dmul+0x27a>
 80023c6:	1d2a      	adds	r2, r5, #4
 80023c8:	42aa      	cmp	r2, r5
 80023ca:	41ad      	sbcs	r5, r5
 80023cc:	426d      	negs	r5, r5
 80023ce:	1964      	adds	r4, r4, r5
 80023d0:	0015      	movs	r5, r2
 80023d2:	01e3      	lsls	r3, r4, #7
 80023d4:	d504      	bpl.n	80023e0 <__aeabi_dmul+0x288>
 80023d6:	2180      	movs	r1, #128	; 0x80
 80023d8:	4a46      	ldr	r2, [pc, #280]	; (80024f4 <__aeabi_dmul+0x39c>)
 80023da:	00c9      	lsls	r1, r1, #3
 80023dc:	4014      	ands	r4, r2
 80023de:	4461      	add	r1, ip
 80023e0:	4a45      	ldr	r2, [pc, #276]	; (80024f8 <__aeabi_dmul+0x3a0>)
 80023e2:	4291      	cmp	r1, r2
 80023e4:	dd00      	ble.n	80023e8 <__aeabi_dmul+0x290>
 80023e6:	e726      	b.n	8002236 <__aeabi_dmul+0xde>
 80023e8:	0762      	lsls	r2, r4, #29
 80023ea:	08ed      	lsrs	r5, r5, #3
 80023ec:	0264      	lsls	r4, r4, #9
 80023ee:	0549      	lsls	r1, r1, #21
 80023f0:	4315      	orrs	r5, r2
 80023f2:	0b24      	lsrs	r4, r4, #12
 80023f4:	0d4a      	lsrs	r2, r1, #21
 80023f6:	e710      	b.n	800221a <__aeabi_dmul+0xc2>
 80023f8:	4652      	mov	r2, sl
 80023fa:	4332      	orrs	r2, r6
 80023fc:	d100      	bne.n	8002400 <__aeabi_dmul+0x2a8>
 80023fe:	e07f      	b.n	8002500 <__aeabi_dmul+0x3a8>
 8002400:	2e00      	cmp	r6, #0
 8002402:	d100      	bne.n	8002406 <__aeabi_dmul+0x2ae>
 8002404:	e0dc      	b.n	80025c0 <__aeabi_dmul+0x468>
 8002406:	0030      	movs	r0, r6
 8002408:	f000 fe1e 	bl	8003048 <__clzsi2>
 800240c:	0002      	movs	r2, r0
 800240e:	3a0b      	subs	r2, #11
 8002410:	231d      	movs	r3, #29
 8002412:	0001      	movs	r1, r0
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	4652      	mov	r2, sl
 8002418:	3908      	subs	r1, #8
 800241a:	40da      	lsrs	r2, r3
 800241c:	408e      	lsls	r6, r1
 800241e:	4316      	orrs	r6, r2
 8002420:	4652      	mov	r2, sl
 8002422:	408a      	lsls	r2, r1
 8002424:	9b00      	ldr	r3, [sp, #0]
 8002426:	4935      	ldr	r1, [pc, #212]	; (80024fc <__aeabi_dmul+0x3a4>)
 8002428:	1a18      	subs	r0, r3, r0
 800242a:	0003      	movs	r3, r0
 800242c:	468c      	mov	ip, r1
 800242e:	4463      	add	r3, ip
 8002430:	2000      	movs	r0, #0
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	e6d3      	b.n	80021de <__aeabi_dmul+0x86>
 8002436:	0025      	movs	r5, r4
 8002438:	4305      	orrs	r5, r0
 800243a:	d04a      	beq.n	80024d2 <__aeabi_dmul+0x37a>
 800243c:	2c00      	cmp	r4, #0
 800243e:	d100      	bne.n	8002442 <__aeabi_dmul+0x2ea>
 8002440:	e0b0      	b.n	80025a4 <__aeabi_dmul+0x44c>
 8002442:	0020      	movs	r0, r4
 8002444:	f000 fe00 	bl	8003048 <__clzsi2>
 8002448:	0001      	movs	r1, r0
 800244a:	0002      	movs	r2, r0
 800244c:	390b      	subs	r1, #11
 800244e:	231d      	movs	r3, #29
 8002450:	0010      	movs	r0, r2
 8002452:	1a5b      	subs	r3, r3, r1
 8002454:	0031      	movs	r1, r6
 8002456:	0035      	movs	r5, r6
 8002458:	3808      	subs	r0, #8
 800245a:	4084      	lsls	r4, r0
 800245c:	40d9      	lsrs	r1, r3
 800245e:	4085      	lsls	r5, r0
 8002460:	430c      	orrs	r4, r1
 8002462:	4826      	ldr	r0, [pc, #152]	; (80024fc <__aeabi_dmul+0x3a4>)
 8002464:	1a83      	subs	r3, r0, r2
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	2300      	movs	r3, #0
 800246a:	4699      	mov	r9, r3
 800246c:	469b      	mov	fp, r3
 800246e:	e697      	b.n	80021a0 <__aeabi_dmul+0x48>
 8002470:	0005      	movs	r5, r0
 8002472:	4325      	orrs	r5, r4
 8002474:	d126      	bne.n	80024c4 <__aeabi_dmul+0x36c>
 8002476:	2208      	movs	r2, #8
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	2302      	movs	r3, #2
 800247c:	2400      	movs	r4, #0
 800247e:	4691      	mov	r9, r2
 8002480:	469b      	mov	fp, r3
 8002482:	e68d      	b.n	80021a0 <__aeabi_dmul+0x48>
 8002484:	4652      	mov	r2, sl
 8002486:	9b00      	ldr	r3, [sp, #0]
 8002488:	4332      	orrs	r2, r6
 800248a:	d110      	bne.n	80024ae <__aeabi_dmul+0x356>
 800248c:	4915      	ldr	r1, [pc, #84]	; (80024e4 <__aeabi_dmul+0x38c>)
 800248e:	2600      	movs	r6, #0
 8002490:	468c      	mov	ip, r1
 8002492:	4463      	add	r3, ip
 8002494:	4649      	mov	r1, r9
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	2302      	movs	r3, #2
 800249a:	4319      	orrs	r1, r3
 800249c:	4689      	mov	r9, r1
 800249e:	2002      	movs	r0, #2
 80024a0:	e69d      	b.n	80021de <__aeabi_dmul+0x86>
 80024a2:	465b      	mov	r3, fp
 80024a4:	9701      	str	r7, [sp, #4]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d000      	beq.n	80024ac <__aeabi_dmul+0x354>
 80024aa:	e6ad      	b.n	8002208 <__aeabi_dmul+0xb0>
 80024ac:	e6c3      	b.n	8002236 <__aeabi_dmul+0xde>
 80024ae:	4a0d      	ldr	r2, [pc, #52]	; (80024e4 <__aeabi_dmul+0x38c>)
 80024b0:	2003      	movs	r0, #3
 80024b2:	4694      	mov	ip, r2
 80024b4:	4463      	add	r3, ip
 80024b6:	464a      	mov	r2, r9
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	2303      	movs	r3, #3
 80024bc:	431a      	orrs	r2, r3
 80024be:	4691      	mov	r9, r2
 80024c0:	4652      	mov	r2, sl
 80024c2:	e68c      	b.n	80021de <__aeabi_dmul+0x86>
 80024c4:	220c      	movs	r2, #12
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	2303      	movs	r3, #3
 80024ca:	0005      	movs	r5, r0
 80024cc:	4691      	mov	r9, r2
 80024ce:	469b      	mov	fp, r3
 80024d0:	e666      	b.n	80021a0 <__aeabi_dmul+0x48>
 80024d2:	2304      	movs	r3, #4
 80024d4:	4699      	mov	r9, r3
 80024d6:	2300      	movs	r3, #0
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	3301      	adds	r3, #1
 80024dc:	2400      	movs	r4, #0
 80024de:	469b      	mov	fp, r3
 80024e0:	e65e      	b.n	80021a0 <__aeabi_dmul+0x48>
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	000007ff 	.word	0x000007ff
 80024e8:	fffffc01 	.word	0xfffffc01
 80024ec:	0800f430 	.word	0x0800f430
 80024f0:	000003ff 	.word	0x000003ff
 80024f4:	feffffff 	.word	0xfeffffff
 80024f8:	000007fe 	.word	0x000007fe
 80024fc:	fffffc0d 	.word	0xfffffc0d
 8002500:	4649      	mov	r1, r9
 8002502:	2301      	movs	r3, #1
 8002504:	4319      	orrs	r1, r3
 8002506:	4689      	mov	r9, r1
 8002508:	2600      	movs	r6, #0
 800250a:	2001      	movs	r0, #1
 800250c:	e667      	b.n	80021de <__aeabi_dmul+0x86>
 800250e:	2300      	movs	r3, #0
 8002510:	2480      	movs	r4, #128	; 0x80
 8002512:	2500      	movs	r5, #0
 8002514:	4a43      	ldr	r2, [pc, #268]	; (8002624 <__aeabi_dmul+0x4cc>)
 8002516:	9301      	str	r3, [sp, #4]
 8002518:	0324      	lsls	r4, r4, #12
 800251a:	e67e      	b.n	800221a <__aeabi_dmul+0xc2>
 800251c:	2001      	movs	r0, #1
 800251e:	1a40      	subs	r0, r0, r1
 8002520:	2838      	cmp	r0, #56	; 0x38
 8002522:	dd00      	ble.n	8002526 <__aeabi_dmul+0x3ce>
 8002524:	e676      	b.n	8002214 <__aeabi_dmul+0xbc>
 8002526:	281f      	cmp	r0, #31
 8002528:	dd5b      	ble.n	80025e2 <__aeabi_dmul+0x48a>
 800252a:	221f      	movs	r2, #31
 800252c:	0023      	movs	r3, r4
 800252e:	4252      	negs	r2, r2
 8002530:	1a51      	subs	r1, r2, r1
 8002532:	40cb      	lsrs	r3, r1
 8002534:	0019      	movs	r1, r3
 8002536:	2820      	cmp	r0, #32
 8002538:	d003      	beq.n	8002542 <__aeabi_dmul+0x3ea>
 800253a:	4a3b      	ldr	r2, [pc, #236]	; (8002628 <__aeabi_dmul+0x4d0>)
 800253c:	4462      	add	r2, ip
 800253e:	4094      	lsls	r4, r2
 8002540:	4325      	orrs	r5, r4
 8002542:	1e6a      	subs	r2, r5, #1
 8002544:	4195      	sbcs	r5, r2
 8002546:	002a      	movs	r2, r5
 8002548:	430a      	orrs	r2, r1
 800254a:	2107      	movs	r1, #7
 800254c:	000d      	movs	r5, r1
 800254e:	2400      	movs	r4, #0
 8002550:	4015      	ands	r5, r2
 8002552:	4211      	tst	r1, r2
 8002554:	d05b      	beq.n	800260e <__aeabi_dmul+0x4b6>
 8002556:	210f      	movs	r1, #15
 8002558:	2400      	movs	r4, #0
 800255a:	4011      	ands	r1, r2
 800255c:	2904      	cmp	r1, #4
 800255e:	d053      	beq.n	8002608 <__aeabi_dmul+0x4b0>
 8002560:	1d11      	adds	r1, r2, #4
 8002562:	4291      	cmp	r1, r2
 8002564:	4192      	sbcs	r2, r2
 8002566:	4252      	negs	r2, r2
 8002568:	18a4      	adds	r4, r4, r2
 800256a:	000a      	movs	r2, r1
 800256c:	0223      	lsls	r3, r4, #8
 800256e:	d54b      	bpl.n	8002608 <__aeabi_dmul+0x4b0>
 8002570:	2201      	movs	r2, #1
 8002572:	2400      	movs	r4, #0
 8002574:	2500      	movs	r5, #0
 8002576:	e650      	b.n	800221a <__aeabi_dmul+0xc2>
 8002578:	2380      	movs	r3, #128	; 0x80
 800257a:	031b      	lsls	r3, r3, #12
 800257c:	421c      	tst	r4, r3
 800257e:	d009      	beq.n	8002594 <__aeabi_dmul+0x43c>
 8002580:	421e      	tst	r6, r3
 8002582:	d107      	bne.n	8002594 <__aeabi_dmul+0x43c>
 8002584:	4333      	orrs	r3, r6
 8002586:	031c      	lsls	r4, r3, #12
 8002588:	4643      	mov	r3, r8
 800258a:	0015      	movs	r5, r2
 800258c:	0b24      	lsrs	r4, r4, #12
 800258e:	4a25      	ldr	r2, [pc, #148]	; (8002624 <__aeabi_dmul+0x4cc>)
 8002590:	9301      	str	r3, [sp, #4]
 8002592:	e642      	b.n	800221a <__aeabi_dmul+0xc2>
 8002594:	2280      	movs	r2, #128	; 0x80
 8002596:	0312      	lsls	r2, r2, #12
 8002598:	4314      	orrs	r4, r2
 800259a:	0324      	lsls	r4, r4, #12
 800259c:	4a21      	ldr	r2, [pc, #132]	; (8002624 <__aeabi_dmul+0x4cc>)
 800259e:	0b24      	lsrs	r4, r4, #12
 80025a0:	9701      	str	r7, [sp, #4]
 80025a2:	e63a      	b.n	800221a <__aeabi_dmul+0xc2>
 80025a4:	f000 fd50 	bl	8003048 <__clzsi2>
 80025a8:	0001      	movs	r1, r0
 80025aa:	0002      	movs	r2, r0
 80025ac:	3115      	adds	r1, #21
 80025ae:	3220      	adds	r2, #32
 80025b0:	291c      	cmp	r1, #28
 80025b2:	dc00      	bgt.n	80025b6 <__aeabi_dmul+0x45e>
 80025b4:	e74b      	b.n	800244e <__aeabi_dmul+0x2f6>
 80025b6:	0034      	movs	r4, r6
 80025b8:	3808      	subs	r0, #8
 80025ba:	2500      	movs	r5, #0
 80025bc:	4084      	lsls	r4, r0
 80025be:	e750      	b.n	8002462 <__aeabi_dmul+0x30a>
 80025c0:	f000 fd42 	bl	8003048 <__clzsi2>
 80025c4:	0003      	movs	r3, r0
 80025c6:	001a      	movs	r2, r3
 80025c8:	3215      	adds	r2, #21
 80025ca:	3020      	adds	r0, #32
 80025cc:	2a1c      	cmp	r2, #28
 80025ce:	dc00      	bgt.n	80025d2 <__aeabi_dmul+0x47a>
 80025d0:	e71e      	b.n	8002410 <__aeabi_dmul+0x2b8>
 80025d2:	4656      	mov	r6, sl
 80025d4:	3b08      	subs	r3, #8
 80025d6:	2200      	movs	r2, #0
 80025d8:	409e      	lsls	r6, r3
 80025da:	e723      	b.n	8002424 <__aeabi_dmul+0x2cc>
 80025dc:	9b00      	ldr	r3, [sp, #0]
 80025de:	469c      	mov	ip, r3
 80025e0:	e6e6      	b.n	80023b0 <__aeabi_dmul+0x258>
 80025e2:	4912      	ldr	r1, [pc, #72]	; (800262c <__aeabi_dmul+0x4d4>)
 80025e4:	0022      	movs	r2, r4
 80025e6:	4461      	add	r1, ip
 80025e8:	002e      	movs	r6, r5
 80025ea:	408d      	lsls	r5, r1
 80025ec:	408a      	lsls	r2, r1
 80025ee:	40c6      	lsrs	r6, r0
 80025f0:	1e69      	subs	r1, r5, #1
 80025f2:	418d      	sbcs	r5, r1
 80025f4:	4332      	orrs	r2, r6
 80025f6:	432a      	orrs	r2, r5
 80025f8:	40c4      	lsrs	r4, r0
 80025fa:	0753      	lsls	r3, r2, #29
 80025fc:	d0b6      	beq.n	800256c <__aeabi_dmul+0x414>
 80025fe:	210f      	movs	r1, #15
 8002600:	4011      	ands	r1, r2
 8002602:	2904      	cmp	r1, #4
 8002604:	d1ac      	bne.n	8002560 <__aeabi_dmul+0x408>
 8002606:	e7b1      	b.n	800256c <__aeabi_dmul+0x414>
 8002608:	0765      	lsls	r5, r4, #29
 800260a:	0264      	lsls	r4, r4, #9
 800260c:	0b24      	lsrs	r4, r4, #12
 800260e:	08d2      	lsrs	r2, r2, #3
 8002610:	4315      	orrs	r5, r2
 8002612:	2200      	movs	r2, #0
 8002614:	e601      	b.n	800221a <__aeabi_dmul+0xc2>
 8002616:	2280      	movs	r2, #128	; 0x80
 8002618:	0312      	lsls	r2, r2, #12
 800261a:	4314      	orrs	r4, r2
 800261c:	0324      	lsls	r4, r4, #12
 800261e:	4a01      	ldr	r2, [pc, #4]	; (8002624 <__aeabi_dmul+0x4cc>)
 8002620:	0b24      	lsrs	r4, r4, #12
 8002622:	e5fa      	b.n	800221a <__aeabi_dmul+0xc2>
 8002624:	000007ff 	.word	0x000007ff
 8002628:	0000043e 	.word	0x0000043e
 800262c:	0000041e 	.word	0x0000041e

08002630 <__aeabi_dsub>:
 8002630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002632:	4657      	mov	r7, sl
 8002634:	464e      	mov	r6, r9
 8002636:	4645      	mov	r5, r8
 8002638:	46de      	mov	lr, fp
 800263a:	b5e0      	push	{r5, r6, r7, lr}
 800263c:	001e      	movs	r6, r3
 800263e:	0017      	movs	r7, r2
 8002640:	004a      	lsls	r2, r1, #1
 8002642:	030b      	lsls	r3, r1, #12
 8002644:	0d52      	lsrs	r2, r2, #21
 8002646:	0a5b      	lsrs	r3, r3, #9
 8002648:	4690      	mov	r8, r2
 800264a:	0f42      	lsrs	r2, r0, #29
 800264c:	431a      	orrs	r2, r3
 800264e:	0fcd      	lsrs	r5, r1, #31
 8002650:	4ccd      	ldr	r4, [pc, #820]	; (8002988 <__aeabi_dsub+0x358>)
 8002652:	0331      	lsls	r1, r6, #12
 8002654:	00c3      	lsls	r3, r0, #3
 8002656:	4694      	mov	ip, r2
 8002658:	0070      	lsls	r0, r6, #1
 800265a:	0f7a      	lsrs	r2, r7, #29
 800265c:	0a49      	lsrs	r1, r1, #9
 800265e:	00ff      	lsls	r7, r7, #3
 8002660:	469a      	mov	sl, r3
 8002662:	46b9      	mov	r9, r7
 8002664:	0d40      	lsrs	r0, r0, #21
 8002666:	0ff6      	lsrs	r6, r6, #31
 8002668:	4311      	orrs	r1, r2
 800266a:	42a0      	cmp	r0, r4
 800266c:	d100      	bne.n	8002670 <__aeabi_dsub+0x40>
 800266e:	e0b1      	b.n	80027d4 <__aeabi_dsub+0x1a4>
 8002670:	2201      	movs	r2, #1
 8002672:	4056      	eors	r6, r2
 8002674:	46b3      	mov	fp, r6
 8002676:	42b5      	cmp	r5, r6
 8002678:	d100      	bne.n	800267c <__aeabi_dsub+0x4c>
 800267a:	e088      	b.n	800278e <__aeabi_dsub+0x15e>
 800267c:	4642      	mov	r2, r8
 800267e:	1a12      	subs	r2, r2, r0
 8002680:	2a00      	cmp	r2, #0
 8002682:	dc00      	bgt.n	8002686 <__aeabi_dsub+0x56>
 8002684:	e0ae      	b.n	80027e4 <__aeabi_dsub+0x1b4>
 8002686:	2800      	cmp	r0, #0
 8002688:	d100      	bne.n	800268c <__aeabi_dsub+0x5c>
 800268a:	e0c1      	b.n	8002810 <__aeabi_dsub+0x1e0>
 800268c:	48be      	ldr	r0, [pc, #760]	; (8002988 <__aeabi_dsub+0x358>)
 800268e:	4580      	cmp	r8, r0
 8002690:	d100      	bne.n	8002694 <__aeabi_dsub+0x64>
 8002692:	e151      	b.n	8002938 <__aeabi_dsub+0x308>
 8002694:	2080      	movs	r0, #128	; 0x80
 8002696:	0400      	lsls	r0, r0, #16
 8002698:	4301      	orrs	r1, r0
 800269a:	2a38      	cmp	r2, #56	; 0x38
 800269c:	dd00      	ble.n	80026a0 <__aeabi_dsub+0x70>
 800269e:	e17b      	b.n	8002998 <__aeabi_dsub+0x368>
 80026a0:	2a1f      	cmp	r2, #31
 80026a2:	dd00      	ble.n	80026a6 <__aeabi_dsub+0x76>
 80026a4:	e1ee      	b.n	8002a84 <__aeabi_dsub+0x454>
 80026a6:	2020      	movs	r0, #32
 80026a8:	003e      	movs	r6, r7
 80026aa:	1a80      	subs	r0, r0, r2
 80026ac:	000c      	movs	r4, r1
 80026ae:	40d6      	lsrs	r6, r2
 80026b0:	40d1      	lsrs	r1, r2
 80026b2:	4087      	lsls	r7, r0
 80026b4:	4662      	mov	r2, ip
 80026b6:	4084      	lsls	r4, r0
 80026b8:	1a52      	subs	r2, r2, r1
 80026ba:	1e78      	subs	r0, r7, #1
 80026bc:	4187      	sbcs	r7, r0
 80026be:	4694      	mov	ip, r2
 80026c0:	4334      	orrs	r4, r6
 80026c2:	4327      	orrs	r7, r4
 80026c4:	1bdc      	subs	r4, r3, r7
 80026c6:	42a3      	cmp	r3, r4
 80026c8:	419b      	sbcs	r3, r3
 80026ca:	4662      	mov	r2, ip
 80026cc:	425b      	negs	r3, r3
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	4699      	mov	r9, r3
 80026d2:	464b      	mov	r3, r9
 80026d4:	021b      	lsls	r3, r3, #8
 80026d6:	d400      	bmi.n	80026da <__aeabi_dsub+0xaa>
 80026d8:	e118      	b.n	800290c <__aeabi_dsub+0x2dc>
 80026da:	464b      	mov	r3, r9
 80026dc:	0258      	lsls	r0, r3, #9
 80026de:	0a43      	lsrs	r3, r0, #9
 80026e0:	4699      	mov	r9, r3
 80026e2:	464b      	mov	r3, r9
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d100      	bne.n	80026ea <__aeabi_dsub+0xba>
 80026e8:	e137      	b.n	800295a <__aeabi_dsub+0x32a>
 80026ea:	4648      	mov	r0, r9
 80026ec:	f000 fcac 	bl	8003048 <__clzsi2>
 80026f0:	0001      	movs	r1, r0
 80026f2:	3908      	subs	r1, #8
 80026f4:	2320      	movs	r3, #32
 80026f6:	0022      	movs	r2, r4
 80026f8:	4648      	mov	r0, r9
 80026fa:	1a5b      	subs	r3, r3, r1
 80026fc:	40da      	lsrs	r2, r3
 80026fe:	4088      	lsls	r0, r1
 8002700:	408c      	lsls	r4, r1
 8002702:	4643      	mov	r3, r8
 8002704:	4310      	orrs	r0, r2
 8002706:	4588      	cmp	r8, r1
 8002708:	dd00      	ble.n	800270c <__aeabi_dsub+0xdc>
 800270a:	e136      	b.n	800297a <__aeabi_dsub+0x34a>
 800270c:	1ac9      	subs	r1, r1, r3
 800270e:	1c4b      	adds	r3, r1, #1
 8002710:	2b1f      	cmp	r3, #31
 8002712:	dd00      	ble.n	8002716 <__aeabi_dsub+0xe6>
 8002714:	e0ea      	b.n	80028ec <__aeabi_dsub+0x2bc>
 8002716:	2220      	movs	r2, #32
 8002718:	0026      	movs	r6, r4
 800271a:	1ad2      	subs	r2, r2, r3
 800271c:	0001      	movs	r1, r0
 800271e:	4094      	lsls	r4, r2
 8002720:	40de      	lsrs	r6, r3
 8002722:	40d8      	lsrs	r0, r3
 8002724:	2300      	movs	r3, #0
 8002726:	4091      	lsls	r1, r2
 8002728:	1e62      	subs	r2, r4, #1
 800272a:	4194      	sbcs	r4, r2
 800272c:	4681      	mov	r9, r0
 800272e:	4698      	mov	r8, r3
 8002730:	4331      	orrs	r1, r6
 8002732:	430c      	orrs	r4, r1
 8002734:	0763      	lsls	r3, r4, #29
 8002736:	d009      	beq.n	800274c <__aeabi_dsub+0x11c>
 8002738:	230f      	movs	r3, #15
 800273a:	4023      	ands	r3, r4
 800273c:	2b04      	cmp	r3, #4
 800273e:	d005      	beq.n	800274c <__aeabi_dsub+0x11c>
 8002740:	1d23      	adds	r3, r4, #4
 8002742:	42a3      	cmp	r3, r4
 8002744:	41a4      	sbcs	r4, r4
 8002746:	4264      	negs	r4, r4
 8002748:	44a1      	add	r9, r4
 800274a:	001c      	movs	r4, r3
 800274c:	464b      	mov	r3, r9
 800274e:	021b      	lsls	r3, r3, #8
 8002750:	d400      	bmi.n	8002754 <__aeabi_dsub+0x124>
 8002752:	e0de      	b.n	8002912 <__aeabi_dsub+0x2e2>
 8002754:	4641      	mov	r1, r8
 8002756:	4b8c      	ldr	r3, [pc, #560]	; (8002988 <__aeabi_dsub+0x358>)
 8002758:	3101      	adds	r1, #1
 800275a:	4299      	cmp	r1, r3
 800275c:	d100      	bne.n	8002760 <__aeabi_dsub+0x130>
 800275e:	e0e7      	b.n	8002930 <__aeabi_dsub+0x300>
 8002760:	464b      	mov	r3, r9
 8002762:	488a      	ldr	r0, [pc, #552]	; (800298c <__aeabi_dsub+0x35c>)
 8002764:	08e4      	lsrs	r4, r4, #3
 8002766:	4003      	ands	r3, r0
 8002768:	0018      	movs	r0, r3
 800276a:	0549      	lsls	r1, r1, #21
 800276c:	075b      	lsls	r3, r3, #29
 800276e:	0240      	lsls	r0, r0, #9
 8002770:	4323      	orrs	r3, r4
 8002772:	0d4a      	lsrs	r2, r1, #21
 8002774:	0b04      	lsrs	r4, r0, #12
 8002776:	0512      	lsls	r2, r2, #20
 8002778:	07ed      	lsls	r5, r5, #31
 800277a:	4322      	orrs	r2, r4
 800277c:	432a      	orrs	r2, r5
 800277e:	0018      	movs	r0, r3
 8002780:	0011      	movs	r1, r2
 8002782:	bcf0      	pop	{r4, r5, r6, r7}
 8002784:	46bb      	mov	fp, r7
 8002786:	46b2      	mov	sl, r6
 8002788:	46a9      	mov	r9, r5
 800278a:	46a0      	mov	r8, r4
 800278c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800278e:	4642      	mov	r2, r8
 8002790:	1a12      	subs	r2, r2, r0
 8002792:	2a00      	cmp	r2, #0
 8002794:	dd52      	ble.n	800283c <__aeabi_dsub+0x20c>
 8002796:	2800      	cmp	r0, #0
 8002798:	d100      	bne.n	800279c <__aeabi_dsub+0x16c>
 800279a:	e09c      	b.n	80028d6 <__aeabi_dsub+0x2a6>
 800279c:	45a0      	cmp	r8, r4
 800279e:	d100      	bne.n	80027a2 <__aeabi_dsub+0x172>
 80027a0:	e0ca      	b.n	8002938 <__aeabi_dsub+0x308>
 80027a2:	2080      	movs	r0, #128	; 0x80
 80027a4:	0400      	lsls	r0, r0, #16
 80027a6:	4301      	orrs	r1, r0
 80027a8:	2a38      	cmp	r2, #56	; 0x38
 80027aa:	dd00      	ble.n	80027ae <__aeabi_dsub+0x17e>
 80027ac:	e149      	b.n	8002a42 <__aeabi_dsub+0x412>
 80027ae:	2a1f      	cmp	r2, #31
 80027b0:	dc00      	bgt.n	80027b4 <__aeabi_dsub+0x184>
 80027b2:	e197      	b.n	8002ae4 <__aeabi_dsub+0x4b4>
 80027b4:	0010      	movs	r0, r2
 80027b6:	000e      	movs	r6, r1
 80027b8:	3820      	subs	r0, #32
 80027ba:	40c6      	lsrs	r6, r0
 80027bc:	2a20      	cmp	r2, #32
 80027be:	d004      	beq.n	80027ca <__aeabi_dsub+0x19a>
 80027c0:	2040      	movs	r0, #64	; 0x40
 80027c2:	1a82      	subs	r2, r0, r2
 80027c4:	4091      	lsls	r1, r2
 80027c6:	430f      	orrs	r7, r1
 80027c8:	46b9      	mov	r9, r7
 80027ca:	464c      	mov	r4, r9
 80027cc:	1e62      	subs	r2, r4, #1
 80027ce:	4194      	sbcs	r4, r2
 80027d0:	4334      	orrs	r4, r6
 80027d2:	e13a      	b.n	8002a4a <__aeabi_dsub+0x41a>
 80027d4:	000a      	movs	r2, r1
 80027d6:	433a      	orrs	r2, r7
 80027d8:	d028      	beq.n	800282c <__aeabi_dsub+0x1fc>
 80027da:	46b3      	mov	fp, r6
 80027dc:	42b5      	cmp	r5, r6
 80027de:	d02b      	beq.n	8002838 <__aeabi_dsub+0x208>
 80027e0:	4a6b      	ldr	r2, [pc, #428]	; (8002990 <__aeabi_dsub+0x360>)
 80027e2:	4442      	add	r2, r8
 80027e4:	2a00      	cmp	r2, #0
 80027e6:	d05d      	beq.n	80028a4 <__aeabi_dsub+0x274>
 80027e8:	4642      	mov	r2, r8
 80027ea:	4644      	mov	r4, r8
 80027ec:	1a82      	subs	r2, r0, r2
 80027ee:	2c00      	cmp	r4, #0
 80027f0:	d000      	beq.n	80027f4 <__aeabi_dsub+0x1c4>
 80027f2:	e0f5      	b.n	80029e0 <__aeabi_dsub+0x3b0>
 80027f4:	4665      	mov	r5, ip
 80027f6:	431d      	orrs	r5, r3
 80027f8:	d100      	bne.n	80027fc <__aeabi_dsub+0x1cc>
 80027fa:	e19c      	b.n	8002b36 <__aeabi_dsub+0x506>
 80027fc:	1e55      	subs	r5, r2, #1
 80027fe:	2a01      	cmp	r2, #1
 8002800:	d100      	bne.n	8002804 <__aeabi_dsub+0x1d4>
 8002802:	e1fb      	b.n	8002bfc <__aeabi_dsub+0x5cc>
 8002804:	4c60      	ldr	r4, [pc, #384]	; (8002988 <__aeabi_dsub+0x358>)
 8002806:	42a2      	cmp	r2, r4
 8002808:	d100      	bne.n	800280c <__aeabi_dsub+0x1dc>
 800280a:	e1bd      	b.n	8002b88 <__aeabi_dsub+0x558>
 800280c:	002a      	movs	r2, r5
 800280e:	e0f0      	b.n	80029f2 <__aeabi_dsub+0x3c2>
 8002810:	0008      	movs	r0, r1
 8002812:	4338      	orrs	r0, r7
 8002814:	d100      	bne.n	8002818 <__aeabi_dsub+0x1e8>
 8002816:	e0c3      	b.n	80029a0 <__aeabi_dsub+0x370>
 8002818:	1e50      	subs	r0, r2, #1
 800281a:	2a01      	cmp	r2, #1
 800281c:	d100      	bne.n	8002820 <__aeabi_dsub+0x1f0>
 800281e:	e1a8      	b.n	8002b72 <__aeabi_dsub+0x542>
 8002820:	4c59      	ldr	r4, [pc, #356]	; (8002988 <__aeabi_dsub+0x358>)
 8002822:	42a2      	cmp	r2, r4
 8002824:	d100      	bne.n	8002828 <__aeabi_dsub+0x1f8>
 8002826:	e087      	b.n	8002938 <__aeabi_dsub+0x308>
 8002828:	0002      	movs	r2, r0
 800282a:	e736      	b.n	800269a <__aeabi_dsub+0x6a>
 800282c:	2201      	movs	r2, #1
 800282e:	4056      	eors	r6, r2
 8002830:	46b3      	mov	fp, r6
 8002832:	42b5      	cmp	r5, r6
 8002834:	d000      	beq.n	8002838 <__aeabi_dsub+0x208>
 8002836:	e721      	b.n	800267c <__aeabi_dsub+0x4c>
 8002838:	4a55      	ldr	r2, [pc, #340]	; (8002990 <__aeabi_dsub+0x360>)
 800283a:	4442      	add	r2, r8
 800283c:	2a00      	cmp	r2, #0
 800283e:	d100      	bne.n	8002842 <__aeabi_dsub+0x212>
 8002840:	e0b5      	b.n	80029ae <__aeabi_dsub+0x37e>
 8002842:	4642      	mov	r2, r8
 8002844:	4644      	mov	r4, r8
 8002846:	1a82      	subs	r2, r0, r2
 8002848:	2c00      	cmp	r4, #0
 800284a:	d100      	bne.n	800284e <__aeabi_dsub+0x21e>
 800284c:	e138      	b.n	8002ac0 <__aeabi_dsub+0x490>
 800284e:	4e4e      	ldr	r6, [pc, #312]	; (8002988 <__aeabi_dsub+0x358>)
 8002850:	42b0      	cmp	r0, r6
 8002852:	d100      	bne.n	8002856 <__aeabi_dsub+0x226>
 8002854:	e1de      	b.n	8002c14 <__aeabi_dsub+0x5e4>
 8002856:	2680      	movs	r6, #128	; 0x80
 8002858:	4664      	mov	r4, ip
 800285a:	0436      	lsls	r6, r6, #16
 800285c:	4334      	orrs	r4, r6
 800285e:	46a4      	mov	ip, r4
 8002860:	2a38      	cmp	r2, #56	; 0x38
 8002862:	dd00      	ble.n	8002866 <__aeabi_dsub+0x236>
 8002864:	e196      	b.n	8002b94 <__aeabi_dsub+0x564>
 8002866:	2a1f      	cmp	r2, #31
 8002868:	dd00      	ble.n	800286c <__aeabi_dsub+0x23c>
 800286a:	e224      	b.n	8002cb6 <__aeabi_dsub+0x686>
 800286c:	2620      	movs	r6, #32
 800286e:	1ab4      	subs	r4, r6, r2
 8002870:	46a2      	mov	sl, r4
 8002872:	4664      	mov	r4, ip
 8002874:	4656      	mov	r6, sl
 8002876:	40b4      	lsls	r4, r6
 8002878:	46a1      	mov	r9, r4
 800287a:	001c      	movs	r4, r3
 800287c:	464e      	mov	r6, r9
 800287e:	40d4      	lsrs	r4, r2
 8002880:	4326      	orrs	r6, r4
 8002882:	0034      	movs	r4, r6
 8002884:	4656      	mov	r6, sl
 8002886:	40b3      	lsls	r3, r6
 8002888:	1e5e      	subs	r6, r3, #1
 800288a:	41b3      	sbcs	r3, r6
 800288c:	431c      	orrs	r4, r3
 800288e:	4663      	mov	r3, ip
 8002890:	40d3      	lsrs	r3, r2
 8002892:	18c9      	adds	r1, r1, r3
 8002894:	19e4      	adds	r4, r4, r7
 8002896:	42bc      	cmp	r4, r7
 8002898:	41bf      	sbcs	r7, r7
 800289a:	427f      	negs	r7, r7
 800289c:	46b9      	mov	r9, r7
 800289e:	4680      	mov	r8, r0
 80028a0:	4489      	add	r9, r1
 80028a2:	e0d8      	b.n	8002a56 <__aeabi_dsub+0x426>
 80028a4:	4640      	mov	r0, r8
 80028a6:	4c3b      	ldr	r4, [pc, #236]	; (8002994 <__aeabi_dsub+0x364>)
 80028a8:	3001      	adds	r0, #1
 80028aa:	4220      	tst	r0, r4
 80028ac:	d000      	beq.n	80028b0 <__aeabi_dsub+0x280>
 80028ae:	e0b4      	b.n	8002a1a <__aeabi_dsub+0x3ea>
 80028b0:	4640      	mov	r0, r8
 80028b2:	2800      	cmp	r0, #0
 80028b4:	d000      	beq.n	80028b8 <__aeabi_dsub+0x288>
 80028b6:	e144      	b.n	8002b42 <__aeabi_dsub+0x512>
 80028b8:	4660      	mov	r0, ip
 80028ba:	4318      	orrs	r0, r3
 80028bc:	d100      	bne.n	80028c0 <__aeabi_dsub+0x290>
 80028be:	e190      	b.n	8002be2 <__aeabi_dsub+0x5b2>
 80028c0:	0008      	movs	r0, r1
 80028c2:	4338      	orrs	r0, r7
 80028c4:	d000      	beq.n	80028c8 <__aeabi_dsub+0x298>
 80028c6:	e1aa      	b.n	8002c1e <__aeabi_dsub+0x5ee>
 80028c8:	4661      	mov	r1, ip
 80028ca:	08db      	lsrs	r3, r3, #3
 80028cc:	0749      	lsls	r1, r1, #29
 80028ce:	430b      	orrs	r3, r1
 80028d0:	4661      	mov	r1, ip
 80028d2:	08cc      	lsrs	r4, r1, #3
 80028d4:	e027      	b.n	8002926 <__aeabi_dsub+0x2f6>
 80028d6:	0008      	movs	r0, r1
 80028d8:	4338      	orrs	r0, r7
 80028da:	d061      	beq.n	80029a0 <__aeabi_dsub+0x370>
 80028dc:	1e50      	subs	r0, r2, #1
 80028de:	2a01      	cmp	r2, #1
 80028e0:	d100      	bne.n	80028e4 <__aeabi_dsub+0x2b4>
 80028e2:	e139      	b.n	8002b58 <__aeabi_dsub+0x528>
 80028e4:	42a2      	cmp	r2, r4
 80028e6:	d027      	beq.n	8002938 <__aeabi_dsub+0x308>
 80028e8:	0002      	movs	r2, r0
 80028ea:	e75d      	b.n	80027a8 <__aeabi_dsub+0x178>
 80028ec:	0002      	movs	r2, r0
 80028ee:	391f      	subs	r1, #31
 80028f0:	40ca      	lsrs	r2, r1
 80028f2:	0011      	movs	r1, r2
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	d003      	beq.n	8002900 <__aeabi_dsub+0x2d0>
 80028f8:	2240      	movs	r2, #64	; 0x40
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	4098      	lsls	r0, r3
 80028fe:	4304      	orrs	r4, r0
 8002900:	1e63      	subs	r3, r4, #1
 8002902:	419c      	sbcs	r4, r3
 8002904:	2300      	movs	r3, #0
 8002906:	4699      	mov	r9, r3
 8002908:	4698      	mov	r8, r3
 800290a:	430c      	orrs	r4, r1
 800290c:	0763      	lsls	r3, r4, #29
 800290e:	d000      	beq.n	8002912 <__aeabi_dsub+0x2e2>
 8002910:	e712      	b.n	8002738 <__aeabi_dsub+0x108>
 8002912:	464b      	mov	r3, r9
 8002914:	464a      	mov	r2, r9
 8002916:	08e4      	lsrs	r4, r4, #3
 8002918:	075b      	lsls	r3, r3, #29
 800291a:	4323      	orrs	r3, r4
 800291c:	08d4      	lsrs	r4, r2, #3
 800291e:	4642      	mov	r2, r8
 8002920:	4919      	ldr	r1, [pc, #100]	; (8002988 <__aeabi_dsub+0x358>)
 8002922:	428a      	cmp	r2, r1
 8002924:	d00e      	beq.n	8002944 <__aeabi_dsub+0x314>
 8002926:	0324      	lsls	r4, r4, #12
 8002928:	0552      	lsls	r2, r2, #21
 800292a:	0b24      	lsrs	r4, r4, #12
 800292c:	0d52      	lsrs	r2, r2, #21
 800292e:	e722      	b.n	8002776 <__aeabi_dsub+0x146>
 8002930:	000a      	movs	r2, r1
 8002932:	2400      	movs	r4, #0
 8002934:	2300      	movs	r3, #0
 8002936:	e71e      	b.n	8002776 <__aeabi_dsub+0x146>
 8002938:	08db      	lsrs	r3, r3, #3
 800293a:	4662      	mov	r2, ip
 800293c:	0752      	lsls	r2, r2, #29
 800293e:	4313      	orrs	r3, r2
 8002940:	4662      	mov	r2, ip
 8002942:	08d4      	lsrs	r4, r2, #3
 8002944:	001a      	movs	r2, r3
 8002946:	4322      	orrs	r2, r4
 8002948:	d100      	bne.n	800294c <__aeabi_dsub+0x31c>
 800294a:	e1fc      	b.n	8002d46 <__aeabi_dsub+0x716>
 800294c:	2280      	movs	r2, #128	; 0x80
 800294e:	0312      	lsls	r2, r2, #12
 8002950:	4314      	orrs	r4, r2
 8002952:	0324      	lsls	r4, r4, #12
 8002954:	4a0c      	ldr	r2, [pc, #48]	; (8002988 <__aeabi_dsub+0x358>)
 8002956:	0b24      	lsrs	r4, r4, #12
 8002958:	e70d      	b.n	8002776 <__aeabi_dsub+0x146>
 800295a:	0020      	movs	r0, r4
 800295c:	f000 fb74 	bl	8003048 <__clzsi2>
 8002960:	0001      	movs	r1, r0
 8002962:	3118      	adds	r1, #24
 8002964:	291f      	cmp	r1, #31
 8002966:	dc00      	bgt.n	800296a <__aeabi_dsub+0x33a>
 8002968:	e6c4      	b.n	80026f4 <__aeabi_dsub+0xc4>
 800296a:	3808      	subs	r0, #8
 800296c:	4084      	lsls	r4, r0
 800296e:	4643      	mov	r3, r8
 8002970:	0020      	movs	r0, r4
 8002972:	2400      	movs	r4, #0
 8002974:	4588      	cmp	r8, r1
 8002976:	dc00      	bgt.n	800297a <__aeabi_dsub+0x34a>
 8002978:	e6c8      	b.n	800270c <__aeabi_dsub+0xdc>
 800297a:	4a04      	ldr	r2, [pc, #16]	; (800298c <__aeabi_dsub+0x35c>)
 800297c:	1a5b      	subs	r3, r3, r1
 800297e:	4010      	ands	r0, r2
 8002980:	4698      	mov	r8, r3
 8002982:	4681      	mov	r9, r0
 8002984:	e6d6      	b.n	8002734 <__aeabi_dsub+0x104>
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	000007ff 	.word	0x000007ff
 800298c:	ff7fffff 	.word	0xff7fffff
 8002990:	fffff801 	.word	0xfffff801
 8002994:	000007fe 	.word	0x000007fe
 8002998:	430f      	orrs	r7, r1
 800299a:	1e7a      	subs	r2, r7, #1
 800299c:	4197      	sbcs	r7, r2
 800299e:	e691      	b.n	80026c4 <__aeabi_dsub+0x94>
 80029a0:	4661      	mov	r1, ip
 80029a2:	08db      	lsrs	r3, r3, #3
 80029a4:	0749      	lsls	r1, r1, #29
 80029a6:	430b      	orrs	r3, r1
 80029a8:	4661      	mov	r1, ip
 80029aa:	08cc      	lsrs	r4, r1, #3
 80029ac:	e7b8      	b.n	8002920 <__aeabi_dsub+0x2f0>
 80029ae:	4640      	mov	r0, r8
 80029b0:	4cd3      	ldr	r4, [pc, #844]	; (8002d00 <__aeabi_dsub+0x6d0>)
 80029b2:	3001      	adds	r0, #1
 80029b4:	4220      	tst	r0, r4
 80029b6:	d000      	beq.n	80029ba <__aeabi_dsub+0x38a>
 80029b8:	e0a2      	b.n	8002b00 <__aeabi_dsub+0x4d0>
 80029ba:	4640      	mov	r0, r8
 80029bc:	2800      	cmp	r0, #0
 80029be:	d000      	beq.n	80029c2 <__aeabi_dsub+0x392>
 80029c0:	e101      	b.n	8002bc6 <__aeabi_dsub+0x596>
 80029c2:	4660      	mov	r0, ip
 80029c4:	4318      	orrs	r0, r3
 80029c6:	d100      	bne.n	80029ca <__aeabi_dsub+0x39a>
 80029c8:	e15e      	b.n	8002c88 <__aeabi_dsub+0x658>
 80029ca:	0008      	movs	r0, r1
 80029cc:	4338      	orrs	r0, r7
 80029ce:	d000      	beq.n	80029d2 <__aeabi_dsub+0x3a2>
 80029d0:	e15f      	b.n	8002c92 <__aeabi_dsub+0x662>
 80029d2:	4661      	mov	r1, ip
 80029d4:	08db      	lsrs	r3, r3, #3
 80029d6:	0749      	lsls	r1, r1, #29
 80029d8:	430b      	orrs	r3, r1
 80029da:	4661      	mov	r1, ip
 80029dc:	08cc      	lsrs	r4, r1, #3
 80029de:	e7a2      	b.n	8002926 <__aeabi_dsub+0x2f6>
 80029e0:	4dc8      	ldr	r5, [pc, #800]	; (8002d04 <__aeabi_dsub+0x6d4>)
 80029e2:	42a8      	cmp	r0, r5
 80029e4:	d100      	bne.n	80029e8 <__aeabi_dsub+0x3b8>
 80029e6:	e0cf      	b.n	8002b88 <__aeabi_dsub+0x558>
 80029e8:	2580      	movs	r5, #128	; 0x80
 80029ea:	4664      	mov	r4, ip
 80029ec:	042d      	lsls	r5, r5, #16
 80029ee:	432c      	orrs	r4, r5
 80029f0:	46a4      	mov	ip, r4
 80029f2:	2a38      	cmp	r2, #56	; 0x38
 80029f4:	dc56      	bgt.n	8002aa4 <__aeabi_dsub+0x474>
 80029f6:	2a1f      	cmp	r2, #31
 80029f8:	dd00      	ble.n	80029fc <__aeabi_dsub+0x3cc>
 80029fa:	e0d1      	b.n	8002ba0 <__aeabi_dsub+0x570>
 80029fc:	2520      	movs	r5, #32
 80029fe:	001e      	movs	r6, r3
 8002a00:	1aad      	subs	r5, r5, r2
 8002a02:	4664      	mov	r4, ip
 8002a04:	40ab      	lsls	r3, r5
 8002a06:	40ac      	lsls	r4, r5
 8002a08:	40d6      	lsrs	r6, r2
 8002a0a:	1e5d      	subs	r5, r3, #1
 8002a0c:	41ab      	sbcs	r3, r5
 8002a0e:	4334      	orrs	r4, r6
 8002a10:	4323      	orrs	r3, r4
 8002a12:	4664      	mov	r4, ip
 8002a14:	40d4      	lsrs	r4, r2
 8002a16:	1b09      	subs	r1, r1, r4
 8002a18:	e049      	b.n	8002aae <__aeabi_dsub+0x47e>
 8002a1a:	4660      	mov	r0, ip
 8002a1c:	1bdc      	subs	r4, r3, r7
 8002a1e:	1a46      	subs	r6, r0, r1
 8002a20:	42a3      	cmp	r3, r4
 8002a22:	4180      	sbcs	r0, r0
 8002a24:	4240      	negs	r0, r0
 8002a26:	4681      	mov	r9, r0
 8002a28:	0030      	movs	r0, r6
 8002a2a:	464e      	mov	r6, r9
 8002a2c:	1b80      	subs	r0, r0, r6
 8002a2e:	4681      	mov	r9, r0
 8002a30:	0200      	lsls	r0, r0, #8
 8002a32:	d476      	bmi.n	8002b22 <__aeabi_dsub+0x4f2>
 8002a34:	464b      	mov	r3, r9
 8002a36:	4323      	orrs	r3, r4
 8002a38:	d000      	beq.n	8002a3c <__aeabi_dsub+0x40c>
 8002a3a:	e652      	b.n	80026e2 <__aeabi_dsub+0xb2>
 8002a3c:	2400      	movs	r4, #0
 8002a3e:	2500      	movs	r5, #0
 8002a40:	e771      	b.n	8002926 <__aeabi_dsub+0x2f6>
 8002a42:	4339      	orrs	r1, r7
 8002a44:	000c      	movs	r4, r1
 8002a46:	1e62      	subs	r2, r4, #1
 8002a48:	4194      	sbcs	r4, r2
 8002a4a:	18e4      	adds	r4, r4, r3
 8002a4c:	429c      	cmp	r4, r3
 8002a4e:	419b      	sbcs	r3, r3
 8002a50:	425b      	negs	r3, r3
 8002a52:	4463      	add	r3, ip
 8002a54:	4699      	mov	r9, r3
 8002a56:	464b      	mov	r3, r9
 8002a58:	021b      	lsls	r3, r3, #8
 8002a5a:	d400      	bmi.n	8002a5e <__aeabi_dsub+0x42e>
 8002a5c:	e756      	b.n	800290c <__aeabi_dsub+0x2dc>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	469c      	mov	ip, r3
 8002a62:	4ba8      	ldr	r3, [pc, #672]	; (8002d04 <__aeabi_dsub+0x6d4>)
 8002a64:	44e0      	add	r8, ip
 8002a66:	4598      	cmp	r8, r3
 8002a68:	d038      	beq.n	8002adc <__aeabi_dsub+0x4ac>
 8002a6a:	464b      	mov	r3, r9
 8002a6c:	48a6      	ldr	r0, [pc, #664]	; (8002d08 <__aeabi_dsub+0x6d8>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	4003      	ands	r3, r0
 8002a72:	0018      	movs	r0, r3
 8002a74:	0863      	lsrs	r3, r4, #1
 8002a76:	4014      	ands	r4, r2
 8002a78:	431c      	orrs	r4, r3
 8002a7a:	07c3      	lsls	r3, r0, #31
 8002a7c:	431c      	orrs	r4, r3
 8002a7e:	0843      	lsrs	r3, r0, #1
 8002a80:	4699      	mov	r9, r3
 8002a82:	e657      	b.n	8002734 <__aeabi_dsub+0x104>
 8002a84:	0010      	movs	r0, r2
 8002a86:	000e      	movs	r6, r1
 8002a88:	3820      	subs	r0, #32
 8002a8a:	40c6      	lsrs	r6, r0
 8002a8c:	2a20      	cmp	r2, #32
 8002a8e:	d004      	beq.n	8002a9a <__aeabi_dsub+0x46a>
 8002a90:	2040      	movs	r0, #64	; 0x40
 8002a92:	1a82      	subs	r2, r0, r2
 8002a94:	4091      	lsls	r1, r2
 8002a96:	430f      	orrs	r7, r1
 8002a98:	46b9      	mov	r9, r7
 8002a9a:	464f      	mov	r7, r9
 8002a9c:	1e7a      	subs	r2, r7, #1
 8002a9e:	4197      	sbcs	r7, r2
 8002aa0:	4337      	orrs	r7, r6
 8002aa2:	e60f      	b.n	80026c4 <__aeabi_dsub+0x94>
 8002aa4:	4662      	mov	r2, ip
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	0013      	movs	r3, r2
 8002aaa:	1e5a      	subs	r2, r3, #1
 8002aac:	4193      	sbcs	r3, r2
 8002aae:	1afc      	subs	r4, r7, r3
 8002ab0:	42a7      	cmp	r7, r4
 8002ab2:	41bf      	sbcs	r7, r7
 8002ab4:	427f      	negs	r7, r7
 8002ab6:	1bcb      	subs	r3, r1, r7
 8002ab8:	4699      	mov	r9, r3
 8002aba:	465d      	mov	r5, fp
 8002abc:	4680      	mov	r8, r0
 8002abe:	e608      	b.n	80026d2 <__aeabi_dsub+0xa2>
 8002ac0:	4666      	mov	r6, ip
 8002ac2:	431e      	orrs	r6, r3
 8002ac4:	d100      	bne.n	8002ac8 <__aeabi_dsub+0x498>
 8002ac6:	e0be      	b.n	8002c46 <__aeabi_dsub+0x616>
 8002ac8:	1e56      	subs	r6, r2, #1
 8002aca:	2a01      	cmp	r2, #1
 8002acc:	d100      	bne.n	8002ad0 <__aeabi_dsub+0x4a0>
 8002ace:	e109      	b.n	8002ce4 <__aeabi_dsub+0x6b4>
 8002ad0:	4c8c      	ldr	r4, [pc, #560]	; (8002d04 <__aeabi_dsub+0x6d4>)
 8002ad2:	42a2      	cmp	r2, r4
 8002ad4:	d100      	bne.n	8002ad8 <__aeabi_dsub+0x4a8>
 8002ad6:	e119      	b.n	8002d0c <__aeabi_dsub+0x6dc>
 8002ad8:	0032      	movs	r2, r6
 8002ada:	e6c1      	b.n	8002860 <__aeabi_dsub+0x230>
 8002adc:	4642      	mov	r2, r8
 8002ade:	2400      	movs	r4, #0
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	e648      	b.n	8002776 <__aeabi_dsub+0x146>
 8002ae4:	2020      	movs	r0, #32
 8002ae6:	000c      	movs	r4, r1
 8002ae8:	1a80      	subs	r0, r0, r2
 8002aea:	003e      	movs	r6, r7
 8002aec:	4087      	lsls	r7, r0
 8002aee:	4084      	lsls	r4, r0
 8002af0:	40d6      	lsrs	r6, r2
 8002af2:	1e78      	subs	r0, r7, #1
 8002af4:	4187      	sbcs	r7, r0
 8002af6:	40d1      	lsrs	r1, r2
 8002af8:	4334      	orrs	r4, r6
 8002afa:	433c      	orrs	r4, r7
 8002afc:	448c      	add	ip, r1
 8002afe:	e7a4      	b.n	8002a4a <__aeabi_dsub+0x41a>
 8002b00:	4a80      	ldr	r2, [pc, #512]	; (8002d04 <__aeabi_dsub+0x6d4>)
 8002b02:	4290      	cmp	r0, r2
 8002b04:	d100      	bne.n	8002b08 <__aeabi_dsub+0x4d8>
 8002b06:	e0e9      	b.n	8002cdc <__aeabi_dsub+0x6ac>
 8002b08:	19df      	adds	r7, r3, r7
 8002b0a:	429f      	cmp	r7, r3
 8002b0c:	419b      	sbcs	r3, r3
 8002b0e:	4461      	add	r1, ip
 8002b10:	425b      	negs	r3, r3
 8002b12:	18c9      	adds	r1, r1, r3
 8002b14:	07cc      	lsls	r4, r1, #31
 8002b16:	087f      	lsrs	r7, r7, #1
 8002b18:	084b      	lsrs	r3, r1, #1
 8002b1a:	4699      	mov	r9, r3
 8002b1c:	4680      	mov	r8, r0
 8002b1e:	433c      	orrs	r4, r7
 8002b20:	e6f4      	b.n	800290c <__aeabi_dsub+0x2dc>
 8002b22:	1afc      	subs	r4, r7, r3
 8002b24:	42a7      	cmp	r7, r4
 8002b26:	41bf      	sbcs	r7, r7
 8002b28:	4663      	mov	r3, ip
 8002b2a:	427f      	negs	r7, r7
 8002b2c:	1ac9      	subs	r1, r1, r3
 8002b2e:	1bcb      	subs	r3, r1, r7
 8002b30:	4699      	mov	r9, r3
 8002b32:	465d      	mov	r5, fp
 8002b34:	e5d5      	b.n	80026e2 <__aeabi_dsub+0xb2>
 8002b36:	08ff      	lsrs	r7, r7, #3
 8002b38:	074b      	lsls	r3, r1, #29
 8002b3a:	465d      	mov	r5, fp
 8002b3c:	433b      	orrs	r3, r7
 8002b3e:	08cc      	lsrs	r4, r1, #3
 8002b40:	e6ee      	b.n	8002920 <__aeabi_dsub+0x2f0>
 8002b42:	4662      	mov	r2, ip
 8002b44:	431a      	orrs	r2, r3
 8002b46:	d000      	beq.n	8002b4a <__aeabi_dsub+0x51a>
 8002b48:	e082      	b.n	8002c50 <__aeabi_dsub+0x620>
 8002b4a:	000b      	movs	r3, r1
 8002b4c:	433b      	orrs	r3, r7
 8002b4e:	d11b      	bne.n	8002b88 <__aeabi_dsub+0x558>
 8002b50:	2480      	movs	r4, #128	; 0x80
 8002b52:	2500      	movs	r5, #0
 8002b54:	0324      	lsls	r4, r4, #12
 8002b56:	e6f9      	b.n	800294c <__aeabi_dsub+0x31c>
 8002b58:	19dc      	adds	r4, r3, r7
 8002b5a:	429c      	cmp	r4, r3
 8002b5c:	419b      	sbcs	r3, r3
 8002b5e:	4461      	add	r1, ip
 8002b60:	4689      	mov	r9, r1
 8002b62:	425b      	negs	r3, r3
 8002b64:	4499      	add	r9, r3
 8002b66:	464b      	mov	r3, r9
 8002b68:	021b      	lsls	r3, r3, #8
 8002b6a:	d444      	bmi.n	8002bf6 <__aeabi_dsub+0x5c6>
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	4698      	mov	r8, r3
 8002b70:	e6cc      	b.n	800290c <__aeabi_dsub+0x2dc>
 8002b72:	1bdc      	subs	r4, r3, r7
 8002b74:	4662      	mov	r2, ip
 8002b76:	42a3      	cmp	r3, r4
 8002b78:	419b      	sbcs	r3, r3
 8002b7a:	1a51      	subs	r1, r2, r1
 8002b7c:	425b      	negs	r3, r3
 8002b7e:	1acb      	subs	r3, r1, r3
 8002b80:	4699      	mov	r9, r3
 8002b82:	2301      	movs	r3, #1
 8002b84:	4698      	mov	r8, r3
 8002b86:	e5a4      	b.n	80026d2 <__aeabi_dsub+0xa2>
 8002b88:	08ff      	lsrs	r7, r7, #3
 8002b8a:	074b      	lsls	r3, r1, #29
 8002b8c:	465d      	mov	r5, fp
 8002b8e:	433b      	orrs	r3, r7
 8002b90:	08cc      	lsrs	r4, r1, #3
 8002b92:	e6d7      	b.n	8002944 <__aeabi_dsub+0x314>
 8002b94:	4662      	mov	r2, ip
 8002b96:	431a      	orrs	r2, r3
 8002b98:	0014      	movs	r4, r2
 8002b9a:	1e63      	subs	r3, r4, #1
 8002b9c:	419c      	sbcs	r4, r3
 8002b9e:	e679      	b.n	8002894 <__aeabi_dsub+0x264>
 8002ba0:	0015      	movs	r5, r2
 8002ba2:	4664      	mov	r4, ip
 8002ba4:	3d20      	subs	r5, #32
 8002ba6:	40ec      	lsrs	r4, r5
 8002ba8:	46a0      	mov	r8, r4
 8002baa:	2a20      	cmp	r2, #32
 8002bac:	d005      	beq.n	8002bba <__aeabi_dsub+0x58a>
 8002bae:	2540      	movs	r5, #64	; 0x40
 8002bb0:	4664      	mov	r4, ip
 8002bb2:	1aaa      	subs	r2, r5, r2
 8002bb4:	4094      	lsls	r4, r2
 8002bb6:	4323      	orrs	r3, r4
 8002bb8:	469a      	mov	sl, r3
 8002bba:	4654      	mov	r4, sl
 8002bbc:	1e63      	subs	r3, r4, #1
 8002bbe:	419c      	sbcs	r4, r3
 8002bc0:	4643      	mov	r3, r8
 8002bc2:	4323      	orrs	r3, r4
 8002bc4:	e773      	b.n	8002aae <__aeabi_dsub+0x47e>
 8002bc6:	4662      	mov	r2, ip
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	d023      	beq.n	8002c14 <__aeabi_dsub+0x5e4>
 8002bcc:	000a      	movs	r2, r1
 8002bce:	433a      	orrs	r2, r7
 8002bd0:	d000      	beq.n	8002bd4 <__aeabi_dsub+0x5a4>
 8002bd2:	e0a0      	b.n	8002d16 <__aeabi_dsub+0x6e6>
 8002bd4:	4662      	mov	r2, ip
 8002bd6:	08db      	lsrs	r3, r3, #3
 8002bd8:	0752      	lsls	r2, r2, #29
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	4662      	mov	r2, ip
 8002bde:	08d4      	lsrs	r4, r2, #3
 8002be0:	e6b0      	b.n	8002944 <__aeabi_dsub+0x314>
 8002be2:	000b      	movs	r3, r1
 8002be4:	433b      	orrs	r3, r7
 8002be6:	d100      	bne.n	8002bea <__aeabi_dsub+0x5ba>
 8002be8:	e728      	b.n	8002a3c <__aeabi_dsub+0x40c>
 8002bea:	08ff      	lsrs	r7, r7, #3
 8002bec:	074b      	lsls	r3, r1, #29
 8002bee:	465d      	mov	r5, fp
 8002bf0:	433b      	orrs	r3, r7
 8002bf2:	08cc      	lsrs	r4, r1, #3
 8002bf4:	e697      	b.n	8002926 <__aeabi_dsub+0x2f6>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	4698      	mov	r8, r3
 8002bfa:	e736      	b.n	8002a6a <__aeabi_dsub+0x43a>
 8002bfc:	1afc      	subs	r4, r7, r3
 8002bfe:	42a7      	cmp	r7, r4
 8002c00:	41bf      	sbcs	r7, r7
 8002c02:	4663      	mov	r3, ip
 8002c04:	427f      	negs	r7, r7
 8002c06:	1ac9      	subs	r1, r1, r3
 8002c08:	1bcb      	subs	r3, r1, r7
 8002c0a:	4699      	mov	r9, r3
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	465d      	mov	r5, fp
 8002c10:	4698      	mov	r8, r3
 8002c12:	e55e      	b.n	80026d2 <__aeabi_dsub+0xa2>
 8002c14:	074b      	lsls	r3, r1, #29
 8002c16:	08ff      	lsrs	r7, r7, #3
 8002c18:	433b      	orrs	r3, r7
 8002c1a:	08cc      	lsrs	r4, r1, #3
 8002c1c:	e692      	b.n	8002944 <__aeabi_dsub+0x314>
 8002c1e:	1bdc      	subs	r4, r3, r7
 8002c20:	4660      	mov	r0, ip
 8002c22:	42a3      	cmp	r3, r4
 8002c24:	41b6      	sbcs	r6, r6
 8002c26:	1a40      	subs	r0, r0, r1
 8002c28:	4276      	negs	r6, r6
 8002c2a:	1b80      	subs	r0, r0, r6
 8002c2c:	4681      	mov	r9, r0
 8002c2e:	0200      	lsls	r0, r0, #8
 8002c30:	d560      	bpl.n	8002cf4 <__aeabi_dsub+0x6c4>
 8002c32:	1afc      	subs	r4, r7, r3
 8002c34:	42a7      	cmp	r7, r4
 8002c36:	41bf      	sbcs	r7, r7
 8002c38:	4663      	mov	r3, ip
 8002c3a:	427f      	negs	r7, r7
 8002c3c:	1ac9      	subs	r1, r1, r3
 8002c3e:	1bcb      	subs	r3, r1, r7
 8002c40:	4699      	mov	r9, r3
 8002c42:	465d      	mov	r5, fp
 8002c44:	e576      	b.n	8002734 <__aeabi_dsub+0x104>
 8002c46:	08ff      	lsrs	r7, r7, #3
 8002c48:	074b      	lsls	r3, r1, #29
 8002c4a:	433b      	orrs	r3, r7
 8002c4c:	08cc      	lsrs	r4, r1, #3
 8002c4e:	e667      	b.n	8002920 <__aeabi_dsub+0x2f0>
 8002c50:	000a      	movs	r2, r1
 8002c52:	08db      	lsrs	r3, r3, #3
 8002c54:	433a      	orrs	r2, r7
 8002c56:	d100      	bne.n	8002c5a <__aeabi_dsub+0x62a>
 8002c58:	e66f      	b.n	800293a <__aeabi_dsub+0x30a>
 8002c5a:	4662      	mov	r2, ip
 8002c5c:	0752      	lsls	r2, r2, #29
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	4662      	mov	r2, ip
 8002c62:	08d4      	lsrs	r4, r2, #3
 8002c64:	2280      	movs	r2, #128	; 0x80
 8002c66:	0312      	lsls	r2, r2, #12
 8002c68:	4214      	tst	r4, r2
 8002c6a:	d007      	beq.n	8002c7c <__aeabi_dsub+0x64c>
 8002c6c:	08c8      	lsrs	r0, r1, #3
 8002c6e:	4210      	tst	r0, r2
 8002c70:	d104      	bne.n	8002c7c <__aeabi_dsub+0x64c>
 8002c72:	465d      	mov	r5, fp
 8002c74:	0004      	movs	r4, r0
 8002c76:	08fb      	lsrs	r3, r7, #3
 8002c78:	0749      	lsls	r1, r1, #29
 8002c7a:	430b      	orrs	r3, r1
 8002c7c:	0f5a      	lsrs	r2, r3, #29
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	08db      	lsrs	r3, r3, #3
 8002c82:	0752      	lsls	r2, r2, #29
 8002c84:	4313      	orrs	r3, r2
 8002c86:	e65d      	b.n	8002944 <__aeabi_dsub+0x314>
 8002c88:	074b      	lsls	r3, r1, #29
 8002c8a:	08ff      	lsrs	r7, r7, #3
 8002c8c:	433b      	orrs	r3, r7
 8002c8e:	08cc      	lsrs	r4, r1, #3
 8002c90:	e649      	b.n	8002926 <__aeabi_dsub+0x2f6>
 8002c92:	19dc      	adds	r4, r3, r7
 8002c94:	429c      	cmp	r4, r3
 8002c96:	419b      	sbcs	r3, r3
 8002c98:	4461      	add	r1, ip
 8002c9a:	4689      	mov	r9, r1
 8002c9c:	425b      	negs	r3, r3
 8002c9e:	4499      	add	r9, r3
 8002ca0:	464b      	mov	r3, r9
 8002ca2:	021b      	lsls	r3, r3, #8
 8002ca4:	d400      	bmi.n	8002ca8 <__aeabi_dsub+0x678>
 8002ca6:	e631      	b.n	800290c <__aeabi_dsub+0x2dc>
 8002ca8:	464a      	mov	r2, r9
 8002caa:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <__aeabi_dsub+0x6d8>)
 8002cac:	401a      	ands	r2, r3
 8002cae:	2301      	movs	r3, #1
 8002cb0:	4691      	mov	r9, r2
 8002cb2:	4698      	mov	r8, r3
 8002cb4:	e62a      	b.n	800290c <__aeabi_dsub+0x2dc>
 8002cb6:	0016      	movs	r6, r2
 8002cb8:	4664      	mov	r4, ip
 8002cba:	3e20      	subs	r6, #32
 8002cbc:	40f4      	lsrs	r4, r6
 8002cbe:	46a0      	mov	r8, r4
 8002cc0:	2a20      	cmp	r2, #32
 8002cc2:	d005      	beq.n	8002cd0 <__aeabi_dsub+0x6a0>
 8002cc4:	2640      	movs	r6, #64	; 0x40
 8002cc6:	4664      	mov	r4, ip
 8002cc8:	1ab2      	subs	r2, r6, r2
 8002cca:	4094      	lsls	r4, r2
 8002ccc:	4323      	orrs	r3, r4
 8002cce:	469a      	mov	sl, r3
 8002cd0:	4654      	mov	r4, sl
 8002cd2:	1e63      	subs	r3, r4, #1
 8002cd4:	419c      	sbcs	r4, r3
 8002cd6:	4643      	mov	r3, r8
 8002cd8:	431c      	orrs	r4, r3
 8002cda:	e5db      	b.n	8002894 <__aeabi_dsub+0x264>
 8002cdc:	0002      	movs	r2, r0
 8002cde:	2400      	movs	r4, #0
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	e548      	b.n	8002776 <__aeabi_dsub+0x146>
 8002ce4:	19dc      	adds	r4, r3, r7
 8002ce6:	42bc      	cmp	r4, r7
 8002ce8:	41bf      	sbcs	r7, r7
 8002cea:	4461      	add	r1, ip
 8002cec:	4689      	mov	r9, r1
 8002cee:	427f      	negs	r7, r7
 8002cf0:	44b9      	add	r9, r7
 8002cf2:	e738      	b.n	8002b66 <__aeabi_dsub+0x536>
 8002cf4:	464b      	mov	r3, r9
 8002cf6:	4323      	orrs	r3, r4
 8002cf8:	d100      	bne.n	8002cfc <__aeabi_dsub+0x6cc>
 8002cfa:	e69f      	b.n	8002a3c <__aeabi_dsub+0x40c>
 8002cfc:	e606      	b.n	800290c <__aeabi_dsub+0x2dc>
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	000007fe 	.word	0x000007fe
 8002d04:	000007ff 	.word	0x000007ff
 8002d08:	ff7fffff 	.word	0xff7fffff
 8002d0c:	08ff      	lsrs	r7, r7, #3
 8002d0e:	074b      	lsls	r3, r1, #29
 8002d10:	433b      	orrs	r3, r7
 8002d12:	08cc      	lsrs	r4, r1, #3
 8002d14:	e616      	b.n	8002944 <__aeabi_dsub+0x314>
 8002d16:	4662      	mov	r2, ip
 8002d18:	08db      	lsrs	r3, r3, #3
 8002d1a:	0752      	lsls	r2, r2, #29
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	4662      	mov	r2, ip
 8002d20:	08d4      	lsrs	r4, r2, #3
 8002d22:	2280      	movs	r2, #128	; 0x80
 8002d24:	0312      	lsls	r2, r2, #12
 8002d26:	4214      	tst	r4, r2
 8002d28:	d007      	beq.n	8002d3a <__aeabi_dsub+0x70a>
 8002d2a:	08c8      	lsrs	r0, r1, #3
 8002d2c:	4210      	tst	r0, r2
 8002d2e:	d104      	bne.n	8002d3a <__aeabi_dsub+0x70a>
 8002d30:	465d      	mov	r5, fp
 8002d32:	0004      	movs	r4, r0
 8002d34:	08fb      	lsrs	r3, r7, #3
 8002d36:	0749      	lsls	r1, r1, #29
 8002d38:	430b      	orrs	r3, r1
 8002d3a:	0f5a      	lsrs	r2, r3, #29
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	0752      	lsls	r2, r2, #29
 8002d40:	08db      	lsrs	r3, r3, #3
 8002d42:	4313      	orrs	r3, r2
 8002d44:	e5fe      	b.n	8002944 <__aeabi_dsub+0x314>
 8002d46:	2300      	movs	r3, #0
 8002d48:	4a01      	ldr	r2, [pc, #4]	; (8002d50 <__aeabi_dsub+0x720>)
 8002d4a:	001c      	movs	r4, r3
 8002d4c:	e513      	b.n	8002776 <__aeabi_dsub+0x146>
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	000007ff 	.word	0x000007ff

08002d54 <__aeabi_dcmpun>:
 8002d54:	b570      	push	{r4, r5, r6, lr}
 8002d56:	0005      	movs	r5, r0
 8002d58:	480c      	ldr	r0, [pc, #48]	; (8002d8c <__aeabi_dcmpun+0x38>)
 8002d5a:	031c      	lsls	r4, r3, #12
 8002d5c:	0016      	movs	r6, r2
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	030a      	lsls	r2, r1, #12
 8002d62:	0049      	lsls	r1, r1, #1
 8002d64:	0b12      	lsrs	r2, r2, #12
 8002d66:	0d49      	lsrs	r1, r1, #21
 8002d68:	0b24      	lsrs	r4, r4, #12
 8002d6a:	0d5b      	lsrs	r3, r3, #21
 8002d6c:	4281      	cmp	r1, r0
 8002d6e:	d008      	beq.n	8002d82 <__aeabi_dcmpun+0x2e>
 8002d70:	4a06      	ldr	r2, [pc, #24]	; (8002d8c <__aeabi_dcmpun+0x38>)
 8002d72:	2000      	movs	r0, #0
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d103      	bne.n	8002d80 <__aeabi_dcmpun+0x2c>
 8002d78:	0020      	movs	r0, r4
 8002d7a:	4330      	orrs	r0, r6
 8002d7c:	1e43      	subs	r3, r0, #1
 8002d7e:	4198      	sbcs	r0, r3
 8002d80:	bd70      	pop	{r4, r5, r6, pc}
 8002d82:	2001      	movs	r0, #1
 8002d84:	432a      	orrs	r2, r5
 8002d86:	d1fb      	bne.n	8002d80 <__aeabi_dcmpun+0x2c>
 8002d88:	e7f2      	b.n	8002d70 <__aeabi_dcmpun+0x1c>
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	000007ff 	.word	0x000007ff

08002d90 <__aeabi_d2iz>:
 8002d90:	000a      	movs	r2, r1
 8002d92:	b530      	push	{r4, r5, lr}
 8002d94:	4c13      	ldr	r4, [pc, #76]	; (8002de4 <__aeabi_d2iz+0x54>)
 8002d96:	0053      	lsls	r3, r2, #1
 8002d98:	0309      	lsls	r1, r1, #12
 8002d9a:	0005      	movs	r5, r0
 8002d9c:	0b09      	lsrs	r1, r1, #12
 8002d9e:	2000      	movs	r0, #0
 8002da0:	0d5b      	lsrs	r3, r3, #21
 8002da2:	0fd2      	lsrs	r2, r2, #31
 8002da4:	42a3      	cmp	r3, r4
 8002da6:	dd04      	ble.n	8002db2 <__aeabi_d2iz+0x22>
 8002da8:	480f      	ldr	r0, [pc, #60]	; (8002de8 <__aeabi_d2iz+0x58>)
 8002daa:	4283      	cmp	r3, r0
 8002dac:	dd02      	ble.n	8002db4 <__aeabi_d2iz+0x24>
 8002dae:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <__aeabi_d2iz+0x5c>)
 8002db0:	18d0      	adds	r0, r2, r3
 8002db2:	bd30      	pop	{r4, r5, pc}
 8002db4:	2080      	movs	r0, #128	; 0x80
 8002db6:	0340      	lsls	r0, r0, #13
 8002db8:	4301      	orrs	r1, r0
 8002dba:	480d      	ldr	r0, [pc, #52]	; (8002df0 <__aeabi_d2iz+0x60>)
 8002dbc:	1ac0      	subs	r0, r0, r3
 8002dbe:	281f      	cmp	r0, #31
 8002dc0:	dd08      	ble.n	8002dd4 <__aeabi_d2iz+0x44>
 8002dc2:	480c      	ldr	r0, [pc, #48]	; (8002df4 <__aeabi_d2iz+0x64>)
 8002dc4:	1ac3      	subs	r3, r0, r3
 8002dc6:	40d9      	lsrs	r1, r3
 8002dc8:	000b      	movs	r3, r1
 8002dca:	4258      	negs	r0, r3
 8002dcc:	2a00      	cmp	r2, #0
 8002dce:	d1f0      	bne.n	8002db2 <__aeabi_d2iz+0x22>
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	e7ee      	b.n	8002db2 <__aeabi_d2iz+0x22>
 8002dd4:	4c08      	ldr	r4, [pc, #32]	; (8002df8 <__aeabi_d2iz+0x68>)
 8002dd6:	40c5      	lsrs	r5, r0
 8002dd8:	46a4      	mov	ip, r4
 8002dda:	4463      	add	r3, ip
 8002ddc:	4099      	lsls	r1, r3
 8002dde:	000b      	movs	r3, r1
 8002de0:	432b      	orrs	r3, r5
 8002de2:	e7f2      	b.n	8002dca <__aeabi_d2iz+0x3a>
 8002de4:	000003fe 	.word	0x000003fe
 8002de8:	0000041d 	.word	0x0000041d
 8002dec:	7fffffff 	.word	0x7fffffff
 8002df0:	00000433 	.word	0x00000433
 8002df4:	00000413 	.word	0x00000413
 8002df8:	fffffbed 	.word	0xfffffbed

08002dfc <__aeabi_i2d>:
 8002dfc:	b570      	push	{r4, r5, r6, lr}
 8002dfe:	2800      	cmp	r0, #0
 8002e00:	d016      	beq.n	8002e30 <__aeabi_i2d+0x34>
 8002e02:	17c3      	asrs	r3, r0, #31
 8002e04:	18c5      	adds	r5, r0, r3
 8002e06:	405d      	eors	r5, r3
 8002e08:	0fc4      	lsrs	r4, r0, #31
 8002e0a:	0028      	movs	r0, r5
 8002e0c:	f000 f91c 	bl	8003048 <__clzsi2>
 8002e10:	4a11      	ldr	r2, [pc, #68]	; (8002e58 <__aeabi_i2d+0x5c>)
 8002e12:	1a12      	subs	r2, r2, r0
 8002e14:	280a      	cmp	r0, #10
 8002e16:	dc16      	bgt.n	8002e46 <__aeabi_i2d+0x4a>
 8002e18:	0003      	movs	r3, r0
 8002e1a:	002e      	movs	r6, r5
 8002e1c:	3315      	adds	r3, #21
 8002e1e:	409e      	lsls	r6, r3
 8002e20:	230b      	movs	r3, #11
 8002e22:	1a18      	subs	r0, r3, r0
 8002e24:	40c5      	lsrs	r5, r0
 8002e26:	0552      	lsls	r2, r2, #21
 8002e28:	032d      	lsls	r5, r5, #12
 8002e2a:	0b2d      	lsrs	r5, r5, #12
 8002e2c:	0d53      	lsrs	r3, r2, #21
 8002e2e:	e003      	b.n	8002e38 <__aeabi_i2d+0x3c>
 8002e30:	2400      	movs	r4, #0
 8002e32:	2300      	movs	r3, #0
 8002e34:	2500      	movs	r5, #0
 8002e36:	2600      	movs	r6, #0
 8002e38:	051b      	lsls	r3, r3, #20
 8002e3a:	432b      	orrs	r3, r5
 8002e3c:	07e4      	lsls	r4, r4, #31
 8002e3e:	4323      	orrs	r3, r4
 8002e40:	0030      	movs	r0, r6
 8002e42:	0019      	movs	r1, r3
 8002e44:	bd70      	pop	{r4, r5, r6, pc}
 8002e46:	380b      	subs	r0, #11
 8002e48:	4085      	lsls	r5, r0
 8002e4a:	0552      	lsls	r2, r2, #21
 8002e4c:	032d      	lsls	r5, r5, #12
 8002e4e:	2600      	movs	r6, #0
 8002e50:	0b2d      	lsrs	r5, r5, #12
 8002e52:	0d53      	lsrs	r3, r2, #21
 8002e54:	e7f0      	b.n	8002e38 <__aeabi_i2d+0x3c>
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	0000041e 	.word	0x0000041e

08002e5c <__aeabi_ui2d>:
 8002e5c:	b510      	push	{r4, lr}
 8002e5e:	1e04      	subs	r4, r0, #0
 8002e60:	d010      	beq.n	8002e84 <__aeabi_ui2d+0x28>
 8002e62:	f000 f8f1 	bl	8003048 <__clzsi2>
 8002e66:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <__aeabi_ui2d+0x48>)
 8002e68:	1a1b      	subs	r3, r3, r0
 8002e6a:	280a      	cmp	r0, #10
 8002e6c:	dc11      	bgt.n	8002e92 <__aeabi_ui2d+0x36>
 8002e6e:	220b      	movs	r2, #11
 8002e70:	0021      	movs	r1, r4
 8002e72:	1a12      	subs	r2, r2, r0
 8002e74:	40d1      	lsrs	r1, r2
 8002e76:	3015      	adds	r0, #21
 8002e78:	030a      	lsls	r2, r1, #12
 8002e7a:	055b      	lsls	r3, r3, #21
 8002e7c:	4084      	lsls	r4, r0
 8002e7e:	0b12      	lsrs	r2, r2, #12
 8002e80:	0d5b      	lsrs	r3, r3, #21
 8002e82:	e001      	b.n	8002e88 <__aeabi_ui2d+0x2c>
 8002e84:	2300      	movs	r3, #0
 8002e86:	2200      	movs	r2, #0
 8002e88:	051b      	lsls	r3, r3, #20
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	0020      	movs	r0, r4
 8002e8e:	0019      	movs	r1, r3
 8002e90:	bd10      	pop	{r4, pc}
 8002e92:	0022      	movs	r2, r4
 8002e94:	380b      	subs	r0, #11
 8002e96:	4082      	lsls	r2, r0
 8002e98:	055b      	lsls	r3, r3, #21
 8002e9a:	0312      	lsls	r2, r2, #12
 8002e9c:	2400      	movs	r4, #0
 8002e9e:	0b12      	lsrs	r2, r2, #12
 8002ea0:	0d5b      	lsrs	r3, r3, #21
 8002ea2:	e7f1      	b.n	8002e88 <__aeabi_ui2d+0x2c>
 8002ea4:	0000041e 	.word	0x0000041e

08002ea8 <__aeabi_f2d>:
 8002ea8:	b570      	push	{r4, r5, r6, lr}
 8002eaa:	0043      	lsls	r3, r0, #1
 8002eac:	0246      	lsls	r6, r0, #9
 8002eae:	0fc4      	lsrs	r4, r0, #31
 8002eb0:	20fe      	movs	r0, #254	; 0xfe
 8002eb2:	0e1b      	lsrs	r3, r3, #24
 8002eb4:	1c59      	adds	r1, r3, #1
 8002eb6:	0a75      	lsrs	r5, r6, #9
 8002eb8:	4208      	tst	r0, r1
 8002eba:	d00c      	beq.n	8002ed6 <__aeabi_f2d+0x2e>
 8002ebc:	22e0      	movs	r2, #224	; 0xe0
 8002ebe:	0092      	lsls	r2, r2, #2
 8002ec0:	4694      	mov	ip, r2
 8002ec2:	076d      	lsls	r5, r5, #29
 8002ec4:	0b36      	lsrs	r6, r6, #12
 8002ec6:	4463      	add	r3, ip
 8002ec8:	051b      	lsls	r3, r3, #20
 8002eca:	4333      	orrs	r3, r6
 8002ecc:	07e4      	lsls	r4, r4, #31
 8002ece:	4323      	orrs	r3, r4
 8002ed0:	0028      	movs	r0, r5
 8002ed2:	0019      	movs	r1, r3
 8002ed4:	bd70      	pop	{r4, r5, r6, pc}
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d114      	bne.n	8002f04 <__aeabi_f2d+0x5c>
 8002eda:	2d00      	cmp	r5, #0
 8002edc:	d01b      	beq.n	8002f16 <__aeabi_f2d+0x6e>
 8002ede:	0028      	movs	r0, r5
 8002ee0:	f000 f8b2 	bl	8003048 <__clzsi2>
 8002ee4:	280a      	cmp	r0, #10
 8002ee6:	dc1c      	bgt.n	8002f22 <__aeabi_f2d+0x7a>
 8002ee8:	230b      	movs	r3, #11
 8002eea:	002e      	movs	r6, r5
 8002eec:	1a1b      	subs	r3, r3, r0
 8002eee:	40de      	lsrs	r6, r3
 8002ef0:	0003      	movs	r3, r0
 8002ef2:	3315      	adds	r3, #21
 8002ef4:	409d      	lsls	r5, r3
 8002ef6:	4a0e      	ldr	r2, [pc, #56]	; (8002f30 <__aeabi_f2d+0x88>)
 8002ef8:	0336      	lsls	r6, r6, #12
 8002efa:	1a12      	subs	r2, r2, r0
 8002efc:	0552      	lsls	r2, r2, #21
 8002efe:	0b36      	lsrs	r6, r6, #12
 8002f00:	0d53      	lsrs	r3, r2, #21
 8002f02:	e7e1      	b.n	8002ec8 <__aeabi_f2d+0x20>
 8002f04:	2d00      	cmp	r5, #0
 8002f06:	d009      	beq.n	8002f1c <__aeabi_f2d+0x74>
 8002f08:	2280      	movs	r2, #128	; 0x80
 8002f0a:	0b36      	lsrs	r6, r6, #12
 8002f0c:	0312      	lsls	r2, r2, #12
 8002f0e:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <__aeabi_f2d+0x8c>)
 8002f10:	076d      	lsls	r5, r5, #29
 8002f12:	4316      	orrs	r6, r2
 8002f14:	e7d8      	b.n	8002ec8 <__aeabi_f2d+0x20>
 8002f16:	2300      	movs	r3, #0
 8002f18:	2600      	movs	r6, #0
 8002f1a:	e7d5      	b.n	8002ec8 <__aeabi_f2d+0x20>
 8002f1c:	2600      	movs	r6, #0
 8002f1e:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <__aeabi_f2d+0x8c>)
 8002f20:	e7d2      	b.n	8002ec8 <__aeabi_f2d+0x20>
 8002f22:	0003      	movs	r3, r0
 8002f24:	3b0b      	subs	r3, #11
 8002f26:	409d      	lsls	r5, r3
 8002f28:	002e      	movs	r6, r5
 8002f2a:	2500      	movs	r5, #0
 8002f2c:	e7e3      	b.n	8002ef6 <__aeabi_f2d+0x4e>
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	00000389 	.word	0x00000389
 8002f34:	000007ff 	.word	0x000007ff

08002f38 <__aeabi_d2f>:
 8002f38:	0002      	movs	r2, r0
 8002f3a:	004b      	lsls	r3, r1, #1
 8002f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f3e:	0d5b      	lsrs	r3, r3, #21
 8002f40:	030c      	lsls	r4, r1, #12
 8002f42:	4e3d      	ldr	r6, [pc, #244]	; (8003038 <__aeabi_d2f+0x100>)
 8002f44:	0a64      	lsrs	r4, r4, #9
 8002f46:	0f40      	lsrs	r0, r0, #29
 8002f48:	1c5f      	adds	r7, r3, #1
 8002f4a:	0fc9      	lsrs	r1, r1, #31
 8002f4c:	4304      	orrs	r4, r0
 8002f4e:	00d5      	lsls	r5, r2, #3
 8002f50:	4237      	tst	r7, r6
 8002f52:	d00a      	beq.n	8002f6a <__aeabi_d2f+0x32>
 8002f54:	4839      	ldr	r0, [pc, #228]	; (800303c <__aeabi_d2f+0x104>)
 8002f56:	181e      	adds	r6, r3, r0
 8002f58:	2efe      	cmp	r6, #254	; 0xfe
 8002f5a:	dd16      	ble.n	8002f8a <__aeabi_d2f+0x52>
 8002f5c:	20ff      	movs	r0, #255	; 0xff
 8002f5e:	2400      	movs	r4, #0
 8002f60:	05c0      	lsls	r0, r0, #23
 8002f62:	4320      	orrs	r0, r4
 8002f64:	07c9      	lsls	r1, r1, #31
 8002f66:	4308      	orrs	r0, r1
 8002f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d106      	bne.n	8002f7c <__aeabi_d2f+0x44>
 8002f6e:	432c      	orrs	r4, r5
 8002f70:	d026      	beq.n	8002fc0 <__aeabi_d2f+0x88>
 8002f72:	2205      	movs	r2, #5
 8002f74:	0192      	lsls	r2, r2, #6
 8002f76:	0a54      	lsrs	r4, r2, #9
 8002f78:	b2d8      	uxtb	r0, r3
 8002f7a:	e7f1      	b.n	8002f60 <__aeabi_d2f+0x28>
 8002f7c:	4325      	orrs	r5, r4
 8002f7e:	d0ed      	beq.n	8002f5c <__aeabi_d2f+0x24>
 8002f80:	2080      	movs	r0, #128	; 0x80
 8002f82:	03c0      	lsls	r0, r0, #15
 8002f84:	4304      	orrs	r4, r0
 8002f86:	20ff      	movs	r0, #255	; 0xff
 8002f88:	e7ea      	b.n	8002f60 <__aeabi_d2f+0x28>
 8002f8a:	2e00      	cmp	r6, #0
 8002f8c:	dd1b      	ble.n	8002fc6 <__aeabi_d2f+0x8e>
 8002f8e:	0192      	lsls	r2, r2, #6
 8002f90:	1e53      	subs	r3, r2, #1
 8002f92:	419a      	sbcs	r2, r3
 8002f94:	00e4      	lsls	r4, r4, #3
 8002f96:	0f6d      	lsrs	r5, r5, #29
 8002f98:	4322      	orrs	r2, r4
 8002f9a:	432a      	orrs	r2, r5
 8002f9c:	0753      	lsls	r3, r2, #29
 8002f9e:	d048      	beq.n	8003032 <__aeabi_d2f+0xfa>
 8002fa0:	230f      	movs	r3, #15
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d000      	beq.n	8002faa <__aeabi_d2f+0x72>
 8002fa8:	3204      	adds	r2, #4
 8002faa:	2380      	movs	r3, #128	; 0x80
 8002fac:	04db      	lsls	r3, r3, #19
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d03f      	beq.n	8003032 <__aeabi_d2f+0xfa>
 8002fb2:	1c70      	adds	r0, r6, #1
 8002fb4:	2efe      	cmp	r6, #254	; 0xfe
 8002fb6:	d0d1      	beq.n	8002f5c <__aeabi_d2f+0x24>
 8002fb8:	0192      	lsls	r2, r2, #6
 8002fba:	0a54      	lsrs	r4, r2, #9
 8002fbc:	b2c0      	uxtb	r0, r0
 8002fbe:	e7cf      	b.n	8002f60 <__aeabi_d2f+0x28>
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	2400      	movs	r4, #0
 8002fc4:	e7cc      	b.n	8002f60 <__aeabi_d2f+0x28>
 8002fc6:	0032      	movs	r2, r6
 8002fc8:	3217      	adds	r2, #23
 8002fca:	db22      	blt.n	8003012 <__aeabi_d2f+0xda>
 8002fcc:	2080      	movs	r0, #128	; 0x80
 8002fce:	0400      	lsls	r0, r0, #16
 8002fd0:	4320      	orrs	r0, r4
 8002fd2:	241e      	movs	r4, #30
 8002fd4:	1ba4      	subs	r4, r4, r6
 8002fd6:	2c1f      	cmp	r4, #31
 8002fd8:	dd1d      	ble.n	8003016 <__aeabi_d2f+0xde>
 8002fda:	2202      	movs	r2, #2
 8002fdc:	4252      	negs	r2, r2
 8002fde:	1b96      	subs	r6, r2, r6
 8002fe0:	0002      	movs	r2, r0
 8002fe2:	40f2      	lsrs	r2, r6
 8002fe4:	0016      	movs	r6, r2
 8002fe6:	2c20      	cmp	r4, #32
 8002fe8:	d004      	beq.n	8002ff4 <__aeabi_d2f+0xbc>
 8002fea:	4a15      	ldr	r2, [pc, #84]	; (8003040 <__aeabi_d2f+0x108>)
 8002fec:	4694      	mov	ip, r2
 8002fee:	4463      	add	r3, ip
 8002ff0:	4098      	lsls	r0, r3
 8002ff2:	4305      	orrs	r5, r0
 8002ff4:	002a      	movs	r2, r5
 8002ff6:	1e53      	subs	r3, r2, #1
 8002ff8:	419a      	sbcs	r2, r3
 8002ffa:	4332      	orrs	r2, r6
 8002ffc:	2600      	movs	r6, #0
 8002ffe:	0753      	lsls	r3, r2, #29
 8003000:	d1ce      	bne.n	8002fa0 <__aeabi_d2f+0x68>
 8003002:	2480      	movs	r4, #128	; 0x80
 8003004:	0013      	movs	r3, r2
 8003006:	04e4      	lsls	r4, r4, #19
 8003008:	2001      	movs	r0, #1
 800300a:	4023      	ands	r3, r4
 800300c:	4222      	tst	r2, r4
 800300e:	d1d3      	bne.n	8002fb8 <__aeabi_d2f+0x80>
 8003010:	e7b0      	b.n	8002f74 <__aeabi_d2f+0x3c>
 8003012:	2300      	movs	r3, #0
 8003014:	e7ad      	b.n	8002f72 <__aeabi_d2f+0x3a>
 8003016:	4a0b      	ldr	r2, [pc, #44]	; (8003044 <__aeabi_d2f+0x10c>)
 8003018:	4694      	mov	ip, r2
 800301a:	002a      	movs	r2, r5
 800301c:	40e2      	lsrs	r2, r4
 800301e:	0014      	movs	r4, r2
 8003020:	002a      	movs	r2, r5
 8003022:	4463      	add	r3, ip
 8003024:	409a      	lsls	r2, r3
 8003026:	4098      	lsls	r0, r3
 8003028:	1e55      	subs	r5, r2, #1
 800302a:	41aa      	sbcs	r2, r5
 800302c:	4302      	orrs	r2, r0
 800302e:	4322      	orrs	r2, r4
 8003030:	e7e4      	b.n	8002ffc <__aeabi_d2f+0xc4>
 8003032:	0033      	movs	r3, r6
 8003034:	e79e      	b.n	8002f74 <__aeabi_d2f+0x3c>
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	000007fe 	.word	0x000007fe
 800303c:	fffffc80 	.word	0xfffffc80
 8003040:	fffffca2 	.word	0xfffffca2
 8003044:	fffffc82 	.word	0xfffffc82

08003048 <__clzsi2>:
 8003048:	211c      	movs	r1, #28
 800304a:	2301      	movs	r3, #1
 800304c:	041b      	lsls	r3, r3, #16
 800304e:	4298      	cmp	r0, r3
 8003050:	d301      	bcc.n	8003056 <__clzsi2+0xe>
 8003052:	0c00      	lsrs	r0, r0, #16
 8003054:	3910      	subs	r1, #16
 8003056:	0a1b      	lsrs	r3, r3, #8
 8003058:	4298      	cmp	r0, r3
 800305a:	d301      	bcc.n	8003060 <__clzsi2+0x18>
 800305c:	0a00      	lsrs	r0, r0, #8
 800305e:	3908      	subs	r1, #8
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	4298      	cmp	r0, r3
 8003064:	d301      	bcc.n	800306a <__clzsi2+0x22>
 8003066:	0900      	lsrs	r0, r0, #4
 8003068:	3904      	subs	r1, #4
 800306a:	a202      	add	r2, pc, #8	; (adr r2, 8003074 <__clzsi2+0x2c>)
 800306c:	5c10      	ldrb	r0, [r2, r0]
 800306e:	1840      	adds	r0, r0, r1
 8003070:	4770      	bx	lr
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	02020304 	.word	0x02020304
 8003078:	01010101 	.word	0x01010101
	...

08003084 <Max31865_delay>:

#define RTD_A 3.9083e-3
#define RTD_B -5.775e-7
//#########################################################################################################################
void  Max31865_delay(uint32_t delay_ms)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  #if (_MAX31865_USE_FREERTOS == 1)
  osDelay(delay_ms);
  #else
  HAL_Delay(delay_ms);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	0018      	movs	r0, r3
 8003090:	f003 f8cc 	bl	800622c <HAL_Delay>
  #endif
}
 8003094:	46c0      	nop			; (mov r8, r8)
 8003096:	46bd      	mov	sp, r7
 8003098:	b002      	add	sp, #8
 800309a:	bd80      	pop	{r7, pc}

0800309c <Max31865_readRegisterN>:
//#########################################################################################################################
void Max31865_readRegisterN(Max31865_t *max31865,uint8_t addr, uint8_t *buffer, uint8_t n)
{
 800309c:	b590      	push	{r4, r7, lr}
 800309e:	b089      	sub	sp, #36	; 0x24
 80030a0:	af02      	add	r7, sp, #8
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	0008      	movs	r0, r1
 80030a6:	607a      	str	r2, [r7, #4]
 80030a8:	0019      	movs	r1, r3
 80030aa:	240b      	movs	r4, #11
 80030ac:	193b      	adds	r3, r7, r4
 80030ae:	1c02      	adds	r2, r0, #0
 80030b0:	701a      	strb	r2, [r3, #0]
 80030b2:	230a      	movs	r3, #10
 80030b4:	18fb      	adds	r3, r7, r3
 80030b6:	1c0a      	adds	r2, r1, #0
 80030b8:	701a      	strb	r2, [r3, #0]
  uint8_t tmp = 0xFF;
 80030ba:	2317      	movs	r3, #23
 80030bc:	18fb      	adds	r3, r7, r3
 80030be:	22ff      	movs	r2, #255	; 0xff
 80030c0:	701a      	strb	r2, [r3, #0]
	addr &= 0x7F;
 80030c2:	193b      	adds	r3, r7, r4
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	227f      	movs	r2, #127	; 0x7f
 80030c8:	4013      	ands	r3, r2
 80030ca:	b2da      	uxtb	r2, r3
 80030cc:	193b      	adds	r3, r7, r4
 80030ce:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_RESET);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6818      	ldr	r0, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	889b      	ldrh	r3, [r3, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	0019      	movs	r1, r3
 80030dc:	f004 f90e 	bl	80072fc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(max31865->spi,&addr, 1, 100);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6898      	ldr	r0, [r3, #8]
 80030e4:	1939      	adds	r1, r7, r4
 80030e6:	2364      	movs	r3, #100	; 0x64
 80030e8:	2201      	movs	r2, #1
 80030ea:	f006 f9a3 	bl	8009434 <HAL_SPI_Transmit>
	while (n--)
 80030ee:	e00c      	b.n	800310a <Max31865_readRegisterN+0x6e>
	{
    HAL_SPI_TransmitReceive(max31865->spi, &tmp, buffer, 1, 100);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6898      	ldr	r0, [r3, #8]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	2317      	movs	r3, #23
 80030f8:	18f9      	adds	r1, r7, r3
 80030fa:	2364      	movs	r3, #100	; 0x64
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	2301      	movs	r3, #1
 8003100:	f006 faf8 	bl	80096f4 <HAL_SPI_TransmitReceive>
		buffer++;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3301      	adds	r3, #1
 8003108:	607b      	str	r3, [r7, #4]
	while (n--)
 800310a:	220a      	movs	r2, #10
 800310c:	18bb      	adds	r3, r7, r2
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	18ba      	adds	r2, r7, r2
 8003112:	1e59      	subs	r1, r3, #1
 8003114:	7011      	strb	r1, [r2, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1ea      	bne.n	80030f0 <Max31865_readRegisterN+0x54>
	}
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_SET);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6818      	ldr	r0, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	889b      	ldrh	r3, [r3, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	0019      	movs	r1, r3
 8003126:	f004 f8e9 	bl	80072fc <HAL_GPIO_WritePin>
}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	46bd      	mov	sp, r7
 800312e:	b007      	add	sp, #28
 8003130:	bd90      	pop	{r4, r7, pc}

08003132 <Max31865_readRegister8>:
//#########################################################################################################################
uint8_t Max31865_readRegister8(Max31865_t *max31865,uint8_t addr)
{
 8003132:	b590      	push	{r4, r7, lr}
 8003134:	b085      	sub	sp, #20
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	000a      	movs	r2, r1
 800313c:	1cfb      	adds	r3, r7, #3
 800313e:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0;
 8003140:	240f      	movs	r4, #15
 8003142:	193b      	adds	r3, r7, r4
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]
	Max31865_readRegisterN(max31865, addr, &ret, 1);
 8003148:	193a      	adds	r2, r7, r4
 800314a:	1cfb      	adds	r3, r7, #3
 800314c:	7819      	ldrb	r1, [r3, #0]
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	2301      	movs	r3, #1
 8003152:	f7ff ffa3 	bl	800309c <Max31865_readRegisterN>
	return ret;
 8003156:	193b      	adds	r3, r7, r4
 8003158:	781b      	ldrb	r3, [r3, #0]
}
 800315a:	0018      	movs	r0, r3
 800315c:	46bd      	mov	sp, r7
 800315e:	b005      	add	sp, #20
 8003160:	bd90      	pop	{r4, r7, pc}

08003162 <Max31865_readRegister16>:
//#########################################################################################################################
uint16_t Max31865_readRegister16(Max31865_t *max31865,uint8_t addr)
{
 8003162:	b590      	push	{r4, r7, lr}
 8003164:	b085      	sub	sp, #20
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	000a      	movs	r2, r1
 800316c:	1cfb      	adds	r3, r7, #3
 800316e:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[2] = {0, 0};
 8003170:	240c      	movs	r4, #12
 8003172:	193b      	adds	r3, r7, r4
 8003174:	2200      	movs	r2, #0
 8003176:	801a      	strh	r2, [r3, #0]
	Max31865_readRegisterN(max31865, addr, buffer, 2);
 8003178:	193a      	adds	r2, r7, r4
 800317a:	1cfb      	adds	r3, r7, #3
 800317c:	7819      	ldrb	r1, [r3, #0]
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	2302      	movs	r3, #2
 8003182:	f7ff ff8b 	bl	800309c <Max31865_readRegisterN>
	uint16_t ret = buffer[0];
 8003186:	0021      	movs	r1, r4
 8003188:	187b      	adds	r3, r7, r1
 800318a:	781a      	ldrb	r2, [r3, #0]
 800318c:	200e      	movs	r0, #14
 800318e:	183b      	adds	r3, r7, r0
 8003190:	801a      	strh	r2, [r3, #0]
	ret <<= 8;
 8003192:	183b      	adds	r3, r7, r0
 8003194:	183a      	adds	r2, r7, r0
 8003196:	8812      	ldrh	r2, [r2, #0]
 8003198:	0212      	lsls	r2, r2, #8
 800319a:	801a      	strh	r2, [r3, #0]
	ret |=  buffer[1];
 800319c:	187b      	adds	r3, r7, r1
 800319e:	785b      	ldrb	r3, [r3, #1]
 80031a0:	b299      	uxth	r1, r3
 80031a2:	183b      	adds	r3, r7, r0
 80031a4:	183a      	adds	r2, r7, r0
 80031a6:	8812      	ldrh	r2, [r2, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	801a      	strh	r2, [r3, #0]
	return ret;
 80031ac:	183b      	adds	r3, r7, r0
 80031ae:	881b      	ldrh	r3, [r3, #0]
}
 80031b0:	0018      	movs	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b005      	add	sp, #20
 80031b6:	bd90      	pop	{r4, r7, pc}

080031b8 <Max31865_writeRegister8>:
//#########################################################################################################################
void Max31865_writeRegister8(Max31865_t *max31865,uint8_t addr, uint8_t data)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	0008      	movs	r0, r1
 80031c2:	0011      	movs	r1, r2
 80031c4:	1cfb      	adds	r3, r7, #3
 80031c6:	1c02      	adds	r2, r0, #0
 80031c8:	701a      	strb	r2, [r3, #0]
 80031ca:	1cbb      	adds	r3, r7, #2
 80031cc:	1c0a      	adds	r2, r1, #0
 80031ce:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_RESET);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	889b      	ldrh	r3, [r3, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	0019      	movs	r1, r3
 80031dc:	f004 f88e 	bl	80072fc <HAL_GPIO_WritePin>
  addr |= 0x80;
 80031e0:	1cfb      	adds	r3, r7, #3
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2280      	movs	r2, #128	; 0x80
 80031e6:	4252      	negs	r2, r2
 80031e8:	4313      	orrs	r3, r2
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	1cfb      	adds	r3, r7, #3
 80031ee:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(max31865->spi,&addr, 1, 100);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6898      	ldr	r0, [r3, #8]
 80031f4:	1cf9      	adds	r1, r7, #3
 80031f6:	2364      	movs	r3, #100	; 0x64
 80031f8:	2201      	movs	r2, #1
 80031fa:	f006 f91b 	bl	8009434 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(max31865->spi,&data, 1, 100);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6898      	ldr	r0, [r3, #8]
 8003202:	1cb9      	adds	r1, r7, #2
 8003204:	2364      	movs	r3, #100	; 0x64
 8003206:	2201      	movs	r2, #1
 8003208:	f006 f914 	bl	8009434 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_SET);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	889b      	ldrh	r3, [r3, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	0019      	movs	r1, r3
 8003218:	f004 f870 	bl	80072fc <HAL_GPIO_WritePin>
}
 800321c:	46c0      	nop			; (mov r8, r8)
 800321e:	46bd      	mov	sp, r7
 8003220:	b002      	add	sp, #8
 8003222:	bd80      	pop	{r7, pc}

08003224 <Max31865_readFault>:
//#########################################################################################################################
uint8_t Max31865_readFault(Max31865_t *max31865)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  return Max31865_readRegister8(max31865, MAX31856_FAULTSTAT_REG);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2107      	movs	r1, #7
 8003230:	0018      	movs	r0, r3
 8003232:	f7ff ff7e 	bl	8003132 <Max31865_readRegister8>
 8003236:	0003      	movs	r3, r0
}
 8003238:	0018      	movs	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	b002      	add	sp, #8
 800323e:	bd80      	pop	{r7, pc}

08003240 <Max31865_clearFault>:
//#########################################################################################################################
void Max31865_clearFault(Max31865_t *max31865)
{
 8003240:	b5b0      	push	{r4, r5, r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8003248:	250f      	movs	r5, #15
 800324a:	197c      	adds	r4, r7, r5
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2100      	movs	r1, #0
 8003250:	0018      	movs	r0, r3
 8003252:	f7ff ff6e 	bl	8003132 <Max31865_readRegister8>
 8003256:	0003      	movs	r3, r0
 8003258:	7023      	strb	r3, [r4, #0]
	t &= ~0x2C;
 800325a:	0028      	movs	r0, r5
 800325c:	183b      	adds	r3, r7, r0
 800325e:	183a      	adds	r2, r7, r0
 8003260:	7812      	ldrb	r2, [r2, #0]
 8003262:	212c      	movs	r1, #44	; 0x2c
 8003264:	438a      	bics	r2, r1
 8003266:	701a      	strb	r2, [r3, #0]
	t |= MAX31856_CONFIG_FAULTSTAT;
 8003268:	183b      	adds	r3, r7, r0
 800326a:	183a      	adds	r2, r7, r0
 800326c:	7812      	ldrb	r2, [r2, #0]
 800326e:	2102      	movs	r1, #2
 8003270:	430a      	orrs	r2, r1
 8003272:	701a      	strb	r2, [r3, #0]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 8003274:	183b      	adds	r3, r7, r0
 8003276:	781a      	ldrb	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2100      	movs	r1, #0
 800327c:	0018      	movs	r0, r3
 800327e:	f7ff ff9b 	bl	80031b8 <Max31865_writeRegister8>
}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	46bd      	mov	sp, r7
 8003286:	b004      	add	sp, #16
 8003288:	bdb0      	pop	{r4, r5, r7, pc}

0800328a <Max31865_enableBias>:
//#########################################################################################################################
void Max31865_enableBias(Max31865_t *max31865, uint8_t enable)
{
 800328a:	b5b0      	push	{r4, r5, r7, lr}
 800328c:	b084      	sub	sp, #16
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	000a      	movs	r2, r1
 8003294:	1cfb      	adds	r3, r7, #3
 8003296:	701a      	strb	r2, [r3, #0]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8003298:	250f      	movs	r5, #15
 800329a:	197c      	adds	r4, r7, r5
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2100      	movs	r1, #0
 80032a0:	0018      	movs	r0, r3
 80032a2:	f7ff ff46 	bl	8003132 <Max31865_readRegister8>
 80032a6:	0003      	movs	r3, r0
 80032a8:	7023      	strb	r3, [r4, #0]
	if (enable)
 80032aa:	1cfb      	adds	r3, r7, #3
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d007      	beq.n	80032c2 <Max31865_enableBias+0x38>
		t |= MAX31856_CONFIG_BIAS;
 80032b2:	197b      	adds	r3, r7, r5
 80032b4:	197a      	adds	r2, r7, r5
 80032b6:	7812      	ldrb	r2, [r2, #0]
 80032b8:	2180      	movs	r1, #128	; 0x80
 80032ba:	4249      	negs	r1, r1
 80032bc:	430a      	orrs	r2, r1
 80032be:	701a      	strb	r2, [r3, #0]
 80032c0:	e006      	b.n	80032d0 <Max31865_enableBias+0x46>
	else
		t &= ~MAX31856_CONFIG_BIAS;
 80032c2:	220f      	movs	r2, #15
 80032c4:	18bb      	adds	r3, r7, r2
 80032c6:	18ba      	adds	r2, r7, r2
 80032c8:	7812      	ldrb	r2, [r2, #0]
 80032ca:	217f      	movs	r1, #127	; 0x7f
 80032cc:	400a      	ands	r2, r1
 80032ce:	701a      	strb	r2, [r3, #0]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 80032d0:	230f      	movs	r3, #15
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	781a      	ldrb	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2100      	movs	r1, #0
 80032da:	0018      	movs	r0, r3
 80032dc:	f7ff ff6c 	bl	80031b8 <Max31865_writeRegister8>
}
 80032e0:	46c0      	nop			; (mov r8, r8)
 80032e2:	46bd      	mov	sp, r7
 80032e4:	b004      	add	sp, #16
 80032e6:	bdb0      	pop	{r4, r5, r7, pc}

080032e8 <Max31865_autoConvert>:
//#########################################################################################################################
void Max31865_autoConvert(Max31865_t *max31865, uint8_t enable)
{
 80032e8:	b5b0      	push	{r4, r5, r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	000a      	movs	r2, r1
 80032f2:	1cfb      	adds	r3, r7, #3
 80032f4:	701a      	strb	r2, [r3, #0]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 80032f6:	250f      	movs	r5, #15
 80032f8:	197c      	adds	r4, r7, r5
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2100      	movs	r1, #0
 80032fe:	0018      	movs	r0, r3
 8003300:	f7ff ff17 	bl	8003132 <Max31865_readRegister8>
 8003304:	0003      	movs	r3, r0
 8003306:	7023      	strb	r3, [r4, #0]
	if (enable)
 8003308:	1cfb      	adds	r3, r7, #3
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d006      	beq.n	800331e <Max31865_autoConvert+0x36>
		t |= MAX31856_CONFIG_MODEAUTO;
 8003310:	197b      	adds	r3, r7, r5
 8003312:	197a      	adds	r2, r7, r5
 8003314:	7812      	ldrb	r2, [r2, #0]
 8003316:	2140      	movs	r1, #64	; 0x40
 8003318:	430a      	orrs	r2, r1
 800331a:	701a      	strb	r2, [r3, #0]
 800331c:	e006      	b.n	800332c <Max31865_autoConvert+0x44>
	else
		t &= ~MAX31856_CONFIG_MODEAUTO;
 800331e:	220f      	movs	r2, #15
 8003320:	18bb      	adds	r3, r7, r2
 8003322:	18ba      	adds	r2, r7, r2
 8003324:	7812      	ldrb	r2, [r2, #0]
 8003326:	2140      	movs	r1, #64	; 0x40
 8003328:	438a      	bics	r2, r1
 800332a:	701a      	strb	r2, [r3, #0]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 800332c:	230f      	movs	r3, #15
 800332e:	18fb      	adds	r3, r7, r3
 8003330:	781a      	ldrb	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2100      	movs	r1, #0
 8003336:	0018      	movs	r0, r3
 8003338:	f7ff ff3e 	bl	80031b8 <Max31865_writeRegister8>
}
 800333c:	46c0      	nop			; (mov r8, r8)
 800333e:	46bd      	mov	sp, r7
 8003340:	b004      	add	sp, #16
 8003342:	bdb0      	pop	{r4, r5, r7, pc}

08003344 <Max31865_setWires>:
//#########################################################################################################################
void Max31865_setWires(Max31865_t *max31865, uint8_t numWires)
{
 8003344:	b5b0      	push	{r4, r5, r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	000a      	movs	r2, r1
 800334e:	1cfb      	adds	r3, r7, #3
 8003350:	701a      	strb	r2, [r3, #0]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8003352:	250f      	movs	r5, #15
 8003354:	197c      	adds	r4, r7, r5
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2100      	movs	r1, #0
 800335a:	0018      	movs	r0, r3
 800335c:	f7ff fee9 	bl	8003132 <Max31865_readRegister8>
 8003360:	0003      	movs	r3, r0
 8003362:	7023      	strb	r3, [r4, #0]
	if (numWires == 3)
 8003364:	1cfb      	adds	r3, r7, #3
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b03      	cmp	r3, #3
 800336a:	d106      	bne.n	800337a <Max31865_setWires+0x36>
		t |= MAX31856_CONFIG_3WIRE;
 800336c:	197b      	adds	r3, r7, r5
 800336e:	197a      	adds	r2, r7, r5
 8003370:	7812      	ldrb	r2, [r2, #0]
 8003372:	2110      	movs	r1, #16
 8003374:	430a      	orrs	r2, r1
 8003376:	701a      	strb	r2, [r3, #0]
 8003378:	e006      	b.n	8003388 <Max31865_setWires+0x44>
	else
		t &= ~MAX31856_CONFIG_3WIRE;
 800337a:	220f      	movs	r2, #15
 800337c:	18bb      	adds	r3, r7, r2
 800337e:	18ba      	adds	r2, r7, r2
 8003380:	7812      	ldrb	r2, [r2, #0]
 8003382:	2110      	movs	r1, #16
 8003384:	438a      	bics	r2, r1
 8003386:	701a      	strb	r2, [r3, #0]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 8003388:	230f      	movs	r3, #15
 800338a:	18fb      	adds	r3, r7, r3
 800338c:	781a      	ldrb	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2100      	movs	r1, #0
 8003392:	0018      	movs	r0, r3
 8003394:	f7ff ff10 	bl	80031b8 <Max31865_writeRegister8>
}
 8003398:	46c0      	nop			; (mov r8, r8)
 800339a:	46bd      	mov	sp, r7
 800339c:	b004      	add	sp, #16
 800339e:	bdb0      	pop	{r4, r5, r7, pc}

080033a0 <Max31865_setFilter>:
//#########################################################################################################################
void Max31865_setFilter(Max31865_t *max31865, uint8_t filterHz)
{
 80033a0:	b5b0      	push	{r4, r5, r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	000a      	movs	r2, r1
 80033aa:	1cfb      	adds	r3, r7, #3
 80033ac:	701a      	strb	r2, [r3, #0]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 80033ae:	250f      	movs	r5, #15
 80033b0:	197c      	adds	r4, r7, r5
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2100      	movs	r1, #0
 80033b6:	0018      	movs	r0, r3
 80033b8:	f7ff febb 	bl	8003132 <Max31865_readRegister8>
 80033bc:	0003      	movs	r3, r0
 80033be:	7023      	strb	r3, [r4, #0]
	if (filterHz == 50)
 80033c0:	1cfb      	adds	r3, r7, #3
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b32      	cmp	r3, #50	; 0x32
 80033c6:	d106      	bne.n	80033d6 <Max31865_setFilter+0x36>
		t |= MAX31856_CONFIG_FILT50HZ;
 80033c8:	197b      	adds	r3, r7, r5
 80033ca:	197a      	adds	r2, r7, r5
 80033cc:	7812      	ldrb	r2, [r2, #0]
 80033ce:	2101      	movs	r1, #1
 80033d0:	430a      	orrs	r2, r1
 80033d2:	701a      	strb	r2, [r3, #0]
 80033d4:	e006      	b.n	80033e4 <Max31865_setFilter+0x44>
	else
		t &= ~MAX31856_CONFIG_FILT50HZ;
 80033d6:	220f      	movs	r2, #15
 80033d8:	18bb      	adds	r3, r7, r2
 80033da:	18ba      	adds	r2, r7, r2
 80033dc:	7812      	ldrb	r2, [r2, #0]
 80033de:	2101      	movs	r1, #1
 80033e0:	438a      	bics	r2, r1
 80033e2:	701a      	strb	r2, [r3, #0]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 80033e4:	230f      	movs	r3, #15
 80033e6:	18fb      	adds	r3, r7, r3
 80033e8:	781a      	ldrb	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2100      	movs	r1, #0
 80033ee:	0018      	movs	r0, r3
 80033f0:	f7ff fee2 	bl	80031b8 <Max31865_writeRegister8>
}
 80033f4:	46c0      	nop			; (mov r8, r8)
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b004      	add	sp, #16
 80033fa:	bdb0      	pop	{r4, r5, r7, pc}

080033fc <Max31865_readRTD>:
//#########################################################################################################################
uint16_t Max31865_readRTD (Max31865_t *max31865)
{
 80033fc:	b5b0      	push	{r4, r5, r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
	Max31865_clearFault(max31865);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	0018      	movs	r0, r3
 8003408:	f7ff ff1a 	bl	8003240 <Max31865_clearFault>
	Max31865_enableBias(max31865, 1);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2101      	movs	r1, #1
 8003410:	0018      	movs	r0, r3
 8003412:	f7ff ff3a 	bl	800328a <Max31865_enableBias>
	Max31865_delay(10);
 8003416:	200a      	movs	r0, #10
 8003418:	f7ff fe34 	bl	8003084 <Max31865_delay>
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 800341c:	250f      	movs	r5, #15
 800341e:	197c      	adds	r4, r7, r5
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2100      	movs	r1, #0
 8003424:	0018      	movs	r0, r3
 8003426:	f7ff fe84 	bl	8003132 <Max31865_readRegister8>
 800342a:	0003      	movs	r3, r0
 800342c:	7023      	strb	r3, [r4, #0]
	t |= MAX31856_CONFIG_1SHOT;
 800342e:	0028      	movs	r0, r5
 8003430:	183b      	adds	r3, r7, r0
 8003432:	183a      	adds	r2, r7, r0
 8003434:	7812      	ldrb	r2, [r2, #0]
 8003436:	2120      	movs	r1, #32
 8003438:	430a      	orrs	r2, r1
 800343a:	701a      	strb	r2, [r3, #0]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 800343c:	183b      	adds	r3, r7, r0
 800343e:	781a      	ldrb	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2100      	movs	r1, #0
 8003444:	0018      	movs	r0, r3
 8003446:	f7ff feb7 	bl	80031b8 <Max31865_writeRegister8>
	Max31865_delay(65);
 800344a:	2041      	movs	r0, #65	; 0x41
 800344c:	f7ff fe1a 	bl	8003084 <Max31865_delay>
	uint16_t rtd = Max31865_readRegister16(max31865, MAX31856_RTDMSB_REG);
 8003450:	250c      	movs	r5, #12
 8003452:	197c      	adds	r4, r7, r5
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2101      	movs	r1, #1
 8003458:	0018      	movs	r0, r3
 800345a:	f7ff fe82 	bl	8003162 <Max31865_readRegister16>
 800345e:	0003      	movs	r3, r0
 8003460:	8023      	strh	r3, [r4, #0]
	rtd >>= 1;
 8003462:	0029      	movs	r1, r5
 8003464:	187b      	adds	r3, r7, r1
 8003466:	187a      	adds	r2, r7, r1
 8003468:	8812      	ldrh	r2, [r2, #0]
 800346a:	0852      	lsrs	r2, r2, #1
 800346c:	801a      	strh	r2, [r3, #0]
	return rtd;
 800346e:	187b      	adds	r3, r7, r1
 8003470:	881b      	ldrh	r3, [r3, #0]
}
 8003472:	0018      	movs	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	b004      	add	sp, #16
 8003478:	bdb0      	pop	{r4, r5, r7, pc}

0800347a <Max31865_init>:
//#########################################################################################################################
//#########################################################################################################################
//#########################################################################################################################
void  Max31865_init(Max31865_t *max31865,SPI_HandleTypeDef *spi,GPIO_TypeDef  *cs_gpio,uint16_t cs_pin,uint8_t  numwires, uint8_t filterHz)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b084      	sub	sp, #16
 800347e:	af00      	add	r7, sp, #0
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	607a      	str	r2, [r7, #4]
 8003486:	001a      	movs	r2, r3
 8003488:	1cbb      	adds	r3, r7, #2
 800348a:	801a      	strh	r2, [r3, #0]
  if(max31865->lock == 1)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	7b1b      	ldrb	r3, [r3, #12]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d102      	bne.n	800349a <Max31865_init+0x20>
    Max31865_delay(1);
 8003494:	2001      	movs	r0, #1
 8003496:	f7ff fdf5 	bl	8003084 <Max31865_delay>
  max31865->lock = 1;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2201      	movs	r2, #1
 800349e:	731a      	strb	r2, [r3, #12]
  max31865->spi = spi;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	609a      	str	r2, [r3, #8]
  max31865->cs_gpio = cs_gpio;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	601a      	str	r2, [r3, #0]
  max31865->cs_pin = cs_pin;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	1cba      	adds	r2, r7, #2
 80034b0:	8812      	ldrh	r2, [r2, #0]
 80034b2:	809a      	strh	r2, [r3, #4]
  HAL_GPIO_WritePin(max31865->cs_gpio,max31865->cs_pin,GPIO_PIN_SET);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6818      	ldr	r0, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	889b      	ldrh	r3, [r3, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	0019      	movs	r1, r3
 80034c0:	f003 ff1c 	bl	80072fc <HAL_GPIO_WritePin>
  Max31865_delay(100);
 80034c4:	2064      	movs	r0, #100	; 0x64
 80034c6:	f7ff fddd 	bl	8003084 <Max31865_delay>
  Max31865_setWires(max31865, numwires);
 80034ca:	2318      	movs	r3, #24
 80034cc:	18fb      	adds	r3, r7, r3
 80034ce:	781a      	ldrb	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	0011      	movs	r1, r2
 80034d4:	0018      	movs	r0, r3
 80034d6:	f7ff ff35 	bl	8003344 <Max31865_setWires>
	Max31865_enableBias(max31865, 0);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2100      	movs	r1, #0
 80034de:	0018      	movs	r0, r3
 80034e0:	f7ff fed3 	bl	800328a <Max31865_enableBias>
	Max31865_autoConvert(max31865, 0);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2100      	movs	r1, #0
 80034e8:	0018      	movs	r0, r3
 80034ea:	f7ff fefd 	bl	80032e8 <Max31865_autoConvert>
	Max31865_clearFault(max31865);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	0018      	movs	r0, r3
 80034f2:	f7ff fea5 	bl	8003240 <Max31865_clearFault>
  Max31865_setFilter(max31865, filterHz);
 80034f6:	231c      	movs	r3, #28
 80034f8:	18fb      	adds	r3, r7, r3
 80034fa:	781a      	ldrb	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	0011      	movs	r1, r2
 8003500:	0018      	movs	r0, r3
 8003502:	f7ff ff4d 	bl	80033a0 <Max31865_setFilter>
}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	46bd      	mov	sp, r7
 800350a:	b004      	add	sp, #16
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <Max31865_readTempC>:
//#########################################################################################################################
bool Max31865_readTempC(Max31865_t *max31865,float *readTemp)
{
 8003510:	b5b0      	push	{r4, r5, r7, lr}
 8003512:	b08a      	sub	sp, #40	; 0x28
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  if(max31865->lock == 1)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	7b1b      	ldrb	r3, [r3, #12]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d102      	bne.n	8003528 <Max31865_readTempC+0x18>
    Max31865_delay(1);
 8003522:	2001      	movs	r0, #1
 8003524:	f7ff fdae 	bl	8003084 <Max31865_delay>
  max31865->lock = 1;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	731a      	strb	r2, [r3, #12]
  bool isOk = false;
 800352e:	2427      	movs	r4, #39	; 0x27
 8003530:	193b      	adds	r3, r7, r4
 8003532:	2200      	movs	r2, #0
 8003534:	701a      	strb	r2, [r3, #0]
  float Z1, Z2, Z3, Z4, Rt, temp;
	Rt = Max31865_readRTD(max31865);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	0018      	movs	r0, r3
 800353a:	f7ff ff5f 	bl	80033fc <Max31865_readRTD>
 800353e:	0003      	movs	r3, r0
 8003540:	0018      	movs	r0, r3
 8003542:	f7fd fe89 	bl	8001258 <__aeabi_ui2f>
 8003546:	1c03      	adds	r3, r0, #0
 8003548:	623b      	str	r3, [r7, #32]
	Rt /= 32768;
 800354a:	218e      	movs	r1, #142	; 0x8e
 800354c:	05c9      	lsls	r1, r1, #23
 800354e:	6a38      	ldr	r0, [r7, #32]
 8003550:	f7fd f982 	bl	8000858 <__aeabi_fdiv>
 8003554:	1c03      	adds	r3, r0, #0
 8003556:	623b      	str	r3, [r7, #32]
	Rt *= _MAX31865_RREF;
 8003558:	4981      	ldr	r1, [pc, #516]	; (8003760 <Max31865_readTempC+0x250>)
 800355a:	6a38      	ldr	r0, [r7, #32]
 800355c:	f7fd fb44 	bl	8000be8 <__aeabi_fmul>
 8003560:	1c03      	adds	r3, r0, #0
 8003562:	623b      	str	r3, [r7, #32]
	Z1 = -RTD_A;
 8003564:	4b7f      	ldr	r3, [pc, #508]	; (8003764 <Max31865_readTempC+0x254>)
 8003566:	61fb      	str	r3, [r7, #28]
	Z2 = RTD_A * RTD_A - (4 * RTD_B);
 8003568:	4b7f      	ldr	r3, [pc, #508]	; (8003768 <Max31865_readTempC+0x258>)
 800356a:	61bb      	str	r3, [r7, #24]
	Z3 = (4 * RTD_B) / _MAX31865_RNOMINAL;
 800356c:	4b7f      	ldr	r3, [pc, #508]	; (800376c <Max31865_readTempC+0x25c>)
 800356e:	617b      	str	r3, [r7, #20]
	Z4 = 2 * RTD_B;
 8003570:	4b7f      	ldr	r3, [pc, #508]	; (8003770 <Max31865_readTempC+0x260>)
 8003572:	613b      	str	r3, [r7, #16]
	temp = Z2 + (Z3 * Rt);
 8003574:	6a39      	ldr	r1, [r7, #32]
 8003576:	6978      	ldr	r0, [r7, #20]
 8003578:	f7fd fb36 	bl	8000be8 <__aeabi_fmul>
 800357c:	1c03      	adds	r3, r0, #0
 800357e:	1c19      	adds	r1, r3, #0
 8003580:	69b8      	ldr	r0, [r7, #24]
 8003582:	f7fc ffcb 	bl	800051c <__aeabi_fadd>
 8003586:	1c03      	adds	r3, r0, #0
 8003588:	60fb      	str	r3, [r7, #12]
	temp = (sqrtf(temp) + Z1) / Z4;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	1c18      	adds	r0, r3, #0
 800358e:	f00b fdc1 	bl	800f114 <sqrtf>
 8003592:	1c03      	adds	r3, r0, #0
 8003594:	69f9      	ldr	r1, [r7, #28]
 8003596:	1c18      	adds	r0, r3, #0
 8003598:	f7fc ffc0 	bl	800051c <__aeabi_fadd>
 800359c:	1c03      	adds	r3, r0, #0
 800359e:	6939      	ldr	r1, [r7, #16]
 80035a0:	1c18      	adds	r0, r3, #0
 80035a2:	f7fd f959 	bl	8000858 <__aeabi_fdiv>
 80035a6:	1c03      	adds	r3, r0, #0
 80035a8:	60fb      	str	r3, [r7, #12]

	if (temp >= 0)
 80035aa:	2100      	movs	r1, #0
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f7fc ffab 	bl	8000508 <__aeabi_fcmpge>
 80035b2:	1e03      	subs	r3, r0, #0
 80035b4:	d012      	beq.n	80035dc <Max31865_readTempC+0xcc>
  {
    *readTemp = temp;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	601a      	str	r2, [r3, #0]
    if(Max31865_readFault(max31865) == 0)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	0018      	movs	r0, r3
 80035c0:	f7ff fe30 	bl	8003224 <Max31865_readFault>
 80035c4:	1e03      	subs	r3, r0, #0
 80035c6:	d102      	bne.n	80035ce <Max31865_readTempC+0xbe>
      isOk = true;
 80035c8:	193b      	adds	r3, r7, r4
 80035ca:	2201      	movs	r2, #1
 80035cc:	701a      	strb	r2, [r3, #0]
    max31865->lock = 0;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	731a      	strb	r2, [r3, #12]
    return isOk;
 80035d4:	2327      	movs	r3, #39	; 0x27
 80035d6:	18fb      	adds	r3, r7, r3
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	e0bc      	b.n	8003756 <Max31865_readTempC+0x246>
  }
	Rt /= _MAX31865_RNOMINAL;
 80035dc:	4965      	ldr	r1, [pc, #404]	; (8003774 <Max31865_readTempC+0x264>)
 80035de:	6a38      	ldr	r0, [r7, #32]
 80035e0:	f7fd f93a 	bl	8000858 <__aeabi_fdiv>
 80035e4:	1c03      	adds	r3, r0, #0
 80035e6:	623b      	str	r3, [r7, #32]
	Rt *= 100;
 80035e8:	4963      	ldr	r1, [pc, #396]	; (8003778 <Max31865_readTempC+0x268>)
 80035ea:	6a38      	ldr	r0, [r7, #32]
 80035ec:	f7fd fafc 	bl	8000be8 <__aeabi_fmul>
 80035f0:	1c03      	adds	r3, r0, #0
 80035f2:	623b      	str	r3, [r7, #32]
	float rpoly = Rt;
 80035f4:	6a3b      	ldr	r3, [r7, #32]
 80035f6:	60bb      	str	r3, [r7, #8]
	temp = -242.02;
 80035f8:	4b60      	ldr	r3, [pc, #384]	; (800377c <Max31865_readTempC+0x26c>)
 80035fa:	60fb      	str	r3, [r7, #12]
	temp += 2.2228 * rpoly;
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f7ff fc53 	bl	8002ea8 <__aeabi_f2d>
 8003602:	0004      	movs	r4, r0
 8003604:	000d      	movs	r5, r1
 8003606:	68b8      	ldr	r0, [r7, #8]
 8003608:	f7ff fc4e 	bl	8002ea8 <__aeabi_f2d>
 800360c:	4a5c      	ldr	r2, [pc, #368]	; (8003780 <Max31865_readTempC+0x270>)
 800360e:	4b5d      	ldr	r3, [pc, #372]	; (8003784 <Max31865_readTempC+0x274>)
 8003610:	f7fe fda2 	bl	8002158 <__aeabi_dmul>
 8003614:	0002      	movs	r2, r0
 8003616:	000b      	movs	r3, r1
 8003618:	0020      	movs	r0, r4
 800361a:	0029      	movs	r1, r5
 800361c:	f7fd fe5e 	bl	80012dc <__aeabi_dadd>
 8003620:	0002      	movs	r2, r0
 8003622:	000b      	movs	r3, r1
 8003624:	0010      	movs	r0, r2
 8003626:	0019      	movs	r1, r3
 8003628:	f7ff fc86 	bl	8002f38 <__aeabi_d2f>
 800362c:	1c03      	adds	r3, r0, #0
 800362e:	60fb      	str	r3, [r7, #12]
	rpoly *= Rt;  // square
 8003630:	6a39      	ldr	r1, [r7, #32]
 8003632:	68b8      	ldr	r0, [r7, #8]
 8003634:	f7fd fad8 	bl	8000be8 <__aeabi_fmul>
 8003638:	1c03      	adds	r3, r0, #0
 800363a:	60bb      	str	r3, [r7, #8]
	temp += 2.5859e-3 * rpoly;
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f7ff fc33 	bl	8002ea8 <__aeabi_f2d>
 8003642:	0004      	movs	r4, r0
 8003644:	000d      	movs	r5, r1
 8003646:	68b8      	ldr	r0, [r7, #8]
 8003648:	f7ff fc2e 	bl	8002ea8 <__aeabi_f2d>
 800364c:	4a4e      	ldr	r2, [pc, #312]	; (8003788 <Max31865_readTempC+0x278>)
 800364e:	4b4f      	ldr	r3, [pc, #316]	; (800378c <Max31865_readTempC+0x27c>)
 8003650:	f7fe fd82 	bl	8002158 <__aeabi_dmul>
 8003654:	0002      	movs	r2, r0
 8003656:	000b      	movs	r3, r1
 8003658:	0020      	movs	r0, r4
 800365a:	0029      	movs	r1, r5
 800365c:	f7fd fe3e 	bl	80012dc <__aeabi_dadd>
 8003660:	0002      	movs	r2, r0
 8003662:	000b      	movs	r3, r1
 8003664:	0010      	movs	r0, r2
 8003666:	0019      	movs	r1, r3
 8003668:	f7ff fc66 	bl	8002f38 <__aeabi_d2f>
 800366c:	1c03      	adds	r3, r0, #0
 800366e:	60fb      	str	r3, [r7, #12]
	rpoly *= Rt;  // ^3
 8003670:	6a39      	ldr	r1, [r7, #32]
 8003672:	68b8      	ldr	r0, [r7, #8]
 8003674:	f7fd fab8 	bl	8000be8 <__aeabi_fmul>
 8003678:	1c03      	adds	r3, r0, #0
 800367a:	60bb      	str	r3, [r7, #8]
	temp -= 4.8260e-6 * rpoly;
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f7ff fc13 	bl	8002ea8 <__aeabi_f2d>
 8003682:	0004      	movs	r4, r0
 8003684:	000d      	movs	r5, r1
 8003686:	68b8      	ldr	r0, [r7, #8]
 8003688:	f7ff fc0e 	bl	8002ea8 <__aeabi_f2d>
 800368c:	4a40      	ldr	r2, [pc, #256]	; (8003790 <Max31865_readTempC+0x280>)
 800368e:	4b41      	ldr	r3, [pc, #260]	; (8003794 <Max31865_readTempC+0x284>)
 8003690:	f7fe fd62 	bl	8002158 <__aeabi_dmul>
 8003694:	0002      	movs	r2, r0
 8003696:	000b      	movs	r3, r1
 8003698:	0020      	movs	r0, r4
 800369a:	0029      	movs	r1, r5
 800369c:	f7fe ffc8 	bl	8002630 <__aeabi_dsub>
 80036a0:	0002      	movs	r2, r0
 80036a2:	000b      	movs	r3, r1
 80036a4:	0010      	movs	r0, r2
 80036a6:	0019      	movs	r1, r3
 80036a8:	f7ff fc46 	bl	8002f38 <__aeabi_d2f>
 80036ac:	1c03      	adds	r3, r0, #0
 80036ae:	60fb      	str	r3, [r7, #12]
	rpoly *= Rt;  // ^4
 80036b0:	6a39      	ldr	r1, [r7, #32]
 80036b2:	68b8      	ldr	r0, [r7, #8]
 80036b4:	f7fd fa98 	bl	8000be8 <__aeabi_fmul>
 80036b8:	1c03      	adds	r3, r0, #0
 80036ba:	60bb      	str	r3, [r7, #8]
	temp -= 2.8183e-8 * rpoly;
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f7ff fbf3 	bl	8002ea8 <__aeabi_f2d>
 80036c2:	0004      	movs	r4, r0
 80036c4:	000d      	movs	r5, r1
 80036c6:	68b8      	ldr	r0, [r7, #8]
 80036c8:	f7ff fbee 	bl	8002ea8 <__aeabi_f2d>
 80036cc:	4a32      	ldr	r2, [pc, #200]	; (8003798 <Max31865_readTempC+0x288>)
 80036ce:	4b33      	ldr	r3, [pc, #204]	; (800379c <Max31865_readTempC+0x28c>)
 80036d0:	f7fe fd42 	bl	8002158 <__aeabi_dmul>
 80036d4:	0002      	movs	r2, r0
 80036d6:	000b      	movs	r3, r1
 80036d8:	0020      	movs	r0, r4
 80036da:	0029      	movs	r1, r5
 80036dc:	f7fe ffa8 	bl	8002630 <__aeabi_dsub>
 80036e0:	0002      	movs	r2, r0
 80036e2:	000b      	movs	r3, r1
 80036e4:	0010      	movs	r0, r2
 80036e6:	0019      	movs	r1, r3
 80036e8:	f7ff fc26 	bl	8002f38 <__aeabi_d2f>
 80036ec:	1c03      	adds	r3, r0, #0
 80036ee:	60fb      	str	r3, [r7, #12]
	rpoly *= Rt;  // ^5
 80036f0:	6a39      	ldr	r1, [r7, #32]
 80036f2:	68b8      	ldr	r0, [r7, #8]
 80036f4:	f7fd fa78 	bl	8000be8 <__aeabi_fmul>
 80036f8:	1c03      	adds	r3, r0, #0
 80036fa:	60bb      	str	r3, [r7, #8]
	temp += 1.5243e-10 * rpoly;
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f7ff fbd3 	bl	8002ea8 <__aeabi_f2d>
 8003702:	0004      	movs	r4, r0
 8003704:	000d      	movs	r5, r1
 8003706:	68b8      	ldr	r0, [r7, #8]
 8003708:	f7ff fbce 	bl	8002ea8 <__aeabi_f2d>
 800370c:	4a24      	ldr	r2, [pc, #144]	; (80037a0 <Max31865_readTempC+0x290>)
 800370e:	4b25      	ldr	r3, [pc, #148]	; (80037a4 <Max31865_readTempC+0x294>)
 8003710:	f7fe fd22 	bl	8002158 <__aeabi_dmul>
 8003714:	0002      	movs	r2, r0
 8003716:	000b      	movs	r3, r1
 8003718:	0020      	movs	r0, r4
 800371a:	0029      	movs	r1, r5
 800371c:	f7fd fdde 	bl	80012dc <__aeabi_dadd>
 8003720:	0002      	movs	r2, r0
 8003722:	000b      	movs	r3, r1
 8003724:	0010      	movs	r0, r2
 8003726:	0019      	movs	r1, r3
 8003728:	f7ff fc06 	bl	8002f38 <__aeabi_d2f>
 800372c:	1c03      	adds	r3, r0, #0
 800372e:	60fb      	str	r3, [r7, #12]

  *readTemp = temp;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	601a      	str	r2, [r3, #0]
  if(Max31865_readFault(max31865) == 0)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	0018      	movs	r0, r3
 800373a:	f7ff fd73 	bl	8003224 <Max31865_readFault>
 800373e:	1e03      	subs	r3, r0, #0
 8003740:	d103      	bne.n	800374a <Max31865_readTempC+0x23a>
    isOk = true;
 8003742:	2327      	movs	r3, #39	; 0x27
 8003744:	18fb      	adds	r3, r7, r3
 8003746:	2201      	movs	r2, #1
 8003748:	701a      	strb	r2, [r3, #0]
  max31865->lock = 0;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	731a      	strb	r2, [r3, #12]
  return isOk;
 8003750:	2327      	movs	r3, #39	; 0x27
 8003752:	18fb      	adds	r3, r7, r3
 8003754:	781b      	ldrb	r3, [r3, #0]
}
 8003756:	0018      	movs	r0, r3
 8003758:	46bd      	mov	sp, r7
 800375a:	b00a      	add	sp, #40	; 0x28
 800375c:	bdb0      	pop	{r4, r5, r7, pc}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	45866000 	.word	0x45866000
 8003764:	bb801132 	.word	0xbb801132
 8003768:	37938317 	.word	0x37938317
 800376c:	b11ebdf3 	.word	0xb11ebdf3
 8003770:	b59b057f 	.word	0xb59b057f
 8003774:	447a0000 	.word	0x447a0000
 8003778:	42c80000 	.word	0x42c80000
 800377c:	c372051f 	.word	0xc372051f
 8003780:	5dcc63f1 	.word	0x5dcc63f1
 8003784:	4001c84b 	.word	0x4001c84b
 8003788:	7dc882bb 	.word	0x7dc882bb
 800378c:	3f652f06 	.word	0x3f652f06
 8003790:	c766c293 	.word	0xc766c293
 8003794:	3ed43de0 	.word	0x3ed43de0
 8003798:	513156ce 	.word	0x513156ce
 800379c:	3e5e42e2 	.word	0x3e5e42e2
 80037a0:	61e4fa3e 	.word	0x61e4fa3e
 80037a4:	3de4f327 	.word	0x3de4f327

080037a8 <Max31865_Filter>:
  *readTemp = (*readTemp * 9.0f / 5.0f) + 32.0f;
  return isOk;
}
//#########################################################################################################################
float Max31865_Filter(float	newInput, float	lastOutput, float efectiveFactor)
{
 80037a8:	b590      	push	{r4, r7, lr}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
	return ((float)lastOutput*(1.0f-efectiveFactor)) + ((float)newInput*efectiveFactor) ;
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	20fe      	movs	r0, #254	; 0xfe
 80037b8:	0580      	lsls	r0, r0, #22
 80037ba:	f7fd fb3b 	bl	8000e34 <__aeabi_fsub>
 80037be:	1c03      	adds	r3, r0, #0
 80037c0:	68b9      	ldr	r1, [r7, #8]
 80037c2:	1c18      	adds	r0, r3, #0
 80037c4:	f7fd fa10 	bl	8000be8 <__aeabi_fmul>
 80037c8:	1c03      	adds	r3, r0, #0
 80037ca:	1c1c      	adds	r4, r3, #0
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f7fd fa0a 	bl	8000be8 <__aeabi_fmul>
 80037d4:	1c03      	adds	r3, r0, #0
 80037d6:	1c19      	adds	r1, r3, #0
 80037d8:	1c20      	adds	r0, r4, #0
 80037da:	f7fc fe9f 	bl	800051c <__aeabi_fadd>
 80037de:	1c03      	adds	r3, r0, #0
}
 80037e0:	1c18      	adds	r0, r3, #0
 80037e2:	46bd      	mov	sp, r7
 80037e4:	b005      	add	sp, #20
 80037e6:	bd90      	pop	{r4, r7, pc}

080037e8 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80037ee:	1d3b      	adds	r3, r7, #4
 80037f0:	0018      	movs	r0, r3
 80037f2:	230c      	movs	r3, #12
 80037f4:	001a      	movs	r2, r3
 80037f6:	2100      	movs	r1, #0
 80037f8:	f008 fcdf 	bl	800c1ba <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80037fc:	4b39      	ldr	r3, [pc, #228]	; (80038e4 <MX_ADC_Init+0xfc>)
 80037fe:	4a3a      	ldr	r2, [pc, #232]	; (80038e8 <MX_ADC_Init+0x100>)
 8003800:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003802:	4b38      	ldr	r3, [pc, #224]	; (80038e4 <MX_ADC_Init+0xfc>)
 8003804:	2200      	movs	r2, #0
 8003806:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003808:	4b36      	ldr	r3, [pc, #216]	; (80038e4 <MX_ADC_Init+0xfc>)
 800380a:	2200      	movs	r2, #0
 800380c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800380e:	4b35      	ldr	r3, [pc, #212]	; (80038e4 <MX_ADC_Init+0xfc>)
 8003810:	2200      	movs	r2, #0
 8003812:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003814:	4b33      	ldr	r3, [pc, #204]	; (80038e4 <MX_ADC_Init+0xfc>)
 8003816:	2201      	movs	r2, #1
 8003818:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800381a:	4b32      	ldr	r3, [pc, #200]	; (80038e4 <MX_ADC_Init+0xfc>)
 800381c:	2204      	movs	r2, #4
 800381e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003820:	4b30      	ldr	r3, [pc, #192]	; (80038e4 <MX_ADC_Init+0xfc>)
 8003822:	2200      	movs	r2, #0
 8003824:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003826:	4b2f      	ldr	r3, [pc, #188]	; (80038e4 <MX_ADC_Init+0xfc>)
 8003828:	2200      	movs	r2, #0
 800382a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800382c:	4b2d      	ldr	r3, [pc, #180]	; (80038e4 <MX_ADC_Init+0xfc>)
 800382e:	2200      	movs	r2, #0
 8003830:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8003832:	4b2c      	ldr	r3, [pc, #176]	; (80038e4 <MX_ADC_Init+0xfc>)
 8003834:	2201      	movs	r2, #1
 8003836:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003838:	4b2a      	ldr	r3, [pc, #168]	; (80038e4 <MX_ADC_Init+0xfc>)
 800383a:	22c2      	movs	r2, #194	; 0xc2
 800383c:	32ff      	adds	r2, #255	; 0xff
 800383e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003840:	4b28      	ldr	r3, [pc, #160]	; (80038e4 <MX_ADC_Init+0xfc>)
 8003842:	2200      	movs	r2, #0
 8003844:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003846:	4b27      	ldr	r3, [pc, #156]	; (80038e4 <MX_ADC_Init+0xfc>)
 8003848:	2224      	movs	r2, #36	; 0x24
 800384a:	2100      	movs	r1, #0
 800384c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800384e:	4b25      	ldr	r3, [pc, #148]	; (80038e4 <MX_ADC_Init+0xfc>)
 8003850:	2201      	movs	r2, #1
 8003852:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003854:	4b23      	ldr	r3, [pc, #140]	; (80038e4 <MX_ADC_Init+0xfc>)
 8003856:	0018      	movs	r0, r3
 8003858:	f002 fd0c 	bl	8006274 <HAL_ADC_Init>
 800385c:	1e03      	subs	r3, r0, #0
 800385e:	d001      	beq.n	8003864 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8003860:	f001 f962 	bl	8004b28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003864:	1d3b      	adds	r3, r7, #4
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800386a:	1d3b      	adds	r3, r7, #4
 800386c:	2280      	movs	r2, #128	; 0x80
 800386e:	0152      	lsls	r2, r2, #5
 8003870:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003872:	1d3b      	adds	r3, r7, #4
 8003874:	2207      	movs	r2, #7
 8003876:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003878:	1d3a      	adds	r2, r7, #4
 800387a:	4b1a      	ldr	r3, [pc, #104]	; (80038e4 <MX_ADC_Init+0xfc>)
 800387c:	0011      	movs	r1, r2
 800387e:	0018      	movs	r0, r3
 8003880:	f002 ff70 	bl	8006764 <HAL_ADC_ConfigChannel>
 8003884:	1e03      	subs	r3, r0, #0
 8003886:	d001      	beq.n	800388c <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8003888:	f001 f94e 	bl	8004b28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800388c:	1d3b      	adds	r3, r7, #4
 800388e:	2201      	movs	r2, #1
 8003890:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003892:	1d3a      	adds	r2, r7, #4
 8003894:	4b13      	ldr	r3, [pc, #76]	; (80038e4 <MX_ADC_Init+0xfc>)
 8003896:	0011      	movs	r1, r2
 8003898:	0018      	movs	r0, r3
 800389a:	f002 ff63 	bl	8006764 <HAL_ADC_ConfigChannel>
 800389e:	1e03      	subs	r3, r0, #0
 80038a0:	d001      	beq.n	80038a6 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80038a2:	f001 f941 	bl	8004b28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80038a6:	1d3b      	adds	r3, r7, #4
 80038a8:	2202      	movs	r2, #2
 80038aa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80038ac:	1d3a      	adds	r2, r7, #4
 80038ae:	4b0d      	ldr	r3, [pc, #52]	; (80038e4 <MX_ADC_Init+0xfc>)
 80038b0:	0011      	movs	r1, r2
 80038b2:	0018      	movs	r0, r3
 80038b4:	f002 ff56 	bl	8006764 <HAL_ADC_ConfigChannel>
 80038b8:	1e03      	subs	r3, r0, #0
 80038ba:	d001      	beq.n	80038c0 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 80038bc:	f001 f934 	bl	8004b28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80038c0:	1d3b      	adds	r3, r7, #4
 80038c2:	2203      	movs	r2, #3
 80038c4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80038c6:	1d3a      	adds	r2, r7, #4
 80038c8:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <MX_ADC_Init+0xfc>)
 80038ca:	0011      	movs	r1, r2
 80038cc:	0018      	movs	r0, r3
 80038ce:	f002 ff49 	bl	8006764 <HAL_ADC_ConfigChannel>
 80038d2:	1e03      	subs	r3, r0, #0
 80038d4:	d001      	beq.n	80038da <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 80038d6:	f001 f927 	bl	8004b28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	46bd      	mov	sp, r7
 80038de:	b004      	add	sp, #16
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	20000204 	.word	0x20000204
 80038e8:	40012400 	.word	0x40012400

080038ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80038ec:	b590      	push	{r4, r7, lr}
 80038ee:	b08b      	sub	sp, #44	; 0x2c
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f4:	2414      	movs	r4, #20
 80038f6:	193b      	adds	r3, r7, r4
 80038f8:	0018      	movs	r0, r3
 80038fa:	2314      	movs	r3, #20
 80038fc:	001a      	movs	r2, r3
 80038fe:	2100      	movs	r1, #0
 8003900:	f008 fc5b 	bl	800c1ba <memset>
  if(adcHandle->Instance==ADC1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a19      	ldr	r2, [pc, #100]	; (8003970 <HAL_ADC_MspInit+0x84>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d12b      	bne.n	8003966 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800390e:	4b19      	ldr	r3, [pc, #100]	; (8003974 <HAL_ADC_MspInit+0x88>)
 8003910:	699a      	ldr	r2, [r3, #24]
 8003912:	4b18      	ldr	r3, [pc, #96]	; (8003974 <HAL_ADC_MspInit+0x88>)
 8003914:	2180      	movs	r1, #128	; 0x80
 8003916:	0089      	lsls	r1, r1, #2
 8003918:	430a      	orrs	r2, r1
 800391a:	619a      	str	r2, [r3, #24]
 800391c:	4b15      	ldr	r3, [pc, #84]	; (8003974 <HAL_ADC_MspInit+0x88>)
 800391e:	699a      	ldr	r2, [r3, #24]
 8003920:	2380      	movs	r3, #128	; 0x80
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4013      	ands	r3, r2
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800392a:	4b12      	ldr	r3, [pc, #72]	; (8003974 <HAL_ADC_MspInit+0x88>)
 800392c:	695a      	ldr	r2, [r3, #20]
 800392e:	4b11      	ldr	r3, [pc, #68]	; (8003974 <HAL_ADC_MspInit+0x88>)
 8003930:	2180      	movs	r1, #128	; 0x80
 8003932:	0289      	lsls	r1, r1, #10
 8003934:	430a      	orrs	r2, r1
 8003936:	615a      	str	r2, [r3, #20]
 8003938:	4b0e      	ldr	r3, [pc, #56]	; (8003974 <HAL_ADC_MspInit+0x88>)
 800393a:	695a      	ldr	r2, [r3, #20]
 800393c:	2380      	movs	r3, #128	; 0x80
 800393e:	029b      	lsls	r3, r3, #10
 8003940:	4013      	ands	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003946:	193b      	adds	r3, r7, r4
 8003948:	220f      	movs	r2, #15
 800394a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800394c:	193b      	adds	r3, r7, r4
 800394e:	2203      	movs	r2, #3
 8003950:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003952:	193b      	adds	r3, r7, r4
 8003954:	2200      	movs	r2, #0
 8003956:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003958:	193a      	adds	r2, r7, r4
 800395a:	2390      	movs	r3, #144	; 0x90
 800395c:	05db      	lsls	r3, r3, #23
 800395e:	0011      	movs	r1, r2
 8003960:	0018      	movs	r0, r3
 8003962:	f003 fb53 	bl	800700c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	46bd      	mov	sp, r7
 800396a:	b00b      	add	sp, #44	; 0x2c
 800396c:	bd90      	pop	{r4, r7, pc}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	40012400 	.word	0x40012400
 8003974:	40021000 	.word	0x40021000

08003978 <ADS1115_Init>:
uint8_t ADS1115_config[2];
uint8_t ADS1115_rawValue[2];
float ADS1115_voltCoef; // Voltage coefficient.

/* Function definitions. */
HAL_StatusTypeDef ADS1115_Init(I2C_HandleTypeDef *handler, uint16_t setDataRate, uint16_t setPGA) {
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	0008      	movs	r0, r1
 8003982:	0011      	movs	r1, r2
 8003984:	1cbb      	adds	r3, r7, #2
 8003986:	1c02      	adds	r2, r0, #0
 8003988:	801a      	strh	r2, [r3, #0]
 800398a:	003b      	movs	r3, r7
 800398c:	1c0a      	adds	r2, r1, #0
 800398e:	801a      	strh	r2, [r3, #0]

	// Handler
	memcpy(&ADS1115_I2C_Handler, handler, sizeof(*handler));
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	4b23      	ldr	r3, [pc, #140]	; (8003a20 <ADS1115_Init+0xa8>)
 8003994:	2254      	movs	r2, #84	; 0x54
 8003996:	0018      	movs	r0, r3
 8003998:	f008 fc06 	bl	800c1a8 <memcpy>

	// Data rate and PGA configurations.
	ADS1115_dataRate = setDataRate;
 800399c:	4b21      	ldr	r3, [pc, #132]	; (8003a24 <ADS1115_Init+0xac>)
 800399e:	1cba      	adds	r2, r7, #2
 80039a0:	8812      	ldrh	r2, [r2, #0]
 80039a2:	801a      	strh	r2, [r3, #0]
	ADS1115_pga = setPGA;
 80039a4:	4b20      	ldr	r3, [pc, #128]	; (8003a28 <ADS1115_Init+0xb0>)
 80039a6:	003a      	movs	r2, r7
 80039a8:	8812      	ldrh	r2, [r2, #0]
 80039aa:	801a      	strh	r2, [r3, #0]

	// Voltage coefficient update.
	switch (ADS1115_pga) {
 80039ac:	4b1e      	ldr	r3, [pc, #120]	; (8003a28 <ADS1115_Init+0xb0>)
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	2b0e      	cmp	r3, #14
 80039b2:	d822      	bhi.n	80039fa <ADS1115_Init+0x82>
 80039b4:	009a      	lsls	r2, r3, #2
 80039b6:	4b1d      	ldr	r3, [pc, #116]	; (8003a2c <ADS1115_Init+0xb4>)
 80039b8:	18d3      	adds	r3, r2, r3
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	469f      	mov	pc, r3

	case ADS1115_PGA_TWOTHIRDS:
		ADS1115_voltCoef = 0.1875;
 80039be:	4b1c      	ldr	r3, [pc, #112]	; (8003a30 <ADS1115_Init+0xb8>)
 80039c0:	22f9      	movs	r2, #249	; 0xf9
 80039c2:	0592      	lsls	r2, r2, #22
 80039c4:	601a      	str	r2, [r3, #0]
		break;
 80039c6:	e018      	b.n	80039fa <ADS1115_Init+0x82>

	case ADS1115_PGA_ONE:
		ADS1115_voltCoef = 0.125;
 80039c8:	4b19      	ldr	r3, [pc, #100]	; (8003a30 <ADS1115_Init+0xb8>)
 80039ca:	22f8      	movs	r2, #248	; 0xf8
 80039cc:	0592      	lsls	r2, r2, #22
 80039ce:	601a      	str	r2, [r3, #0]
		break;
 80039d0:	e013      	b.n	80039fa <ADS1115_Init+0x82>

	case ADS1115_PGA_TWO:
		ADS1115_voltCoef = 0.0625;
 80039d2:	4b17      	ldr	r3, [pc, #92]	; (8003a30 <ADS1115_Init+0xb8>)
 80039d4:	22f6      	movs	r2, #246	; 0xf6
 80039d6:	0592      	lsls	r2, r2, #22
 80039d8:	601a      	str	r2, [r3, #0]
		break;
 80039da:	e00e      	b.n	80039fa <ADS1115_Init+0x82>

	case ADS1115_PGA_FOUR:
		ADS1115_voltCoef = 0.03125;
 80039dc:	4b14      	ldr	r3, [pc, #80]	; (8003a30 <ADS1115_Init+0xb8>)
 80039de:	22f4      	movs	r2, #244	; 0xf4
 80039e0:	0592      	lsls	r2, r2, #22
 80039e2:	601a      	str	r2, [r3, #0]
		break;
 80039e4:	e009      	b.n	80039fa <ADS1115_Init+0x82>

	case ADS1115_PGA_EIGHT:
		ADS1115_voltCoef = 0.015625;
 80039e6:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <ADS1115_Init+0xb8>)
 80039e8:	22f2      	movs	r2, #242	; 0xf2
 80039ea:	0592      	lsls	r2, r2, #22
 80039ec:	601a      	str	r2, [r3, #0]
		break;
 80039ee:	e004      	b.n	80039fa <ADS1115_Init+0x82>

	case ADS1115_PGA_SIXTEEN:
		ADS1115_voltCoef = 0.0078125;
 80039f0:	4b0f      	ldr	r3, [pc, #60]	; (8003a30 <ADS1115_Init+0xb8>)
 80039f2:	22f0      	movs	r2, #240	; 0xf0
 80039f4:	0592      	lsls	r2, r2, #22
 80039f6:	601a      	str	r2, [r3, #0]
		break;
 80039f8:	46c0      	nop			; (mov r8, r8)

		}

	if (HAL_I2C_IsDeviceReady(&ADS1115_I2C_Handler, (uint16_t) (ADS1115_devAddress << 1), 5, ADS1115_TIMEOUT) == HAL_OK) {
 80039fa:	4b0e      	ldr	r3, [pc, #56]	; (8003a34 <ADS1115_Init+0xbc>)
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	18db      	adds	r3, r3, r3
 8003a02:	b299      	uxth	r1, r3
 8003a04:	4806      	ldr	r0, [pc, #24]	; (8003a20 <ADS1115_Init+0xa8>)
 8003a06:	2301      	movs	r3, #1
 8003a08:	2205      	movs	r2, #5
 8003a0a:	f004 f895 	bl	8007b38 <HAL_I2C_IsDeviceReady>
 8003a0e:	1e03      	subs	r3, r0, #0
 8003a10:	d101      	bne.n	8003a16 <ADS1115_Init+0x9e>
		return HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	e000      	b.n	8003a18 <ADS1115_Init+0xa0>
	} else {
		return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
	}

}
 8003a18:	0018      	movs	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	b002      	add	sp, #8
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	20000244 	.word	0x20000244
 8003a24:	20000002 	.word	0x20000002
 8003a28:	20000004 	.word	0x20000004
 8003a2c:	0800f470 	.word	0x0800f470
 8003a30:	200002a0 	.word	0x200002a0
 8003a34:	20000000 	.word	0x20000000

08003a38 <ADS1115_read>:

/*
 * alias function with different name to avoid confusion
 * returns voltage as mV
 * */
HAL_StatusTypeDef ADS1115_read(uint16_t muxPort, float *voltage) {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af04      	add	r7, sp, #16
 8003a3e:	0002      	movs	r2, r0
 8003a40:	6039      	str	r1, [r7, #0]
 8003a42:	1dbb      	adds	r3, r7, #6
 8003a44:	801a      	strh	r2, [r3, #0]

	ADS1115_config[0] = ADS1115_OS | muxPort | ADS1115_pga | ADS1115_MODE;
 8003a46:	1dbb      	adds	r3, r7, #6
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	4b2b      	ldr	r3, [pc, #172]	; (8003afc <ADS1115_read+0xc4>)
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	4313      	orrs	r3, r2
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	227f      	movs	r2, #127	; 0x7f
 8003a58:	4252      	negs	r2, r2
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	4b28      	ldr	r3, [pc, #160]	; (8003b00 <ADS1115_read+0xc8>)
 8003a60:	701a      	strb	r2, [r3, #0]
	ADS1115_config[1] = ADS1115_dataRate | ADS1115_COMP_MODE | ADS1115_COMP_POL | ADS1115_COMP_LAT| ADS1115_COMP_QUE;
 8003a62:	4b28      	ldr	r3, [pc, #160]	; (8003b04 <ADS1115_read+0xcc>)
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2203      	movs	r2, #3
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	4b24      	ldr	r3, [pc, #144]	; (8003b00 <ADS1115_read+0xc8>)
 8003a70:	705a      	strb	r2, [r3, #1]

	if(HAL_I2C_Mem_Write(&ADS1115_I2C_Handler, (uint16_t) (ADS1115_devAddress << 1), ADS1115_CONFIG_REG, 1, ADS1115_config, 2, ADS1115_TIMEOUT) == HAL_OK){
 8003a72:	4b25      	ldr	r3, [pc, #148]	; (8003b08 <ADS1115_read+0xd0>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	18db      	adds	r3, r3, r3
 8003a7a:	b299      	uxth	r1, r3
 8003a7c:	4823      	ldr	r0, [pc, #140]	; (8003b0c <ADS1115_read+0xd4>)
 8003a7e:	2301      	movs	r3, #1
 8003a80:	9302      	str	r3, [sp, #8]
 8003a82:	2302      	movs	r3, #2
 8003a84:	9301      	str	r3, [sp, #4]
 8003a86:	4b1e      	ldr	r3, [pc, #120]	; (8003b00 <ADS1115_read+0xc8>)
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f003 fdf1 	bl	8007674 <HAL_I2C_Mem_Write>
 8003a92:	1e03      	subs	r3, r0, #0
 8003a94:	d12c      	bne.n	8003af0 <ADS1115_read+0xb8>

		if(HAL_I2C_Mem_Read(&ADS1115_I2C_Handler, (uint16_t) ((ADS1115_devAddress << 1) | 0x1), ADS1115_CONVER_REG, 1, ADS1115_rawValue, 2, ADS1115_TIMEOUT) == HAL_OK){
 8003a96:	4b1c      	ldr	r3, [pc, #112]	; (8003b08 <ADS1115_read+0xd0>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	b21b      	sxth	r3, r3
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	b21b      	sxth	r3, r3
 8003aa4:	b299      	uxth	r1, r3
 8003aa6:	4819      	ldr	r0, [pc, #100]	; (8003b0c <ADS1115_read+0xd4>)
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	9302      	str	r3, [sp, #8]
 8003aac:	2302      	movs	r3, #2
 8003aae:	9301      	str	r3, [sp, #4]
 8003ab0:	4b17      	ldr	r3, [pc, #92]	; (8003b10 <ADS1115_read+0xd8>)
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f003 ff0a 	bl	80078d0 <HAL_I2C_Mem_Read>
 8003abc:	1e03      	subs	r3, r0, #0
 8003abe:	d117      	bne.n	8003af0 <ADS1115_read+0xb8>

			*voltage = (float) (((int16_t) (ADS1115_rawValue[0] << 8) | ADS1115_rawValue[1]) * ADS1115_voltCoef);
 8003ac0:	4b13      	ldr	r3, [pc, #76]	; (8003b10 <ADS1115_read+0xd8>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	021b      	lsls	r3, r3, #8
 8003ac6:	b21b      	sxth	r3, r3
 8003ac8:	001a      	movs	r2, r3
 8003aca:	4b11      	ldr	r3, [pc, #68]	; (8003b10 <ADS1115_read+0xd8>)
 8003acc:	785b      	ldrb	r3, [r3, #1]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f7fd fb73 	bl	80011bc <__aeabi_i2f>
 8003ad6:	1c02      	adds	r2, r0, #0
 8003ad8:	4b0e      	ldr	r3, [pc, #56]	; (8003b14 <ADS1115_read+0xdc>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	1c19      	adds	r1, r3, #0
 8003ade:	1c10      	adds	r0, r2, #0
 8003ae0:	f7fd f882 	bl	8000be8 <__aeabi_fmul>
 8003ae4:	1c03      	adds	r3, r0, #0
 8003ae6:	1c1a      	adds	r2, r3, #0
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	601a      	str	r2, [r3, #0]
			return HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	e000      	b.n	8003af2 <ADS1115_read+0xba>

		}

	}

	return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1

}
 8003af2:	0018      	movs	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	b002      	add	sp, #8
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	20000004 	.word	0x20000004
 8003b00:	20000298 	.word	0x20000298
 8003b04:	20000002 	.word	0x20000002
 8003b08:	20000000 	.word	0x20000000
 8003b0c:	20000244 	.word	0x20000244
 8003b10:	2000029c 	.word	0x2000029c
 8003b14:	200002a0 	.word	0x200002a0

08003b18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003b18:	b590      	push	{r4, r7, lr}
 8003b1a:	b089      	sub	sp, #36	; 0x24
 8003b1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b1e:	240c      	movs	r4, #12
 8003b20:	193b      	adds	r3, r7, r4
 8003b22:	0018      	movs	r0, r3
 8003b24:	2314      	movs	r3, #20
 8003b26:	001a      	movs	r2, r3
 8003b28:	2100      	movs	r1, #0
 8003b2a:	f008 fb46 	bl	800c1ba <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b2e:	4b46      	ldr	r3, [pc, #280]	; (8003c48 <MX_GPIO_Init+0x130>)
 8003b30:	695a      	ldr	r2, [r3, #20]
 8003b32:	4b45      	ldr	r3, [pc, #276]	; (8003c48 <MX_GPIO_Init+0x130>)
 8003b34:	2180      	movs	r1, #128	; 0x80
 8003b36:	0309      	lsls	r1, r1, #12
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	615a      	str	r2, [r3, #20]
 8003b3c:	4b42      	ldr	r3, [pc, #264]	; (8003c48 <MX_GPIO_Init+0x130>)
 8003b3e:	695a      	ldr	r2, [r3, #20]
 8003b40:	2380      	movs	r3, #128	; 0x80
 8003b42:	031b      	lsls	r3, r3, #12
 8003b44:	4013      	ands	r3, r2
 8003b46:	60bb      	str	r3, [r7, #8]
 8003b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b4a:	4b3f      	ldr	r3, [pc, #252]	; (8003c48 <MX_GPIO_Init+0x130>)
 8003b4c:	695a      	ldr	r2, [r3, #20]
 8003b4e:	4b3e      	ldr	r3, [pc, #248]	; (8003c48 <MX_GPIO_Init+0x130>)
 8003b50:	2180      	movs	r1, #128	; 0x80
 8003b52:	0289      	lsls	r1, r1, #10
 8003b54:	430a      	orrs	r2, r1
 8003b56:	615a      	str	r2, [r3, #20]
 8003b58:	4b3b      	ldr	r3, [pc, #236]	; (8003c48 <MX_GPIO_Init+0x130>)
 8003b5a:	695a      	ldr	r2, [r3, #20]
 8003b5c:	2380      	movs	r3, #128	; 0x80
 8003b5e:	029b      	lsls	r3, r3, #10
 8003b60:	4013      	ands	r3, r2
 8003b62:	607b      	str	r3, [r7, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b66:	4b38      	ldr	r3, [pc, #224]	; (8003c48 <MX_GPIO_Init+0x130>)
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	4b37      	ldr	r3, [pc, #220]	; (8003c48 <MX_GPIO_Init+0x130>)
 8003b6c:	2180      	movs	r1, #128	; 0x80
 8003b6e:	02c9      	lsls	r1, r1, #11
 8003b70:	430a      	orrs	r2, r1
 8003b72:	615a      	str	r2, [r3, #20]
 8003b74:	4b34      	ldr	r3, [pc, #208]	; (8003c48 <MX_GPIO_Init+0x130>)
 8003b76:	695a      	ldr	r2, [r3, #20]
 8003b78:	2380      	movs	r3, #128	; 0x80
 8003b7a:	02db      	lsls	r3, r3, #11
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 8003b82:	4932      	ldr	r1, [pc, #200]	; (8003c4c <MX_GPIO_Init+0x134>)
 8003b84:	4b32      	ldr	r3, [pc, #200]	; (8003c50 <MX_GPIO_Init+0x138>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f003 fbb7 	bl	80072fc <HAL_GPIO_WritePin>
                          |LD4_Pin|LD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8003b8e:	4b31      	ldr	r3, [pc, #196]	; (8003c54 <MX_GPIO_Init+0x13c>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	2107      	movs	r1, #7
 8003b94:	0018      	movs	r0, r3
 8003b96:	f003 fbb1 	bl	80072fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8003b9a:	2380      	movs	r3, #128	; 0x80
 8003b9c:	0059      	lsls	r1, r3, #1
 8003b9e:	2390      	movs	r3, #144	; 0x90
 8003ba0:	05db      	lsls	r3, r3, #23
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f003 fba9 	bl	80072fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 8003baa:	193b      	adds	r3, r7, r4
 8003bac:	4a27      	ldr	r2, [pc, #156]	; (8003c4c <MX_GPIO_Init+0x134>)
 8003bae:	601a      	str	r2, [r3, #0]
                          |LD4_Pin|LD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bb0:	193b      	adds	r3, r7, r4
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb6:	193b      	adds	r3, r7, r4
 8003bb8:	2200      	movs	r2, #0
 8003bba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bbc:	193b      	adds	r3, r7, r4
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bc2:	193b      	adds	r3, r7, r4
 8003bc4:	4a22      	ldr	r2, [pc, #136]	; (8003c50 <MX_GPIO_Init+0x138>)
 8003bc6:	0019      	movs	r1, r3
 8003bc8:	0010      	movs	r0, r2
 8003bca:	f003 fa1f 	bl	800700c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 8003bce:	0021      	movs	r1, r4
 8003bd0:	187b      	adds	r3, r7, r1
 8003bd2:	2206      	movs	r2, #6
 8003bd4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003bd6:	187b      	adds	r3, r7, r1
 8003bd8:	2290      	movs	r2, #144	; 0x90
 8003bda:	0352      	lsls	r2, r2, #13
 8003bdc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bde:	000c      	movs	r4, r1
 8003be0:	193b      	adds	r3, r7, r4
 8003be2:	2200      	movs	r2, #0
 8003be4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003be6:	193b      	adds	r3, r7, r4
 8003be8:	4a19      	ldr	r2, [pc, #100]	; (8003c50 <MX_GPIO_Init+0x138>)
 8003bea:	0019      	movs	r1, r3
 8003bec:	0010      	movs	r0, r2
 8003bee:	f003 fa0d 	bl	800700c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003bf2:	193b      	adds	r3, r7, r4
 8003bf4:	2207      	movs	r2, #7
 8003bf6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bf8:	193b      	adds	r3, r7, r4
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfe:	193b      	adds	r3, r7, r4
 8003c00:	2200      	movs	r2, #0
 8003c02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c04:	193b      	adds	r3, r7, r4
 8003c06:	2200      	movs	r2, #0
 8003c08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c0a:	193b      	adds	r3, r7, r4
 8003c0c:	4a11      	ldr	r2, [pc, #68]	; (8003c54 <MX_GPIO_Init+0x13c>)
 8003c0e:	0019      	movs	r1, r3
 8003c10:	0010      	movs	r0, r2
 8003c12:	f003 f9fb 	bl	800700c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003c16:	0021      	movs	r1, r4
 8003c18:	187b      	adds	r3, r7, r1
 8003c1a:	2280      	movs	r2, #128	; 0x80
 8003c1c:	0052      	lsls	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c20:	187b      	adds	r3, r7, r1
 8003c22:	2201      	movs	r2, #1
 8003c24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c26:	187b      	adds	r3, r7, r1
 8003c28:	2200      	movs	r2, #0
 8003c2a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c2c:	187b      	adds	r3, r7, r1
 8003c2e:	2200      	movs	r2, #0
 8003c30:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c32:	187a      	adds	r2, r7, r1
 8003c34:	2390      	movs	r3, #144	; 0x90
 8003c36:	05db      	lsls	r3, r3, #23
 8003c38:	0011      	movs	r1, r2
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f003 f9e6 	bl	800700c <HAL_GPIO_Init>

}
 8003c40:	46c0      	nop			; (mov r8, r8)
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b009      	add	sp, #36	; 0x24
 8003c46:	bd90      	pop	{r4, r7, pc}
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	000003e1 	.word	0x000003e1
 8003c50:	48000800 	.word	0x48000800
 8003c54:	48000400 	.word	0x48000400

08003c58 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003c5c:	4b1b      	ldr	r3, [pc, #108]	; (8003ccc <MX_I2C1_Init+0x74>)
 8003c5e:	4a1c      	ldr	r2, [pc, #112]	; (8003cd0 <MX_I2C1_Init+0x78>)
 8003c60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8003c62:	4b1a      	ldr	r3, [pc, #104]	; (8003ccc <MX_I2C1_Init+0x74>)
 8003c64:	4a1b      	ldr	r2, [pc, #108]	; (8003cd4 <MX_I2C1_Init+0x7c>)
 8003c66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003c68:	4b18      	ldr	r3, [pc, #96]	; (8003ccc <MX_I2C1_Init+0x74>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c6e:	4b17      	ldr	r3, [pc, #92]	; (8003ccc <MX_I2C1_Init+0x74>)
 8003c70:	2201      	movs	r2, #1
 8003c72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c74:	4b15      	ldr	r3, [pc, #84]	; (8003ccc <MX_I2C1_Init+0x74>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003c7a:	4b14      	ldr	r3, [pc, #80]	; (8003ccc <MX_I2C1_Init+0x74>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003c80:	4b12      	ldr	r3, [pc, #72]	; (8003ccc <MX_I2C1_Init+0x74>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c86:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <MX_I2C1_Init+0x74>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c8c:	4b0f      	ldr	r3, [pc, #60]	; (8003ccc <MX_I2C1_Init+0x74>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c92:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <MX_I2C1_Init+0x74>)
 8003c94:	0018      	movs	r0, r3
 8003c96:	f003 fb4f 	bl	8007338 <HAL_I2C_Init>
 8003c9a:	1e03      	subs	r3, r0, #0
 8003c9c:	d001      	beq.n	8003ca2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003c9e:	f000 ff43 	bl	8004b28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003ca2:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <MX_I2C1_Init+0x74>)
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f004 fb5a 	bl	8008360 <HAL_I2CEx_ConfigAnalogFilter>
 8003cac:	1e03      	subs	r3, r0, #0
 8003cae:	d001      	beq.n	8003cb4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003cb0:	f000 ff3a 	bl	8004b28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003cb4:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <MX_I2C1_Init+0x74>)
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	0018      	movs	r0, r3
 8003cba:	f004 fb9d 	bl	80083f8 <HAL_I2CEx_ConfigDigitalFilter>
 8003cbe:	1e03      	subs	r3, r0, #0
 8003cc0:	d001      	beq.n	8003cc6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003cc2:	f000 ff31 	bl	8004b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	200002a4 	.word	0x200002a4
 8003cd0:	40005400 	.word	0x40005400
 8003cd4:	2000090e 	.word	0x2000090e

08003cd8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003cdc:	4b1b      	ldr	r3, [pc, #108]	; (8003d4c <MX_I2C2_Init+0x74>)
 8003cde:	4a1c      	ldr	r2, [pc, #112]	; (8003d50 <MX_I2C2_Init+0x78>)
 8003ce0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8003ce2:	4b1a      	ldr	r3, [pc, #104]	; (8003d4c <MX_I2C2_Init+0x74>)
 8003ce4:	4a1b      	ldr	r2, [pc, #108]	; (8003d54 <MX_I2C2_Init+0x7c>)
 8003ce6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003ce8:	4b18      	ldr	r3, [pc, #96]	; (8003d4c <MX_I2C2_Init+0x74>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003cee:	4b17      	ldr	r3, [pc, #92]	; (8003d4c <MX_I2C2_Init+0x74>)
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003cf4:	4b15      	ldr	r3, [pc, #84]	; (8003d4c <MX_I2C2_Init+0x74>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003cfa:	4b14      	ldr	r3, [pc, #80]	; (8003d4c <MX_I2C2_Init+0x74>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003d00:	4b12      	ldr	r3, [pc, #72]	; (8003d4c <MX_I2C2_Init+0x74>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d06:	4b11      	ldr	r3, [pc, #68]	; (8003d4c <MX_I2C2_Init+0x74>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d0c:	4b0f      	ldr	r3, [pc, #60]	; (8003d4c <MX_I2C2_Init+0x74>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003d12:	4b0e      	ldr	r3, [pc, #56]	; (8003d4c <MX_I2C2_Init+0x74>)
 8003d14:	0018      	movs	r0, r3
 8003d16:	f003 fb0f 	bl	8007338 <HAL_I2C_Init>
 8003d1a:	1e03      	subs	r3, r0, #0
 8003d1c:	d001      	beq.n	8003d22 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003d1e:	f000 ff03 	bl	8004b28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003d22:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <MX_I2C2_Init+0x74>)
 8003d24:	2100      	movs	r1, #0
 8003d26:	0018      	movs	r0, r3
 8003d28:	f004 fb1a 	bl	8008360 <HAL_I2CEx_ConfigAnalogFilter>
 8003d2c:	1e03      	subs	r3, r0, #0
 8003d2e:	d001      	beq.n	8003d34 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003d30:	f000 fefa 	bl	8004b28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003d34:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <MX_I2C2_Init+0x74>)
 8003d36:	2100      	movs	r1, #0
 8003d38:	0018      	movs	r0, r3
 8003d3a:	f004 fb5d 	bl	80083f8 <HAL_I2CEx_ConfigDigitalFilter>
 8003d3e:	1e03      	subs	r3, r0, #0
 8003d40:	d001      	beq.n	8003d46 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003d42:	f000 fef1 	bl	8004b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	200002f8 	.word	0x200002f8
 8003d50:	40005800 	.word	0x40005800
 8003d54:	20303e5d 	.word	0x20303e5d

08003d58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003d58:	b590      	push	{r4, r7, lr}
 8003d5a:	b08d      	sub	sp, #52	; 0x34
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d60:	241c      	movs	r4, #28
 8003d62:	193b      	adds	r3, r7, r4
 8003d64:	0018      	movs	r0, r3
 8003d66:	2314      	movs	r3, #20
 8003d68:	001a      	movs	r2, r3
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	f008 fa25 	bl	800c1ba <memset>
  if(i2cHandle->Instance==I2C1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a38      	ldr	r2, [pc, #224]	; (8003e58 <HAL_I2C_MspInit+0x100>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d132      	bne.n	8003de0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d7a:	4b38      	ldr	r3, [pc, #224]	; (8003e5c <HAL_I2C_MspInit+0x104>)
 8003d7c:	695a      	ldr	r2, [r3, #20]
 8003d7e:	4b37      	ldr	r3, [pc, #220]	; (8003e5c <HAL_I2C_MspInit+0x104>)
 8003d80:	2180      	movs	r1, #128	; 0x80
 8003d82:	02c9      	lsls	r1, r1, #11
 8003d84:	430a      	orrs	r2, r1
 8003d86:	615a      	str	r2, [r3, #20]
 8003d88:	4b34      	ldr	r3, [pc, #208]	; (8003e5c <HAL_I2C_MspInit+0x104>)
 8003d8a:	695a      	ldr	r2, [r3, #20]
 8003d8c:	2380      	movs	r3, #128	; 0x80
 8003d8e:	02db      	lsls	r3, r3, #11
 8003d90:	4013      	ands	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
 8003d94:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d96:	0021      	movs	r1, r4
 8003d98:	187b      	adds	r3, r7, r1
 8003d9a:	22c0      	movs	r2, #192	; 0xc0
 8003d9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d9e:	187b      	adds	r3, r7, r1
 8003da0:	2212      	movs	r2, #18
 8003da2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da4:	187b      	adds	r3, r7, r1
 8003da6:	2200      	movs	r2, #0
 8003da8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003daa:	187b      	adds	r3, r7, r1
 8003dac:	2203      	movs	r2, #3
 8003dae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003db0:	187b      	adds	r3, r7, r1
 8003db2:	2201      	movs	r2, #1
 8003db4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003db6:	187b      	adds	r3, r7, r1
 8003db8:	4a29      	ldr	r2, [pc, #164]	; (8003e60 <HAL_I2C_MspInit+0x108>)
 8003dba:	0019      	movs	r1, r3
 8003dbc:	0010      	movs	r0, r2
 8003dbe:	f003 f925 	bl	800700c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003dc2:	4b26      	ldr	r3, [pc, #152]	; (8003e5c <HAL_I2C_MspInit+0x104>)
 8003dc4:	69da      	ldr	r2, [r3, #28]
 8003dc6:	4b25      	ldr	r3, [pc, #148]	; (8003e5c <HAL_I2C_MspInit+0x104>)
 8003dc8:	2180      	movs	r1, #128	; 0x80
 8003dca:	0389      	lsls	r1, r1, #14
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	61da      	str	r2, [r3, #28]
 8003dd0:	4b22      	ldr	r3, [pc, #136]	; (8003e5c <HAL_I2C_MspInit+0x104>)
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	2380      	movs	r3, #128	; 0x80
 8003dd6:	039b      	lsls	r3, r3, #14
 8003dd8:	4013      	ands	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8003dde:	e037      	b.n	8003e50 <HAL_I2C_MspInit+0xf8>
  else if(i2cHandle->Instance==I2C2)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a1f      	ldr	r2, [pc, #124]	; (8003e64 <HAL_I2C_MspInit+0x10c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d132      	bne.n	8003e50 <HAL_I2C_MspInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dea:	4b1c      	ldr	r3, [pc, #112]	; (8003e5c <HAL_I2C_MspInit+0x104>)
 8003dec:	695a      	ldr	r2, [r3, #20]
 8003dee:	4b1b      	ldr	r3, [pc, #108]	; (8003e5c <HAL_I2C_MspInit+0x104>)
 8003df0:	2180      	movs	r1, #128	; 0x80
 8003df2:	02c9      	lsls	r1, r1, #11
 8003df4:	430a      	orrs	r2, r1
 8003df6:	615a      	str	r2, [r3, #20]
 8003df8:	4b18      	ldr	r3, [pc, #96]	; (8003e5c <HAL_I2C_MspInit+0x104>)
 8003dfa:	695a      	ldr	r2, [r3, #20]
 8003dfc:	2380      	movs	r3, #128	; 0x80
 8003dfe:	02db      	lsls	r3, r3, #11
 8003e00:	4013      	ands	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003e06:	211c      	movs	r1, #28
 8003e08:	187b      	adds	r3, r7, r1
 8003e0a:	22c0      	movs	r2, #192	; 0xc0
 8003e0c:	0112      	lsls	r2, r2, #4
 8003e0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e10:	187b      	adds	r3, r7, r1
 8003e12:	2212      	movs	r2, #18
 8003e14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e16:	187b      	adds	r3, r7, r1
 8003e18:	2200      	movs	r2, #0
 8003e1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e1c:	187b      	adds	r3, r7, r1
 8003e1e:	2203      	movs	r2, #3
 8003e20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8003e22:	187b      	adds	r3, r7, r1
 8003e24:	2201      	movs	r2, #1
 8003e26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e28:	187b      	adds	r3, r7, r1
 8003e2a:	4a0d      	ldr	r2, [pc, #52]	; (8003e60 <HAL_I2C_MspInit+0x108>)
 8003e2c:	0019      	movs	r1, r3
 8003e2e:	0010      	movs	r0, r2
 8003e30:	f003 f8ec 	bl	800700c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003e34:	4b09      	ldr	r3, [pc, #36]	; (8003e5c <HAL_I2C_MspInit+0x104>)
 8003e36:	69da      	ldr	r2, [r3, #28]
 8003e38:	4b08      	ldr	r3, [pc, #32]	; (8003e5c <HAL_I2C_MspInit+0x104>)
 8003e3a:	2180      	movs	r1, #128	; 0x80
 8003e3c:	03c9      	lsls	r1, r1, #15
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	61da      	str	r2, [r3, #28]
 8003e42:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <HAL_I2C_MspInit+0x104>)
 8003e44:	69da      	ldr	r2, [r3, #28]
 8003e46:	2380      	movs	r3, #128	; 0x80
 8003e48:	03db      	lsls	r3, r3, #15
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
}
 8003e50:	46c0      	nop			; (mov r8, r8)
 8003e52:	46bd      	mov	sp, r7
 8003e54:	b00d      	add	sp, #52	; 0x34
 8003e56:	bd90      	pop	{r4, r7, pc}
 8003e58:	40005400 	.word	0x40005400
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	48000400 	.word	0x48000400
 8003e64:	40005800 	.word	0x40005800

08003e68 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8003e72:	2300      	movs	r3, #0
 8003e74:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d106      	bne.n	8003e8a <prv_parse_number+0x22>
        t = gh->p.term_str;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3371      	adds	r3, #113	; 0x71
 8003e80:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {} /* Strip leading spaces */
 8003e82:	e002      	b.n	8003e8a <prv_parse_number+0x22>
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	3301      	adds	r3, #1
 8003e88:	603b      	str	r3, [r7, #0]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <prv_parse_number+0x30>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	2b20      	cmp	r3, #32
 8003e96:	d0f5      	beq.n	8003e84 <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	2b2d      	cmp	r3, #45	; 0x2d
 8003e9e:	d104      	bne.n	8003eaa <prv_parse_number+0x42>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	603b      	str	r3, [r7, #0]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	e000      	b.n	8003eac <prv_parse_number+0x44>
 8003eaa:	2200      	movs	r2, #0
 8003eac:	230b      	movs	r3, #11
 8003eae:	18fb      	adds	r3, r7, r3
 8003eb0:	701a      	strb	r2, [r3, #0]
    for (; t != NULL && CIN(*t); ++t) {
 8003eb2:	e00d      	b.n	8003ed0 <prv_parse_number+0x68>
        res = 10 * res + CTN(*t);
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	0013      	movs	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	189b      	adds	r3, r3, r2
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	001a      	movs	r2, r3
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	3b30      	subs	r3, #48	; 0x30
 8003ec6:	18d3      	adds	r3, r2, r3
 8003ec8:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	603b      	str	r3, [r7, #0]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d007      	beq.n	8003ee6 <prv_parse_number+0x7e>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	2b2f      	cmp	r3, #47	; 0x2f
 8003edc:	d903      	bls.n	8003ee6 <prv_parse_number+0x7e>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b39      	cmp	r3, #57	; 0x39
 8003ee4:	d9e6      	bls.n	8003eb4 <prv_parse_number+0x4c>
    }
    return minus ? -res : res;
 8003ee6:	230b      	movs	r3, #11
 8003ee8:	18fb      	adds	r3, r7, r3
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <prv_parse_number+0x8e>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	425b      	negs	r3, r3
 8003ef4:	e000      	b.n	8003ef8 <prv_parse_number+0x90>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
}
 8003ef8:	0018      	movs	r0, r3
 8003efa:	46bd      	mov	sp, r7
 8003efc:	b004      	add	sp, #16
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8003f00:	b5b0      	push	{r4, r5, r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
    lwgps_float_t value = (lwgps_float_t)0, power = (lwgps_float_t)1;
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	61ba      	str	r2, [r7, #24]
 8003f10:	61fb      	str	r3, [r7, #28]
 8003f12:	2200      	movs	r2, #0
 8003f14:	4b49      	ldr	r3, [pc, #292]	; (800403c <prv_parse_float_number+0x13c>)
 8003f16:	613a      	str	r2, [r7, #16]
 8003f18:	617b      	str	r3, [r7, #20]
    int sign = 1;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	60fb      	str	r3, [r7, #12]

    if (t == NULL) {
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d106      	bne.n	8003f32 <prv_parse_float_number+0x32>
        t = gh->p.term_str;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3371      	adds	r3, #113	; 0x71
 8003f28:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {} /* Strip leading spaces */
 8003f2a:	e002      	b.n	8003f32 <prv_parse_float_number+0x32>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	603b      	str	r3, [r7, #0]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <prv_parse_float_number+0x40>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b20      	cmp	r3, #32
 8003f3e:	d0f5      	beq.n	8003f2c <prv_parse_float_number+0x2c>

    if (*t == '-') { /* Check sign */
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	2b2d      	cmp	r3, #45	; 0x2d
 8003f46:	d123      	bne.n	8003f90 <prv_parse_float_number+0x90>
        sign = -1;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	425b      	negs	r3, r3
 8003f4c:	60fb      	str	r3, [r7, #12]
        ++t;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	3301      	adds	r3, #1
 8003f52:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*t)) { /* Convert main part */
 8003f54:	e01c      	b.n	8003f90 <prv_parse_float_number+0x90>
        value = value * (lwgps_float_t)10 + CTN(*t);
 8003f56:	2200      	movs	r2, #0
 8003f58:	4b39      	ldr	r3, [pc, #228]	; (8004040 <prv_parse_float_number+0x140>)
 8003f5a:	69b8      	ldr	r0, [r7, #24]
 8003f5c:	69f9      	ldr	r1, [r7, #28]
 8003f5e:	f7fe f8fb 	bl	8002158 <__aeabi_dmul>
 8003f62:	0002      	movs	r2, r0
 8003f64:	000b      	movs	r3, r1
 8003f66:	0014      	movs	r4, r2
 8003f68:	001d      	movs	r5, r3
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	3b30      	subs	r3, #48	; 0x30
 8003f70:	0018      	movs	r0, r3
 8003f72:	f7fe ff43 	bl	8002dfc <__aeabi_i2d>
 8003f76:	0002      	movs	r2, r0
 8003f78:	000b      	movs	r3, r1
 8003f7a:	0020      	movs	r0, r4
 8003f7c:	0029      	movs	r1, r5
 8003f7e:	f7fd f9ad 	bl	80012dc <__aeabi_dadd>
 8003f82:	0002      	movs	r2, r0
 8003f84:	000b      	movs	r3, r1
 8003f86:	61ba      	str	r2, [r7, #24]
 8003f88:	61fb      	str	r3, [r7, #28]
        ++t;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	603b      	str	r3, [r7, #0]
    while (CIN(*t)) { /* Convert main part */
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b2f      	cmp	r3, #47	; 0x2f
 8003f96:	d903      	bls.n	8003fa0 <prv_parse_float_number+0xa0>
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b39      	cmp	r3, #57	; 0x39
 8003f9e:	d9da      	bls.n	8003f56 <prv_parse_float_number+0x56>
    }
    if (*t == '.') { /* Skip the dot character */
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	2b2e      	cmp	r3, #46	; 0x2e
 8003fa6:	d12a      	bne.n	8003ffe <prv_parse_float_number+0xfe>
        ++t;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	3301      	adds	r3, #1
 8003fac:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*t)) { /* Get the power */
 8003fae:	e026      	b.n	8003ffe <prv_parse_float_number+0xfe>
        value = value * (lwgps_float_t)10 + CTN(*t);
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	4b23      	ldr	r3, [pc, #140]	; (8004040 <prv_parse_float_number+0x140>)
 8003fb4:	69b8      	ldr	r0, [r7, #24]
 8003fb6:	69f9      	ldr	r1, [r7, #28]
 8003fb8:	f7fe f8ce 	bl	8002158 <__aeabi_dmul>
 8003fbc:	0002      	movs	r2, r0
 8003fbe:	000b      	movs	r3, r1
 8003fc0:	0014      	movs	r4, r2
 8003fc2:	001d      	movs	r5, r3
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	3b30      	subs	r3, #48	; 0x30
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f7fe ff16 	bl	8002dfc <__aeabi_i2d>
 8003fd0:	0002      	movs	r2, r0
 8003fd2:	000b      	movs	r3, r1
 8003fd4:	0020      	movs	r0, r4
 8003fd6:	0029      	movs	r1, r5
 8003fd8:	f7fd f980 	bl	80012dc <__aeabi_dadd>
 8003fdc:	0002      	movs	r2, r0
 8003fde:	000b      	movs	r3, r1
 8003fe0:	61ba      	str	r2, [r7, #24]
 8003fe2:	61fb      	str	r3, [r7, #28]
        power *= 10.0;
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	4b16      	ldr	r3, [pc, #88]	; (8004040 <prv_parse_float_number+0x140>)
 8003fe8:	6938      	ldr	r0, [r7, #16]
 8003fea:	6979      	ldr	r1, [r7, #20]
 8003fec:	f7fe f8b4 	bl	8002158 <__aeabi_dmul>
 8003ff0:	0002      	movs	r2, r0
 8003ff2:	000b      	movs	r3, r1
 8003ff4:	613a      	str	r2, [r7, #16]
 8003ff6:	617b      	str	r3, [r7, #20]
        ++t;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	603b      	str	r3, [r7, #0]
    while (CIN(*t)) { /* Get the power */
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b2f      	cmp	r3, #47	; 0x2f
 8004004:	d903      	bls.n	800400e <prv_parse_float_number+0x10e>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b39      	cmp	r3, #57	; 0x39
 800400c:	d9d0      	bls.n	8003fb0 <prv_parse_float_number+0xb0>
    }
    return sign * value / power;
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f7fe fef4 	bl	8002dfc <__aeabi_i2d>
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	f7fe f89e 	bl	8002158 <__aeabi_dmul>
 800401c:	0002      	movs	r2, r0
 800401e:	000b      	movs	r3, r1
 8004020:	0010      	movs	r0, r2
 8004022:	0019      	movs	r1, r3
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f7fd fc94 	bl	8001954 <__aeabi_ddiv>
 800402c:	0002      	movs	r2, r0
 800402e:	000b      	movs	r3, r1
}
 8004030:	0010      	movs	r0, r2
 8004032:	0019      	movs	r1, r3
 8004034:	46bd      	mov	sp, r7
 8004036:	b008      	add	sp, #32
 8004038:	bdb0      	pop	{r4, r5, r7, pc}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	3ff00000 	.word	0x3ff00000
 8004040:	40240000 	.word	0x40240000

08004044 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8004044:	b580      	push	{r7, lr}
 8004046:	b088      	sub	sp, #32
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL); /* Parse value as double */
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2100      	movs	r1, #0
 8004050:	0018      	movs	r0, r3
 8004052:	f7ff ff55 	bl	8003f00 <prv_parse_float_number>
 8004056:	0002      	movs	r2, r0
 8004058:	000b      	movs	r3, r1
 800405a:	61ba      	str	r2, [r7, #24]
 800405c:	61fb      	str	r3, [r7, #28]
    deg = FLT((int)((int)ll / 100));       /* Get absolute degrees value, interested in integer part only */
 800405e:	69b8      	ldr	r0, [r7, #24]
 8004060:	69f9      	ldr	r1, [r7, #28]
 8004062:	f7fe fe95 	bl	8002d90 <__aeabi_d2iz>
 8004066:	0003      	movs	r3, r0
 8004068:	2164      	movs	r1, #100	; 0x64
 800406a:	0018      	movs	r0, r3
 800406c:	f7fc f8f2 	bl	8000254 <__divsi3>
 8004070:	0003      	movs	r3, r0
 8004072:	0018      	movs	r0, r3
 8004074:	f7fe fec2 	bl	8002dfc <__aeabi_i2d>
 8004078:	0002      	movs	r2, r0
 800407a:	000b      	movs	r3, r1
 800407c:	613a      	str	r2, [r7, #16]
 800407e:	617b      	str	r3, [r7, #20]
    min = ll - (deg * FLT(100));           /* Get remaining part from full number, minutes */
 8004080:	2200      	movs	r2, #0
 8004082:	4b13      	ldr	r3, [pc, #76]	; (80040d0 <prv_parse_lat_long+0x8c>)
 8004084:	6938      	ldr	r0, [r7, #16]
 8004086:	6979      	ldr	r1, [r7, #20]
 8004088:	f7fe f866 	bl	8002158 <__aeabi_dmul>
 800408c:	0002      	movs	r2, r0
 800408e:	000b      	movs	r3, r1
 8004090:	69b8      	ldr	r0, [r7, #24]
 8004092:	69f9      	ldr	r1, [r7, #28]
 8004094:	f7fe facc 	bl	8002630 <__aeabi_dsub>
 8004098:	0002      	movs	r2, r0
 800409a:	000b      	movs	r3, r1
 800409c:	60ba      	str	r2, [r7, #8]
 800409e:	60fb      	str	r3, [r7, #12]
    ll = deg + (min / FLT(60.0));          /* Calculate latitude/longitude */
 80040a0:	2200      	movs	r2, #0
 80040a2:	4b0c      	ldr	r3, [pc, #48]	; (80040d4 <prv_parse_lat_long+0x90>)
 80040a4:	68b8      	ldr	r0, [r7, #8]
 80040a6:	68f9      	ldr	r1, [r7, #12]
 80040a8:	f7fd fc54 	bl	8001954 <__aeabi_ddiv>
 80040ac:	0002      	movs	r2, r0
 80040ae:	000b      	movs	r3, r1
 80040b0:	6938      	ldr	r0, [r7, #16]
 80040b2:	6979      	ldr	r1, [r7, #20]
 80040b4:	f7fd f912 	bl	80012dc <__aeabi_dadd>
 80040b8:	0002      	movs	r2, r0
 80040ba:	000b      	movs	r3, r1
 80040bc:	61ba      	str	r2, [r7, #24]
 80040be:	61fb      	str	r3, [r7, #28]

    return ll;
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	69fb      	ldr	r3, [r7, #28]
}
 80040c4:	0010      	movs	r0, r2
 80040c6:	0019      	movs	r1, r3
 80040c8:	46bd      	mov	sp, r7
 80040ca:	b008      	add	sp, #32
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	40590000 	.word	0x40590000
 80040d4:	404e0000 	.word	0x404e0000

080040d8 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 80040d8:	b5b0      	push	{r4, r5, r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
    if (gh->p.term_num == 0) { /* Check string type */
 80040e0:	68f9      	ldr	r1, [r7, #12]
 80040e2:	207f      	movs	r0, #127	; 0x7f
 80040e4:	5c09      	ldrb	r1, [r1, r0]
 80040e6:	2900      	cmp	r1, #0
 80040e8:	d161      	bne.n	80041ae <prv_parse_term+0xd6>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	3371      	adds	r3, #113	; 0x71
 80040ee:	49d3      	ldr	r1, [pc, #844]	; (800443c <prv_parse_term+0x364>)
 80040f0:	2206      	movs	r2, #6
 80040f2:	0018      	movs	r0, r3
 80040f4:	f008 fcf8 	bl	800cae8 <strncmp>
 80040f8:	1e03      	subs	r3, r0, #0
 80040fa:	d008      	beq.n	800410e <prv_parse_term+0x36>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	3371      	adds	r3, #113	; 0x71
 8004100:	49cf      	ldr	r1, [pc, #828]	; (8004440 <prv_parse_term+0x368>)
 8004102:	2206      	movs	r2, #6
 8004104:	0018      	movs	r0, r3
 8004106:	f008 fcef 	bl	800cae8 <strncmp>
 800410a:	1e03      	subs	r3, r0, #0
 800410c:	d104      	bne.n	8004118 <prv_parse_term+0x40>
            gh->p.stat = STAT_GGA;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2270      	movs	r2, #112	; 0x70
 8004112:	2101      	movs	r1, #1
 8004114:	5499      	strb	r1, [r3, r2]
 8004116:	e048      	b.n	80041aa <prv_parse_term+0xd2>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3371      	adds	r3, #113	; 0x71
 800411c:	49c9      	ldr	r1, [pc, #804]	; (8004444 <prv_parse_term+0x36c>)
 800411e:	2206      	movs	r2, #6
 8004120:	0018      	movs	r0, r3
 8004122:	f008 fce1 	bl	800cae8 <strncmp>
 8004126:	1e03      	subs	r3, r0, #0
 8004128:	d008      	beq.n	800413c <prv_parse_term+0x64>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	3371      	adds	r3, #113	; 0x71
 800412e:	49c6      	ldr	r1, [pc, #792]	; (8004448 <prv_parse_term+0x370>)
 8004130:	2206      	movs	r2, #6
 8004132:	0018      	movs	r0, r3
 8004134:	f008 fcd8 	bl	800cae8 <strncmp>
 8004138:	1e03      	subs	r3, r0, #0
 800413a:	d104      	bne.n	8004146 <prv_parse_term+0x6e>
            gh->p.stat = STAT_GSA;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2270      	movs	r2, #112	; 0x70
 8004140:	2102      	movs	r1, #2
 8004142:	5499      	strb	r1, [r3, r2]
 8004144:	e031      	b.n	80041aa <prv_parse_term+0xd2>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	3371      	adds	r3, #113	; 0x71
 800414a:	49c0      	ldr	r1, [pc, #768]	; (800444c <prv_parse_term+0x374>)
 800414c:	2206      	movs	r2, #6
 800414e:	0018      	movs	r0, r3
 8004150:	f008 fcca 	bl	800cae8 <strncmp>
 8004154:	1e03      	subs	r3, r0, #0
 8004156:	d008      	beq.n	800416a <prv_parse_term+0x92>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	3371      	adds	r3, #113	; 0x71
 800415c:	49bc      	ldr	r1, [pc, #752]	; (8004450 <prv_parse_term+0x378>)
 800415e:	2206      	movs	r2, #6
 8004160:	0018      	movs	r0, r3
 8004162:	f008 fcc1 	bl	800cae8 <strncmp>
 8004166:	1e03      	subs	r3, r0, #0
 8004168:	d104      	bne.n	8004174 <prv_parse_term+0x9c>
            gh->p.stat = STAT_GSV;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2270      	movs	r2, #112	; 0x70
 800416e:	2103      	movs	r1, #3
 8004170:	5499      	strb	r1, [r3, r2]
 8004172:	e01a      	b.n	80041aa <prv_parse_term+0xd2>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	3371      	adds	r3, #113	; 0x71
 8004178:	49b6      	ldr	r1, [pc, #728]	; (8004454 <prv_parse_term+0x37c>)
 800417a:	2206      	movs	r2, #6
 800417c:	0018      	movs	r0, r3
 800417e:	f008 fcb3 	bl	800cae8 <strncmp>
 8004182:	1e03      	subs	r3, r0, #0
 8004184:	d008      	beq.n	8004198 <prv_parse_term+0xc0>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	3371      	adds	r3, #113	; 0x71
 800418a:	49b3      	ldr	r1, [pc, #716]	; (8004458 <prv_parse_term+0x380>)
 800418c:	2206      	movs	r2, #6
 800418e:	0018      	movs	r0, r3
 8004190:	f008 fcaa 	bl	800cae8 <strncmp>
 8004194:	1e03      	subs	r3, r0, #0
 8004196:	d104      	bne.n	80041a2 <prv_parse_term+0xca>
            gh->p.stat = STAT_RMC;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2270      	movs	r2, #112	; 0x70
 800419c:	2104      	movs	r1, #4
 800419e:	5499      	strb	r1, [r3, r2]
 80041a0:	e003      	b.n	80041aa <prv_parse_term+0xd2>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN; /* Invalid statement for library */
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2270      	movs	r2, #112	; 0x70
 80041a6:	2100      	movs	r1, #0
 80041a8:	5499      	strb	r1, [r3, r2]
        }
        return 1;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e208      	b.n	80045c0 <prv_parse_term+0x4e8>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 80041ae:	68f9      	ldr	r1, [r7, #12]
 80041b0:	2070      	movs	r0, #112	; 0x70
 80041b2:	5c09      	ldrb	r1, [r1, r0]
 80041b4:	2900      	cmp	r1, #0
 80041b6:	d100      	bne.n	80041ba <prv_parse_term+0xe2>
 80041b8:	e201      	b.n	80045be <prv_parse_term+0x4e6>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) { /* Process GPGGA statement */
 80041ba:	68f9      	ldr	r1, [r7, #12]
 80041bc:	2070      	movs	r0, #112	; 0x70
 80041be:	5c09      	ldrb	r1, [r1, r0]
 80041c0:	2901      	cmp	r1, #1
 80041c2:	d000      	beq.n	80041c6 <prv_parse_term+0xee>
 80041c4:	e0c1      	b.n	800434a <prv_parse_term+0x272>
        switch (gh->p.term_num) {
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	227f      	movs	r2, #127	; 0x7f
 80041ca:	5c9b      	ldrb	r3, [r3, r2]
 80041cc:	2b0b      	cmp	r3, #11
 80041ce:	d900      	bls.n	80041d2 <prv_parse_term+0xfa>
 80041d0:	e1e8      	b.n	80045a4 <prv_parse_term+0x4cc>
 80041d2:	009a      	lsls	r2, r3, #2
 80041d4:	4ba1      	ldr	r3, [pc, #644]	; (800445c <prv_parse_term+0x384>)
 80041d6:	18d3      	adds	r3, r2, r3
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	469f      	mov	pc, r3
            case 1: /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2271      	movs	r2, #113	; 0x71
 80041e0:	5c9b      	ldrb	r3, [r3, r2]
 80041e2:	3b30      	subs	r3, #48	; 0x30
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	1c1a      	adds	r2, r3, #0
 80041e8:	0092      	lsls	r2, r2, #2
 80041ea:	18d3      	adds	r3, r2, r3
 80041ec:	18db      	adds	r3, r3, r3
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2172      	movs	r1, #114	; 0x72
 80041f4:	5c5b      	ldrb	r3, [r3, r1]
 80041f6:	18d3      	adds	r3, r2, r3
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	3b30      	subs	r3, #48	; 0x30
 80041fc:	b2d9      	uxtb	r1, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	22aa      	movs	r2, #170	; 0xaa
 8004202:	5499      	strb	r1, [r3, r2]
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2273      	movs	r2, #115	; 0x73
 8004208:	5c9b      	ldrb	r3, [r3, r2]
 800420a:	3b30      	subs	r3, #48	; 0x30
 800420c:	b2db      	uxtb	r3, r3
 800420e:	1c1a      	adds	r2, r3, #0
 8004210:	0092      	lsls	r2, r2, #2
 8004212:	18d3      	adds	r3, r2, r3
 8004214:	18db      	adds	r3, r3, r3
 8004216:	b2da      	uxtb	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2174      	movs	r1, #116	; 0x74
 800421c:	5c5b      	ldrb	r3, [r3, r1]
 800421e:	18d3      	adds	r3, r2, r3
 8004220:	b2db      	uxtb	r3, r3
 8004222:	3b30      	subs	r3, #48	; 0x30
 8004224:	b2d9      	uxtb	r1, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	22ab      	movs	r2, #171	; 0xab
 800422a:	5499      	strb	r1, [r3, r2]
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2275      	movs	r2, #117	; 0x75
 8004230:	5c9b      	ldrb	r3, [r3, r2]
 8004232:	3b30      	subs	r3, #48	; 0x30
 8004234:	b2db      	uxtb	r3, r3
 8004236:	1c1a      	adds	r2, r3, #0
 8004238:	0092      	lsls	r2, r2, #2
 800423a:	18d3      	adds	r3, r2, r3
 800423c:	18db      	adds	r3, r3, r3
 800423e:	b2da      	uxtb	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2176      	movs	r1, #118	; 0x76
 8004244:	5c5b      	ldrb	r3, [r3, r1]
 8004246:	18d3      	adds	r3, r2, r3
 8004248:	b2db      	uxtb	r3, r3
 800424a:	3b30      	subs	r3, #48	; 0x30
 800424c:	b2d9      	uxtb	r1, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	22ac      	movs	r2, #172	; 0xac
 8004252:	5499      	strb	r1, [r3, r2]
                break;
 8004254:	e1b3      	b.n	80045be <prv_parse_term+0x4e6>
            case 2:                                               /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh); /* Parse latitude */
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	0018      	movs	r0, r3
 800425a:	f7ff fef3 	bl	8004044 <prv_parse_lat_long>
 800425e:	0002      	movs	r2, r0
 8004260:	000b      	movs	r3, r1
 8004262:	68f9      	ldr	r1, [r7, #12]
 8004264:	3188      	adds	r1, #136	; 0x88
 8004266:	600a      	str	r2, [r1, #0]
 8004268:	604b      	str	r3, [r1, #4]
                break;
 800426a:	e1a8      	b.n	80045be <prv_parse_term+0x4e6>
            case 3: /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2271      	movs	r2, #113	; 0x71
 8004270:	5c9b      	ldrb	r3, [r3, r2]
 8004272:	2b53      	cmp	r3, #83	; 0x53
 8004274:	d005      	beq.n	8004282 <prv_parse_term+0x1aa>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2271      	movs	r2, #113	; 0x71
 800427a:	5c9b      	ldrb	r3, [r3, r2]
 800427c:	2b73      	cmp	r3, #115	; 0x73
 800427e:	d000      	beq.n	8004282 <prv_parse_term+0x1aa>
 8004280:	e192      	b.n	80045a8 <prv_parse_term+0x4d0>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	3388      	adds	r3, #136	; 0x88
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	0011      	movs	r1, r2
 800428c:	6039      	str	r1, [r7, #0]
 800428e:	2180      	movs	r1, #128	; 0x80
 8004290:	0609      	lsls	r1, r1, #24
 8004292:	4059      	eors	r1, r3
 8004294:	6079      	str	r1, [r7, #4]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3388      	adds	r3, #136	; 0x88
 800429a:	6839      	ldr	r1, [r7, #0]
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6019      	str	r1, [r3, #0]
 80042a0:	605a      	str	r2, [r3, #4]
                }
                break;
 80042a2:	e181      	b.n	80045a8 <prv_parse_term+0x4d0>
            case 4:                                                /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh); /* Parse longitude */
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	0018      	movs	r0, r3
 80042a8:	f7ff fecc 	bl	8004044 <prv_parse_lat_long>
 80042ac:	0002      	movs	r2, r0
 80042ae:	000b      	movs	r3, r1
 80042b0:	68f9      	ldr	r1, [r7, #12]
 80042b2:	3190      	adds	r1, #144	; 0x90
 80042b4:	600a      	str	r2, [r1, #0]
 80042b6:	604b      	str	r3, [r1, #4]
                break;
 80042b8:	e181      	b.n	80045be <prv_parse_term+0x4e6>
            case 5: /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2271      	movs	r2, #113	; 0x71
 80042be:	5c9b      	ldrb	r3, [r3, r2]
 80042c0:	2b57      	cmp	r3, #87	; 0x57
 80042c2:	d005      	beq.n	80042d0 <prv_parse_term+0x1f8>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2271      	movs	r2, #113	; 0x71
 80042c8:	5c9b      	ldrb	r3, [r3, r2]
 80042ca:	2b77      	cmp	r3, #119	; 0x77
 80042cc:	d000      	beq.n	80042d0 <prv_parse_term+0x1f8>
 80042ce:	e16d      	b.n	80045ac <prv_parse_term+0x4d4>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	3390      	adds	r3, #144	; 0x90
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	0011      	movs	r1, r2
 80042da:	000c      	movs	r4, r1
 80042dc:	2180      	movs	r1, #128	; 0x80
 80042de:	0609      	lsls	r1, r1, #24
 80042e0:	4059      	eors	r1, r3
 80042e2:	000d      	movs	r5, r1
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	3390      	adds	r3, #144	; 0x90
 80042e8:	601c      	str	r4, [r3, #0]
 80042ea:	605d      	str	r5, [r3, #4]
                }
                break;
 80042ec:	e15e      	b.n	80045ac <prv_parse_term+0x4d4>
            case 6: /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2100      	movs	r1, #0
 80042f2:	0018      	movs	r0, r3
 80042f4:	f7ff fdb8 	bl	8003e68 <prv_parse_number>
 80042f8:	0003      	movs	r3, r0
 80042fa:	b2d9      	uxtb	r1, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	22a9      	movs	r2, #169	; 0xa9
 8004300:	5499      	strb	r1, [r3, r2]
                break;
 8004302:	e15c      	b.n	80045be <prv_parse_term+0x4e6>
            case 7: /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2100      	movs	r1, #0
 8004308:	0018      	movs	r0, r3
 800430a:	f7ff fdad 	bl	8003e68 <prv_parse_number>
 800430e:	0003      	movs	r3, r0
 8004310:	b2d9      	uxtb	r1, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	22a8      	movs	r2, #168	; 0xa8
 8004316:	5499      	strb	r1, [r3, r2]
                break;
 8004318:	e151      	b.n	80045be <prv_parse_term+0x4e6>
            case 9: /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2100      	movs	r1, #0
 800431e:	0018      	movs	r0, r3
 8004320:	f7ff fdee 	bl	8003f00 <prv_parse_float_number>
 8004324:	0002      	movs	r2, r0
 8004326:	000b      	movs	r3, r1
 8004328:	68f9      	ldr	r1, [r7, #12]
 800432a:	3198      	adds	r1, #152	; 0x98
 800432c:	600a      	str	r2, [r1, #0]
 800432e:	604b      	str	r3, [r1, #4]
                break;
 8004330:	e145      	b.n	80045be <prv_parse_term+0x4e6>
            case 11: /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2100      	movs	r1, #0
 8004336:	0018      	movs	r0, r3
 8004338:	f7ff fde2 	bl	8003f00 <prv_parse_float_number>
 800433c:	0002      	movs	r2, r0
 800433e:	000b      	movs	r3, r1
 8004340:	68f9      	ldr	r1, [r7, #12]
 8004342:	31a0      	adds	r1, #160	; 0xa0
 8004344:	600a      	str	r2, [r1, #0]
 8004346:	604b      	str	r3, [r1, #4]
                break;
 8004348:	e139      	b.n	80045be <prv_parse_term+0x4e6>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) { /* Process GPGSA statement */
 800434a:	68f9      	ldr	r1, [r7, #12]
 800434c:	2070      	movs	r0, #112	; 0x70
 800434e:	5c09      	ldrb	r1, [r1, r0]
 8004350:	2902      	cmp	r1, #2
 8004352:	d15a      	bne.n	800440a <prv_parse_term+0x332>
        switch (gh->p.term_num) {
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	227f      	movs	r2, #127	; 0x7f
 8004358:	5c9b      	ldrb	r3, [r3, r2]
 800435a:	2b11      	cmp	r3, #17
 800435c:	d02b      	beq.n	80043b6 <prv_parse_term+0x2de>
 800435e:	dc36      	bgt.n	80043ce <prv_parse_term+0x2f6>
 8004360:	2b10      	cmp	r3, #16
 8004362:	d01c      	beq.n	800439e <prv_parse_term+0x2c6>
 8004364:	dc33      	bgt.n	80043ce <prv_parse_term+0x2f6>
 8004366:	2b02      	cmp	r3, #2
 8004368:	d002      	beq.n	8004370 <prv_parse_term+0x298>
 800436a:	2b0f      	cmp	r3, #15
 800436c:	d00b      	beq.n	8004386 <prv_parse_term+0x2ae>
 800436e:	e02e      	b.n	80043ce <prv_parse_term+0x2f6>
            case 2: /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2100      	movs	r1, #0
 8004374:	0018      	movs	r0, r3
 8004376:	f7ff fd77 	bl	8003e68 <prv_parse_number>
 800437a:	0003      	movs	r3, r0
 800437c:	b2d9      	uxtb	r1, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	22a0      	movs	r2, #160	; 0xa0
 8004382:	5499      	strb	r1, [r3, r2]
                break;
 8004384:	e11b      	b.n	80045be <prv_parse_term+0x4e6>
            case 15: /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2100      	movs	r1, #0
 800438a:	0018      	movs	r0, r3
 800438c:	f7ff fdb8 	bl	8003f00 <prv_parse_float_number>
 8004390:	0002      	movs	r2, r0
 8004392:	000b      	movs	r3, r1
 8004394:	68f9      	ldr	r1, [r7, #12]
 8004396:	3198      	adds	r1, #152	; 0x98
 8004398:	600a      	str	r2, [r1, #0]
 800439a:	604b      	str	r3, [r1, #4]
                break;
 800439c:	e10f      	b.n	80045be <prv_parse_term+0x4e6>
            case 16: /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2100      	movs	r1, #0
 80043a2:	0018      	movs	r0, r3
 80043a4:	f7ff fdac 	bl	8003f00 <prv_parse_float_number>
 80043a8:	0002      	movs	r2, r0
 80043aa:	000b      	movs	r3, r1
 80043ac:	68f9      	ldr	r1, [r7, #12]
 80043ae:	3188      	adds	r1, #136	; 0x88
 80043b0:	600a      	str	r2, [r1, #0]
 80043b2:	604b      	str	r3, [r1, #4]
                break;
 80043b4:	e103      	b.n	80045be <prv_parse_term+0x4e6>
            case 17: /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2100      	movs	r1, #0
 80043ba:	0018      	movs	r0, r3
 80043bc:	f7ff fda0 	bl	8003f00 <prv_parse_float_number>
 80043c0:	0002      	movs	r2, r0
 80043c2:	000b      	movs	r3, r1
 80043c4:	68f9      	ldr	r1, [r7, #12]
 80043c6:	3190      	adds	r1, #144	; 0x90
 80043c8:	600a      	str	r2, [r1, #0]
 80043ca:	604b      	str	r3, [r1, #4]
                break;
 80043cc:	e0f7      	b.n	80045be <prv_parse_term+0x4e6>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	227f      	movs	r2, #127	; 0x7f
 80043d2:	5c9b      	ldrb	r3, [r3, r2]
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d800      	bhi.n	80043da <prv_parse_term+0x302>
 80043d8:	e0ea      	b.n	80045b0 <prv_parse_term+0x4d8>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	227f      	movs	r2, #127	; 0x7f
 80043de:	5c9b      	ldrb	r3, [r3, r2]
 80043e0:	2b0e      	cmp	r3, #14
 80043e2:	d900      	bls.n	80043e6 <prv_parse_term+0x30e>
 80043e4:	e0e4      	b.n	80045b0 <prv_parse_term+0x4d8>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2100      	movs	r1, #0
 80043ea:	0018      	movs	r0, r3
 80043ec:	f7ff fd3c 	bl	8003e68 <prv_parse_number>
 80043f0:	0001      	movs	r1, r0
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	227f      	movs	r2, #127	; 0x7f
 80043f6:	5c9b      	ldrb	r3, [r3, r2]
 80043f8:	3b03      	subs	r3, #3
 80043fa:	b2c8      	uxtb	r0, r1
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	21a1      	movs	r1, #161	; 0xa1
 8004400:	18d3      	adds	r3, r2, r3
 8004402:	185b      	adds	r3, r3, r1
 8004404:	1c02      	adds	r2, r0, #0
 8004406:	701a      	strb	r2, [r3, #0]
                }
                break;
 8004408:	e0d2      	b.n	80045b0 <prv_parse_term+0x4d8>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) { /* Process GPGSV statement */
 800440a:	68f9      	ldr	r1, [r7, #12]
 800440c:	2070      	movs	r0, #112	; 0x70
 800440e:	5c09      	ldrb	r1, [r1, r0]
 8004410:	2903      	cmp	r1, #3
 8004412:	d130      	bne.n	8004476 <prv_parse_term+0x39e>
        switch (gh->p.term_num) {
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	227f      	movs	r2, #127	; 0x7f
 8004418:	5c9b      	ldrb	r3, [r3, r2]
 800441a:	2b02      	cmp	r3, #2
 800441c:	d002      	beq.n	8004424 <prv_parse_term+0x34c>
 800441e:	2b03      	cmp	r3, #3
 8004420:	d01e      	beq.n	8004460 <prv_parse_term+0x388>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 8004422:	e0cc      	b.n	80045be <prv_parse_term+0x4e6>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2100      	movs	r1, #0
 8004428:	0018      	movs	r0, r3
 800442a:	f7ff fd1d 	bl	8003e68 <prv_parse_number>
 800442e:	0003      	movs	r3, r0
 8004430:	b2d9      	uxtb	r1, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2289      	movs	r2, #137	; 0x89
 8004436:	5499      	strb	r1, [r3, r2]
                break;
 8004438:	e0c1      	b.n	80045be <prv_parse_term+0x4e6>
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	0800f218 	.word	0x0800f218
 8004440:	0800f220 	.word	0x0800f220
 8004444:	0800f228 	.word	0x0800f228
 8004448:	0800f230 	.word	0x0800f230
 800444c:	0800f238 	.word	0x0800f238
 8004450:	0800f240 	.word	0x0800f240
 8004454:	0800f248 	.word	0x0800f248
 8004458:	0800f250 	.word	0x0800f250
 800445c:	0800f4ac 	.word	0x0800f4ac
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2100      	movs	r1, #0
 8004464:	0018      	movs	r0, r3
 8004466:	f7ff fcff 	bl	8003e68 <prv_parse_number>
 800446a:	0003      	movs	r3, r0
 800446c:	b2d9      	uxtb	r1, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2288      	movs	r2, #136	; 0x88
 8004472:	5499      	strb	r1, [r3, r2]
                break;
 8004474:	e0a3      	b.n	80045be <prv_parse_term+0x4e6>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) { /* Process GPRMC statement */
 8004476:	68f9      	ldr	r1, [r7, #12]
 8004478:	2070      	movs	r0, #112	; 0x70
 800447a:	5c09      	ldrb	r1, [r1, r0]
 800447c:	2904      	cmp	r1, #4
 800447e:	d000      	beq.n	8004482 <prv_parse_term+0x3aa>
 8004480:	e098      	b.n	80045b4 <prv_parse_term+0x4dc>
        switch (gh->p.term_num) {
 8004482:	68f9      	ldr	r1, [r7, #12]
 8004484:	207f      	movs	r0, #127	; 0x7f
 8004486:	5c09      	ldrb	r1, [r1, r0]
 8004488:	290b      	cmp	r1, #11
 800448a:	d900      	bls.n	800448e <prv_parse_term+0x3b6>
 800448c:	e094      	b.n	80045b8 <prv_parse_term+0x4e0>
 800448e:	0088      	lsls	r0, r1, #2
 8004490:	494d      	ldr	r1, [pc, #308]	; (80045c8 <prv_parse_term+0x4f0>)
 8004492:	1841      	adds	r1, r0, r1
 8004494:	6809      	ldr	r1, [r1, #0]
 8004496:	468f      	mov	pc, r1
            case 2: /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2271      	movs	r2, #113	; 0x71
 800449c:	5c9b      	ldrb	r3, [r3, r2]
 800449e:	3b41      	subs	r3, #65	; 0x41
 80044a0:	425a      	negs	r2, r3
 80044a2:	4153      	adcs	r3, r2
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	0019      	movs	r1, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2288      	movs	r2, #136	; 0x88
 80044ac:	5499      	strb	r1, [r3, r2]
                break;
 80044ae:	e086      	b.n	80045be <prv_parse_term+0x4e6>
            case 7: /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2100      	movs	r1, #0
 80044b4:	0018      	movs	r0, r3
 80044b6:	f7ff fd23 	bl	8003f00 <prv_parse_float_number>
 80044ba:	0002      	movs	r2, r0
 80044bc:	000b      	movs	r3, r1
 80044be:	68f9      	ldr	r1, [r7, #12]
 80044c0:	3190      	adds	r1, #144	; 0x90
 80044c2:	600a      	str	r2, [r1, #0]
 80044c4:	604b      	str	r3, [r1, #4]
                break;
 80044c6:	e07a      	b.n	80045be <prv_parse_term+0x4e6>
            case 8: /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2100      	movs	r1, #0
 80044cc:	0018      	movs	r0, r3
 80044ce:	f7ff fd17 	bl	8003f00 <prv_parse_float_number>
 80044d2:	0002      	movs	r2, r0
 80044d4:	000b      	movs	r3, r1
 80044d6:	68f9      	ldr	r1, [r7, #12]
 80044d8:	3198      	adds	r1, #152	; 0x98
 80044da:	600a      	str	r2, [r1, #0]
 80044dc:	604b      	str	r3, [r1, #4]
                break;
 80044de:	e06e      	b.n	80045be <prv_parse_term+0x4e6>
            case 9: /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2271      	movs	r2, #113	; 0x71
 80044e4:	5c9b      	ldrb	r3, [r3, r2]
 80044e6:	3b30      	subs	r3, #48	; 0x30
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	1c1a      	adds	r2, r3, #0
 80044ec:	0092      	lsls	r2, r2, #2
 80044ee:	18d3      	adds	r3, r2, r3
 80044f0:	18db      	adds	r3, r3, r3
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2172      	movs	r1, #114	; 0x72
 80044f8:	5c5b      	ldrb	r3, [r3, r1]
 80044fa:	18d3      	adds	r3, r2, r3
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	3b30      	subs	r3, #48	; 0x30
 8004500:	b2d9      	uxtb	r1, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2289      	movs	r2, #137	; 0x89
 8004506:	5499      	strb	r1, [r3, r2]
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2273      	movs	r2, #115	; 0x73
 800450c:	5c9b      	ldrb	r3, [r3, r2]
 800450e:	3b30      	subs	r3, #48	; 0x30
 8004510:	b2db      	uxtb	r3, r3
 8004512:	1c1a      	adds	r2, r3, #0
 8004514:	0092      	lsls	r2, r2, #2
 8004516:	18d3      	adds	r3, r2, r3
 8004518:	18db      	adds	r3, r3, r3
 800451a:	b2da      	uxtb	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2174      	movs	r1, #116	; 0x74
 8004520:	5c5b      	ldrb	r3, [r3, r1]
 8004522:	18d3      	adds	r3, r2, r3
 8004524:	b2db      	uxtb	r3, r3
 8004526:	3b30      	subs	r3, #48	; 0x30
 8004528:	b2d9      	uxtb	r1, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	228a      	movs	r2, #138	; 0x8a
 800452e:	5499      	strb	r1, [r3, r2]
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2275      	movs	r2, #117	; 0x75
 8004534:	5c9b      	ldrb	r3, [r3, r2]
 8004536:	3b30      	subs	r3, #48	; 0x30
 8004538:	b2db      	uxtb	r3, r3
 800453a:	1c1a      	adds	r2, r3, #0
 800453c:	0092      	lsls	r2, r2, #2
 800453e:	18d3      	adds	r3, r2, r3
 8004540:	18db      	adds	r3, r3, r3
 8004542:	b2da      	uxtb	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2176      	movs	r1, #118	; 0x76
 8004548:	5c5b      	ldrb	r3, [r3, r1]
 800454a:	18d3      	adds	r3, r2, r3
 800454c:	b2db      	uxtb	r3, r3
 800454e:	3b30      	subs	r3, #48	; 0x30
 8004550:	b2d9      	uxtb	r1, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	228b      	movs	r2, #139	; 0x8b
 8004556:	5499      	strb	r1, [r3, r2]
                break;
 8004558:	e031      	b.n	80045be <prv_parse_term+0x4e6>
            case 10: /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2100      	movs	r1, #0
 800455e:	0018      	movs	r0, r3
 8004560:	f7ff fcce 	bl	8003f00 <prv_parse_float_number>
 8004564:	0002      	movs	r2, r0
 8004566:	000b      	movs	r3, r1
 8004568:	68f9      	ldr	r1, [r7, #12]
 800456a:	31a0      	adds	r1, #160	; 0xa0
 800456c:	600a      	str	r2, [r1, #0]
 800456e:	604b      	str	r3, [r1, #4]
                break;
 8004570:	e025      	b.n	80045be <prv_parse_term+0x4e6>
            case 11: /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8004572:	68f9      	ldr	r1, [r7, #12]
 8004574:	2071      	movs	r0, #113	; 0x71
 8004576:	5c09      	ldrb	r1, [r1, r0]
 8004578:	2957      	cmp	r1, #87	; 0x57
 800457a:	d004      	beq.n	8004586 <prv_parse_term+0x4ae>
 800457c:	68f9      	ldr	r1, [r7, #12]
 800457e:	2071      	movs	r0, #113	; 0x71
 8004580:	5c09      	ldrb	r1, [r1, r0]
 8004582:	2977      	cmp	r1, #119	; 0x77
 8004584:	d11a      	bne.n	80045bc <prv_parse_term+0x4e4>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 8004586:	68f9      	ldr	r1, [r7, #12]
 8004588:	31a0      	adds	r1, #160	; 0xa0
 800458a:	6808      	ldr	r0, [r1, #0]
 800458c:	6849      	ldr	r1, [r1, #4]
 800458e:	0004      	movs	r4, r0
 8004590:	0022      	movs	r2, r4
 8004592:	2480      	movs	r4, #128	; 0x80
 8004594:	0624      	lsls	r4, r4, #24
 8004596:	404c      	eors	r4, r1
 8004598:	0023      	movs	r3, r4
 800459a:	68f9      	ldr	r1, [r7, #12]
 800459c:	31a0      	adds	r1, #160	; 0xa0
 800459e:	600a      	str	r2, [r1, #0]
 80045a0:	604b      	str	r3, [r1, #4]
                }
                break;
 80045a2:	e00b      	b.n	80045bc <prv_parse_term+0x4e4>
                break;
 80045a4:	46c0      	nop			; (mov r8, r8)
 80045a6:	e00a      	b.n	80045be <prv_parse_term+0x4e6>
                break;
 80045a8:	46c0      	nop			; (mov r8, r8)
 80045aa:	e008      	b.n	80045be <prv_parse_term+0x4e6>
                break;
 80045ac:	46c0      	nop			; (mov r8, r8)
 80045ae:	e006      	b.n	80045be <prv_parse_term+0x4e6>
                break;
 80045b0:	46c0      	nop			; (mov r8, r8)
 80045b2:	e004      	b.n	80045be <prv_parse_term+0x4e6>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
 80045b4:	46c0      	nop			; (mov r8, r8)
 80045b6:	e002      	b.n	80045be <prv_parse_term+0x4e6>
                break;
 80045b8:	46c0      	nop			; (mov r8, r8)
 80045ba:	e000      	b.n	80045be <prv_parse_term+0x4e6>
                break;
 80045bc:	46c0      	nop			; (mov r8, r8)
    return 1;
 80045be:	2301      	movs	r3, #1
}
 80045c0:	0018      	movs	r0, r3
 80045c2:	46bd      	mov	sp, r7
 80045c4:	b004      	add	sp, #16
 80045c6:	bdb0      	pop	{r4, r5, r7, pc}
 80045c8:	0800f4dc 	.word	0x0800f4dc

080045cc <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2271      	movs	r2, #113	; 0x71
 80045d8:	5c9b      	ldrb	r3, [r3, r2]
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 80045da:	2b2f      	cmp	r3, #47	; 0x2f
 80045dc:	d90d      	bls.n	80045fa <prv_check_crc+0x2e>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2271      	movs	r2, #113	; 0x71
 80045e2:	5c9b      	ldrb	r3, [r3, r2]
 80045e4:	2b39      	cmp	r3, #57	; 0x39
 80045e6:	d808      	bhi.n	80045fa <prv_check_crc+0x2e>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2271      	movs	r2, #113	; 0x71
 80045ec:	5c9b      	ldrb	r3, [r3, r2]
 80045ee:	3b30      	subs	r3, #48	; 0x30
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	b2db      	uxtb	r3, r3
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 80045f6:	b25a      	sxtb	r2, r3
 80045f8:	e026      	b.n	8004648 <prv_check_crc+0x7c>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2271      	movs	r2, #113	; 0x71
 80045fe:	5c9b      	ldrb	r3, [r3, r2]
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 8004600:	2b60      	cmp	r3, #96	; 0x60
 8004602:	d90d      	bls.n	8004620 <prv_check_crc+0x54>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2271      	movs	r2, #113	; 0x71
 8004608:	5c9b      	ldrb	r3, [r3, r2]
 800460a:	2b7a      	cmp	r3, #122	; 0x7a
 800460c:	d808      	bhi.n	8004620 <prv_check_crc+0x54>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2271      	movs	r2, #113	; 0x71
 8004612:	5c9b      	ldrb	r3, [r3, r2]
 8004614:	3b57      	subs	r3, #87	; 0x57
 8004616:	b2db      	uxtb	r3, r3
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	b2db      	uxtb	r3, r3
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 800461c:	b25a      	sxtb	r2, r3
 800461e:	e013      	b.n	8004648 <prv_check_crc+0x7c>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2271      	movs	r2, #113	; 0x71
 8004624:	5c9b      	ldrb	r3, [r3, r2]
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 8004626:	2b40      	cmp	r3, #64	; 0x40
 8004628:	d90d      	bls.n	8004646 <prv_check_crc+0x7a>
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2271      	movs	r2, #113	; 0x71
 800462e:	5c9b      	ldrb	r3, [r3, r2]
 8004630:	2b5a      	cmp	r3, #90	; 0x5a
 8004632:	d808      	bhi.n	8004646 <prv_check_crc+0x7a>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2271      	movs	r2, #113	; 0x71
 8004638:	5c9b      	ldrb	r3, [r3, r2]
 800463a:	3b37      	subs	r3, #55	; 0x37
 800463c:	b2db      	uxtb	r3, r3
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	b2db      	uxtb	r3, r3
          | (CHTN(gh->p.term_str[1]) & 0x0F); /* Convert received CRC from string (hex) to number */
 8004642:	b25a      	sxtb	r2, r3
 8004644:	e000      	b.n	8004648 <prv_check_crc+0x7c>
 8004646:	2200      	movs	r2, #0
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2172      	movs	r1, #114	; 0x72
 800464c:	5c5b      	ldrb	r3, [r3, r1]
 800464e:	2b2f      	cmp	r3, #47	; 0x2f
 8004650:	d90c      	bls.n	800466c <prv_check_crc+0xa0>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2172      	movs	r1, #114	; 0x72
 8004656:	5c5b      	ldrb	r3, [r3, r1]
 8004658:	2b39      	cmp	r3, #57	; 0x39
 800465a:	d807      	bhi.n	800466c <prv_check_crc+0xa0>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2172      	movs	r1, #114	; 0x72
 8004660:	5c5b      	ldrb	r3, [r3, r1]
 8004662:	b25b      	sxtb	r3, r3
 8004664:	210f      	movs	r1, #15
 8004666:	400b      	ands	r3, r1
 8004668:	b25b      	sxtb	r3, r3
 800466a:	e028      	b.n	80046be <prv_check_crc+0xf2>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2172      	movs	r1, #114	; 0x72
 8004670:	5c5b      	ldrb	r3, [r3, r1]
 8004672:	2b60      	cmp	r3, #96	; 0x60
 8004674:	d90e      	bls.n	8004694 <prv_check_crc+0xc8>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2172      	movs	r1, #114	; 0x72
 800467a:	5c5b      	ldrb	r3, [r3, r1]
 800467c:	2b7a      	cmp	r3, #122	; 0x7a
 800467e:	d809      	bhi.n	8004694 <prv_check_crc+0xc8>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2172      	movs	r1, #114	; 0x72
 8004684:	5c5b      	ldrb	r3, [r3, r1]
 8004686:	3b57      	subs	r3, #87	; 0x57
 8004688:	b2db      	uxtb	r3, r3
 800468a:	b25b      	sxtb	r3, r3
 800468c:	210f      	movs	r1, #15
 800468e:	400b      	ands	r3, r1
 8004690:	b25b      	sxtb	r3, r3
 8004692:	e014      	b.n	80046be <prv_check_crc+0xf2>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2172      	movs	r1, #114	; 0x72
 8004698:	5c5b      	ldrb	r3, [r3, r1]
 800469a:	2b40      	cmp	r3, #64	; 0x40
 800469c:	d90e      	bls.n	80046bc <prv_check_crc+0xf0>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2172      	movs	r1, #114	; 0x72
 80046a2:	5c5b      	ldrb	r3, [r3, r1]
 80046a4:	2b5a      	cmp	r3, #90	; 0x5a
 80046a6:	d809      	bhi.n	80046bc <prv_check_crc+0xf0>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2172      	movs	r1, #114	; 0x72
 80046ac:	5c5b      	ldrb	r3, [r3, r1]
 80046ae:	3b37      	subs	r3, #55	; 0x37
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	b25b      	sxtb	r3, r3
 80046b4:	210f      	movs	r1, #15
 80046b6:	400b      	ands	r3, r1
 80046b8:	b25b      	sxtb	r3, r3
 80046ba:	e000      	b.n	80046be <prv_check_crc+0xf2>
 80046bc:	2300      	movs	r3, #0
 80046be:	4313      	orrs	r3, r2
 80046c0:	b25a      	sxtb	r2, r3
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04)
 80046c2:	210f      	movs	r1, #15
 80046c4:	187b      	adds	r3, r7, r1
 80046c6:	701a      	strb	r2, [r3, #0]
    return gh->p.crc_calc == crc;             /* They must match! */
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2281      	movs	r2, #129	; 0x81
 80046cc:	5c9b      	ldrb	r3, [r3, r2]
 80046ce:	187a      	adds	r2, r7, r1
 80046d0:	7812      	ldrb	r2, [r2, #0]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	425a      	negs	r2, r3
 80046d6:	4153      	adcs	r3, r2
 80046d8:	b2db      	uxtb	r3, r3
}
 80046da:	0018      	movs	r0, r3
 80046dc:	46bd      	mov	sp, r7
 80046de:	b004      	add	sp, #16
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b082      	sub	sp, #8
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2270      	movs	r2, #112	; 0x70
 80046ee:	5c9b      	ldrb	r3, [r3, r2]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d13a      	bne.n	800476a <prv_copy_from_tmp_memory+0x88>
        gh->latitude = gh->p.data.gga.latitude;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	3388      	adds	r3, #136	; 0x88
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	6879      	ldr	r1, [r7, #4]
 80046fe:	600a      	str	r2, [r1, #0]
 8004700:	604b      	str	r3, [r1, #4]
        gh->longitude = gh->p.data.gga.longitude;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	3390      	adds	r3, #144	; 0x90
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	608a      	str	r2, [r1, #8]
 800470e:	60cb      	str	r3, [r1, #12]
        gh->altitude = gh->p.data.gga.altitude;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3398      	adds	r3, #152	; 0x98
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	610a      	str	r2, [r1, #16]
 800471c:	614b      	str	r3, [r1, #20]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	33a0      	adds	r3, #160	; 0xa0
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	6879      	ldr	r1, [r7, #4]
 8004728:	618a      	str	r2, [r1, #24]
 800472a:	61cb      	str	r3, [r1, #28]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	22a8      	movs	r2, #168	; 0xa8
 8004730:	5c99      	ldrb	r1, [r3, r2]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2220      	movs	r2, #32
 8004736:	5499      	strb	r1, [r3, r2]
        gh->fix = gh->p.data.gga.fix;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	22a9      	movs	r2, #169	; 0xa9
 800473c:	5c99      	ldrb	r1, [r3, r2]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2221      	movs	r2, #33	; 0x21
 8004742:	5499      	strb	r1, [r3, r2]
        gh->hours = gh->p.data.gga.hours;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	22aa      	movs	r2, #170	; 0xaa
 8004748:	5c99      	ldrb	r1, [r3, r2]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2222      	movs	r2, #34	; 0x22
 800474e:	5499      	strb	r1, [r3, r2]
        gh->minutes = gh->p.data.gga.minutes;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	22ab      	movs	r2, #171	; 0xab
 8004754:	5c99      	ldrb	r1, [r3, r2]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2223      	movs	r2, #35	; 0x23
 800475a:	5499      	strb	r1, [r3, r2]
        gh->seconds = gh->p.data.gga.seconds;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	22ac      	movs	r2, #172	; 0xac
 8004760:	5c99      	ldrb	r1, [r3, r2]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2224      	movs	r2, #36	; 0x24
 8004766:	5499      	strb	r1, [r3, r2]
 8004768:	e067      	b.n	800483a <prv_copy_from_tmp_memory+0x158>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2270      	movs	r2, #112	; 0x70
 800476e:	5c9b      	ldrb	r3, [r3, r2]
 8004770:	2b02      	cmp	r3, #2
 8004772:	d124      	bne.n	80047be <prv_copy_from_tmp_memory+0xdc>
        gh->dop_h = gh->p.data.gsa.dop_h;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3388      	adds	r3, #136	; 0x88
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	628a      	str	r2, [r1, #40]	; 0x28
 8004780:	62cb      	str	r3, [r1, #44]	; 0x2c
        gh->dop_p = gh->p.data.gsa.dop_p;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	3398      	adds	r3, #152	; 0x98
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	6879      	ldr	r1, [r7, #4]
 800478c:	638a      	str	r2, [r1, #56]	; 0x38
 800478e:	63cb      	str	r3, [r1, #60]	; 0x3c
        gh->dop_v = gh->p.data.gsa.dop_v;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3390      	adds	r3, #144	; 0x90
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	6879      	ldr	r1, [r7, #4]
 800479a:	630a      	str	r2, [r1, #48]	; 0x30
 800479c:	634b      	str	r3, [r1, #52]	; 0x34
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	22a0      	movs	r2, #160	; 0xa0
 80047a2:	5c99      	ldrb	r1, [r3, r2]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2240      	movs	r2, #64	; 0x40
 80047a8:	5499      	strb	r1, [r3, r2]
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	3341      	adds	r3, #65	; 0x41
 80047ae:	0018      	movs	r0, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	33a1      	adds	r3, #161	; 0xa1
 80047b4:	220c      	movs	r2, #12
 80047b6:	0019      	movs	r1, r3
 80047b8:	f007 fcf6 	bl	800c1a8 <memcpy>
 80047bc:	e03d      	b.n	800483a <prv_copy_from_tmp_memory+0x158>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2270      	movs	r2, #112	; 0x70
 80047c2:	5c9b      	ldrb	r3, [r3, r2]
 80047c4:	2b03      	cmp	r3, #3
 80047c6:	d106      	bne.n	80047d6 <prv_copy_from_tmp_memory+0xf4>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2288      	movs	r2, #136	; 0x88
 80047cc:	5c99      	ldrb	r1, [r3, r2]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	224d      	movs	r2, #77	; 0x4d
 80047d2:	5499      	strb	r1, [r3, r2]
 80047d4:	e031      	b.n	800483a <prv_copy_from_tmp_memory+0x158>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2270      	movs	r2, #112	; 0x70
 80047da:	5c9b      	ldrb	r3, [r3, r2]
 80047dc:	2b04      	cmp	r3, #4
 80047de:	d12c      	bne.n	800483a <prv_copy_from_tmp_memory+0x158>
        gh->course = gh->p.data.rmc.course;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3398      	adds	r3, #152	; 0x98
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	658a      	str	r2, [r1, #88]	; 0x58
 80047ec:	65cb      	str	r3, [r1, #92]	; 0x5c
        gh->is_valid = gh->p.data.rmc.is_valid;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2288      	movs	r2, #136	; 0x88
 80047f2:	5c99      	ldrb	r1, [r3, r2]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	224e      	movs	r2, #78	; 0x4e
 80047f8:	5499      	strb	r1, [r3, r2]
        gh->speed = gh->p.data.rmc.speed;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	3390      	adds	r3, #144	; 0x90
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	6879      	ldr	r1, [r7, #4]
 8004804:	650a      	str	r2, [r1, #80]	; 0x50
 8004806:	654b      	str	r3, [r1, #84]	; 0x54
        gh->variation = gh->p.data.rmc.variation;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	33a0      	adds	r3, #160	; 0xa0
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	660a      	str	r2, [r1, #96]	; 0x60
 8004814:	664b      	str	r3, [r1, #100]	; 0x64
        gh->date = gh->p.data.rmc.date;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2289      	movs	r2, #137	; 0x89
 800481a:	5c99      	ldrb	r1, [r3, r2]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2268      	movs	r2, #104	; 0x68
 8004820:	5499      	strb	r1, [r3, r2]
        gh->month = gh->p.data.rmc.month;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	228a      	movs	r2, #138	; 0x8a
 8004826:	5c99      	ldrb	r1, [r3, r2]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2269      	movs	r2, #105	; 0x69
 800482c:	5499      	strb	r1, [r3, r2]
        gh->year = gh->p.data.rmc.year;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	228b      	movs	r2, #139	; 0x8b
 8004832:	5c99      	ldrb	r1, [r3, r2]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	226a      	movs	r2, #106	; 0x6a
 8004838:	5499      	strb	r1, [r3, r2]
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 800483a:	2301      	movs	r3, #1
}
 800483c:	0018      	movs	r0, r3
 800483e:	46bd      	mov	sp, r7
 8004840:	b002      	add	sp, #8
 8004842:	bd80      	pop	{r7, pc}

08004844 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh)); /* Reset structure */
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	22b0      	movs	r2, #176	; 0xb0
 8004850:	2100      	movs	r1, #0
 8004852:	0018      	movs	r0, r3
 8004854:	f007 fcb1 	bl	800c1ba <memset>
    return 1;
 8004858:	2301      	movs	r3, #1
}
 800485a:	0018      	movs	r0, r3
 800485c:	46bd      	mov	sp, r7
 800485e:	b002      	add	sp, #8
 8004860:	bd80      	pop	{r7, pc}

08004862 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else  /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8004862:	b580      	push	{r7, lr}
 8004864:	b086      	sub	sp, #24
 8004866:	af00      	add	r7, sp, #0
 8004868:	60f8      	str	r0, [r7, #12]
 800486a:	60b9      	str	r1, [r7, #8]
 800486c:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {                /* Process all bytes */
 8004872:	e0b6      	b.n	80049e2 <lwgps_process+0x180>
        if (*d == '$') {                         /* Check for beginning of NMEA line */
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2b24      	cmp	r3, #36	; 0x24
 800487a:	d12b      	bne.n	80048d4 <lwgps_process+0x72>
            memset(&gh->p, 0x00, sizeof(gh->p)); /* Reset private memory */
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	3370      	adds	r3, #112	; 0x70
 8004880:	2240      	movs	r2, #64	; 0x40
 8004882:	2100      	movs	r1, #0
 8004884:	0018      	movs	r0, r3
 8004886:	f007 fc98 	bl	800c1ba <memset>
            TERM_ADD(gh, *d);                    /* Add character to term */
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	227e      	movs	r2, #126	; 0x7e
 800488e:	5c9b      	ldrb	r3, [r3, r2]
 8004890:	2b0b      	cmp	r3, #11
 8004892:	d900      	bls.n	8004896 <lwgps_process+0x34>
 8004894:	e09f      	b.n	80049d6 <lwgps_process+0x174>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	227e      	movs	r2, #126	; 0x7e
 800489a:	5c9b      	ldrb	r3, [r3, r2]
 800489c:	0018      	movs	r0, r3
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	7819      	ldrb	r1, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2271      	movs	r2, #113	; 0x71
 80048a6:	181b      	adds	r3, r3, r0
 80048a8:	189b      	adds	r3, r3, r2
 80048aa:	1c0a      	adds	r2, r1, #0
 80048ac:	701a      	strb	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	227e      	movs	r2, #126	; 0x7e
 80048b2:	5c9b      	ldrb	r3, [r3, r2]
 80048b4:	3301      	adds	r3, #1
 80048b6:	b2d9      	uxtb	r1, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	227e      	movs	r2, #126	; 0x7e
 80048bc:	5499      	strb	r1, [r3, r2]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	227e      	movs	r2, #126	; 0x7e
 80048c2:	5c9b      	ldrb	r3, [r3, r2]
 80048c4:	0019      	movs	r1, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2271      	movs	r2, #113	; 0x71
 80048ca:	185b      	adds	r3, r3, r1
 80048cc:	189b      	adds	r3, r3, r2
 80048ce:	2200      	movs	r2, #0
 80048d0:	701a      	strb	r2, [r3, #0]
 80048d2:	e080      	b.n	80049d6 <lwgps_process+0x174>
        } else if (*d == ',') {                  /* Term separator character */
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b2c      	cmp	r3, #44	; 0x2c
 80048da:	d11e      	bne.n	800491a <lwgps_process+0xb8>
            prv_parse_term(gh);                  /* Parse term we have currently in memory */
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	0018      	movs	r0, r3
 80048e0:	f7ff fbfa 	bl	80040d8 <prv_parse_term>
            CRC_ADD(gh, *d);                     /* Add character to CRC computation */
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2281      	movs	r2, #129	; 0x81
 80048e8:	5c9a      	ldrb	r2, [r3, r2]
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	4053      	eors	r3, r2
 80048f0:	b2d9      	uxtb	r1, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2281      	movs	r2, #129	; 0x81
 80048f6:	5499      	strb	r1, [r3, r2]
            TERM_NEXT(gh);                       /* Start with next term */
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	227e      	movs	r2, #126	; 0x7e
 80048fc:	2100      	movs	r1, #0
 80048fe:	5499      	strb	r1, [r3, r2]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2271      	movs	r2, #113	; 0x71
 8004904:	2100      	movs	r1, #0
 8004906:	5499      	strb	r1, [r3, r2]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	227f      	movs	r2, #127	; 0x7f
 800490c:	5c9b      	ldrb	r3, [r3, r2]
 800490e:	3301      	adds	r3, #1
 8004910:	b2d9      	uxtb	r1, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	227f      	movs	r2, #127	; 0x7f
 8004916:	5499      	strb	r1, [r3, r2]
 8004918:	e05d      	b.n	80049d6 <lwgps_process+0x174>
        } else if (*d == '*') {                  /* Start indicates end of data for CRC computation */
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	2b2a      	cmp	r3, #42	; 0x2a
 8004920:	d118      	bne.n	8004954 <lwgps_process+0xf2>
            prv_parse_term(gh);                  /* Parse term we have currently in memory */
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	0018      	movs	r0, r3
 8004926:	f7ff fbd7 	bl	80040d8 <prv_parse_term>
            gh->p.star = 1;                      /* STAR detected */
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2280      	movs	r2, #128	; 0x80
 800492e:	2101      	movs	r1, #1
 8004930:	5499      	strb	r1, [r3, r2]
            TERM_NEXT(gh);                       /* Start with next term */
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	227e      	movs	r2, #126	; 0x7e
 8004936:	2100      	movs	r1, #0
 8004938:	5499      	strb	r1, [r3, r2]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2271      	movs	r2, #113	; 0x71
 800493e:	2100      	movs	r1, #0
 8004940:	5499      	strb	r1, [r3, r2]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	227f      	movs	r2, #127	; 0x7f
 8004946:	5c9b      	ldrb	r3, [r3, r2]
 8004948:	3301      	adds	r3, #1
 800494a:	b2d9      	uxtb	r1, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	227f      	movs	r2, #127	; 0x7f
 8004950:	5499      	strb	r1, [r3, r2]
 8004952:	e040      	b.n	80049d6 <lwgps_process+0x174>
        } else if (*d == '\r') {
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	2b0d      	cmp	r3, #13
 800495a:	d10a      	bne.n	8004972 <lwgps_process+0x110>
            if (prv_check_crc(gh)) { /* Check for CRC result */
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	0018      	movs	r0, r3
 8004960:	f7ff fe34 	bl	80045cc <prv_check_crc>
 8004964:	1e03      	subs	r3, r0, #0
 8004966:	d036      	beq.n	80049d6 <lwgps_process+0x174>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh); /* Copy memory from temporary to user memory */
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	0018      	movs	r0, r3
 800496c:	f7ff feb9 	bl	80046e2 <prv_copy_from_tmp_memory>
 8004970:	e031      	b.n	80049d6 <lwgps_process+0x174>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {   /* Add to CRC only if star not yet detected */
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2280      	movs	r2, #128	; 0x80
 8004976:	5c9b      	ldrb	r3, [r3, r2]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d109      	bne.n	8004990 <lwgps_process+0x12e>
                CRC_ADD(gh, *d); /* Add to CRC */
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2281      	movs	r2, #129	; 0x81
 8004980:	5c9a      	ldrb	r2, [r3, r2]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	4053      	eors	r3, r2
 8004988:	b2d9      	uxtb	r1, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2281      	movs	r2, #129	; 0x81
 800498e:	5499      	strb	r1, [r3, r2]
            }
            TERM_ADD(gh, *d); /* Add character to term */
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	227e      	movs	r2, #126	; 0x7e
 8004994:	5c9b      	ldrb	r3, [r3, r2]
 8004996:	2b0b      	cmp	r3, #11
 8004998:	d81d      	bhi.n	80049d6 <lwgps_process+0x174>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	227e      	movs	r2, #126	; 0x7e
 800499e:	5c9b      	ldrb	r3, [r3, r2]
 80049a0:	0018      	movs	r0, r3
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	7819      	ldrb	r1, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2271      	movs	r2, #113	; 0x71
 80049aa:	181b      	adds	r3, r3, r0
 80049ac:	189b      	adds	r3, r3, r2
 80049ae:	1c0a      	adds	r2, r1, #0
 80049b0:	701a      	strb	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	227e      	movs	r2, #126	; 0x7e
 80049b6:	5c9b      	ldrb	r3, [r3, r2]
 80049b8:	3301      	adds	r3, #1
 80049ba:	b2d9      	uxtb	r1, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	227e      	movs	r2, #126	; 0x7e
 80049c0:	5499      	strb	r1, [r3, r2]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	227e      	movs	r2, #126	; 0x7e
 80049c6:	5c9b      	ldrb	r3, [r3, r2]
 80049c8:	0019      	movs	r1, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2271      	movs	r2, #113	; 0x71
 80049ce:	185b      	adds	r3, r3, r1
 80049d0:	189b      	adds	r3, r3, r2
 80049d2:	2200      	movs	r2, #0
 80049d4:	701a      	strb	r2, [r3, #0]
    for (; len > 0; ++d, --len) {                /* Process all bytes */
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	3301      	adds	r3, #1
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3b01      	subs	r3, #1
 80049e0:	607b      	str	r3, [r7, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d000      	beq.n	80049ea <lwgps_process+0x188>
 80049e8:	e744      	b.n	8004874 <lwgps_process+0x12>
        }
    }
    return 1;
 80049ea:	2301      	movs	r3, #1
}
 80049ec:	0018      	movs	r0, r3
 80049ee:	46bd      	mov	sp, r7
 80049f0:	b006      	add	sp, #24
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80049f8:	f001 fbb4 	bl	8006164 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80049fc:	f000 f820 	bl	8004a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004a00:	f7ff f88a 	bl	8003b18 <MX_GPIO_Init>
  MX_SPI2_Init();
 8004a04:	f000 ff4a 	bl	800589c <MX_SPI2_Init>
  MX_TSC_Init();
 8004a08:	f001 f99a 	bl	8005d40 <MX_TSC_Init>
  MX_USB_PCD_Init();
 8004a0c:	f001 fb3a 	bl	8006084 <MX_USB_PCD_Init>
  MX_ADC_Init();
 8004a10:	f7fe feea 	bl	80037e8 <MX_ADC_Init>
  MX_TIM2_Init();
 8004a14:	f001 f8e6 	bl	8005be4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8004a18:	f001 fa36 	bl	8005e88 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8004a1c:	f001 fa70 	bl	8005f00 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8004a20:	f7ff f91a 	bl	8003c58 <MX_I2C1_Init>
  MX_I2C2_Init();
 8004a24:	f7ff f958 	bl	8003cd8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  //I am moving this into setup at some point
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8004a28:	4b04      	ldr	r3, [pc, #16]	; (8004a3c <main+0x48>)
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	f005 fa09 	bl	8009e44 <HAL_TIM_IC_Start_IT>

  setup();
 8004a32:	f000 f87f 	bl	8004b34 <setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  loop();
 8004a36:	f000 f8ed 	bl	8004c14 <loop>
 8004a3a:	e7fc      	b.n	8004a36 <main+0x42>
 8004a3c:	20000960 	.word	0x20000960

08004a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a40:	b590      	push	{r4, r7, lr}
 8004a42:	b099      	sub	sp, #100	; 0x64
 8004a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a46:	242c      	movs	r4, #44	; 0x2c
 8004a48:	193b      	adds	r3, r7, r4
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	2334      	movs	r3, #52	; 0x34
 8004a4e:	001a      	movs	r2, r3
 8004a50:	2100      	movs	r1, #0
 8004a52:	f007 fbb2 	bl	800c1ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a56:	231c      	movs	r3, #28
 8004a58:	18fb      	adds	r3, r7, r3
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	2310      	movs	r3, #16
 8004a5e:	001a      	movs	r2, r3
 8004a60:	2100      	movs	r1, #0
 8004a62:	f007 fbaa 	bl	800c1ba <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a66:	003b      	movs	r3, r7
 8004a68:	0018      	movs	r0, r3
 8004a6a:	231c      	movs	r3, #28
 8004a6c:	001a      	movs	r2, r3
 8004a6e:	2100      	movs	r1, #0
 8004a70:	f007 fba3 	bl	800c1ba <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8004a74:	0021      	movs	r1, r4
 8004a76:	187b      	adds	r3, r7, r1
 8004a78:	2232      	movs	r2, #50	; 0x32
 8004a7a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004a7c:	187b      	adds	r3, r7, r1
 8004a7e:	2201      	movs	r2, #1
 8004a80:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8004a82:	187b      	adds	r3, r7, r1
 8004a84:	2201      	movs	r2, #1
 8004a86:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8004a88:	187b      	adds	r3, r7, r1
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004a8e:	187b      	adds	r3, r7, r1
 8004a90:	2210      	movs	r2, #16
 8004a92:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8004a94:	187b      	adds	r3, r7, r1
 8004a96:	2210      	movs	r2, #16
 8004a98:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a9a:	187b      	adds	r3, r7, r1
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004aa0:	187b      	adds	r3, r7, r1
 8004aa2:	2280      	movs	r2, #128	; 0x80
 8004aa4:	0212      	lsls	r2, r2, #8
 8004aa6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8004aa8:	187b      	adds	r3, r7, r1
 8004aaa:	2280      	movs	r2, #128	; 0x80
 8004aac:	0352      	lsls	r2, r2, #13
 8004aae:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8004ab0:	187b      	adds	r3, r7, r1
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ab6:	187b      	adds	r3, r7, r1
 8004ab8:	0018      	movs	r0, r3
 8004aba:	f003 fe13 	bl	80086e4 <HAL_RCC_OscConfig>
 8004abe:	1e03      	subs	r3, r0, #0
 8004ac0:	d001      	beq.n	8004ac6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8004ac2:	f000 f831 	bl	8004b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ac6:	211c      	movs	r1, #28
 8004ac8:	187b      	adds	r3, r7, r1
 8004aca:	2207      	movs	r2, #7
 8004acc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ace:	187b      	adds	r3, r7, r1
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ad4:	187b      	adds	r3, r7, r1
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004ada:	187b      	adds	r3, r7, r1
 8004adc:	2200      	movs	r2, #0
 8004ade:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004ae0:	187b      	adds	r3, r7, r1
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f004 f983 	bl	8008df0 <HAL_RCC_ClockConfig>
 8004aea:	1e03      	subs	r3, r0, #0
 8004aec:	d001      	beq.n	8004af2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8004aee:	f000 f81b 	bl	8004b28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 8004af2:	003b      	movs	r3, r7
 8004af4:	4a0b      	ldr	r2, [pc, #44]	; (8004b24 <SystemClock_Config+0xe4>)
 8004af6:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004af8:	003b      	movs	r3, r7
 8004afa:	2200      	movs	r2, #0
 8004afc:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8004afe:	003b      	movs	r3, r7
 8004b00:	2200      	movs	r2, #0
 8004b02:	611a      	str	r2, [r3, #16]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8004b04:	003b      	movs	r3, r7
 8004b06:	2200      	movs	r2, #0
 8004b08:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b0a:	003b      	movs	r3, r7
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f004 fadb 	bl	80090c8 <HAL_RCCEx_PeriphCLKConfig>
 8004b12:	1e03      	subs	r3, r0, #0
 8004b14:	d001      	beq.n	8004b1a <SystemClock_Config+0xda>
  {
    Error_Handler();
 8004b16:	f000 f807 	bl	8004b28 <Error_Handler>
  }
}
 8004b1a:	46c0      	nop			; (mov r8, r8)
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	b019      	add	sp, #100	; 0x64
 8004b20:	bd90      	pop	{r4, r7, pc}
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	00020021 	.word	0x00020021

08004b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004b2c:	b672      	cpsid	i
}
 8004b2e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004b30:	e7fe      	b.n	8004b30 <Error_Handler+0x8>
	...

08004b34 <setup>:

/**
 * \brief called before while loop of auto generated main.c. Runs once
 * */
void setup()
{
 8004b34:	b590      	push	{r4, r7, lr}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af02      	add	r7, sp, #8

	//init lcd
	//LCD_Init();
	pcf8574_init();
 8004b3a:	f000 fe7a 	bl	8005832 <pcf8574_init>
	pcf8574_clr();
 8004b3e:	f000 fe0d 	bl	800575c <pcf8574_clr>
	pcf8574_cursor(0, 0);
 8004b42:	2100      	movs	r1, #0
 8004b44:	2000      	movs	r0, #0
 8004b46:	f000 fe20 	bl	800578a <pcf8574_cursor>
	pcf8574_send_string("  HELLO SKIPPER O7");
 8004b4a:	4b28      	ldr	r3, [pc, #160]	; (8004bec <setup+0xb8>)
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f000 fe5b 	bl	8005808 <pcf8574_send_string>
	HAL_Delay(1000);
 8004b52:	23fa      	movs	r3, #250	; 0xfa
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	0018      	movs	r0, r3
 8004b58:	f001 fb68 	bl	800622c <HAL_Delay>
	// tach setup
	//HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);


	// gps setup code
	gps.tail = 0;
 8004b5c:	4b24      	ldr	r3, [pc, #144]	; (8004bf0 <setup+0xbc>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	605a      	str	r2, [r3, #4]
	gps.buffStateFlag = write;
 8004b62:	4b23      	ldr	r3, [pc, #140]	; (8004bf0 <setup+0xbc>)
 8004b64:	2201      	movs	r2, #1
 8004b66:	701a      	strb	r2, [r3, #0]
	gps.numLines = 14;
 8004b68:	4a21      	ldr	r2, [pc, #132]	; (8004bf0 <setup+0xbc>)
 8004b6a:	2382      	movs	r3, #130	; 0x82
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	210e      	movs	r1, #14
 8004b70:	50d1      	str	r1, [r2, r3]
	lwgps_init(&hgps); // init gps parsing library
 8004b72:	4b20      	ldr	r3, [pc, #128]	; (8004bf4 <setup+0xc0>)
 8004b74:	0018      	movs	r0, r3
 8004b76:	f7ff fe65 	bl	8004844 <lwgps_init>

	HAL_UART_Receive_IT(&huart3 , (uint8_t *) & gps.newchar , 1); // could use higher size and change parsing
 8004b7a:	491f      	ldr	r1, [pc, #124]	; (8004bf8 <setup+0xc4>)
 8004b7c:	4b1f      	ldr	r3, [pc, #124]	; (8004bfc <setup+0xc8>)
 8004b7e:	2201      	movs	r2, #1
 8004b80:	0018      	movs	r0, r3
 8004b82:	f006 f81b 	bl	800abbc <HAL_UART_Receive_IT>
	// end gps setup code

	//external ADC setup code
	if(ADS1115_Init(&hi2c1, ADS1115_DATA_RATE_64, ADS1115_PGA_FOUR) != HAL_OK){
 8004b86:	4b1e      	ldr	r3, [pc, #120]	; (8004c00 <setup+0xcc>)
 8004b88:	2206      	movs	r2, #6
 8004b8a:	2160      	movs	r1, #96	; 0x60
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f7fe fef3 	bl	8003978 <ADS1115_Init>
 8004b92:	1e03      	subs	r3, r0, #0
 8004b94:	d00e      	beq.n	8004bb4 <setup+0x80>
		// init failed
		//while(1){}
		pcf8574_clr();
 8004b96:	f000 fde1 	bl	800575c <pcf8574_clr>
		pcf8574_cursor(0, 0);
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	f000 fdf4 	bl	800578a <pcf8574_cursor>
		pcf8574_send_string("EXT ADC INIT FAILED");
 8004ba2:	4b18      	ldr	r3, [pc, #96]	; (8004c04 <setup+0xd0>)
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	f000 fe2f 	bl	8005808 <pcf8574_send_string>
		HAL_Delay(1000);
 8004baa:	23fa      	movs	r3, #250	; 0xfa
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f001 fb3c 	bl	800622c <HAL_Delay>
	}
	//end external ADC setup code

	// init internal adc
	HAL_ADC_Stop(&hadc);
 8004bb4:	4b14      	ldr	r3, [pc, #80]	; (8004c08 <setup+0xd4>)
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	f001 fcf0 	bl	800659c <HAL_ADC_Stop>
	HAL_ADCEx_Calibration_Start (&hadc);
 8004bbc:	4b12      	ldr	r3, [pc, #72]	; (8004c08 <setup+0xd4>)
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	f002 f820 	bl	8006c04 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start(&hadc);
 8004bc4:	4b10      	ldr	r3, [pc, #64]	; (8004c08 <setup+0xd4>)
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	f001 fc94 	bl	80064f4 <HAL_ADC_Start>

	//test_gps_blocking();


	// temp setup
	Max31865_init(&pt100,&hspi2,GPIOA,GPIO_PIN_8,4,50);
 8004bcc:	2380      	movs	r3, #128	; 0x80
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	2290      	movs	r2, #144	; 0x90
 8004bd2:	05d2      	lsls	r2, r2, #23
 8004bd4:	490d      	ldr	r1, [pc, #52]	; (8004c0c <setup+0xd8>)
 8004bd6:	480e      	ldr	r0, [pc, #56]	; (8004c10 <setup+0xdc>)
 8004bd8:	2432      	movs	r4, #50	; 0x32
 8004bda:	9401      	str	r4, [sp, #4]
 8004bdc:	2404      	movs	r4, #4
 8004bde:	9400      	str	r4, [sp, #0]
 8004be0:	f7fe fc4b 	bl	800347a <Max31865_init>

}// end setup
 8004be4:	46c0      	nop			; (mov r8, r8)
 8004be6:	46bd      	mov	sp, r7
 8004be8:	b001      	add	sp, #4
 8004bea:	bd90      	pop	{r4, r7, pc}
 8004bec:	0800f258 	.word	0x0800f258
 8004bf0:	200003cc 	.word	0x200003cc
 8004bf4:	200007e0 	.word	0x200007e0
 8004bf8:	200003d5 	.word	0x200003d5
 8004bfc:	20000a74 	.word	0x20000a74
 8004c00:	200002a4 	.word	0x200002a4
 8004c04:	0800f26c 	.word	0x0800f26c
 8004c08:	20000204 	.word	0x20000204
 8004c0c:	200008f8 	.word	0x200008f8
 8004c10:	200008c4 	.word	0x200008c4

08004c14 <loop>:

/**
 * \brief called in while loop of auto generated main.c. Runs forever
 * */
void loop()
{
 8004c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c16:	b0e9      	sub	sp, #420	; 0x1a4
 8004c18:	af1e      	add	r7, sp, #120	; 0x78

	// get gps data
	gps_rx();
 8004c1a:	f000 f9cf 	bl	8004fbc <gps_rx>

	// get current
	hall_read();
 8004c1e:	f000 f937 	bl	8004e90 <hall_read>

	//get voltage
	/* Poll for voltage divider*/
	readVoltage(1.0);
 8004c22:	23fe      	movs	r3, #254	; 0xfe
 8004c24:	059b      	lsls	r3, r3, #22
 8004c26:	1c18      	adds	r0, r3, #0
 8004c28:	f000 faf6 	bl	8005218 <readVoltage>

	volt1 = volt1 * ((2700.0 + 36000.0) / 2700.0) * (1183.0/1305.0) ;
 8004c2c:	4b54      	ldr	r3, [pc, #336]	; (8004d80 <loop+0x16c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	1c18      	adds	r0, r3, #0
 8004c32:	f7fe f939 	bl	8002ea8 <__aeabi_f2d>
 8004c36:	4a53      	ldr	r2, [pc, #332]	; (8004d84 <loop+0x170>)
 8004c38:	4b53      	ldr	r3, [pc, #332]	; (8004d88 <loop+0x174>)
 8004c3a:	f7fd fa8d 	bl	8002158 <__aeabi_dmul>
 8004c3e:	0002      	movs	r2, r0
 8004c40:	000b      	movs	r3, r1
 8004c42:	0010      	movs	r0, r2
 8004c44:	0019      	movs	r1, r3
 8004c46:	4a51      	ldr	r2, [pc, #324]	; (8004d8c <loop+0x178>)
 8004c48:	4b51      	ldr	r3, [pc, #324]	; (8004d90 <loop+0x17c>)
 8004c4a:	f7fd fa85 	bl	8002158 <__aeabi_dmul>
 8004c4e:	0002      	movs	r2, r0
 8004c50:	000b      	movs	r3, r1
 8004c52:	0010      	movs	r0, r2
 8004c54:	0019      	movs	r1, r3
 8004c56:	f7fe f96f 	bl	8002f38 <__aeabi_d2f>
 8004c5a:	1c02      	adds	r2, r0, #0
 8004c5c:	4b48      	ldr	r3, [pc, #288]	; (8004d80 <loop+0x16c>)
 8004c5e:	601a      	str	r2, [r3, #0]


	//get temperature
	float t;
	pt100isOK = Max31865_readTempC(&pt100,&t);
 8004c60:	2492      	movs	r4, #146	; 0x92
 8004c62:	0064      	lsls	r4, r4, #1
 8004c64:	193a      	adds	r2, r7, r4
 8004c66:	4b4b      	ldr	r3, [pc, #300]	; (8004d94 <loop+0x180>)
 8004c68:	0011      	movs	r1, r2
 8004c6a:	0018      	movs	r0, r3
 8004c6c:	f7fe fc50 	bl	8003510 <Max31865_readTempC>
 8004c70:	0003      	movs	r3, r0
 8004c72:	001a      	movs	r2, r3
 8004c74:	4b48      	ldr	r3, [pc, #288]	; (8004d98 <loop+0x184>)
 8004c76:	701a      	strb	r2, [r3, #0]
	pt100Temp = Max31865_Filter(t,pt100Temp,0.1);   //  << For Smoothing data
 8004c78:	193b      	adds	r3, r7, r4
 8004c7a:	6818      	ldr	r0, [r3, #0]
 8004c7c:	4b47      	ldr	r3, [pc, #284]	; (8004d9c <loop+0x188>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a47      	ldr	r2, [pc, #284]	; (8004da0 <loop+0x18c>)
 8004c82:	1c19      	adds	r1, r3, #0
 8004c84:	f7fe fd90 	bl	80037a8 <Max31865_Filter>
 8004c88:	1c02      	adds	r2, r0, #0
 8004c8a:	4b44      	ldr	r3, [pc, #272]	; (8004d9c <loop+0x188>)
 8004c8c:	601a      	str	r2, [r3, #0]


	//update display
	LCD_paint();
 8004c8e:	f000 f897 	bl	8004dc0 <LCD_paint>
	/* tx data */

	//message code,lat,long,Speed,Battery Current,Motor 1 Current,Motor 2 current,Solar current,V12,V24,V36,Vm1,Vm2,Vsolar,Temp1,Temp2
	//0,40.546906,73.0733222,12.3,200.1,400.1,400.1,40.1,12.1,24.2,36.3,16.1,16.1,17.5,20.5,30.5
	char lora_message[256];
	sprintf(lora_message,"%d,%f,%f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f",0,hgps.latitude,hgps.longitude,hgps.speed,hall1.current,hall2.current,hall3.current,420.0,420.0,42.0,420.0,420.0,420.0,420.0,420.0,420.0);
 8004c92:	4b44      	ldr	r3, [pc, #272]	; (8004da4 <loop+0x190>)
 8004c94:	681c      	ldr	r4, [r3, #0]
 8004c96:	685d      	ldr	r5, [r3, #4]
 8004c98:	4b42      	ldr	r3, [pc, #264]	; (8004da4 <loop+0x190>)
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	61ba      	str	r2, [r7, #24]
 8004ca0:	61fb      	str	r3, [r7, #28]
 8004ca2:	4b40      	ldr	r3, [pc, #256]	; (8004da4 <loop+0x190>)
 8004ca4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004ca6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ca8:	6139      	str	r1, [r7, #16]
 8004caa:	617a      	str	r2, [r7, #20]
 8004cac:	4b3e      	ldr	r3, [pc, #248]	; (8004da8 <loop+0x194>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	1c18      	adds	r0, r3, #0
 8004cb2:	f7fe f8f9 	bl	8002ea8 <__aeabi_f2d>
 8004cb6:	60b8      	str	r0, [r7, #8]
 8004cb8:	60f9      	str	r1, [r7, #12]
 8004cba:	4b3c      	ldr	r3, [pc, #240]	; (8004dac <loop+0x198>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	1c18      	adds	r0, r3, #0
 8004cc0:	f7fe f8f2 	bl	8002ea8 <__aeabi_f2d>
 8004cc4:	6038      	str	r0, [r7, #0]
 8004cc6:	6079      	str	r1, [r7, #4]
 8004cc8:	4b39      	ldr	r3, [pc, #228]	; (8004db0 <loop+0x19c>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	1c18      	adds	r0, r3, #0
 8004cce:	f7fe f8eb 	bl	8002ea8 <__aeabi_f2d>
 8004cd2:	4b38      	ldr	r3, [pc, #224]	; (8004db4 <loop+0x1a0>)
 8004cd4:	469c      	mov	ip, r3
 8004cd6:	2324      	movs	r3, #36	; 0x24
 8004cd8:	18fe      	adds	r6, r7, r3
 8004cda:	2200      	movs	r2, #0
 8004cdc:	4b36      	ldr	r3, [pc, #216]	; (8004db8 <loop+0x1a4>)
 8004cde:	921c      	str	r2, [sp, #112]	; 0x70
 8004ce0:	931d      	str	r3, [sp, #116]	; 0x74
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	4b34      	ldr	r3, [pc, #208]	; (8004db8 <loop+0x1a4>)
 8004ce6:	921a      	str	r2, [sp, #104]	; 0x68
 8004ce8:	931b      	str	r3, [sp, #108]	; 0x6c
 8004cea:	2200      	movs	r2, #0
 8004cec:	4b32      	ldr	r3, [pc, #200]	; (8004db8 <loop+0x1a4>)
 8004cee:	9218      	str	r2, [sp, #96]	; 0x60
 8004cf0:	9319      	str	r3, [sp, #100]	; 0x64
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	4b30      	ldr	r3, [pc, #192]	; (8004db8 <loop+0x1a4>)
 8004cf6:	9216      	str	r2, [sp, #88]	; 0x58
 8004cf8:	9317      	str	r3, [sp, #92]	; 0x5c
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	4b2e      	ldr	r3, [pc, #184]	; (8004db8 <loop+0x1a4>)
 8004cfe:	9214      	str	r2, [sp, #80]	; 0x50
 8004d00:	9315      	str	r3, [sp, #84]	; 0x54
 8004d02:	2200      	movs	r2, #0
 8004d04:	4b2c      	ldr	r3, [pc, #176]	; (8004db8 <loop+0x1a4>)
 8004d06:	9212      	str	r2, [sp, #72]	; 0x48
 8004d08:	9313      	str	r3, [sp, #76]	; 0x4c
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	4b2b      	ldr	r3, [pc, #172]	; (8004dbc <loop+0x1a8>)
 8004d0e:	9210      	str	r2, [sp, #64]	; 0x40
 8004d10:	9311      	str	r3, [sp, #68]	; 0x44
 8004d12:	2200      	movs	r2, #0
 8004d14:	4b28      	ldr	r3, [pc, #160]	; (8004db8 <loop+0x1a4>)
 8004d16:	920e      	str	r2, [sp, #56]	; 0x38
 8004d18:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	4b26      	ldr	r3, [pc, #152]	; (8004db8 <loop+0x1a4>)
 8004d1e:	920c      	str	r2, [sp, #48]	; 0x30
 8004d20:	930d      	str	r3, [sp, #52]	; 0x34
 8004d22:	900a      	str	r0, [sp, #40]	; 0x28
 8004d24:	910b      	str	r1, [sp, #44]	; 0x2c
 8004d26:	6838      	ldr	r0, [r7, #0]
 8004d28:	6879      	ldr	r1, [r7, #4]
 8004d2a:	9008      	str	r0, [sp, #32]
 8004d2c:	9109      	str	r1, [sp, #36]	; 0x24
 8004d2e:	68b8      	ldr	r0, [r7, #8]
 8004d30:	68f9      	ldr	r1, [r7, #12]
 8004d32:	9006      	str	r0, [sp, #24]
 8004d34:	9107      	str	r1, [sp, #28]
 8004d36:	6939      	ldr	r1, [r7, #16]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	9104      	str	r1, [sp, #16]
 8004d3c:	9205      	str	r2, [sp, #20]
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	9202      	str	r2, [sp, #8]
 8004d44:	9303      	str	r3, [sp, #12]
 8004d46:	9400      	str	r4, [sp, #0]
 8004d48:	9501      	str	r5, [sp, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	4661      	mov	r1, ip
 8004d4e:	0030      	movs	r0, r6
 8004d50:	f007 feaa 	bl	800caa8 <siprintf>

	//sprintf(payload,"%d RPM, %d c, %d s, %d lat , %d lon",(int)rpm,(int)pt100Temp, (int) hgps.speed /10, hgps.latitude * 1000000 , hgps.longitude * 1000000);
	//sprintf(lora_message,"0,40.546906,73.0733222,12.3,200.1,400.1,400.1,40.1,12.1,24.2,36.3,16.1,16.1,17.5,20.5,30.5");
	//lora_TX_blocking(payload, strlen(payload));
	lora_tx_it(lora_message , strlen(lora_message));
 8004d54:	2424      	movs	r4, #36	; 0x24
 8004d56:	193b      	adds	r3, r7, r4
 8004d58:	0018      	movs	r0, r3
 8004d5a:	f7fb f9d5 	bl	8000108 <strlen>
 8004d5e:	0003      	movs	r3, r0
 8004d60:	001a      	movs	r2, r3
 8004d62:	193b      	adds	r3, r7, r4
 8004d64:	0011      	movs	r1, r2
 8004d66:	0018      	movs	r0, r3
 8004d68:	f000 f9c0 	bl	80050ec <lora_tx_it>


	// delay
	HAL_Delay(1000);
 8004d6c:	23fa      	movs	r3, #250	; 0xfa
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	0018      	movs	r0, r3
 8004d72:	f001 fa5b 	bl	800622c <HAL_Delay>

}
 8004d76:	46c0      	nop			; (mov r8, r8)
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	b04b      	add	sp, #300	; 0x12c
 8004d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d7e:	46c0      	nop			; (mov r8, r8)
 8004d80:	200008e8 	.word	0x200008e8
 8004d84:	aaaaaaab 	.word	0xaaaaaaab
 8004d88:	402caaaa 	.word	0x402caaaa
 8004d8c:	692577dc 	.word	0x692577dc
 8004d90:	3fed0228 	.word	0x3fed0228
 8004d94:	200008c4 	.word	0x200008c4
 8004d98:	200008d4 	.word	0x200008d4
 8004d9c:	200008d8 	.word	0x200008d8
 8004da0:	3dcccccd 	.word	0x3dcccccd
 8004da4:	200007e0 	.word	0x200007e0
 8004da8:	20000890 	.word	0x20000890
 8004dac:	2000089c 	.word	0x2000089c
 8004db0:	200008a8 	.word	0x200008a8
 8004db4:	0800f280 	.word	0x0800f280
 8004db8:	407a4000 	.word	0x407a4000
 8004dbc:	40450000 	.word	0x40450000

08004dc0 <LCD_paint>:
/**
 * \brief This function assembles a message and sends it to the display.
 * It may block temporarily due to internal delay functions
 * */
void LCD_paint()
{
 8004dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dc2:	b095      	sub	sp, #84	; 0x54
 8004dc4:	af00      	add	r7, sp, #0
	sprintf(line3,"Speed:%f",hgps.speed);
	sprintf(line4,"fix type: %d",hgps.fix_mode);
	*/

	/*Internal ADC test*/
	sprintf(line1,"V0:%f",volt0);
 8004dc6:	4b2a      	ldr	r3, [pc, #168]	; (8004e70 <LCD_paint+0xb0>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	1c18      	adds	r0, r3, #0
 8004dcc:	f7fe f86c 	bl	8002ea8 <__aeabi_f2d>
 8004dd0:	0002      	movs	r2, r0
 8004dd2:	000b      	movs	r3, r1
 8004dd4:	4927      	ldr	r1, [pc, #156]	; (8004e74 <LCD_paint+0xb4>)
 8004dd6:	243c      	movs	r4, #60	; 0x3c
 8004dd8:	1938      	adds	r0, r7, r4
 8004dda:	f007 fe65 	bl	800caa8 <siprintf>
	sprintf(line2,"V1:%f",volt1);
 8004dde:	4b26      	ldr	r3, [pc, #152]	; (8004e78 <LCD_paint+0xb8>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	1c18      	adds	r0, r3, #0
 8004de4:	f7fe f860 	bl	8002ea8 <__aeabi_f2d>
 8004de8:	0002      	movs	r2, r0
 8004dea:	000b      	movs	r3, r1
 8004dec:	4923      	ldr	r1, [pc, #140]	; (8004e7c <LCD_paint+0xbc>)
 8004dee:	2528      	movs	r5, #40	; 0x28
 8004df0:	1978      	adds	r0, r7, r5
 8004df2:	f007 fe59 	bl	800caa8 <siprintf>
	sprintf(line3,"V2:%f",volt2);
 8004df6:	4b22      	ldr	r3, [pc, #136]	; (8004e80 <LCD_paint+0xc0>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	1c18      	adds	r0, r3, #0
 8004dfc:	f7fe f854 	bl	8002ea8 <__aeabi_f2d>
 8004e00:	0002      	movs	r2, r0
 8004e02:	000b      	movs	r3, r1
 8004e04:	491f      	ldr	r1, [pc, #124]	; (8004e84 <LCD_paint+0xc4>)
 8004e06:	2614      	movs	r6, #20
 8004e08:	19b8      	adds	r0, r7, r6
 8004e0a:	f007 fe4d 	bl	800caa8 <siprintf>
	sprintf(line4,"V3:%f",volt3);
 8004e0e:	4b1e      	ldr	r3, [pc, #120]	; (8004e88 <LCD_paint+0xc8>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	1c18      	adds	r0, r3, #0
 8004e14:	f7fe f848 	bl	8002ea8 <__aeabi_f2d>
 8004e18:	0002      	movs	r2, r0
 8004e1a:	000b      	movs	r3, r1
 8004e1c:	491b      	ldr	r1, [pc, #108]	; (8004e8c <LCD_paint+0xcc>)
 8004e1e:	0038      	movs	r0, r7
 8004e20:	f007 fe42 	bl	800caa8 <siprintf>


	// update LCD
	pcf8574_clr();
 8004e24:	f000 fc9a 	bl	800575c <pcf8574_clr>
	pcf8574_cursor(0, 0);
 8004e28:	2100      	movs	r1, #0
 8004e2a:	2000      	movs	r0, #0
 8004e2c:	f000 fcad 	bl	800578a <pcf8574_cursor>
	pcf8574_send_string(line1);
 8004e30:	193b      	adds	r3, r7, r4
 8004e32:	0018      	movs	r0, r3
 8004e34:	f000 fce8 	bl	8005808 <pcf8574_send_string>
	pcf8574_cursor(1, 0);
 8004e38:	2100      	movs	r1, #0
 8004e3a:	2001      	movs	r0, #1
 8004e3c:	f000 fca5 	bl	800578a <pcf8574_cursor>
	pcf8574_send_string(line2);
 8004e40:	197b      	adds	r3, r7, r5
 8004e42:	0018      	movs	r0, r3
 8004e44:	f000 fce0 	bl	8005808 <pcf8574_send_string>
	pcf8574_cursor(2, 0);
 8004e48:	2100      	movs	r1, #0
 8004e4a:	2002      	movs	r0, #2
 8004e4c:	f000 fc9d 	bl	800578a <pcf8574_cursor>
	pcf8574_send_string(line3);
 8004e50:	19bb      	adds	r3, r7, r6
 8004e52:	0018      	movs	r0, r3
 8004e54:	f000 fcd8 	bl	8005808 <pcf8574_send_string>
	pcf8574_cursor(3, 0);
 8004e58:	2100      	movs	r1, #0
 8004e5a:	2003      	movs	r0, #3
 8004e5c:	f000 fc95 	bl	800578a <pcf8574_cursor>
	pcf8574_send_string(line4);
 8004e60:	003b      	movs	r3, r7
 8004e62:	0018      	movs	r0, r3
 8004e64:	f000 fcd0 	bl	8005808 <pcf8574_send_string>
}
 8004e68:	46c0      	nop			; (mov r8, r8)
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	b015      	add	sp, #84	; 0x54
 8004e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e70:	200008f4 	.word	0x200008f4
 8004e74:	0800f2cc 	.word	0x0800f2cc
 8004e78:	200008e8 	.word	0x200008e8
 8004e7c:	0800f2d4 	.word	0x0800f2d4
 8004e80:	200008ec 	.word	0x200008ec
 8004e84:	0800f2dc 	.word	0x0800f2dc
 8004e88:	200008f0 	.word	0x200008f0
 8004e8c:	0800f2e4 	.word	0x0800f2e4

08004e90 <hall_read>:
 *
 * It uses an ADS1115 external ADC. All 3 Vref outputs are connected
 * to AIN3, and all Vout outputs are read relative to that
 * */
void hall_read()
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
	// hall sensor 1
	if(ADS1115_read(ADS1115_MUX_AIN0_AIN3, &hall1.rawVoltage) == HAL_OK)
 8004e94:	4b43      	ldr	r3, [pc, #268]	; (8004fa4 <hall_read+0x114>)
 8004e96:	0019      	movs	r1, r3
 8004e98:	2010      	movs	r0, #16
 8004e9a:	f7fe fdcd 	bl	8003a38 <ADS1115_read>
 8004e9e:	1e03      	subs	r3, r0, #0
 8004ea0:	d121      	bne.n	8004ee6 <hall_read+0x56>
	{
		//Voltage in mV successfully read.
		hall1.current = (hall1.rawVoltage - hall1.offsetVoltage) * HALL_SENSITIVITY;
 8004ea2:	4b40      	ldr	r3, [pc, #256]	; (8004fa4 <hall_read+0x114>)
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	4b3f      	ldr	r3, [pc, #252]	; (8004fa4 <hall_read+0x114>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	1c19      	adds	r1, r3, #0
 8004eac:	1c10      	adds	r0, r2, #0
 8004eae:	f7fb ffc1 	bl	8000e34 <__aeabi_fsub>
 8004eb2:	1c03      	adds	r3, r0, #0
 8004eb4:	1c18      	adds	r0, r3, #0
 8004eb6:	f7fd fff7 	bl	8002ea8 <__aeabi_f2d>
 8004eba:	2200      	movs	r2, #0
 8004ebc:	4b3a      	ldr	r3, [pc, #232]	; (8004fa8 <hall_read+0x118>)
 8004ebe:	f7fd f94b 	bl	8002158 <__aeabi_dmul>
 8004ec2:	0002      	movs	r2, r0
 8004ec4:	000b      	movs	r3, r1
 8004ec6:	0010      	movs	r0, r2
 8004ec8:	0019      	movs	r1, r3
 8004eca:	2200      	movs	r2, #0
 8004ecc:	4b37      	ldr	r3, [pc, #220]	; (8004fac <hall_read+0x11c>)
 8004ece:	f7fc fd41 	bl	8001954 <__aeabi_ddiv>
 8004ed2:	0002      	movs	r2, r0
 8004ed4:	000b      	movs	r3, r1
 8004ed6:	0010      	movs	r0, r2
 8004ed8:	0019      	movs	r1, r3
 8004eda:	f7fe f82d 	bl	8002f38 <__aeabi_d2f>
 8004ede:	1c02      	adds	r2, r0, #0
 8004ee0:	4b30      	ldr	r3, [pc, #192]	; (8004fa4 <hall_read+0x114>)
 8004ee2:	605a      	str	r2, [r3, #4]
 8004ee4:	e002      	b.n	8004eec <hall_read+0x5c>
	}
	else
	{
		// if current read fails, set current to a conspicuous value
		hall1.current = 123.456789;
 8004ee6:	4b2f      	ldr	r3, [pc, #188]	; (8004fa4 <hall_read+0x114>)
 8004ee8:	4a31      	ldr	r2, [pc, #196]	; (8004fb0 <hall_read+0x120>)
 8004eea:	605a      	str	r2, [r3, #4]
	}

	// hall sensor 2
	if(ADS1115_read(ADS1115_MUX_AIN1_AIN3, &hall2.rawVoltage) == HAL_OK)
 8004eec:	4b31      	ldr	r3, [pc, #196]	; (8004fb4 <hall_read+0x124>)
 8004eee:	0019      	movs	r1, r3
 8004ef0:	2020      	movs	r0, #32
 8004ef2:	f7fe fda1 	bl	8003a38 <ADS1115_read>
 8004ef6:	1e03      	subs	r3, r0, #0
 8004ef8:	d121      	bne.n	8004f3e <hall_read+0xae>
	{
		//Voltage in mV successfully read.
		hall2.current = (hall2.rawVoltage - hall2.offsetVoltage) * HALL_SENSITIVITY;
 8004efa:	4b2e      	ldr	r3, [pc, #184]	; (8004fb4 <hall_read+0x124>)
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	4b2d      	ldr	r3, [pc, #180]	; (8004fb4 <hall_read+0x124>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	1c19      	adds	r1, r3, #0
 8004f04:	1c10      	adds	r0, r2, #0
 8004f06:	f7fb ff95 	bl	8000e34 <__aeabi_fsub>
 8004f0a:	1c03      	adds	r3, r0, #0
 8004f0c:	1c18      	adds	r0, r3, #0
 8004f0e:	f7fd ffcb 	bl	8002ea8 <__aeabi_f2d>
 8004f12:	2200      	movs	r2, #0
 8004f14:	4b24      	ldr	r3, [pc, #144]	; (8004fa8 <hall_read+0x118>)
 8004f16:	f7fd f91f 	bl	8002158 <__aeabi_dmul>
 8004f1a:	0002      	movs	r2, r0
 8004f1c:	000b      	movs	r3, r1
 8004f1e:	0010      	movs	r0, r2
 8004f20:	0019      	movs	r1, r3
 8004f22:	2200      	movs	r2, #0
 8004f24:	4b21      	ldr	r3, [pc, #132]	; (8004fac <hall_read+0x11c>)
 8004f26:	f7fc fd15 	bl	8001954 <__aeabi_ddiv>
 8004f2a:	0002      	movs	r2, r0
 8004f2c:	000b      	movs	r3, r1
 8004f2e:	0010      	movs	r0, r2
 8004f30:	0019      	movs	r1, r3
 8004f32:	f7fe f801 	bl	8002f38 <__aeabi_d2f>
 8004f36:	1c02      	adds	r2, r0, #0
 8004f38:	4b1e      	ldr	r3, [pc, #120]	; (8004fb4 <hall_read+0x124>)
 8004f3a:	605a      	str	r2, [r3, #4]
 8004f3c:	e002      	b.n	8004f44 <hall_read+0xb4>
	}
	else
	{
		// if current read fails, set current to a conspicuous value
		hall2.current = 123.456789;
 8004f3e:	4b1d      	ldr	r3, [pc, #116]	; (8004fb4 <hall_read+0x124>)
 8004f40:	4a1b      	ldr	r2, [pc, #108]	; (8004fb0 <hall_read+0x120>)
 8004f42:	605a      	str	r2, [r3, #4]
	}

	// hall sensor 3
	if(ADS1115_read(ADS1115_MUX_AIN2_AIN3, &hall3.rawVoltage) == HAL_OK)
 8004f44:	4b1c      	ldr	r3, [pc, #112]	; (8004fb8 <hall_read+0x128>)
 8004f46:	0019      	movs	r1, r3
 8004f48:	2030      	movs	r0, #48	; 0x30
 8004f4a:	f7fe fd75 	bl	8003a38 <ADS1115_read>
 8004f4e:	1e03      	subs	r3, r0, #0
 8004f50:	d121      	bne.n	8004f96 <hall_read+0x106>
	{
		//Voltage in mV successfully read.
		hall3.current = (hall3.rawVoltage - hall3.offsetVoltage) * HALL_SENSITIVITY;
 8004f52:	4b19      	ldr	r3, [pc, #100]	; (8004fb8 <hall_read+0x128>)
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	4b18      	ldr	r3, [pc, #96]	; (8004fb8 <hall_read+0x128>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	1c19      	adds	r1, r3, #0
 8004f5c:	1c10      	adds	r0, r2, #0
 8004f5e:	f7fb ff69 	bl	8000e34 <__aeabi_fsub>
 8004f62:	1c03      	adds	r3, r0, #0
 8004f64:	1c18      	adds	r0, r3, #0
 8004f66:	f7fd ff9f 	bl	8002ea8 <__aeabi_f2d>
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	4b0e      	ldr	r3, [pc, #56]	; (8004fa8 <hall_read+0x118>)
 8004f6e:	f7fd f8f3 	bl	8002158 <__aeabi_dmul>
 8004f72:	0002      	movs	r2, r0
 8004f74:	000b      	movs	r3, r1
 8004f76:	0010      	movs	r0, r2
 8004f78:	0019      	movs	r1, r3
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	4b0b      	ldr	r3, [pc, #44]	; (8004fac <hall_read+0x11c>)
 8004f7e:	f7fc fce9 	bl	8001954 <__aeabi_ddiv>
 8004f82:	0002      	movs	r2, r0
 8004f84:	000b      	movs	r3, r1
 8004f86:	0010      	movs	r0, r2
 8004f88:	0019      	movs	r1, r3
 8004f8a:	f7fd ffd5 	bl	8002f38 <__aeabi_d2f>
 8004f8e:	1c02      	adds	r2, r0, #0
 8004f90:	4b09      	ldr	r3, [pc, #36]	; (8004fb8 <hall_read+0x128>)
 8004f92:	605a      	str	r2, [r3, #4]
	else
	{
		// if current read fails, set current to a conspicuous value
		hall3.current = 123.456789;
	}
}
 8004f94:	e002      	b.n	8004f9c <hall_read+0x10c>
		hall3.current = 123.456789;
 8004f96:	4b08      	ldr	r3, [pc, #32]	; (8004fb8 <hall_read+0x128>)
 8004f98:	4a05      	ldr	r2, [pc, #20]	; (8004fb0 <hall_read+0x120>)
 8004f9a:	605a      	str	r2, [r3, #4]
}
 8004f9c:	46c0      	nop			; (mov r8, r8)
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	46c0      	nop			; (mov r8, r8)
 8004fa4:	20000890 	.word	0x20000890
 8004fa8:	4082c000 	.word	0x4082c000
 8004fac:	40838800 	.word	0x40838800
 8004fb0:	42f6e9e0 	.word	0x42f6e9e0
 8004fb4:	2000089c 	.word	0x2000089c
 8004fb8:	200008a8 	.word	0x200008a8

08004fbc <gps_rx>:
 * \brief Passes received nema string to lwgps. Must be called at least once per second.
 *
 * lwgps (lightweight gps) is a nema string parsing library. see documentation for details)
 * */
void gps_rx()
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	af00      	add	r7, sp, #0
	if(gps.buffStateFlag == read) // if buffer is ready to read
 8004fc0:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <gps_rx+0x34>)
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10e      	bne.n	8004fe8 <gps_rx+0x2c>
	{

		/* Process all input data */
		lwgps_process(&hgps, gps.buff, gps.tail - 1);
 8004fca:	4b09      	ldr	r3, [pc, #36]	; (8004ff0 <gps_rx+0x34>)
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	001a      	movs	r2, r3
 8004fd2:	4908      	ldr	r1, [pc, #32]	; (8004ff4 <gps_rx+0x38>)
 8004fd4:	4b08      	ldr	r3, [pc, #32]	; (8004ff8 <gps_rx+0x3c>)
 8004fd6:	0018      	movs	r0, r3
 8004fd8:	f7ff fc43 	bl	8004862 <lwgps_process>

		/* put receiver back in RX state */
		gps.buffStateFlag = write;
 8004fdc:	4b04      	ldr	r3, [pc, #16]	; (8004ff0 <gps_rx+0x34>)
 8004fde:	2201      	movs	r2, #1
 8004fe0:	701a      	strb	r2, [r3, #0]
		gps.tail = 0;
 8004fe2:	4b03      	ldr	r3, [pc, #12]	; (8004ff0 <gps_rx+0x34>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	605a      	str	r2, [r3, #4]
	}
}
 8004fe8:	46c0      	nop			; (mov r8, r8)
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	46c0      	nop			; (mov r8, r8)
 8004ff0:	200003cc 	.word	0x200003cc
 8004ff4:	200003d6 	.word	0x200003d6
 8004ff8:	200007e0 	.word	0x200007e0

08004ffc <HAL_UART_RxCpltCallback>:
 * than one second since it has seen the last line.
 *
 *  \param[in] huart: uart peripheral that has interrupted. Returns immediately if not huart3
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
	if( huart == &huart3)
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	4b35      	ldr	r3, [pc, #212]	; (80050dc <HAL_UART_RxCpltCallback+0xe0>)
 8005008:	429a      	cmp	r2, r3
 800500a:	d163      	bne.n	80050d4 <HAL_UART_RxCpltCallback+0xd8>
	{
		if(gps.buffStateFlag == write)
 800500c:	4b34      	ldr	r3, [pc, #208]	; (80050e0 <HAL_UART_RxCpltCallback+0xe4>)
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b01      	cmp	r3, #1
 8005014:	d153      	bne.n	80050be <HAL_UART_RxCpltCallback+0xc2>
		{
			switch (gps.parsingState)
 8005016:	4b32      	ldr	r3, [pc, #200]	; (80050e0 <HAL_UART_RxCpltCallback+0xe4>)
 8005018:	7a1b      	ldrb	r3, [r3, #8]
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	d002      	beq.n	8005026 <HAL_UART_RxCpltCallback+0x2a>
 8005020:	2b01      	cmp	r3, #1
 8005022:	d017      	beq.n	8005054 <HAL_UART_RxCpltCallback+0x58>

						}
					}
				}
				break;
			default : break;
 8005024:	e050      	b.n	80050c8 <HAL_UART_RxCpltCallback+0xcc>
				if(gps.newchar == '$')
 8005026:	4b2e      	ldr	r3, [pc, #184]	; (80050e0 <HAL_UART_RxCpltCallback+0xe4>)
 8005028:	7a5b      	ldrb	r3, [r3, #9]
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b24      	cmp	r3, #36	; 0x24
 800502e:	d148      	bne.n	80050c2 <HAL_UART_RxCpltCallback+0xc6>
					gps.buff[gps.tail] = gps.newchar;
 8005030:	4b2b      	ldr	r3, [pc, #172]	; (80050e0 <HAL_UART_RxCpltCallback+0xe4>)
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	4a2a      	ldr	r2, [pc, #168]	; (80050e0 <HAL_UART_RxCpltCallback+0xe4>)
 8005036:	7a52      	ldrb	r2, [r2, #9]
 8005038:	b2d1      	uxtb	r1, r2
 800503a:	4a29      	ldr	r2, [pc, #164]	; (80050e0 <HAL_UART_RxCpltCallback+0xe4>)
 800503c:	18d3      	adds	r3, r2, r3
 800503e:	1c0a      	adds	r2, r1, #0
 8005040:	729a      	strb	r2, [r3, #10]
					gps.tail++;
 8005042:	4b27      	ldr	r3, [pc, #156]	; (80050e0 <HAL_UART_RxCpltCallback+0xe4>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	1c5a      	adds	r2, r3, #1
 8005048:	4b25      	ldr	r3, [pc, #148]	; (80050e0 <HAL_UART_RxCpltCallback+0xe4>)
 800504a:	605a      	str	r2, [r3, #4]
					gps.parsingState = seen$;
 800504c:	4b24      	ldr	r3, [pc, #144]	; (80050e0 <HAL_UART_RxCpltCallback+0xe4>)
 800504e:	2201      	movs	r2, #1
 8005050:	721a      	strb	r2, [r3, #8]
				break;
 8005052:	e036      	b.n	80050c2 <HAL_UART_RxCpltCallback+0xc6>
				gps.buff[gps.tail] = gps.newchar;
 8005054:	4b22      	ldr	r3, [pc, #136]	; (80050e0 <HAL_UART_RxCpltCallback+0xe4>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	4a21      	ldr	r2, [pc, #132]	; (80050e0 <HAL_UART_RxCpltCallback+0xe4>)
 800505a:	7a52      	ldrb	r2, [r2, #9]
 800505c:	b2d1      	uxtb	r1, r2
 800505e:	4a20      	ldr	r2, [pc, #128]	; (80050e0 <HAL_UART_RxCpltCallback+0xe4>)
 8005060:	18d3      	adds	r3, r2, r3
 8005062:	1c0a      	adds	r2, r1, #0
 8005064:	729a      	strb	r2, [r3, #10]
				gps.tail++;
 8005066:	4b1e      	ldr	r3, [pc, #120]	; (80050e0 <HAL_UART_RxCpltCallback+0xe4>)
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	4b1c      	ldr	r3, [pc, #112]	; (80050e0 <HAL_UART_RxCpltCallback+0xe4>)
 800506e:	605a      	str	r2, [r3, #4]
				if(gps.newchar == '\n')
 8005070:	4b1b      	ldr	r3, [pc, #108]	; (80050e0 <HAL_UART_RxCpltCallback+0xe4>)
 8005072:	7a5b      	ldrb	r3, [r3, #9]
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b0a      	cmp	r3, #10
 8005078:	d125      	bne.n	80050c6 <HAL_UART_RxCpltCallback+0xca>
					gps.lineCounter++;
 800507a:	4b19      	ldr	r3, [pc, #100]	; (80050e0 <HAL_UART_RxCpltCallback+0xe4>)
 800507c:	4a19      	ldr	r2, [pc, #100]	; (80050e4 <HAL_UART_RxCpltCallback+0xe8>)
 800507e:	589b      	ldr	r3, [r3, r2]
 8005080:	1c5a      	adds	r2, r3, #1
 8005082:	4b17      	ldr	r3, [pc, #92]	; (80050e0 <HAL_UART_RxCpltCallback+0xe4>)
 8005084:	4917      	ldr	r1, [pc, #92]	; (80050e4 <HAL_UART_RxCpltCallback+0xe8>)
 8005086:	505a      	str	r2, [r3, r1]
					if (gps.lineCounter >= gps.numLines)
 8005088:	4b15      	ldr	r3, [pc, #84]	; (80050e0 <HAL_UART_RxCpltCallback+0xe4>)
 800508a:	4a16      	ldr	r2, [pc, #88]	; (80050e4 <HAL_UART_RxCpltCallback+0xe8>)
 800508c:	589a      	ldr	r2, [r3, r2]
 800508e:	4914      	ldr	r1, [pc, #80]	; (80050e0 <HAL_UART_RxCpltCallback+0xe4>)
 8005090:	2382      	movs	r3, #130	; 0x82
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	58cb      	ldr	r3, [r1, r3]
 8005096:	429a      	cmp	r2, r3
 8005098:	db15      	blt.n	80050c6 <HAL_UART_RxCpltCallback+0xca>
							gps.buff[gps.tail + 1] = '0'; // null terminate buffer might not be necessary)
 800509a:	4b11      	ldr	r3, [pc, #68]	; (80050e0 <HAL_UART_RxCpltCallback+0xe4>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	3301      	adds	r3, #1
 80050a0:	4a0f      	ldr	r2, [pc, #60]	; (80050e0 <HAL_UART_RxCpltCallback+0xe4>)
 80050a2:	18d3      	adds	r3, r2, r3
 80050a4:	2230      	movs	r2, #48	; 0x30
 80050a6:	729a      	strb	r2, [r3, #10]
							gps.buffStateFlag = read; // set flag for main program;
 80050a8:	4b0d      	ldr	r3, [pc, #52]	; (80050e0 <HAL_UART_RxCpltCallback+0xe4>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	701a      	strb	r2, [r3, #0]
							gps.parsingState = init;
 80050ae:	4b0c      	ldr	r3, [pc, #48]	; (80050e0 <HAL_UART_RxCpltCallback+0xe4>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	721a      	strb	r2, [r3, #8]
							gps.lineCounter = 0;
 80050b4:	4b0a      	ldr	r3, [pc, #40]	; (80050e0 <HAL_UART_RxCpltCallback+0xe4>)
 80050b6:	4a0b      	ldr	r2, [pc, #44]	; (80050e4 <HAL_UART_RxCpltCallback+0xe8>)
 80050b8:	2100      	movs	r1, #0
 80050ba:	5099      	str	r1, [r3, r2]
				break;
 80050bc:	e003      	b.n	80050c6 <HAL_UART_RxCpltCallback+0xca>
			}
		}
 80050be:	46c0      	nop			; (mov r8, r8)
 80050c0:	e002      	b.n	80050c8 <HAL_UART_RxCpltCallback+0xcc>
				break;
 80050c2:	46c0      	nop			; (mov r8, r8)
 80050c4:	e000      	b.n	80050c8 <HAL_UART_RxCpltCallback+0xcc>
				break;
 80050c6:	46c0      	nop			; (mov r8, r8)
		HAL_UART_Receive_IT(&huart3 , (uint8_t *) & gps.newchar , 1);
 80050c8:	4907      	ldr	r1, [pc, #28]	; (80050e8 <HAL_UART_RxCpltCallback+0xec>)
 80050ca:	4b04      	ldr	r3, [pc, #16]	; (80050dc <HAL_UART_RxCpltCallback+0xe0>)
 80050cc:	2201      	movs	r2, #1
 80050ce:	0018      	movs	r0, r3
 80050d0:	f005 fd74 	bl	800abbc <HAL_UART_Receive_IT>
	}
}
 80050d4:	46c0      	nop			; (mov r8, r8)
 80050d6:	46bd      	mov	sp, r7
 80050d8:	b002      	add	sp, #8
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	20000a74 	.word	0x20000a74
 80050e0:	200003cc 	.word	0x200003cc
 80050e4:	0000040c 	.word	0x0000040c
 80050e8:	200003d5 	.word	0x200003d5

080050ec <lora_tx_it>:


/**
 * \brief Transmits a string over LoRa using interrupts */
void lora_tx_it(char * payload , int length)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af02      	add	r7, sp, #8
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
		/*
		 * generate message string
		 * Make sure that it is saved to a global variable that won't go out of scope
		 * (I lost sleep over this)
		*/
		sprintf(lora_payload,"AT+SEND=%d,%d,%s\r\n",LORA_RECIVER_ADDRESS,length,payload);
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	490b      	ldr	r1, [pc, #44]	; (8005128 <lora_tx_it+0x3c>)
 80050fa:	480c      	ldr	r0, [pc, #48]	; (800512c <lora_tx_it+0x40>)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	0013      	movs	r3, r2
 8005102:	2205      	movs	r2, #5
 8005104:	f007 fcd0 	bl	800caa8 <siprintf>

		HAL_UART_Transmit_IT( &huart1 , (uint8_t *) lora_payload , strlen(lora_payload));
 8005108:	4b08      	ldr	r3, [pc, #32]	; (800512c <lora_tx_it+0x40>)
 800510a:	0018      	movs	r0, r3
 800510c:	f7fa fffc 	bl	8000108 <strlen>
 8005110:	0003      	movs	r3, r0
 8005112:	b29a      	uxth	r2, r3
 8005114:	4905      	ldr	r1, [pc, #20]	; (800512c <lora_tx_it+0x40>)
 8005116:	4b06      	ldr	r3, [pc, #24]	; (8005130 <lora_tx_it+0x44>)
 8005118:	0018      	movs	r0, r3
 800511a:	f005 fcdf 	bl	800aadc <HAL_UART_Transmit_IT>
		 * If another message is sent too soon, the radio will ignore it.
		 * Alternatively, the program could read back in the "+OK" response
		 * and only send another message after that.
		 * (this is not currently implemented)
		 */
}
 800511e:	46c0      	nop			; (mov r8, r8)
 8005120:	46bd      	mov	sp, r7
 8005122:	b002      	add	sp, #8
 8005124:	bd80      	pop	{r7, pc}
 8005126:	46c0      	nop			; (mov r8, r8)
 8005128:	0800f31c 	.word	0x0800f31c
 800512c:	2000034c 	.word	0x2000034c
 8005130:	200009ec 	.word	0x200009ec

08005134 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	7f1b      	ldrb	r3, [r3, #28]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d154      	bne.n	80051ee <HAL_TIM_IC_CaptureCallback+0xba>
	if(Is_First_Captured == 0){
 8005144:	4b2c      	ldr	r3, [pc, #176]	; (80051f8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10b      	bne.n	8005164 <HAL_TIM_IC_CaptureCallback+0x30>
		IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2100      	movs	r1, #0
 8005150:	0018      	movs	r0, r3
 8005152:	f005 f93f 	bl	800a3d4 <HAL_TIM_ReadCapturedValue>
 8005156:	0002      	movs	r2, r0
 8005158:	4b28      	ldr	r3, [pc, #160]	; (80051fc <HAL_TIM_IC_CaptureCallback+0xc8>)
 800515a:	601a      	str	r2, [r3, #0]
		Is_First_Captured = 1;
 800515c:	4b26      	ldr	r3, [pc, #152]	; (80051f8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800515e:	2201      	movs	r2, #1
 8005160:	601a      	str	r2, [r3, #0]

		__HAL_TIM_SET_COUNTER(htim, 0);
		Is_First_Captured = 0;
	}
  }
}
 8005162:	e044      	b.n	80051ee <HAL_TIM_IC_CaptureCallback+0xba>
		IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2100      	movs	r1, #0
 8005168:	0018      	movs	r0, r3
 800516a:	f005 f933 	bl	800a3d4 <HAL_TIM_ReadCapturedValue>
 800516e:	0002      	movs	r2, r0
 8005170:	4b23      	ldr	r3, [pc, #140]	; (8005200 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8005172:	601a      	str	r2, [r3, #0]
		if (IC_Val2 > IC_Val1){
 8005174:	4b22      	ldr	r3, [pc, #136]	; (8005200 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	4b20      	ldr	r3, [pc, #128]	; (80051fc <HAL_TIM_IC_CaptureCallback+0xc8>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	429a      	cmp	r2, r3
 800517e:	d907      	bls.n	8005190 <HAL_TIM_IC_CaptureCallback+0x5c>
			Difference = IC_Val2-IC_Val1;
 8005180:	4b1f      	ldr	r3, [pc, #124]	; (8005200 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	4b1d      	ldr	r3, [pc, #116]	; (80051fc <HAL_TIM_IC_CaptureCallback+0xc8>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	1ad2      	subs	r2, r2, r3
 800518a:	4b1e      	ldr	r3, [pc, #120]	; (8005204 <HAL_TIM_IC_CaptureCallback+0xd0>)
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	e00d      	b.n	80051ac <HAL_TIM_IC_CaptureCallback+0x78>
		else if (IC_Val1 > IC_Val2){
 8005190:	4b1a      	ldr	r3, [pc, #104]	; (80051fc <HAL_TIM_IC_CaptureCallback+0xc8>)
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	4b1a      	ldr	r3, [pc, #104]	; (8005200 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	429a      	cmp	r2, r3
 800519a:	d907      	bls.n	80051ac <HAL_TIM_IC_CaptureCallback+0x78>
			Difference = (0xffffffff - IC_Val1) + IC_Val2;
 800519c:	4b18      	ldr	r3, [pc, #96]	; (8005200 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	4b16      	ldr	r3, [pc, #88]	; (80051fc <HAL_TIM_IC_CaptureCallback+0xc8>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	1e5a      	subs	r2, r3, #1
 80051a8:	4b16      	ldr	r3, [pc, #88]	; (8005204 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80051aa:	601a      	str	r2, [r3, #0]
		float refClock = TIMCLOCK/(PRESCALAR);
 80051ac:	4b16      	ldr	r3, [pc, #88]	; (8005208 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80051ae:	60fb      	str	r3, [r7, #12]
		Frequency = refClock/Difference;
 80051b0:	4b14      	ldr	r3, [pc, #80]	; (8005204 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	0018      	movs	r0, r3
 80051b6:	f7fc f84f 	bl	8001258 <__aeabi_ui2f>
 80051ba:	1c03      	adds	r3, r0, #0
 80051bc:	1c19      	adds	r1, r3, #0
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f7fb fb4a 	bl	8000858 <__aeabi_fdiv>
 80051c4:	1c03      	adds	r3, r0, #0
 80051c6:	1c1a      	adds	r2, r3, #0
 80051c8:	4b10      	ldr	r3, [pc, #64]	; (800520c <HAL_TIM_IC_CaptureCallback+0xd8>)
 80051ca:	601a      	str	r2, [r3, #0]
		rpm = Frequency * 60.0;
 80051cc:	4b0f      	ldr	r3, [pc, #60]	; (800520c <HAL_TIM_IC_CaptureCallback+0xd8>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	490f      	ldr	r1, [pc, #60]	; (8005210 <HAL_TIM_IC_CaptureCallback+0xdc>)
 80051d2:	1c18      	adds	r0, r3, #0
 80051d4:	f7fb fd08 	bl	8000be8 <__aeabi_fmul>
 80051d8:	1c03      	adds	r3, r0, #0
 80051da:	1c1a      	adds	r2, r3, #0
 80051dc:	4b0d      	ldr	r3, [pc, #52]	; (8005214 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80051de:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(htim, 0);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2200      	movs	r2, #0
 80051e6:	625a      	str	r2, [r3, #36]	; 0x24
		Is_First_Captured = 0;
 80051e8:	4b03      	ldr	r3, [pc, #12]	; (80051f8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]
}
 80051ee:	46c0      	nop			; (mov r8, r8)
 80051f0:	46bd      	mov	sp, r7
 80051f2:	b004      	add	sp, #16
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	46c0      	nop			; (mov r8, r8)
 80051f8:	200008c0 	.word	0x200008c0
 80051fc:	200008b4 	.word	0x200008b4
 8005200:	200008b8 	.word	0x200008b8
 8005204:	200008bc 	.word	0x200008bc
 8005208:	49742400 	.word	0x49742400
 800520c:	200008dc 	.word	0x200008dc
 8005210:	42700000 	.word	0x42700000
 8005214:	200008e0 	.word	0x200008e0

08005218 <readVoltage>:


/**
 * \brief reads all voltages from internal ADC.
 * */
void readVoltage(float div){
 8005218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]

	  /* Poll for voltage divider*/
	HAL_StatusTypeDef retval;
	ADC_Disable_channels();
 8005220:	f000 f944 	bl	80054ac <ADC_Disable_channels>

	ADC_Select_CH0();
 8005224:	f000 f9fa 	bl	800561c <ADC_Select_CH0>
	HAL_ADC_Start(&hadc);
 8005228:	4b96      	ldr	r3, [pc, #600]	; (8005484 <readVoltage+0x26c>)
 800522a:	0018      	movs	r0, r3
 800522c:	f001 f962 	bl	80064f4 <HAL_ADC_Start>
	retval = HAL_ADC_PollForConversion(&hadc,1000);
 8005230:	260f      	movs	r6, #15
 8005232:	19bc      	adds	r4, r7, r6
 8005234:	23fa      	movs	r3, #250	; 0xfa
 8005236:	009a      	lsls	r2, r3, #2
 8005238:	4b92      	ldr	r3, [pc, #584]	; (8005484 <readVoltage+0x26c>)
 800523a:	0011      	movs	r1, r2
 800523c:	0018      	movs	r0, r3
 800523e:	f001 f9ed 	bl	800661c <HAL_ADC_PollForConversion>
 8005242:	0003      	movs	r3, r0
 8005244:	7023      	strb	r3, [r4, #0]
	readValue = HAL_ADC_GetValue(&hadc);
 8005246:	4b8f      	ldr	r3, [pc, #572]	; (8005484 <readVoltage+0x26c>)
 8005248:	0018      	movs	r0, r3
 800524a:	f001 fa7f 	bl	800674c <HAL_ADC_GetValue>
 800524e:	0003      	movs	r3, r0
 8005250:	b29a      	uxth	r2, r3
 8005252:	4b8d      	ldr	r3, [pc, #564]	; (8005488 <readVoltage+0x270>)
 8005254:	801a      	strh	r2, [r3, #0]
	volt0 = ((float) readValue * 3.3 / 4095.0) / (float) div ;
 8005256:	4b8c      	ldr	r3, [pc, #560]	; (8005488 <readVoltage+0x270>)
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	0018      	movs	r0, r3
 800525c:	f7fb fffc 	bl	8001258 <__aeabi_ui2f>
 8005260:	1c03      	adds	r3, r0, #0
 8005262:	1c18      	adds	r0, r3, #0
 8005264:	f7fd fe20 	bl	8002ea8 <__aeabi_f2d>
 8005268:	4a88      	ldr	r2, [pc, #544]	; (800548c <readVoltage+0x274>)
 800526a:	4b89      	ldr	r3, [pc, #548]	; (8005490 <readVoltage+0x278>)
 800526c:	f7fc ff74 	bl	8002158 <__aeabi_dmul>
 8005270:	0002      	movs	r2, r0
 8005272:	000b      	movs	r3, r1
 8005274:	0010      	movs	r0, r2
 8005276:	0019      	movs	r1, r3
 8005278:	2200      	movs	r2, #0
 800527a:	4b86      	ldr	r3, [pc, #536]	; (8005494 <readVoltage+0x27c>)
 800527c:	f7fc fb6a 	bl	8001954 <__aeabi_ddiv>
 8005280:	0002      	movs	r2, r0
 8005282:	000b      	movs	r3, r1
 8005284:	0014      	movs	r4, r2
 8005286:	001d      	movs	r5, r3
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7fd fe0d 	bl	8002ea8 <__aeabi_f2d>
 800528e:	0002      	movs	r2, r0
 8005290:	000b      	movs	r3, r1
 8005292:	0020      	movs	r0, r4
 8005294:	0029      	movs	r1, r5
 8005296:	f7fc fb5d 	bl	8001954 <__aeabi_ddiv>
 800529a:	0002      	movs	r2, r0
 800529c:	000b      	movs	r3, r1
 800529e:	0010      	movs	r0, r2
 80052a0:	0019      	movs	r1, r3
 80052a2:	f7fd fe49 	bl	8002f38 <__aeabi_d2f>
 80052a6:	1c02      	adds	r2, r0, #0
 80052a8:	4b7b      	ldr	r3, [pc, #492]	; (8005498 <readVoltage+0x280>)
 80052aa:	601a      	str	r2, [r3, #0]
	//HAL_Delay (100);
	HAL_ADC_Stop(&hadc);
 80052ac:	4b75      	ldr	r3, [pc, #468]	; (8005484 <readVoltage+0x26c>)
 80052ae:	0018      	movs	r0, r3
 80052b0:	f001 f974 	bl	800659c <HAL_ADC_Stop>

	ADC_Disable_channels();
 80052b4:	f000 f8fa 	bl	80054ac <ADC_Disable_channels>

	ADC_Select_CH1();
 80052b8:	f000 f944 	bl	8005544 <ADC_Select_CH1>
	HAL_ADC_Start(&hadc);
 80052bc:	4b71      	ldr	r3, [pc, #452]	; (8005484 <readVoltage+0x26c>)
 80052be:	0018      	movs	r0, r3
 80052c0:	f001 f918 	bl	80064f4 <HAL_ADC_Start>
	retval = HAL_ADC_PollForConversion(&hadc,1000);
 80052c4:	19bc      	adds	r4, r7, r6
 80052c6:	23fa      	movs	r3, #250	; 0xfa
 80052c8:	009a      	lsls	r2, r3, #2
 80052ca:	4b6e      	ldr	r3, [pc, #440]	; (8005484 <readVoltage+0x26c>)
 80052cc:	0011      	movs	r1, r2
 80052ce:	0018      	movs	r0, r3
 80052d0:	f001 f9a4 	bl	800661c <HAL_ADC_PollForConversion>
 80052d4:	0003      	movs	r3, r0
 80052d6:	7023      	strb	r3, [r4, #0]
	readValue = HAL_ADC_GetValue(&hadc);
 80052d8:	4b6a      	ldr	r3, [pc, #424]	; (8005484 <readVoltage+0x26c>)
 80052da:	0018      	movs	r0, r3
 80052dc:	f001 fa36 	bl	800674c <HAL_ADC_GetValue>
 80052e0:	0003      	movs	r3, r0
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	4b68      	ldr	r3, [pc, #416]	; (8005488 <readVoltage+0x270>)
 80052e6:	801a      	strh	r2, [r3, #0]
	volt1 = ((float) readValue * 3.3  / 4095.0) / (float) div ;
 80052e8:	4b67      	ldr	r3, [pc, #412]	; (8005488 <readVoltage+0x270>)
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	0018      	movs	r0, r3
 80052ee:	f7fb ffb3 	bl	8001258 <__aeabi_ui2f>
 80052f2:	1c03      	adds	r3, r0, #0
 80052f4:	1c18      	adds	r0, r3, #0
 80052f6:	f7fd fdd7 	bl	8002ea8 <__aeabi_f2d>
 80052fa:	4a64      	ldr	r2, [pc, #400]	; (800548c <readVoltage+0x274>)
 80052fc:	4b64      	ldr	r3, [pc, #400]	; (8005490 <readVoltage+0x278>)
 80052fe:	f7fc ff2b 	bl	8002158 <__aeabi_dmul>
 8005302:	0002      	movs	r2, r0
 8005304:	000b      	movs	r3, r1
 8005306:	0010      	movs	r0, r2
 8005308:	0019      	movs	r1, r3
 800530a:	2200      	movs	r2, #0
 800530c:	4b61      	ldr	r3, [pc, #388]	; (8005494 <readVoltage+0x27c>)
 800530e:	f7fc fb21 	bl	8001954 <__aeabi_ddiv>
 8005312:	0002      	movs	r2, r0
 8005314:	000b      	movs	r3, r1
 8005316:	0014      	movs	r4, r2
 8005318:	001d      	movs	r5, r3
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7fd fdc4 	bl	8002ea8 <__aeabi_f2d>
 8005320:	0002      	movs	r2, r0
 8005322:	000b      	movs	r3, r1
 8005324:	0020      	movs	r0, r4
 8005326:	0029      	movs	r1, r5
 8005328:	f7fc fb14 	bl	8001954 <__aeabi_ddiv>
 800532c:	0002      	movs	r2, r0
 800532e:	000b      	movs	r3, r1
 8005330:	0010      	movs	r0, r2
 8005332:	0019      	movs	r1, r3
 8005334:	f7fd fe00 	bl	8002f38 <__aeabi_d2f>
 8005338:	1c02      	adds	r2, r0, #0
 800533a:	4b58      	ldr	r3, [pc, #352]	; (800549c <readVoltage+0x284>)
 800533c:	601a      	str	r2, [r3, #0]
	//HAL_Delay (100);
	HAL_ADC_Stop(&hadc);
 800533e:	4b51      	ldr	r3, [pc, #324]	; (8005484 <readVoltage+0x26c>)
 8005340:	0018      	movs	r0, r3
 8005342:	f001 f92b 	bl	800659c <HAL_ADC_Stop>
	ADC_Disable_channels();
 8005346:	f000 f8b1 	bl	80054ac <ADC_Disable_channels>

	ADC_Select_CH2();
 800534a:	f000 f91f 	bl	800558c <ADC_Select_CH2>
	HAL_ADC_Start(&hadc);
 800534e:	4b4d      	ldr	r3, [pc, #308]	; (8005484 <readVoltage+0x26c>)
 8005350:	0018      	movs	r0, r3
 8005352:	f001 f8cf 	bl	80064f4 <HAL_ADC_Start>
	retval = HAL_ADC_PollForConversion(&hadc,1000);
 8005356:	19bc      	adds	r4, r7, r6
 8005358:	23fa      	movs	r3, #250	; 0xfa
 800535a:	009a      	lsls	r2, r3, #2
 800535c:	4b49      	ldr	r3, [pc, #292]	; (8005484 <readVoltage+0x26c>)
 800535e:	0011      	movs	r1, r2
 8005360:	0018      	movs	r0, r3
 8005362:	f001 f95b 	bl	800661c <HAL_ADC_PollForConversion>
 8005366:	0003      	movs	r3, r0
 8005368:	7023      	strb	r3, [r4, #0]
	readValue = HAL_ADC_GetValue(&hadc);
 800536a:	4b46      	ldr	r3, [pc, #280]	; (8005484 <readVoltage+0x26c>)
 800536c:	0018      	movs	r0, r3
 800536e:	f001 f9ed 	bl	800674c <HAL_ADC_GetValue>
 8005372:	0003      	movs	r3, r0
 8005374:	b29a      	uxth	r2, r3
 8005376:	4b44      	ldr	r3, [pc, #272]	; (8005488 <readVoltage+0x270>)
 8005378:	801a      	strh	r2, [r3, #0]
	volt2 = ((float) readValue * 3.3  / 4095.0) / (float) div ;
 800537a:	4b43      	ldr	r3, [pc, #268]	; (8005488 <readVoltage+0x270>)
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	0018      	movs	r0, r3
 8005380:	f7fb ff6a 	bl	8001258 <__aeabi_ui2f>
 8005384:	1c03      	adds	r3, r0, #0
 8005386:	1c18      	adds	r0, r3, #0
 8005388:	f7fd fd8e 	bl	8002ea8 <__aeabi_f2d>
 800538c:	4a3f      	ldr	r2, [pc, #252]	; (800548c <readVoltage+0x274>)
 800538e:	4b40      	ldr	r3, [pc, #256]	; (8005490 <readVoltage+0x278>)
 8005390:	f7fc fee2 	bl	8002158 <__aeabi_dmul>
 8005394:	0002      	movs	r2, r0
 8005396:	000b      	movs	r3, r1
 8005398:	0010      	movs	r0, r2
 800539a:	0019      	movs	r1, r3
 800539c:	2200      	movs	r2, #0
 800539e:	4b3d      	ldr	r3, [pc, #244]	; (8005494 <readVoltage+0x27c>)
 80053a0:	f7fc fad8 	bl	8001954 <__aeabi_ddiv>
 80053a4:	0002      	movs	r2, r0
 80053a6:	000b      	movs	r3, r1
 80053a8:	0014      	movs	r4, r2
 80053aa:	001d      	movs	r5, r3
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7fd fd7b 	bl	8002ea8 <__aeabi_f2d>
 80053b2:	0002      	movs	r2, r0
 80053b4:	000b      	movs	r3, r1
 80053b6:	0020      	movs	r0, r4
 80053b8:	0029      	movs	r1, r5
 80053ba:	f7fc facb 	bl	8001954 <__aeabi_ddiv>
 80053be:	0002      	movs	r2, r0
 80053c0:	000b      	movs	r3, r1
 80053c2:	0010      	movs	r0, r2
 80053c4:	0019      	movs	r1, r3
 80053c6:	f7fd fdb7 	bl	8002f38 <__aeabi_d2f>
 80053ca:	1c02      	adds	r2, r0, #0
 80053cc:	4b34      	ldr	r3, [pc, #208]	; (80054a0 <readVoltage+0x288>)
 80053ce:	601a      	str	r2, [r3, #0]
	//HAL_Delay (100);
	HAL_ADC_Stop(&hadc);
 80053d0:	4b2c      	ldr	r3, [pc, #176]	; (8005484 <readVoltage+0x26c>)
 80053d2:	0018      	movs	r0, r3
 80053d4:	f001 f8e2 	bl	800659c <HAL_ADC_Stop>
	ADC_Disable_channels();
 80053d8:	f000 f868 	bl	80054ac <ADC_Disable_channels>

	ADC_Select_CH3();
 80053dc:	f000 f8fa 	bl	80055d4 <ADC_Select_CH3>
	HAL_ADC_Start(&hadc);
 80053e0:	4b28      	ldr	r3, [pc, #160]	; (8005484 <readVoltage+0x26c>)
 80053e2:	0018      	movs	r0, r3
 80053e4:	f001 f886 	bl	80064f4 <HAL_ADC_Start>
	retval = HAL_ADC_PollForConversion(&hadc,1000);
 80053e8:	19bc      	adds	r4, r7, r6
 80053ea:	23fa      	movs	r3, #250	; 0xfa
 80053ec:	009a      	lsls	r2, r3, #2
 80053ee:	4b25      	ldr	r3, [pc, #148]	; (8005484 <readVoltage+0x26c>)
 80053f0:	0011      	movs	r1, r2
 80053f2:	0018      	movs	r0, r3
 80053f4:	f001 f912 	bl	800661c <HAL_ADC_PollForConversion>
 80053f8:	0003      	movs	r3, r0
 80053fa:	7023      	strb	r3, [r4, #0]
	readValue = HAL_ADC_GetValue(&hadc);
 80053fc:	4b21      	ldr	r3, [pc, #132]	; (8005484 <readVoltage+0x26c>)
 80053fe:	0018      	movs	r0, r3
 8005400:	f001 f9a4 	bl	800674c <HAL_ADC_GetValue>
 8005404:	0003      	movs	r3, r0
 8005406:	b29a      	uxth	r2, r3
 8005408:	4b1f      	ldr	r3, [pc, #124]	; (8005488 <readVoltage+0x270>)
 800540a:	801a      	strh	r2, [r3, #0]
	volt3 = ((float) readValue * 3.3  / 4095.0) / (float) div ;
 800540c:	4b1e      	ldr	r3, [pc, #120]	; (8005488 <readVoltage+0x270>)
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	0018      	movs	r0, r3
 8005412:	f7fb ff21 	bl	8001258 <__aeabi_ui2f>
 8005416:	1c03      	adds	r3, r0, #0
 8005418:	1c18      	adds	r0, r3, #0
 800541a:	f7fd fd45 	bl	8002ea8 <__aeabi_f2d>
 800541e:	4a1b      	ldr	r2, [pc, #108]	; (800548c <readVoltage+0x274>)
 8005420:	4b1b      	ldr	r3, [pc, #108]	; (8005490 <readVoltage+0x278>)
 8005422:	f7fc fe99 	bl	8002158 <__aeabi_dmul>
 8005426:	0002      	movs	r2, r0
 8005428:	000b      	movs	r3, r1
 800542a:	0010      	movs	r0, r2
 800542c:	0019      	movs	r1, r3
 800542e:	2200      	movs	r2, #0
 8005430:	4b18      	ldr	r3, [pc, #96]	; (8005494 <readVoltage+0x27c>)
 8005432:	f7fc fa8f 	bl	8001954 <__aeabi_ddiv>
 8005436:	0002      	movs	r2, r0
 8005438:	000b      	movs	r3, r1
 800543a:	0014      	movs	r4, r2
 800543c:	001d      	movs	r5, r3
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7fd fd32 	bl	8002ea8 <__aeabi_f2d>
 8005444:	0002      	movs	r2, r0
 8005446:	000b      	movs	r3, r1
 8005448:	0020      	movs	r0, r4
 800544a:	0029      	movs	r1, r5
 800544c:	f7fc fa82 	bl	8001954 <__aeabi_ddiv>
 8005450:	0002      	movs	r2, r0
 8005452:	000b      	movs	r3, r1
 8005454:	0010      	movs	r0, r2
 8005456:	0019      	movs	r1, r3
 8005458:	f7fd fd6e 	bl	8002f38 <__aeabi_d2f>
 800545c:	1c02      	adds	r2, r0, #0
 800545e:	4b11      	ldr	r3, [pc, #68]	; (80054a4 <readVoltage+0x28c>)
 8005460:	601a      	str	r2, [r3, #0]
	//HAL_Delay (100);
	HAL_ADC_Stop(&hadc);
 8005462:	4b08      	ldr	r3, [pc, #32]	; (8005484 <readVoltage+0x26c>)
 8005464:	0018      	movs	r0, r3
 8005466:	f001 f899 	bl	800659c <HAL_ADC_Stop>

	Frequency = retval;
 800546a:	19bb      	adds	r3, r7, r6
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	0018      	movs	r0, r3
 8005470:	f7fb fef2 	bl	8001258 <__aeabi_ui2f>
 8005474:	1c02      	adds	r2, r0, #0
 8005476:	4b0c      	ldr	r3, [pc, #48]	; (80054a8 <readVoltage+0x290>)
 8005478:	601a      	str	r2, [r3, #0]

}
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	46bd      	mov	sp, r7
 800547e:	b005      	add	sp, #20
 8005480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005482:	46c0      	nop			; (mov r8, r8)
 8005484:	20000204 	.word	0x20000204
 8005488:	200008e4 	.word	0x200008e4
 800548c:	66666666 	.word	0x66666666
 8005490:	400a6666 	.word	0x400a6666
 8005494:	40affe00 	.word	0x40affe00
 8005498:	200008f4 	.word	0x200008f4
 800549c:	200008e8 	.word	0x200008e8
 80054a0:	200008ec 	.word	0x200008ec
 80054a4:	200008f0 	.word	0x200008f0
 80054a8:	200008dc 	.word	0x200008dc

080054ac <ADC_Disable_channels>:
	  current =(rawVoltage - 2.4988276)/sensitivity;
	  return current;
}

void ADC_Disable_channels(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80054b2:	1d3b      	adds	r3, r7, #4
 80054b4:	0018      	movs	r0, r3
 80054b6:	230c      	movs	r3, #12
 80054b8:	001a      	movs	r2, r3
 80054ba:	2100      	movs	r1, #0
 80054bc:	f006 fe7d 	bl	800c1ba <memset>

	//disable channel 0
	sConfig.Channel = ADC_CHANNEL_0;
 80054c0:	1d3b      	adds	r3, r7, #4
 80054c2:	2200      	movs	r2, #0
 80054c4:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_NONE;
 80054c6:	1d3b      	adds	r3, r7, #4
 80054c8:	4a1c      	ldr	r2, [pc, #112]	; (800553c <ADC_Disable_channels+0x90>)
 80054ca:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime =  ADC_SAMPLETIME_239CYCLES_5;
 80054cc:	1d3b      	adds	r3, r7, #4
 80054ce:	2207      	movs	r2, #7
 80054d0:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80054d2:	1d3a      	adds	r2, r7, #4
 80054d4:	4b1a      	ldr	r3, [pc, #104]	; (8005540 <ADC_Disable_channels+0x94>)
 80054d6:	0011      	movs	r1, r2
 80054d8:	0018      	movs	r0, r3
 80054da:	f001 f943 	bl	8006764 <HAL_ADC_ConfigChannel>
 80054de:	1e03      	subs	r3, r0, #0
 80054e0:	d001      	beq.n	80054e6 <ADC_Disable_channels+0x3a>
	{
	Error_Handler();
 80054e2:	f7ff fb21 	bl	8004b28 <Error_Handler>
	}

	//disable channel 1
	sConfig.Channel = ADC_CHANNEL_1;
 80054e6:	1d3b      	adds	r3, r7, #4
 80054e8:	2201      	movs	r2, #1
 80054ea:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80054ec:	1d3a      	adds	r2, r7, #4
 80054ee:	4b14      	ldr	r3, [pc, #80]	; (8005540 <ADC_Disable_channels+0x94>)
 80054f0:	0011      	movs	r1, r2
 80054f2:	0018      	movs	r0, r3
 80054f4:	f001 f936 	bl	8006764 <HAL_ADC_ConfigChannel>
 80054f8:	1e03      	subs	r3, r0, #0
 80054fa:	d001      	beq.n	8005500 <ADC_Disable_channels+0x54>
	{
	Error_Handler();
 80054fc:	f7ff fb14 	bl	8004b28 <Error_Handler>
	}

	//disable channel 2
	sConfig.Channel = ADC_CHANNEL_2;
 8005500:	1d3b      	adds	r3, r7, #4
 8005502:	2202      	movs	r2, #2
 8005504:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005506:	1d3a      	adds	r2, r7, #4
 8005508:	4b0d      	ldr	r3, [pc, #52]	; (8005540 <ADC_Disable_channels+0x94>)
 800550a:	0011      	movs	r1, r2
 800550c:	0018      	movs	r0, r3
 800550e:	f001 f929 	bl	8006764 <HAL_ADC_ConfigChannel>
 8005512:	1e03      	subs	r3, r0, #0
 8005514:	d001      	beq.n	800551a <ADC_Disable_channels+0x6e>
	{
	Error_Handler();
 8005516:	f7ff fb07 	bl	8004b28 <Error_Handler>
	}

	//disable channel 3
	sConfig.Channel = ADC_CHANNEL_3;
 800551a:	1d3b      	adds	r3, r7, #4
 800551c:	2203      	movs	r2, #3
 800551e:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005520:	1d3a      	adds	r2, r7, #4
 8005522:	4b07      	ldr	r3, [pc, #28]	; (8005540 <ADC_Disable_channels+0x94>)
 8005524:	0011      	movs	r1, r2
 8005526:	0018      	movs	r0, r3
 8005528:	f001 f91c 	bl	8006764 <HAL_ADC_ConfigChannel>
 800552c:	1e03      	subs	r3, r0, #0
 800552e:	d001      	beq.n	8005534 <ADC_Disable_channels+0x88>
	{
	Error_Handler();
 8005530:	f7ff fafa 	bl	8004b28 <Error_Handler>
	}


}
 8005534:	46c0      	nop			; (mov r8, r8)
 8005536:	46bd      	mov	sp, r7
 8005538:	b004      	add	sp, #16
 800553a:	bd80      	pop	{r7, pc}
 800553c:	00001001 	.word	0x00001001
 8005540:	20000204 	.word	0x20000204

08005544 <ADC_Select_CH1>:

/**
 * \brief configures the internal ADC to use input channel 1
 * */
void ADC_Select_CH1 (void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800554a:	1d3b      	adds	r3, r7, #4
 800554c:	0018      	movs	r0, r3
 800554e:	230c      	movs	r3, #12
 8005550:	001a      	movs	r2, r3
 8005552:	2100      	movs	r1, #0
 8005554:	f006 fe31 	bl	800c1ba <memset>
	  // Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.

	  sConfig.Channel =ADC_CHANNEL_1;
 8005558:	1d3b      	adds	r3, r7, #4
 800555a:	2201      	movs	r2, #1
 800555c:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800555e:	1d3b      	adds	r3, r7, #4
 8005560:	2280      	movs	r2, #128	; 0x80
 8005562:	0152      	lsls	r2, r2, #5
 8005564:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime =  ADC_SAMPLETIME_239CYCLES_5;
 8005566:	1d3b      	adds	r3, r7, #4
 8005568:	2207      	movs	r2, #7
 800556a:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800556c:	1d3a      	adds	r2, r7, #4
 800556e:	4b06      	ldr	r3, [pc, #24]	; (8005588 <ADC_Select_CH1+0x44>)
 8005570:	0011      	movs	r1, r2
 8005572:	0018      	movs	r0, r3
 8005574:	f001 f8f6 	bl	8006764 <HAL_ADC_ConfigChannel>
 8005578:	1e03      	subs	r3, r0, #0
 800557a:	d001      	beq.n	8005580 <ADC_Select_CH1+0x3c>
	  {
	    Error_Handler();
 800557c:	f7ff fad4 	bl	8004b28 <Error_Handler>
	  }
}
 8005580:	46c0      	nop			; (mov r8, r8)
 8005582:	46bd      	mov	sp, r7
 8005584:	b004      	add	sp, #16
 8005586:	bd80      	pop	{r7, pc}
 8005588:	20000204 	.word	0x20000204

0800558c <ADC_Select_CH2>:

/**
 * \brief configures the internal ADC to use input channel 2
 * */
void ADC_Select_CH2 (void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8005592:	1d3b      	adds	r3, r7, #4
 8005594:	0018      	movs	r0, r3
 8005596:	230c      	movs	r3, #12
 8005598:	001a      	movs	r2, r3
 800559a:	2100      	movs	r1, #0
 800559c:	f006 fe0d 	bl	800c1ba <memset>
	  // Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.

	  sConfig.Channel = ADC_CHANNEL_2;
 80055a0:	1d3b      	adds	r3, r7, #4
 80055a2:	2202      	movs	r2, #2
 80055a4:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80055a6:	1d3b      	adds	r3, r7, #4
 80055a8:	2280      	movs	r2, #128	; 0x80
 80055aa:	0152      	lsls	r2, r2, #5
 80055ac:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime =  ADC_SAMPLETIME_239CYCLES_5;
 80055ae:	1d3b      	adds	r3, r7, #4
 80055b0:	2207      	movs	r2, #7
 80055b2:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80055b4:	1d3a      	adds	r2, r7, #4
 80055b6:	4b06      	ldr	r3, [pc, #24]	; (80055d0 <ADC_Select_CH2+0x44>)
 80055b8:	0011      	movs	r1, r2
 80055ba:	0018      	movs	r0, r3
 80055bc:	f001 f8d2 	bl	8006764 <HAL_ADC_ConfigChannel>
 80055c0:	1e03      	subs	r3, r0, #0
 80055c2:	d001      	beq.n	80055c8 <ADC_Select_CH2+0x3c>
	  {
	    Error_Handler();
 80055c4:	f7ff fab0 	bl	8004b28 <Error_Handler>
	  }
}
 80055c8:	46c0      	nop			; (mov r8, r8)
 80055ca:	46bd      	mov	sp, r7
 80055cc:	b004      	add	sp, #16
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	20000204 	.word	0x20000204

080055d4 <ADC_Select_CH3>:

/**
 * \brief configures the internal ADC to use input channel 3
 * */
void ADC_Select_CH3 (void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80055da:	1d3b      	adds	r3, r7, #4
 80055dc:	0018      	movs	r0, r3
 80055de:	230c      	movs	r3, #12
 80055e0:	001a      	movs	r2, r3
 80055e2:	2100      	movs	r1, #0
 80055e4:	f006 fde9 	bl	800c1ba <memset>
	  // Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.

	  sConfig.Channel = ADC_CHANNEL_3;
 80055e8:	1d3b      	adds	r3, r7, #4
 80055ea:	2203      	movs	r2, #3
 80055ec:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80055ee:	1d3b      	adds	r3, r7, #4
 80055f0:	2280      	movs	r2, #128	; 0x80
 80055f2:	0152      	lsls	r2, r2, #5
 80055f4:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime =  ADC_SAMPLETIME_239CYCLES_5;
 80055f6:	1d3b      	adds	r3, r7, #4
 80055f8:	2207      	movs	r2, #7
 80055fa:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80055fc:	1d3a      	adds	r2, r7, #4
 80055fe:	4b06      	ldr	r3, [pc, #24]	; (8005618 <ADC_Select_CH3+0x44>)
 8005600:	0011      	movs	r1, r2
 8005602:	0018      	movs	r0, r3
 8005604:	f001 f8ae 	bl	8006764 <HAL_ADC_ConfigChannel>
 8005608:	1e03      	subs	r3, r0, #0
 800560a:	d001      	beq.n	8005610 <ADC_Select_CH3+0x3c>
	  {
	    Error_Handler();
 800560c:	f7ff fa8c 	bl	8004b28 <Error_Handler>
	  }
}
 8005610:	46c0      	nop			; (mov r8, r8)
 8005612:	46bd      	mov	sp, r7
 8005614:	b004      	add	sp, #16
 8005616:	bd80      	pop	{r7, pc}
 8005618:	20000204 	.word	0x20000204

0800561c <ADC_Select_CH0>:

/**
 * \brief configures the internal ADC to use input channel 0
 * */
void ADC_Select_CH0 (void)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8005622:	1d3b      	adds	r3, r7, #4
 8005624:	0018      	movs	r0, r3
 8005626:	230c      	movs	r3, #12
 8005628:	001a      	movs	r2, r3
 800562a:	2100      	movs	r1, #0
 800562c:	f006 fdc5 	bl	800c1ba <memset>
	  // Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.

	  sConfig.Channel = ADC_CHANNEL_0;
 8005630:	1d3b      	adds	r3, r7, #4
 8005632:	2200      	movs	r2, #0
 8005634:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005636:	1d3b      	adds	r3, r7, #4
 8005638:	2280      	movs	r2, #128	; 0x80
 800563a:	0152      	lsls	r2, r2, #5
 800563c:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime =  ADC_SAMPLETIME_239CYCLES_5;
 800563e:	1d3b      	adds	r3, r7, #4
 8005640:	2207      	movs	r2, #7
 8005642:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005644:	1d3a      	adds	r2, r7, #4
 8005646:	4b06      	ldr	r3, [pc, #24]	; (8005660 <ADC_Select_CH0+0x44>)
 8005648:	0011      	movs	r1, r2
 800564a:	0018      	movs	r0, r3
 800564c:	f001 f88a 	bl	8006764 <HAL_ADC_ConfigChannel>
 8005650:	1e03      	subs	r3, r0, #0
 8005652:	d001      	beq.n	8005658 <ADC_Select_CH0+0x3c>
	  {
	    Error_Handler();
 8005654:	f7ff fa68 	bl	8004b28 <Error_Handler>
	  }
}
 8005658:	46c0      	nop			; (mov r8, r8)
 800565a:	46bd      	mov	sp, r7
 800565c:	b004      	add	sp, #16
 800565e:	bd80      	pop	{r7, pc}
 8005660:	20000204 	.word	0x20000204

08005664 <pcf8574_send_cmd>:
 * */

#include "pcf8574.h"

void pcf8574_send_cmd(uint8_t cmd)
{
 8005664:	b590      	push	{r4, r7, lr}
 8005666:	b087      	sub	sp, #28
 8005668:	af02      	add	r7, sp, #8
 800566a:	0002      	movs	r2, r0
 800566c:	1dfb      	adds	r3, r7, #7
 800566e:	701a      	strb	r2, [r3, #0]
    // d[2]= 1010 1100 = 0xAC
    // d[3]= 1010 1000 = 0xA8

    uint8_t du, dl;
    uint8_t data[4];
    du = cmd & 0xf0; // & 0b1111 0000
 8005670:	200f      	movs	r0, #15
 8005672:	183b      	adds	r3, r7, r0
 8005674:	1dfa      	adds	r2, r7, #7
 8005676:	7812      	ldrb	r2, [r2, #0]
 8005678:	210f      	movs	r1, #15
 800567a:	438a      	bics	r2, r1
 800567c:	701a      	strb	r2, [r3, #0]
    dl = (cmd << 4) & 0xf0;
 800567e:	1dfb      	adds	r3, r7, #7
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	011a      	lsls	r2, r3, #4
 8005684:	240e      	movs	r4, #14
 8005686:	193b      	adds	r3, r7, r4
 8005688:	701a      	strb	r2, [r3, #0]
    data[0] = du | 0x0C; // | 0b0000 1100
 800568a:	183b      	adds	r3, r7, r0
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	220c      	movs	r2, #12
 8005690:	4313      	orrs	r3, r2
 8005692:	b2da      	uxtb	r2, r3
 8005694:	2108      	movs	r1, #8
 8005696:	187b      	adds	r3, r7, r1
 8005698:	701a      	strb	r2, [r3, #0]
    data[1] = du | 0x08; // | 0b0000 1000
 800569a:	183b      	adds	r3, r7, r0
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	2208      	movs	r2, #8
 80056a0:	4313      	orrs	r3, r2
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	187b      	adds	r3, r7, r1
 80056a6:	705a      	strb	r2, [r3, #1]
    data[2] = dl | 0x0C; // | 0b0000 1100
 80056a8:	193b      	adds	r3, r7, r4
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	220c      	movs	r2, #12
 80056ae:	4313      	orrs	r3, r2
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	187b      	adds	r3, r7, r1
 80056b4:	709a      	strb	r2, [r3, #2]
    data[3] = dl | 0x08; // | 0b0000 1000
 80056b6:	193b      	adds	r3, r7, r4
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	2208      	movs	r2, #8
 80056bc:	4313      	orrs	r3, r2
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	187b      	adds	r3, r7, r1
 80056c2:	70da      	strb	r2, [r3, #3]
    HAL_I2C_Master_Transmit(&PCF8574_I2C_HANDLER, PCF8574_I2C_ADDRESS, data, sizeof(data), 0xf);
 80056c4:	187a      	adds	r2, r7, r1
 80056c6:	4805      	ldr	r0, [pc, #20]	; (80056dc <pcf8574_send_cmd+0x78>)
 80056c8:	230f      	movs	r3, #15
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	2304      	movs	r3, #4
 80056ce:	214e      	movs	r1, #78	; 0x4e
 80056d0:	f001 fec8 	bl	8007464 <HAL_I2C_Master_Transmit>
}
 80056d4:	46c0      	nop			; (mov r8, r8)
 80056d6:	46bd      	mov	sp, r7
 80056d8:	b005      	add	sp, #20
 80056da:	bd90      	pop	{r4, r7, pc}
 80056dc:	200002f8 	.word	0x200002f8

080056e0 <pcf8574_send_data>:

void pcf8574_send_data(uint8_t cmd)
{
 80056e0:	b590      	push	{r4, r7, lr}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af02      	add	r7, sp, #8
 80056e6:	0002      	movs	r2, r0
 80056e8:	1dfb      	adds	r3, r7, #7
 80056ea:	701a      	strb	r2, [r3, #0]
    uint8_t du, dl;
    uint8_t data[4];
    du = cmd & 0xf0;
 80056ec:	200f      	movs	r0, #15
 80056ee:	183b      	adds	r3, r7, r0
 80056f0:	1dfa      	adds	r2, r7, #7
 80056f2:	7812      	ldrb	r2, [r2, #0]
 80056f4:	210f      	movs	r1, #15
 80056f6:	438a      	bics	r2, r1
 80056f8:	701a      	strb	r2, [r3, #0]
    dl = (cmd << 4) & 0xf0;
 80056fa:	1dfb      	adds	r3, r7, #7
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	011a      	lsls	r2, r3, #4
 8005700:	240e      	movs	r4, #14
 8005702:	193b      	adds	r3, r7, r4
 8005704:	701a      	strb	r2, [r3, #0]
    data[0] = du | 0x0D; // | 0b0000 1101
 8005706:	183b      	adds	r3, r7, r0
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	220d      	movs	r2, #13
 800570c:	4313      	orrs	r3, r2
 800570e:	b2da      	uxtb	r2, r3
 8005710:	2108      	movs	r1, #8
 8005712:	187b      	adds	r3, r7, r1
 8005714:	701a      	strb	r2, [r3, #0]
    data[1] = du | 0x09; // | 0b0000 1001
 8005716:	183b      	adds	r3, r7, r0
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	2209      	movs	r2, #9
 800571c:	4313      	orrs	r3, r2
 800571e:	b2da      	uxtb	r2, r3
 8005720:	187b      	adds	r3, r7, r1
 8005722:	705a      	strb	r2, [r3, #1]
    data[2] = dl | 0x0D; // | 0b0000 1101
 8005724:	193b      	adds	r3, r7, r4
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	220d      	movs	r2, #13
 800572a:	4313      	orrs	r3, r2
 800572c:	b2da      	uxtb	r2, r3
 800572e:	187b      	adds	r3, r7, r1
 8005730:	709a      	strb	r2, [r3, #2]
    data[3] = dl | 0x09; // | 0b0000 1001
 8005732:	193b      	adds	r3, r7, r4
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	2209      	movs	r2, #9
 8005738:	4313      	orrs	r3, r2
 800573a:	b2da      	uxtb	r2, r3
 800573c:	187b      	adds	r3, r7, r1
 800573e:	70da      	strb	r2, [r3, #3]
    HAL_I2C_Master_Transmit(&PCF8574_I2C_HANDLER, PCF8574_I2C_ADDRESS, data, sizeof(data), 0xf);
 8005740:	187a      	adds	r2, r7, r1
 8005742:	4805      	ldr	r0, [pc, #20]	; (8005758 <pcf8574_send_data+0x78>)
 8005744:	230f      	movs	r3, #15
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	2304      	movs	r3, #4
 800574a:	214e      	movs	r1, #78	; 0x4e
 800574c:	f001 fe8a 	bl	8007464 <HAL_I2C_Master_Transmit>
}
 8005750:	46c0      	nop			; (mov r8, r8)
 8005752:	46bd      	mov	sp, r7
 8005754:	b005      	add	sp, #20
 8005756:	bd90      	pop	{r4, r7, pc}
 8005758:	200002f8 	.word	0x200002f8

0800575c <pcf8574_clr>:

void pcf8574_clr()
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
    pcf8574_send_cmd(0x80);
 8005762:	2080      	movs	r0, #128	; 0x80
 8005764:	f7ff ff7e 	bl	8005664 <pcf8574_send_cmd>
    for (int i = 0; i < 80; i++)
 8005768:	2300      	movs	r3, #0
 800576a:	607b      	str	r3, [r7, #4]
 800576c:	e005      	b.n	800577a <pcf8574_clr+0x1e>
    {
        pcf8574_send_data(0x20);
 800576e:	2020      	movs	r0, #32
 8005770:	f7ff ffb6 	bl	80056e0 <pcf8574_send_data>
    for (int i = 0; i < 80; i++)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	3301      	adds	r3, #1
 8005778:	607b      	str	r3, [r7, #4]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b4f      	cmp	r3, #79	; 0x4f
 800577e:	ddf6      	ble.n	800576e <pcf8574_clr+0x12>
    }
}
 8005780:	46c0      	nop			; (mov r8, r8)
 8005782:	46c0      	nop			; (mov r8, r8)
 8005784:	46bd      	mov	sp, r7
 8005786:	b002      	add	sp, #8
 8005788:	bd80      	pop	{r7, pc}

0800578a <pcf8574_cursor>:

void pcf8574_cursor(uint8_t row, uint8_t col)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b082      	sub	sp, #8
 800578e:	af00      	add	r7, sp, #0
 8005790:	0002      	movs	r2, r0
 8005792:	1dfb      	adds	r3, r7, #7
 8005794:	701a      	strb	r2, [r3, #0]
 8005796:	1dbb      	adds	r3, r7, #6
 8005798:	1c0a      	adds	r2, r1, #0
 800579a:	701a      	strb	r2, [r3, #0]
    switch (row)
 800579c:	1dfb      	adds	r3, r7, #7
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	2b03      	cmp	r3, #3
 80057a2:	d020      	beq.n	80057e6 <pcf8574_cursor+0x5c>
 80057a4:	dc27      	bgt.n	80057f6 <pcf8574_cursor+0x6c>
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d015      	beq.n	80057d6 <pcf8574_cursor+0x4c>
 80057aa:	dc24      	bgt.n	80057f6 <pcf8574_cursor+0x6c>
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <pcf8574_cursor+0x2c>
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d008      	beq.n	80057c6 <pcf8574_cursor+0x3c>
 80057b4:	e01f      	b.n	80057f6 <pcf8574_cursor+0x6c>
    {
    case 0:
        col |= 0x80;
 80057b6:	1dbb      	adds	r3, r7, #6
 80057b8:	1dba      	adds	r2, r7, #6
 80057ba:	7812      	ldrb	r2, [r2, #0]
 80057bc:	2180      	movs	r1, #128	; 0x80
 80057be:	4249      	negs	r1, r1
 80057c0:	430a      	orrs	r2, r1
 80057c2:	701a      	strb	r2, [r3, #0]
        break;
 80057c4:	e017      	b.n	80057f6 <pcf8574_cursor+0x6c>
    case 1:
        col |= 0x80 | 0x40;
 80057c6:	1dbb      	adds	r3, r7, #6
 80057c8:	1dba      	adds	r2, r7, #6
 80057ca:	7812      	ldrb	r2, [r2, #0]
 80057cc:	2140      	movs	r1, #64	; 0x40
 80057ce:	4249      	negs	r1, r1
 80057d0:	430a      	orrs	r2, r1
 80057d2:	701a      	strb	r2, [r3, #0]
        break;
 80057d4:	e00f      	b.n	80057f6 <pcf8574_cursor+0x6c>
    case 2:
            col |= 0x80 | 0x14;
 80057d6:	1dbb      	adds	r3, r7, #6
 80057d8:	1dba      	adds	r2, r7, #6
 80057da:	7812      	ldrb	r2, [r2, #0]
 80057dc:	216c      	movs	r1, #108	; 0x6c
 80057de:	4249      	negs	r1, r1
 80057e0:	430a      	orrs	r2, r1
 80057e2:	701a      	strb	r2, [r3, #0]
            break;
 80057e4:	e007      	b.n	80057f6 <pcf8574_cursor+0x6c>
    case 3:
            col |= 0x80 | 0x54;
 80057e6:	1dbb      	adds	r3, r7, #6
 80057e8:	1dba      	adds	r2, r7, #6
 80057ea:	7812      	ldrb	r2, [r2, #0]
 80057ec:	212c      	movs	r1, #44	; 0x2c
 80057ee:	4249      	negs	r1, r1
 80057f0:	430a      	orrs	r2, r1
 80057f2:	701a      	strb	r2, [r3, #0]
            break;
 80057f4:	46c0      	nop			; (mov r8, r8)
    }
    pcf8574_send_cmd(col);
 80057f6:	1dbb      	adds	r3, r7, #6
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	0018      	movs	r0, r3
 80057fc:	f7ff ff32 	bl	8005664 <pcf8574_send_cmd>
}
 8005800:	46c0      	nop			; (mov r8, r8)
 8005802:	46bd      	mov	sp, r7
 8005804:	b002      	add	sp, #8
 8005806:	bd80      	pop	{r7, pc}

08005808 <pcf8574_send_string>:

void pcf8574_send_string(char *str)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
    while (*str)
 8005810:	e006      	b.n	8005820 <pcf8574_send_string+0x18>
        pcf8574_send_data(*str++);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	1c5a      	adds	r2, r3, #1
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	0018      	movs	r0, r3
 800581c:	f7ff ff60 	bl	80056e0 <pcf8574_send_data>
    while (*str)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1f4      	bne.n	8005812 <pcf8574_send_string+0xa>
}
 8005828:	46c0      	nop			; (mov r8, r8)
 800582a:	46c0      	nop			; (mov r8, r8)
 800582c:	46bd      	mov	sp, r7
 800582e:	b002      	add	sp, #8
 8005830:	bd80      	pop	{r7, pc}

08005832 <pcf8574_init>:
        HAL_Delay(50);
    }
}

void pcf8574_init()
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b082      	sub	sp, #8
 8005836:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < 3; i++)
 8005838:	1dfb      	adds	r3, r7, #7
 800583a:	2200      	movs	r2, #0
 800583c:	701a      	strb	r2, [r3, #0]
 800583e:	e00a      	b.n	8005856 <pcf8574_init+0x24>
    {
        pcf8574_send_cmd(0x03); // init sequence
 8005840:	2003      	movs	r0, #3
 8005842:	f7ff ff0f 	bl	8005664 <pcf8574_send_cmd>
        HAL_Delay(5);
 8005846:	2005      	movs	r0, #5
 8005848:	f000 fcf0 	bl	800622c <HAL_Delay>
    for (uint8_t i = 0; i < 3; i++)
 800584c:	1dfb      	adds	r3, r7, #7
 800584e:	781a      	ldrb	r2, [r3, #0]
 8005850:	1dfb      	adds	r3, r7, #7
 8005852:	3201      	adds	r2, #1
 8005854:	701a      	strb	r2, [r3, #0]
 8005856:	1dfb      	adds	r3, r7, #7
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2b02      	cmp	r3, #2
 800585c:	d9f0      	bls.n	8005840 <pcf8574_init+0xe>
    }
    pcf8574_send_cmd(0x02); // 4-bit mode
 800585e:	2002      	movs	r0, #2
 8005860:	f7ff ff00 	bl	8005664 <pcf8574_send_cmd>
    HAL_Delay(100);
 8005864:	2064      	movs	r0, #100	; 0x64
 8005866:	f000 fce1 	bl	800622c <HAL_Delay>
    pcf8574_send_cmd(0x28); // 2 rows, 5x7 points
 800586a:	2028      	movs	r0, #40	; 0x28
 800586c:	f7ff fefa 	bl	8005664 <pcf8574_send_cmd>
    HAL_Delay(1);
 8005870:	2001      	movs	r0, #1
 8005872:	f000 fcdb 	bl	800622c <HAL_Delay>
    pcf8574_send_cmd(0x01); // clear
 8005876:	2001      	movs	r0, #1
 8005878:	f7ff fef4 	bl	8005664 <pcf8574_send_cmd>
    HAL_Delay(2);
 800587c:	2002      	movs	r0, #2
 800587e:	f000 fcd5 	bl	800622c <HAL_Delay>
    pcf8574_send_cmd(0x06); // entry mode
 8005882:	2006      	movs	r0, #6
 8005884:	f7ff feee 	bl	8005664 <pcf8574_send_cmd>
    HAL_Delay(1);
 8005888:	2001      	movs	r0, #1
 800588a:	f000 fccf 	bl	800622c <HAL_Delay>
    //pcf8574_send_cmd(0x08); // disp=off , cur=off, blink=off
    pcf8574_send_cmd(0x0C); // disp=on , cur=off, blink=off
 800588e:	200c      	movs	r0, #12
 8005890:	f7ff fee8 	bl	8005664 <pcf8574_send_cmd>
    //pcf8574_send_cmd(0x0E); // disp=on , cur=on, blink=off
    //pcf8574_send_cmd(0x0F); // disp=on , cur=on, blink=on
}
 8005894:	46c0      	nop			; (mov r8, r8)
 8005896:	46bd      	mov	sp, r7
 8005898:	b002      	add	sp, #8
 800589a:	bd80      	pop	{r7, pc}

0800589c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80058a0:	4b1b      	ldr	r3, [pc, #108]	; (8005910 <MX_SPI2_Init+0x74>)
 80058a2:	4a1c      	ldr	r2, [pc, #112]	; (8005914 <MX_SPI2_Init+0x78>)
 80058a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80058a6:	4b1a      	ldr	r3, [pc, #104]	; (8005910 <MX_SPI2_Init+0x74>)
 80058a8:	2282      	movs	r2, #130	; 0x82
 80058aa:	0052      	lsls	r2, r2, #1
 80058ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80058ae:	4b18      	ldr	r3, [pc, #96]	; (8005910 <MX_SPI2_Init+0x74>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80058b4:	4b16      	ldr	r3, [pc, #88]	; (8005910 <MX_SPI2_Init+0x74>)
 80058b6:	22c0      	movs	r2, #192	; 0xc0
 80058b8:	0092      	lsls	r2, r2, #2
 80058ba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80058bc:	4b14      	ldr	r3, [pc, #80]	; (8005910 <MX_SPI2_Init+0x74>)
 80058be:	2200      	movs	r2, #0
 80058c0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80058c2:	4b13      	ldr	r3, [pc, #76]	; (8005910 <MX_SPI2_Init+0x74>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80058c8:	4b11      	ldr	r3, [pc, #68]	; (8005910 <MX_SPI2_Init+0x74>)
 80058ca:	2280      	movs	r2, #128	; 0x80
 80058cc:	0092      	lsls	r2, r2, #2
 80058ce:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80058d0:	4b0f      	ldr	r3, [pc, #60]	; (8005910 <MX_SPI2_Init+0x74>)
 80058d2:	2208      	movs	r2, #8
 80058d4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80058d6:	4b0e      	ldr	r3, [pc, #56]	; (8005910 <MX_SPI2_Init+0x74>)
 80058d8:	2200      	movs	r2, #0
 80058da:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80058dc:	4b0c      	ldr	r3, [pc, #48]	; (8005910 <MX_SPI2_Init+0x74>)
 80058de:	2200      	movs	r2, #0
 80058e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058e2:	4b0b      	ldr	r3, [pc, #44]	; (8005910 <MX_SPI2_Init+0x74>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80058e8:	4b09      	ldr	r3, [pc, #36]	; (8005910 <MX_SPI2_Init+0x74>)
 80058ea:	2207      	movs	r2, #7
 80058ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80058ee:	4b08      	ldr	r3, [pc, #32]	; (8005910 <MX_SPI2_Init+0x74>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80058f4:	4b06      	ldr	r3, [pc, #24]	; (8005910 <MX_SPI2_Init+0x74>)
 80058f6:	2208      	movs	r2, #8
 80058f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80058fa:	4b05      	ldr	r3, [pc, #20]	; (8005910 <MX_SPI2_Init+0x74>)
 80058fc:	0018      	movs	r0, r3
 80058fe:	f003 fce1 	bl	80092c4 <HAL_SPI_Init>
 8005902:	1e03      	subs	r3, r0, #0
 8005904:	d001      	beq.n	800590a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8005906:	f7ff f90f 	bl	8004b28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800590a:	46c0      	nop			; (mov r8, r8)
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	200008f8 	.word	0x200008f8
 8005914:	40003800 	.word	0x40003800

08005918 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005918:	b590      	push	{r4, r7, lr}
 800591a:	b08b      	sub	sp, #44	; 0x2c
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005920:	2414      	movs	r4, #20
 8005922:	193b      	adds	r3, r7, r4
 8005924:	0018      	movs	r0, r3
 8005926:	2314      	movs	r3, #20
 8005928:	001a      	movs	r2, r3
 800592a:	2100      	movs	r1, #0
 800592c:	f006 fc45 	bl	800c1ba <memset>
  if(spiHandle->Instance==SPI2)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a1c      	ldr	r2, [pc, #112]	; (80059a8 <HAL_SPI_MspInit+0x90>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d132      	bne.n	80059a0 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800593a:	4b1c      	ldr	r3, [pc, #112]	; (80059ac <HAL_SPI_MspInit+0x94>)
 800593c:	69da      	ldr	r2, [r3, #28]
 800593e:	4b1b      	ldr	r3, [pc, #108]	; (80059ac <HAL_SPI_MspInit+0x94>)
 8005940:	2180      	movs	r1, #128	; 0x80
 8005942:	01c9      	lsls	r1, r1, #7
 8005944:	430a      	orrs	r2, r1
 8005946:	61da      	str	r2, [r3, #28]
 8005948:	4b18      	ldr	r3, [pc, #96]	; (80059ac <HAL_SPI_MspInit+0x94>)
 800594a:	69da      	ldr	r2, [r3, #28]
 800594c:	2380      	movs	r3, #128	; 0x80
 800594e:	01db      	lsls	r3, r3, #7
 8005950:	4013      	ands	r3, r2
 8005952:	613b      	str	r3, [r7, #16]
 8005954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005956:	4b15      	ldr	r3, [pc, #84]	; (80059ac <HAL_SPI_MspInit+0x94>)
 8005958:	695a      	ldr	r2, [r3, #20]
 800595a:	4b14      	ldr	r3, [pc, #80]	; (80059ac <HAL_SPI_MspInit+0x94>)
 800595c:	2180      	movs	r1, #128	; 0x80
 800595e:	02c9      	lsls	r1, r1, #11
 8005960:	430a      	orrs	r2, r1
 8005962:	615a      	str	r2, [r3, #20]
 8005964:	4b11      	ldr	r3, [pc, #68]	; (80059ac <HAL_SPI_MspInit+0x94>)
 8005966:	695a      	ldr	r2, [r3, #20]
 8005968:	2380      	movs	r3, #128	; 0x80
 800596a:	02db      	lsls	r3, r3, #11
 800596c:	4013      	ands	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]
 8005970:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8005972:	193b      	adds	r3, r7, r4
 8005974:	22e0      	movs	r2, #224	; 0xe0
 8005976:	0212      	lsls	r2, r2, #8
 8005978:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800597a:	0021      	movs	r1, r4
 800597c:	187b      	adds	r3, r7, r1
 800597e:	2202      	movs	r2, #2
 8005980:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005982:	187b      	adds	r3, r7, r1
 8005984:	2200      	movs	r2, #0
 8005986:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005988:	187b      	adds	r3, r7, r1
 800598a:	2203      	movs	r2, #3
 800598c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800598e:	187b      	adds	r3, r7, r1
 8005990:	2200      	movs	r2, #0
 8005992:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005994:	187b      	adds	r3, r7, r1
 8005996:	4a06      	ldr	r2, [pc, #24]	; (80059b0 <HAL_SPI_MspInit+0x98>)
 8005998:	0019      	movs	r1, r3
 800599a:	0010      	movs	r0, r2
 800599c:	f001 fb36 	bl	800700c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80059a0:	46c0      	nop			; (mov r8, r8)
 80059a2:	46bd      	mov	sp, r7
 80059a4:	b00b      	add	sp, #44	; 0x2c
 80059a6:	bd90      	pop	{r4, r7, pc}
 80059a8:	40003800 	.word	0x40003800
 80059ac:	40021000 	.word	0x40021000
 80059b0:	48000400 	.word	0x48000400

080059b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059ba:	4b0f      	ldr	r3, [pc, #60]	; (80059f8 <HAL_MspInit+0x44>)
 80059bc:	699a      	ldr	r2, [r3, #24]
 80059be:	4b0e      	ldr	r3, [pc, #56]	; (80059f8 <HAL_MspInit+0x44>)
 80059c0:	2101      	movs	r1, #1
 80059c2:	430a      	orrs	r2, r1
 80059c4:	619a      	str	r2, [r3, #24]
 80059c6:	4b0c      	ldr	r3, [pc, #48]	; (80059f8 <HAL_MspInit+0x44>)
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	2201      	movs	r2, #1
 80059cc:	4013      	ands	r3, r2
 80059ce:	607b      	str	r3, [r7, #4]
 80059d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80059d2:	4b09      	ldr	r3, [pc, #36]	; (80059f8 <HAL_MspInit+0x44>)
 80059d4:	69da      	ldr	r2, [r3, #28]
 80059d6:	4b08      	ldr	r3, [pc, #32]	; (80059f8 <HAL_MspInit+0x44>)
 80059d8:	2180      	movs	r1, #128	; 0x80
 80059da:	0549      	lsls	r1, r1, #21
 80059dc:	430a      	orrs	r2, r1
 80059de:	61da      	str	r2, [r3, #28]
 80059e0:	4b05      	ldr	r3, [pc, #20]	; (80059f8 <HAL_MspInit+0x44>)
 80059e2:	69da      	ldr	r2, [r3, #28]
 80059e4:	2380      	movs	r3, #128	; 0x80
 80059e6:	055b      	lsls	r3, r3, #21
 80059e8:	4013      	ands	r3, r2
 80059ea:	603b      	str	r3, [r7, #0]
 80059ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80059ee:	46c0      	nop			; (mov r8, r8)
 80059f0:	46bd      	mov	sp, r7
 80059f2:	b002      	add	sp, #8
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	46c0      	nop			; (mov r8, r8)
 80059f8:	40021000 	.word	0x40021000

080059fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005a00:	e7fe      	b.n	8005a00 <NMI_Handler+0x4>

08005a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a06:	e7fe      	b.n	8005a06 <HardFault_Handler+0x4>

08005a08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005a0c:	46c0      	nop			; (mov r8, r8)
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005a16:	46c0      	nop			; (mov r8, r8)
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a20:	f000 fbe8 	bl	80061f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a24:	46c0      	nop			; (mov r8, r8)
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
	...

08005a2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005a30:	4b03      	ldr	r3, [pc, #12]	; (8005a40 <TIM2_IRQHandler+0x14>)
 8005a32:	0018      	movs	r0, r3
 8005a34:	f004 fb14 	bl	800a060 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005a38:	46c0      	nop			; (mov r8, r8)
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	46c0      	nop			; (mov r8, r8)
 8005a40:	20000960 	.word	0x20000960

08005a44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005a48:	4b03      	ldr	r3, [pc, #12]	; (8005a58 <USART1_IRQHandler+0x14>)
 8005a4a:	0018      	movs	r0, r3
 8005a4c:	f005 f90e 	bl	800ac6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005a50:	46c0      	nop			; (mov r8, r8)
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	46c0      	nop			; (mov r8, r8)
 8005a58:	200009ec 	.word	0x200009ec

08005a5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
  return 1;
 8005a60:	2301      	movs	r3, #1
}
 8005a62:	0018      	movs	r0, r3
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <_kill>:

int _kill(int pid, int sig)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005a72:	f006 fb6f 	bl	800c154 <__errno>
 8005a76:	0003      	movs	r3, r0
 8005a78:	2216      	movs	r2, #22
 8005a7a:	601a      	str	r2, [r3, #0]
  return -1;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	425b      	negs	r3, r3
}
 8005a80:	0018      	movs	r0, r3
 8005a82:	46bd      	mov	sp, r7
 8005a84:	b002      	add	sp, #8
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <_exit>:

void _exit (int status)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005a90:	2301      	movs	r3, #1
 8005a92:	425a      	negs	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	0011      	movs	r1, r2
 8005a98:	0018      	movs	r0, r3
 8005a9a:	f7ff ffe5 	bl	8005a68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005a9e:	e7fe      	b.n	8005a9e <_exit+0x16>

08005aa0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005aac:	2300      	movs	r3, #0
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	e00a      	b.n	8005ac8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005ab2:	e000      	b.n	8005ab6 <_read+0x16>
 8005ab4:	bf00      	nop
 8005ab6:	0001      	movs	r1, r0
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	1c5a      	adds	r2, r3, #1
 8005abc:	60ba      	str	r2, [r7, #8]
 8005abe:	b2ca      	uxtb	r2, r1
 8005ac0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	617b      	str	r3, [r7, #20]
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	dbf0      	blt.n	8005ab2 <_read+0x12>
  }

  return len;
 8005ad0:	687b      	ldr	r3, [r7, #4]
}
 8005ad2:	0018      	movs	r0, r3
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	b006      	add	sp, #24
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b086      	sub	sp, #24
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	60f8      	str	r0, [r7, #12]
 8005ae2:	60b9      	str	r1, [r7, #8]
 8005ae4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	617b      	str	r3, [r7, #20]
 8005aea:	e009      	b.n	8005b00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	1c5a      	adds	r2, r3, #1
 8005af0:	60ba      	str	r2, [r7, #8]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	0018      	movs	r0, r3
 8005af6:	e000      	b.n	8005afa <_write+0x20>
 8005af8:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	3301      	adds	r3, #1
 8005afe:	617b      	str	r3, [r7, #20]
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	dbf1      	blt.n	8005aec <_write+0x12>
  }
  return len;
 8005b08:	687b      	ldr	r3, [r7, #4]
}
 8005b0a:	0018      	movs	r0, r3
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	b006      	add	sp, #24
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <_close>:

int _close(int file)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b082      	sub	sp, #8
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	425b      	negs	r3, r3
}
 8005b1e:	0018      	movs	r0, r3
 8005b20:	46bd      	mov	sp, r7
 8005b22:	b002      	add	sp, #8
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b082      	sub	sp, #8
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2280      	movs	r2, #128	; 0x80
 8005b34:	0192      	lsls	r2, r2, #6
 8005b36:	605a      	str	r2, [r3, #4]
  return 0;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	0018      	movs	r0, r3
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	b002      	add	sp, #8
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <_isatty>:

int _isatty(int file)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b082      	sub	sp, #8
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005b4a:	2301      	movs	r3, #1
}
 8005b4c:	0018      	movs	r0, r3
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	b002      	add	sp, #8
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	0018      	movs	r0, r3
 8005b64:	46bd      	mov	sp, r7
 8005b66:	b004      	add	sp, #16
 8005b68:	bd80      	pop	{r7, pc}
	...

08005b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005b74:	4a14      	ldr	r2, [pc, #80]	; (8005bc8 <_sbrk+0x5c>)
 8005b76:	4b15      	ldr	r3, [pc, #84]	; (8005bcc <_sbrk+0x60>)
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005b80:	4b13      	ldr	r3, [pc, #76]	; (8005bd0 <_sbrk+0x64>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d102      	bne.n	8005b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005b88:	4b11      	ldr	r3, [pc, #68]	; (8005bd0 <_sbrk+0x64>)
 8005b8a:	4a12      	ldr	r2, [pc, #72]	; (8005bd4 <_sbrk+0x68>)
 8005b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005b8e:	4b10      	ldr	r3, [pc, #64]	; (8005bd0 <_sbrk+0x64>)
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	18d3      	adds	r3, r2, r3
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d207      	bcs.n	8005bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005b9c:	f006 fada 	bl	800c154 <__errno>
 8005ba0:	0003      	movs	r3, r0
 8005ba2:	220c      	movs	r2, #12
 8005ba4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	425b      	negs	r3, r3
 8005baa:	e009      	b.n	8005bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005bac:	4b08      	ldr	r3, [pc, #32]	; (8005bd0 <_sbrk+0x64>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005bb2:	4b07      	ldr	r3, [pc, #28]	; (8005bd0 <_sbrk+0x64>)
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	18d2      	adds	r2, r2, r3
 8005bba:	4b05      	ldr	r3, [pc, #20]	; (8005bd0 <_sbrk+0x64>)
 8005bbc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
}
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	b006      	add	sp, #24
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	20004000 	.word	0x20004000
 8005bcc:	00000400 	.word	0x00000400
 8005bd0:	2000095c 	.word	0x2000095c
 8005bd4:	20000e08 	.word	0x20000e08

08005bd8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8005bdc:	46c0      	nop			; (mov r8, r8)
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
	...

08005be4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bea:	2310      	movs	r3, #16
 8005bec:	18fb      	adds	r3, r7, r3
 8005bee:	0018      	movs	r0, r3
 8005bf0:	2308      	movs	r3, #8
 8005bf2:	001a      	movs	r2, r3
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	f006 fae0 	bl	800c1ba <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005bfa:	003b      	movs	r3, r7
 8005bfc:	0018      	movs	r0, r3
 8005bfe:	2310      	movs	r3, #16
 8005c00:	001a      	movs	r2, r3
 8005c02:	2100      	movs	r1, #0
 8005c04:	f006 fad9 	bl	800c1ba <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005c08:	4b23      	ldr	r3, [pc, #140]	; (8005c98 <MX_TIM2_Init+0xb4>)
 8005c0a:	2280      	movs	r2, #128	; 0x80
 8005c0c:	05d2      	lsls	r2, r2, #23
 8005c0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8005c10:	4b21      	ldr	r3, [pc, #132]	; (8005c98 <MX_TIM2_Init+0xb4>)
 8005c12:	222f      	movs	r2, #47	; 0x2f
 8005c14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c16:	4b20      	ldr	r3, [pc, #128]	; (8005c98 <MX_TIM2_Init+0xb4>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8005c1c:	4b1e      	ldr	r3, [pc, #120]	; (8005c98 <MX_TIM2_Init+0xb4>)
 8005c1e:	2201      	movs	r2, #1
 8005c20:	4252      	negs	r2, r2
 8005c22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c24:	4b1c      	ldr	r3, [pc, #112]	; (8005c98 <MX_TIM2_Init+0xb4>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c2a:	4b1b      	ldr	r3, [pc, #108]	; (8005c98 <MX_TIM2_Init+0xb4>)
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8005c30:	4b19      	ldr	r3, [pc, #100]	; (8005c98 <MX_TIM2_Init+0xb4>)
 8005c32:	0018      	movs	r0, r3
 8005c34:	f004 f8b6 	bl	8009da4 <HAL_TIM_IC_Init>
 8005c38:	1e03      	subs	r3, r0, #0
 8005c3a:	d001      	beq.n	8005c40 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8005c3c:	f7fe ff74 	bl	8004b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c40:	2110      	movs	r1, #16
 8005c42:	187b      	adds	r3, r7, r1
 8005c44:	2200      	movs	r2, #0
 8005c46:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c48:	187b      	adds	r3, r7, r1
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005c4e:	187a      	adds	r2, r7, r1
 8005c50:	4b11      	ldr	r3, [pc, #68]	; (8005c98 <MX_TIM2_Init+0xb4>)
 8005c52:	0011      	movs	r1, r2
 8005c54:	0018      	movs	r0, r3
 8005c56:	f004 fdd9 	bl	800a80c <HAL_TIMEx_MasterConfigSynchronization>
 8005c5a:	1e03      	subs	r3, r0, #0
 8005c5c:	d001      	beq.n	8005c62 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8005c5e:	f7fe ff63 	bl	8004b28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005c62:	003b      	movs	r3, r7
 8005c64:	2200      	movs	r2, #0
 8005c66:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005c68:	003b      	movs	r3, r7
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005c6e:	003b      	movs	r3, r7
 8005c70:	2200      	movs	r2, #0
 8005c72:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8005c74:	003b      	movs	r3, r7
 8005c76:	2200      	movs	r2, #0
 8005c78:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8005c7a:	0039      	movs	r1, r7
 8005c7c:	4b06      	ldr	r3, [pc, #24]	; (8005c98 <MX_TIM2_Init+0xb4>)
 8005c7e:	2200      	movs	r2, #0
 8005c80:	0018      	movs	r0, r3
 8005c82:	f004 fb03 	bl	800a28c <HAL_TIM_IC_ConfigChannel>
 8005c86:	1e03      	subs	r3, r0, #0
 8005c88:	d001      	beq.n	8005c8e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8005c8a:	f7fe ff4d 	bl	8004b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005c8e:	46c0      	nop			; (mov r8, r8)
 8005c90:	46bd      	mov	sp, r7
 8005c92:	b006      	add	sp, #24
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	46c0      	nop			; (mov r8, r8)
 8005c98:	20000960 	.word	0x20000960

08005c9c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8005c9c:	b590      	push	{r4, r7, lr}
 8005c9e:	b08b      	sub	sp, #44	; 0x2c
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ca4:	2414      	movs	r4, #20
 8005ca6:	193b      	adds	r3, r7, r4
 8005ca8:	0018      	movs	r0, r3
 8005caa:	2314      	movs	r3, #20
 8005cac:	001a      	movs	r2, r3
 8005cae:	2100      	movs	r1, #0
 8005cb0:	f006 fa83 	bl	800c1ba <memset>
  if(tim_icHandle->Instance==TIM2)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	2380      	movs	r3, #128	; 0x80
 8005cba:	05db      	lsls	r3, r3, #23
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d138      	bne.n	8005d32 <HAL_TIM_IC_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005cc0:	4b1e      	ldr	r3, [pc, #120]	; (8005d3c <HAL_TIM_IC_MspInit+0xa0>)
 8005cc2:	69da      	ldr	r2, [r3, #28]
 8005cc4:	4b1d      	ldr	r3, [pc, #116]	; (8005d3c <HAL_TIM_IC_MspInit+0xa0>)
 8005cc6:	2101      	movs	r1, #1
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	61da      	str	r2, [r3, #28]
 8005ccc:	4b1b      	ldr	r3, [pc, #108]	; (8005d3c <HAL_TIM_IC_MspInit+0xa0>)
 8005cce:	69db      	ldr	r3, [r3, #28]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	613b      	str	r3, [r7, #16]
 8005cd6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cd8:	4b18      	ldr	r3, [pc, #96]	; (8005d3c <HAL_TIM_IC_MspInit+0xa0>)
 8005cda:	695a      	ldr	r2, [r3, #20]
 8005cdc:	4b17      	ldr	r3, [pc, #92]	; (8005d3c <HAL_TIM_IC_MspInit+0xa0>)
 8005cde:	2180      	movs	r1, #128	; 0x80
 8005ce0:	0289      	lsls	r1, r1, #10
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	615a      	str	r2, [r3, #20]
 8005ce6:	4b15      	ldr	r3, [pc, #84]	; (8005d3c <HAL_TIM_IC_MspInit+0xa0>)
 8005ce8:	695a      	ldr	r2, [r3, #20]
 8005cea:	2380      	movs	r3, #128	; 0x80
 8005cec:	029b      	lsls	r3, r3, #10
 8005cee:	4013      	ands	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005cf4:	0021      	movs	r1, r4
 8005cf6:	187b      	adds	r3, r7, r1
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cfc:	187b      	adds	r3, r7, r1
 8005cfe:	2202      	movs	r2, #2
 8005d00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d02:	187b      	adds	r3, r7, r1
 8005d04:	2200      	movs	r2, #0
 8005d06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d08:	187b      	adds	r3, r7, r1
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8005d0e:	187b      	adds	r3, r7, r1
 8005d10:	2202      	movs	r2, #2
 8005d12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d14:	187a      	adds	r2, r7, r1
 8005d16:	2390      	movs	r3, #144	; 0x90
 8005d18:	05db      	lsls	r3, r3, #23
 8005d1a:	0011      	movs	r1, r2
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	f001 f975 	bl	800700c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005d22:	2200      	movs	r2, #0
 8005d24:	2100      	movs	r1, #0
 8005d26:	200f      	movs	r0, #15
 8005d28:	f001 f8c0 	bl	8006eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005d2c:	200f      	movs	r0, #15
 8005d2e:	f001 f8d2 	bl	8006ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005d32:	46c0      	nop			; (mov r8, r8)
 8005d34:	46bd      	mov	sp, r7
 8005d36:	b00b      	add	sp, #44	; 0x2c
 8005d38:	bd90      	pop	{r4, r7, pc}
 8005d3a:	46c0      	nop			; (mov r8, r8)
 8005d3c:	40021000 	.word	0x40021000

08005d40 <MX_TSC_Init>:

TSC_HandleTypeDef htsc;

/* TSC init function */
void MX_TSC_Init(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0

  /* USER CODE END TSC_Init 1 */

  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 8005d44:	4b1d      	ldr	r3, [pc, #116]	; (8005dbc <MX_TSC_Init+0x7c>)
 8005d46:	4a1e      	ldr	r2, [pc, #120]	; (8005dc0 <MX_TSC_Init+0x80>)
 8005d48:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 8005d4a:	4b1c      	ldr	r3, [pc, #112]	; (8005dbc <MX_TSC_Init+0x7c>)
 8005d4c:	2280      	movs	r2, #128	; 0x80
 8005d4e:	0552      	lsls	r2, r2, #21
 8005d50:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 8005d52:	4b1a      	ldr	r3, [pc, #104]	; (8005dbc <MX_TSC_Init+0x7c>)
 8005d54:	2280      	movs	r2, #128	; 0x80
 8005d56:	0452      	lsls	r2, r2, #17
 8005d58:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 8005d5a:	4b18      	ldr	r3, [pc, #96]	; (8005dbc <MX_TSC_Init+0x7c>)
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 8005d60:	4b16      	ldr	r3, [pc, #88]	; (8005dbc <MX_TSC_Init+0x7c>)
 8005d62:	2201      	movs	r2, #1
 8005d64:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 8005d66:	4b15      	ldr	r3, [pc, #84]	; (8005dbc <MX_TSC_Init+0x7c>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8005d6c:	4b13      	ldr	r3, [pc, #76]	; (8005dbc <MX_TSC_Init+0x7c>)
 8005d6e:	2280      	movs	r2, #128	; 0x80
 8005d70:	0192      	lsls	r2, r2, #6
 8005d72:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 8005d74:	4b11      	ldr	r3, [pc, #68]	; (8005dbc <MX_TSC_Init+0x7c>)
 8005d76:	22a0      	movs	r2, #160	; 0xa0
 8005d78:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8005d7a:	4b10      	ldr	r3, [pc, #64]	; (8005dbc <MX_TSC_Init+0x7c>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8005d80:	4b0e      	ldr	r3, [pc, #56]	; (8005dbc <MX_TSC_Init+0x7c>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	625a      	str	r2, [r3, #36]	; 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 8005d86:	4b0d      	ldr	r3, [pc, #52]	; (8005dbc <MX_TSC_Init+0x7c>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	629a      	str	r2, [r3, #40]	; 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 8005d8c:	4b0b      	ldr	r3, [pc, #44]	; (8005dbc <MX_TSC_Init+0x7c>)
 8005d8e:	222c      	movs	r2, #44	; 0x2c
 8005d90:	2100      	movs	r1, #0
 8005d92:	5499      	strb	r1, [r3, r2]
  htsc.Init.ChannelIOs = TSC_GROUP2_IO3;
 8005d94:	4b09      	ldr	r3, [pc, #36]	; (8005dbc <MX_TSC_Init+0x7c>)
 8005d96:	2240      	movs	r2, #64	; 0x40
 8005d98:	631a      	str	r2, [r3, #48]	; 0x30
  htsc.Init.ShieldIOs = 0;
 8005d9a:	4b08      	ldr	r3, [pc, #32]	; (8005dbc <MX_TSC_Init+0x7c>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP2_IO4;
 8005da0:	4b06      	ldr	r3, [pc, #24]	; (8005dbc <MX_TSC_Init+0x7c>)
 8005da2:	2280      	movs	r2, #128	; 0x80
 8005da4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 8005da6:	4b05      	ldr	r3, [pc, #20]	; (8005dbc <MX_TSC_Init+0x7c>)
 8005da8:	0018      	movs	r0, r3
 8005daa:	f004 fd9d 	bl	800a8e8 <HAL_TSC_Init>
 8005dae:	1e03      	subs	r3, r0, #0
 8005db0:	d001      	beq.n	8005db6 <MX_TSC_Init+0x76>
  {
    Error_Handler();
 8005db2:	f7fe feb9 	bl	8004b28 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 8005db6:	46c0      	nop			; (mov r8, r8)
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	200009a8 	.word	0x200009a8
 8005dc0:	40024000 	.word	0x40024000

08005dc4 <HAL_TSC_MspInit>:

void HAL_TSC_MspInit(TSC_HandleTypeDef* tscHandle)
{
 8005dc4:	b590      	push	{r4, r7, lr}
 8005dc6:	b08b      	sub	sp, #44	; 0x2c
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dcc:	2414      	movs	r4, #20
 8005dce:	193b      	adds	r3, r7, r4
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	2314      	movs	r3, #20
 8005dd4:	001a      	movs	r2, r3
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	f006 f9ef 	bl	800c1ba <memset>
  if(tscHandle->Instance==TSC)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a27      	ldr	r2, [pc, #156]	; (8005e80 <HAL_TSC_MspInit+0xbc>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d148      	bne.n	8005e78 <HAL_TSC_MspInit+0xb4>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* TSC clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8005de6:	4b27      	ldr	r3, [pc, #156]	; (8005e84 <HAL_TSC_MspInit+0xc0>)
 8005de8:	695a      	ldr	r2, [r3, #20]
 8005dea:	4b26      	ldr	r3, [pc, #152]	; (8005e84 <HAL_TSC_MspInit+0xc0>)
 8005dec:	2180      	movs	r1, #128	; 0x80
 8005dee:	0449      	lsls	r1, r1, #17
 8005df0:	430a      	orrs	r2, r1
 8005df2:	615a      	str	r2, [r3, #20]
 8005df4:	4b23      	ldr	r3, [pc, #140]	; (8005e84 <HAL_TSC_MspInit+0xc0>)
 8005df6:	695a      	ldr	r2, [r3, #20]
 8005df8:	2380      	movs	r3, #128	; 0x80
 8005dfa:	045b      	lsls	r3, r3, #17
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	613b      	str	r3, [r7, #16]
 8005e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e02:	4b20      	ldr	r3, [pc, #128]	; (8005e84 <HAL_TSC_MspInit+0xc0>)
 8005e04:	695a      	ldr	r2, [r3, #20]
 8005e06:	4b1f      	ldr	r3, [pc, #124]	; (8005e84 <HAL_TSC_MspInit+0xc0>)
 8005e08:	2180      	movs	r1, #128	; 0x80
 8005e0a:	0289      	lsls	r1, r1, #10
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	615a      	str	r2, [r3, #20]
 8005e10:	4b1c      	ldr	r3, [pc, #112]	; (8005e84 <HAL_TSC_MspInit+0xc0>)
 8005e12:	695a      	ldr	r2, [r3, #20]
 8005e14:	2380      	movs	r3, #128	; 0x80
 8005e16:	029b      	lsls	r3, r3, #10
 8005e18:	4013      	ands	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
    /**TSC GPIO Configuration
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005e1e:	193b      	adds	r3, r7, r4
 8005e20:	2240      	movs	r2, #64	; 0x40
 8005e22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e24:	193b      	adds	r3, r7, r4
 8005e26:	2202      	movs	r2, #2
 8005e28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e2a:	193b      	adds	r3, r7, r4
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e30:	193b      	adds	r3, r7, r4
 8005e32:	2200      	movs	r2, #0
 8005e34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8005e36:	193b      	adds	r3, r7, r4
 8005e38:	2203      	movs	r2, #3
 8005e3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e3c:	193a      	adds	r2, r7, r4
 8005e3e:	2390      	movs	r3, #144	; 0x90
 8005e40:	05db      	lsls	r3, r3, #23
 8005e42:	0011      	movs	r1, r2
 8005e44:	0018      	movs	r0, r3
 8005e46:	f001 f8e1 	bl	800700c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005e4a:	0021      	movs	r1, r4
 8005e4c:	187b      	adds	r3, r7, r1
 8005e4e:	2280      	movs	r2, #128	; 0x80
 8005e50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e52:	187b      	adds	r3, r7, r1
 8005e54:	2212      	movs	r2, #18
 8005e56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e58:	187b      	adds	r3, r7, r1
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e5e:	187b      	adds	r3, r7, r1
 8005e60:	2200      	movs	r2, #0
 8005e62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8005e64:	187b      	adds	r3, r7, r1
 8005e66:	2203      	movs	r2, #3
 8005e68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e6a:	187a      	adds	r2, r7, r1
 8005e6c:	2390      	movs	r3, #144	; 0x90
 8005e6e:	05db      	lsls	r3, r3, #23
 8005e70:	0011      	movs	r1, r2
 8005e72:	0018      	movs	r0, r3
 8005e74:	f001 f8ca 	bl	800700c <HAL_GPIO_Init>

  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }
}
 8005e78:	46c0      	nop			; (mov r8, r8)
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	b00b      	add	sp, #44	; 0x2c
 8005e7e:	bd90      	pop	{r4, r7, pc}
 8005e80:	40024000 	.word	0x40024000
 8005e84:	40021000 	.word	0x40021000

08005e88 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005e8c:	4b1a      	ldr	r3, [pc, #104]	; (8005ef8 <MX_USART1_UART_Init+0x70>)
 8005e8e:	4a1b      	ldr	r2, [pc, #108]	; (8005efc <MX_USART1_UART_Init+0x74>)
 8005e90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005e92:	4b19      	ldr	r3, [pc, #100]	; (8005ef8 <MX_USART1_UART_Init+0x70>)
 8005e94:	22e1      	movs	r2, #225	; 0xe1
 8005e96:	0252      	lsls	r2, r2, #9
 8005e98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005e9a:	4b17      	ldr	r3, [pc, #92]	; (8005ef8 <MX_USART1_UART_Init+0x70>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005ea0:	4b15      	ldr	r3, [pc, #84]	; (8005ef8 <MX_USART1_UART_Init+0x70>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005ea6:	4b14      	ldr	r3, [pc, #80]	; (8005ef8 <MX_USART1_UART_Init+0x70>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005eac:	4b12      	ldr	r3, [pc, #72]	; (8005ef8 <MX_USART1_UART_Init+0x70>)
 8005eae:	220c      	movs	r2, #12
 8005eb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005eb2:	4b11      	ldr	r3, [pc, #68]	; (8005ef8 <MX_USART1_UART_Init+0x70>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005eb8:	4b0f      	ldr	r3, [pc, #60]	; (8005ef8 <MX_USART1_UART_Init+0x70>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005ebe:	4b0e      	ldr	r3, [pc, #56]	; (8005ef8 <MX_USART1_UART_Init+0x70>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT
 8005ec4:	4b0c      	ldr	r3, [pc, #48]	; (8005ef8 <MX_USART1_UART_Init+0x70>)
 8005ec6:	2238      	movs	r2, #56	; 0x38
 8005ec8:	625a      	str	r2, [r3, #36]	; 0x24
                              |UART_ADVFEATURE_DMADISABLEONERROR_INIT;
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8005eca:	4b0b      	ldr	r3, [pc, #44]	; (8005ef8 <MX_USART1_UART_Init+0x70>)
 8005ecc:	2280      	movs	r2, #128	; 0x80
 8005ece:	0212      	lsls	r2, r2, #8
 8005ed0:	635a      	str	r2, [r3, #52]	; 0x34
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8005ed2:	4b09      	ldr	r3, [pc, #36]	; (8005ef8 <MX_USART1_UART_Init+0x70>)
 8005ed4:	2280      	movs	r2, #128	; 0x80
 8005ed6:	0152      	lsls	r2, r2, #5
 8005ed8:	639a      	str	r2, [r3, #56]	; 0x38
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8005eda:	4b07      	ldr	r3, [pc, #28]	; (8005ef8 <MX_USART1_UART_Init+0x70>)
 8005edc:	2280      	movs	r2, #128	; 0x80
 8005ede:	0192      	lsls	r2, r2, #6
 8005ee0:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005ee2:	4b05      	ldr	r3, [pc, #20]	; (8005ef8 <MX_USART1_UART_Init+0x70>)
 8005ee4:	0018      	movs	r0, r3
 8005ee6:	f004 fda5 	bl	800aa34 <HAL_UART_Init>
 8005eea:	1e03      	subs	r3, r0, #0
 8005eec:	d001      	beq.n	8005ef2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005eee:	f7fe fe1b 	bl	8004b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005ef2:	46c0      	nop			; (mov r8, r8)
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	200009ec 	.word	0x200009ec
 8005efc:	40013800 	.word	0x40013800

08005f00 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005f04:	4b14      	ldr	r3, [pc, #80]	; (8005f58 <MX_USART3_UART_Init+0x58>)
 8005f06:	4a15      	ldr	r2, [pc, #84]	; (8005f5c <MX_USART3_UART_Init+0x5c>)
 8005f08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8005f0a:	4b13      	ldr	r3, [pc, #76]	; (8005f58 <MX_USART3_UART_Init+0x58>)
 8005f0c:	2296      	movs	r2, #150	; 0x96
 8005f0e:	0192      	lsls	r2, r2, #6
 8005f10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005f12:	4b11      	ldr	r3, [pc, #68]	; (8005f58 <MX_USART3_UART_Init+0x58>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005f18:	4b0f      	ldr	r3, [pc, #60]	; (8005f58 <MX_USART3_UART_Init+0x58>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005f1e:	4b0e      	ldr	r3, [pc, #56]	; (8005f58 <MX_USART3_UART_Init+0x58>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005f24:	4b0c      	ldr	r3, [pc, #48]	; (8005f58 <MX_USART3_UART_Init+0x58>)
 8005f26:	220c      	movs	r2, #12
 8005f28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f2a:	4b0b      	ldr	r3, [pc, #44]	; (8005f58 <MX_USART3_UART_Init+0x58>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f30:	4b09      	ldr	r3, [pc, #36]	; (8005f58 <MX_USART3_UART_Init+0x58>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005f36:	4b08      	ldr	r3, [pc, #32]	; (8005f58 <MX_USART3_UART_Init+0x58>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005f3c:	4b06      	ldr	r3, [pc, #24]	; (8005f58 <MX_USART3_UART_Init+0x58>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005f42:	4b05      	ldr	r3, [pc, #20]	; (8005f58 <MX_USART3_UART_Init+0x58>)
 8005f44:	0018      	movs	r0, r3
 8005f46:	f004 fd75 	bl	800aa34 <HAL_UART_Init>
 8005f4a:	1e03      	subs	r3, r0, #0
 8005f4c:	d001      	beq.n	8005f52 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8005f4e:	f7fe fdeb 	bl	8004b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005f52:	46c0      	nop			; (mov r8, r8)
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	20000a74 	.word	0x20000a74
 8005f5c:	40004800 	.word	0x40004800

08005f60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005f60:	b590      	push	{r4, r7, lr}
 8005f62:	b08d      	sub	sp, #52	; 0x34
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f68:	241c      	movs	r4, #28
 8005f6a:	193b      	adds	r3, r7, r4
 8005f6c:	0018      	movs	r0, r3
 8005f6e:	2314      	movs	r3, #20
 8005f70:	001a      	movs	r2, r3
 8005f72:	2100      	movs	r1, #0
 8005f74:	f006 f921 	bl	800c1ba <memset>
  if(uartHandle->Instance==USART1)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a3d      	ldr	r2, [pc, #244]	; (8006074 <HAL_UART_MspInit+0x114>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d13c      	bne.n	8005ffc <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005f82:	4b3d      	ldr	r3, [pc, #244]	; (8006078 <HAL_UART_MspInit+0x118>)
 8005f84:	699a      	ldr	r2, [r3, #24]
 8005f86:	4b3c      	ldr	r3, [pc, #240]	; (8006078 <HAL_UART_MspInit+0x118>)
 8005f88:	2180      	movs	r1, #128	; 0x80
 8005f8a:	01c9      	lsls	r1, r1, #7
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	619a      	str	r2, [r3, #24]
 8005f90:	4b39      	ldr	r3, [pc, #228]	; (8006078 <HAL_UART_MspInit+0x118>)
 8005f92:	699a      	ldr	r2, [r3, #24]
 8005f94:	2380      	movs	r3, #128	; 0x80
 8005f96:	01db      	lsls	r3, r3, #7
 8005f98:	4013      	ands	r3, r2
 8005f9a:	61bb      	str	r3, [r7, #24]
 8005f9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f9e:	4b36      	ldr	r3, [pc, #216]	; (8006078 <HAL_UART_MspInit+0x118>)
 8005fa0:	695a      	ldr	r2, [r3, #20]
 8005fa2:	4b35      	ldr	r3, [pc, #212]	; (8006078 <HAL_UART_MspInit+0x118>)
 8005fa4:	2180      	movs	r1, #128	; 0x80
 8005fa6:	0289      	lsls	r1, r1, #10
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	615a      	str	r2, [r3, #20]
 8005fac:	4b32      	ldr	r3, [pc, #200]	; (8006078 <HAL_UART_MspInit+0x118>)
 8005fae:	695a      	ldr	r2, [r3, #20]
 8005fb0:	2380      	movs	r3, #128	; 0x80
 8005fb2:	029b      	lsls	r3, r3, #10
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	617b      	str	r3, [r7, #20]
 8005fb8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005fba:	193b      	adds	r3, r7, r4
 8005fbc:	22c0      	movs	r2, #192	; 0xc0
 8005fbe:	00d2      	lsls	r2, r2, #3
 8005fc0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fc2:	0021      	movs	r1, r4
 8005fc4:	187b      	adds	r3, r7, r1
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fca:	187b      	adds	r3, r7, r1
 8005fcc:	2200      	movs	r2, #0
 8005fce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005fd0:	187b      	adds	r3, r7, r1
 8005fd2:	2203      	movs	r2, #3
 8005fd4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8005fd6:	187b      	adds	r3, r7, r1
 8005fd8:	2201      	movs	r2, #1
 8005fda:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fdc:	187a      	adds	r2, r7, r1
 8005fde:	2390      	movs	r3, #144	; 0x90
 8005fe0:	05db      	lsls	r3, r3, #23
 8005fe2:	0011      	movs	r1, r2
 8005fe4:	0018      	movs	r0, r3
 8005fe6:	f001 f811 	bl	800700c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005fea:	2200      	movs	r2, #0
 8005fec:	2100      	movs	r1, #0
 8005fee:	201b      	movs	r0, #27
 8005ff0:	f000 ff5c 	bl	8006eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005ff4:	201b      	movs	r0, #27
 8005ff6:	f000 ff6e 	bl	8006ed6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005ffa:	e037      	b.n	800606c <HAL_UART_MspInit+0x10c>
  else if(uartHandle->Instance==USART3)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a1e      	ldr	r2, [pc, #120]	; (800607c <HAL_UART_MspInit+0x11c>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d132      	bne.n	800606c <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006006:	4b1c      	ldr	r3, [pc, #112]	; (8006078 <HAL_UART_MspInit+0x118>)
 8006008:	69da      	ldr	r2, [r3, #28]
 800600a:	4b1b      	ldr	r3, [pc, #108]	; (8006078 <HAL_UART_MspInit+0x118>)
 800600c:	2180      	movs	r1, #128	; 0x80
 800600e:	02c9      	lsls	r1, r1, #11
 8006010:	430a      	orrs	r2, r1
 8006012:	61da      	str	r2, [r3, #28]
 8006014:	4b18      	ldr	r3, [pc, #96]	; (8006078 <HAL_UART_MspInit+0x118>)
 8006016:	69da      	ldr	r2, [r3, #28]
 8006018:	2380      	movs	r3, #128	; 0x80
 800601a:	02db      	lsls	r3, r3, #11
 800601c:	4013      	ands	r3, r2
 800601e:	613b      	str	r3, [r7, #16]
 8006020:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006022:	4b15      	ldr	r3, [pc, #84]	; (8006078 <HAL_UART_MspInit+0x118>)
 8006024:	695a      	ldr	r2, [r3, #20]
 8006026:	4b14      	ldr	r3, [pc, #80]	; (8006078 <HAL_UART_MspInit+0x118>)
 8006028:	2180      	movs	r1, #128	; 0x80
 800602a:	0309      	lsls	r1, r1, #12
 800602c:	430a      	orrs	r2, r1
 800602e:	615a      	str	r2, [r3, #20]
 8006030:	4b11      	ldr	r3, [pc, #68]	; (8006078 <HAL_UART_MspInit+0x118>)
 8006032:	695a      	ldr	r2, [r3, #20]
 8006034:	2380      	movs	r3, #128	; 0x80
 8006036:	031b      	lsls	r3, r3, #12
 8006038:	4013      	ands	r3, r2
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11;
 800603e:	211c      	movs	r1, #28
 8006040:	187b      	adds	r3, r7, r1
 8006042:	2281      	movs	r2, #129	; 0x81
 8006044:	0112      	lsls	r2, r2, #4
 8006046:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006048:	187b      	adds	r3, r7, r1
 800604a:	2202      	movs	r2, #2
 800604c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800604e:	187b      	adds	r3, r7, r1
 8006050:	2200      	movs	r2, #0
 8006052:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006054:	187b      	adds	r3, r7, r1
 8006056:	2203      	movs	r2, #3
 8006058:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 800605a:	187b      	adds	r3, r7, r1
 800605c:	2201      	movs	r2, #1
 800605e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006060:	187b      	adds	r3, r7, r1
 8006062:	4a07      	ldr	r2, [pc, #28]	; (8006080 <HAL_UART_MspInit+0x120>)
 8006064:	0019      	movs	r1, r3
 8006066:	0010      	movs	r0, r2
 8006068:	f000 ffd0 	bl	800700c <HAL_GPIO_Init>
}
 800606c:	46c0      	nop			; (mov r8, r8)
 800606e:	46bd      	mov	sp, r7
 8006070:	b00d      	add	sp, #52	; 0x34
 8006072:	bd90      	pop	{r4, r7, pc}
 8006074:	40013800 	.word	0x40013800
 8006078:	40021000 	.word	0x40021000
 800607c:	40004800 	.word	0x40004800
 8006080:	48000800 	.word	0x48000800

08006084 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8006088:	4b0f      	ldr	r3, [pc, #60]	; (80060c8 <MX_USB_PCD_Init+0x44>)
 800608a:	4a10      	ldr	r2, [pc, #64]	; (80060cc <MX_USB_PCD_Init+0x48>)
 800608c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800608e:	4b0e      	ldr	r3, [pc, #56]	; (80060c8 <MX_USB_PCD_Init+0x44>)
 8006090:	2208      	movs	r2, #8
 8006092:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006094:	4b0c      	ldr	r3, [pc, #48]	; (80060c8 <MX_USB_PCD_Init+0x44>)
 8006096:	2202      	movs	r2, #2
 8006098:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800609a:	4b0b      	ldr	r3, [pc, #44]	; (80060c8 <MX_USB_PCD_Init+0x44>)
 800609c:	2202      	movs	r2, #2
 800609e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80060a0:	4b09      	ldr	r3, [pc, #36]	; (80060c8 <MX_USB_PCD_Init+0x44>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80060a6:	4b08      	ldr	r3, [pc, #32]	; (80060c8 <MX_USB_PCD_Init+0x44>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80060ac:	4b06      	ldr	r3, [pc, #24]	; (80060c8 <MX_USB_PCD_Init+0x44>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80060b2:	4b05      	ldr	r3, [pc, #20]	; (80060c8 <MX_USB_PCD_Init+0x44>)
 80060b4:	0018      	movs	r0, r3
 80060b6:	f002 f9eb 	bl	8008490 <HAL_PCD_Init>
 80060ba:	1e03      	subs	r3, r0, #0
 80060bc:	d001      	beq.n	80060c2 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80060be:	f7fe fd33 	bl	8004b28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80060c2:	46c0      	nop			; (mov r8, r8)
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	20000afc 	.word	0x20000afc
 80060cc:	40005c00 	.word	0x40005c00

080060d0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a0a      	ldr	r2, [pc, #40]	; (8006108 <HAL_PCD_MspInit+0x38>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d10d      	bne.n	80060fe <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80060e2:	4b0a      	ldr	r3, [pc, #40]	; (800610c <HAL_PCD_MspInit+0x3c>)
 80060e4:	69da      	ldr	r2, [r3, #28]
 80060e6:	4b09      	ldr	r3, [pc, #36]	; (800610c <HAL_PCD_MspInit+0x3c>)
 80060e8:	2180      	movs	r1, #128	; 0x80
 80060ea:	0409      	lsls	r1, r1, #16
 80060ec:	430a      	orrs	r2, r1
 80060ee:	61da      	str	r2, [r3, #28]
 80060f0:	4b06      	ldr	r3, [pc, #24]	; (800610c <HAL_PCD_MspInit+0x3c>)
 80060f2:	69da      	ldr	r2, [r3, #28]
 80060f4:	2380      	movs	r3, #128	; 0x80
 80060f6:	041b      	lsls	r3, r3, #16
 80060f8:	4013      	ands	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]
 80060fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80060fe:	46c0      	nop			; (mov r8, r8)
 8006100:	46bd      	mov	sp, r7
 8006102:	b004      	add	sp, #16
 8006104:	bd80      	pop	{r7, pc}
 8006106:	46c0      	nop			; (mov r8, r8)
 8006108:	40005c00 	.word	0x40005c00
 800610c:	40021000 	.word	0x40021000

08006110 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006110:	480d      	ldr	r0, [pc, #52]	; (8006148 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006112:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006114:	f7ff fd60 	bl	8005bd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006118:	480c      	ldr	r0, [pc, #48]	; (800614c <LoopForever+0x6>)
  ldr r1, =_edata
 800611a:	490d      	ldr	r1, [pc, #52]	; (8006150 <LoopForever+0xa>)
  ldr r2, =_sidata
 800611c:	4a0d      	ldr	r2, [pc, #52]	; (8006154 <LoopForever+0xe>)
  movs r3, #0
 800611e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006120:	e002      	b.n	8006128 <LoopCopyDataInit>

08006122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006126:	3304      	adds	r3, #4

08006128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800612a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800612c:	d3f9      	bcc.n	8006122 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800612e:	4a0a      	ldr	r2, [pc, #40]	; (8006158 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006130:	4c0a      	ldr	r4, [pc, #40]	; (800615c <LoopForever+0x16>)
  movs r3, #0
 8006132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006134:	e001      	b.n	800613a <LoopFillZerobss>

08006136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006138:	3204      	adds	r2, #4

0800613a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800613a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800613c:	d3fb      	bcc.n	8006136 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800613e:	f006 f80f 	bl	800c160 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006142:	f7fe fc57 	bl	80049f4 <main>

08006146 <LoopForever>:

LoopForever:
    b LoopForever
 8006146:	e7fe      	b.n	8006146 <LoopForever>
  ldr   r0, =_estack
 8006148:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800614c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006150:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8006154:	0800f924 	.word	0x0800f924
  ldr r2, =_sbss
 8006158:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800615c:	20000e04 	.word	0x20000e04

08006160 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006160:	e7fe      	b.n	8006160 <ADC1_COMP_IRQHandler>
	...

08006164 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006168:	4b07      	ldr	r3, [pc, #28]	; (8006188 <HAL_Init+0x24>)
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	4b06      	ldr	r3, [pc, #24]	; (8006188 <HAL_Init+0x24>)
 800616e:	2110      	movs	r1, #16
 8006170:	430a      	orrs	r2, r1
 8006172:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8006174:	2000      	movs	r0, #0
 8006176:	f000 f809 	bl	800618c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800617a:	f7ff fc1b 	bl	80059b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	0018      	movs	r0, r3
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	46c0      	nop			; (mov r8, r8)
 8006188:	40022000 	.word	0x40022000

0800618c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800618c:	b590      	push	{r4, r7, lr}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006194:	4b14      	ldr	r3, [pc, #80]	; (80061e8 <HAL_InitTick+0x5c>)
 8006196:	681c      	ldr	r4, [r3, #0]
 8006198:	4b14      	ldr	r3, [pc, #80]	; (80061ec <HAL_InitTick+0x60>)
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	0019      	movs	r1, r3
 800619e:	23fa      	movs	r3, #250	; 0xfa
 80061a0:	0098      	lsls	r0, r3, #2
 80061a2:	f7f9 ffcd 	bl	8000140 <__udivsi3>
 80061a6:	0003      	movs	r3, r0
 80061a8:	0019      	movs	r1, r3
 80061aa:	0020      	movs	r0, r4
 80061ac:	f7f9 ffc8 	bl	8000140 <__udivsi3>
 80061b0:	0003      	movs	r3, r0
 80061b2:	0018      	movs	r0, r3
 80061b4:	f000 fe9f 	bl	8006ef6 <HAL_SYSTICK_Config>
 80061b8:	1e03      	subs	r3, r0, #0
 80061ba:	d001      	beq.n	80061c0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e00f      	b.n	80061e0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b03      	cmp	r3, #3
 80061c4:	d80b      	bhi.n	80061de <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80061c6:	6879      	ldr	r1, [r7, #4]
 80061c8:	2301      	movs	r3, #1
 80061ca:	425b      	negs	r3, r3
 80061cc:	2200      	movs	r2, #0
 80061ce:	0018      	movs	r0, r3
 80061d0:	f000 fe6c 	bl	8006eac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80061d4:	4b06      	ldr	r3, [pc, #24]	; (80061f0 <HAL_InitTick+0x64>)
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80061da:	2300      	movs	r3, #0
 80061dc:	e000      	b.n	80061e0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
}
 80061e0:	0018      	movs	r0, r3
 80061e2:	46bd      	mov	sp, r7
 80061e4:	b003      	add	sp, #12
 80061e6:	bd90      	pop	{r4, r7, pc}
 80061e8:	20000008 	.word	0x20000008
 80061ec:	20000010 	.word	0x20000010
 80061f0:	2000000c 	.word	0x2000000c

080061f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80061f8:	4b05      	ldr	r3, [pc, #20]	; (8006210 <HAL_IncTick+0x1c>)
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	001a      	movs	r2, r3
 80061fe:	4b05      	ldr	r3, [pc, #20]	; (8006214 <HAL_IncTick+0x20>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	18d2      	adds	r2, r2, r3
 8006204:	4b03      	ldr	r3, [pc, #12]	; (8006214 <HAL_IncTick+0x20>)
 8006206:	601a      	str	r2, [r3, #0]
}
 8006208:	46c0      	nop			; (mov r8, r8)
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	46c0      	nop			; (mov r8, r8)
 8006210:	20000010 	.word	0x20000010
 8006214:	20000df0 	.word	0x20000df0

08006218 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	af00      	add	r7, sp, #0
  return uwTick;
 800621c:	4b02      	ldr	r3, [pc, #8]	; (8006228 <HAL_GetTick+0x10>)
 800621e:	681b      	ldr	r3, [r3, #0]
}
 8006220:	0018      	movs	r0, r3
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	46c0      	nop			; (mov r8, r8)
 8006228:	20000df0 	.word	0x20000df0

0800622c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006234:	f7ff fff0 	bl	8006218 <HAL_GetTick>
 8006238:	0003      	movs	r3, r0
 800623a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	3301      	adds	r3, #1
 8006244:	d005      	beq.n	8006252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006246:	4b0a      	ldr	r3, [pc, #40]	; (8006270 <HAL_Delay+0x44>)
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	001a      	movs	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	189b      	adds	r3, r3, r2
 8006250:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8006252:	46c0      	nop			; (mov r8, r8)
 8006254:	f7ff ffe0 	bl	8006218 <HAL_GetTick>
 8006258:	0002      	movs	r2, r0
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	429a      	cmp	r2, r3
 8006262:	d8f7      	bhi.n	8006254 <HAL_Delay+0x28>
  {
  }
}
 8006264:	46c0      	nop			; (mov r8, r8)
 8006266:	46c0      	nop			; (mov r8, r8)
 8006268:	46bd      	mov	sp, r7
 800626a:	b004      	add	sp, #16
 800626c:	bd80      	pop	{r7, pc}
 800626e:	46c0      	nop			; (mov r8, r8)
 8006270:	20000010 	.word	0x20000010

08006274 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800627c:	230f      	movs	r3, #15
 800627e:	18fb      	adds	r3, r7, r3
 8006280:	2200      	movs	r2, #0
 8006282:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8006284:	2300      	movs	r3, #0
 8006286:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e125      	b.n	80064de <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10a      	bne.n	80062b0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2234      	movs	r2, #52	; 0x34
 80062a4:	2100      	movs	r1, #0
 80062a6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	0018      	movs	r0, r3
 80062ac:	f7fd fb1e 	bl	80038ec <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b4:	2210      	movs	r2, #16
 80062b6:	4013      	ands	r3, r2
 80062b8:	d000      	beq.n	80062bc <HAL_ADC_Init+0x48>
 80062ba:	e103      	b.n	80064c4 <HAL_ADC_Init+0x250>
 80062bc:	230f      	movs	r3, #15
 80062be:	18fb      	adds	r3, r7, r3
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d000      	beq.n	80062c8 <HAL_ADC_Init+0x54>
 80062c6:	e0fd      	b.n	80064c4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	2204      	movs	r2, #4
 80062d0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80062d2:	d000      	beq.n	80062d6 <HAL_ADC_Init+0x62>
 80062d4:	e0f6      	b.n	80064c4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062da:	4a83      	ldr	r2, [pc, #524]	; (80064e8 <HAL_ADC_Init+0x274>)
 80062dc:	4013      	ands	r3, r2
 80062de:	2202      	movs	r2, #2
 80062e0:	431a      	orrs	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	2203      	movs	r2, #3
 80062ee:	4013      	ands	r3, r2
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d112      	bne.n	800631a <HAL_ADC_Init+0xa6>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2201      	movs	r2, #1
 80062fc:	4013      	ands	r3, r2
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d009      	beq.n	8006316 <HAL_ADC_Init+0xa2>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68da      	ldr	r2, [r3, #12]
 8006308:	2380      	movs	r3, #128	; 0x80
 800630a:	021b      	lsls	r3, r3, #8
 800630c:	401a      	ands	r2, r3
 800630e:	2380      	movs	r3, #128	; 0x80
 8006310:	021b      	lsls	r3, r3, #8
 8006312:	429a      	cmp	r2, r3
 8006314:	d101      	bne.n	800631a <HAL_ADC_Init+0xa6>
 8006316:	2301      	movs	r3, #1
 8006318:	e000      	b.n	800631c <HAL_ADC_Init+0xa8>
 800631a:	2300      	movs	r3, #0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d116      	bne.n	800634e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	2218      	movs	r2, #24
 8006328:	4393      	bics	r3, r2
 800632a:	0019      	movs	r1, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	689a      	ldr	r2, [r3, #8]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	0899      	lsrs	r1, r3, #2
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68da      	ldr	r2, [r3, #12]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4964      	ldr	r1, [pc, #400]	; (80064ec <HAL_ADC_Init+0x278>)
 800635a:	400a      	ands	r2, r1
 800635c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	7e1b      	ldrb	r3, [r3, #24]
 8006362:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	7e5b      	ldrb	r3, [r3, #25]
 8006368:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800636a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	7e9b      	ldrb	r3, [r3, #26]
 8006370:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8006372:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006378:	2b01      	cmp	r3, #1
 800637a:	d002      	beq.n	8006382 <HAL_ADC_Init+0x10e>
 800637c:	2380      	movs	r3, #128	; 0x80
 800637e:	015b      	lsls	r3, r3, #5
 8006380:	e000      	b.n	8006384 <HAL_ADC_Init+0x110>
 8006382:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006384:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800638a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	2b02      	cmp	r3, #2
 8006392:	d101      	bne.n	8006398 <HAL_ADC_Init+0x124>
 8006394:	2304      	movs	r3, #4
 8006396:	e000      	b.n	800639a <HAL_ADC_Init+0x126>
 8006398:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800639a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2124      	movs	r1, #36	; 0x24
 80063a0:	5c5b      	ldrb	r3, [r3, r1]
 80063a2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80063a4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	7edb      	ldrb	r3, [r3, #27]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d115      	bne.n	80063e0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	7e9b      	ldrb	r3, [r3, #26]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d105      	bne.n	80063c8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	2280      	movs	r2, #128	; 0x80
 80063c0:	0252      	lsls	r2, r2, #9
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60bb      	str	r3, [r7, #8]
 80063c6:	e00b      	b.n	80063e0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063cc:	2220      	movs	r2, #32
 80063ce:	431a      	orrs	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d8:	2201      	movs	r2, #1
 80063da:	431a      	orrs	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	69da      	ldr	r2, [r3, #28]
 80063e4:	23c2      	movs	r3, #194	; 0xc2
 80063e6:	33ff      	adds	r3, #255	; 0xff
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d007      	beq.n	80063fc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80063f4:	4313      	orrs	r3, r2
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68d9      	ldr	r1, [r3, #12]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	430a      	orrs	r2, r1
 800640a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006410:	2380      	movs	r3, #128	; 0x80
 8006412:	055b      	lsls	r3, r3, #21
 8006414:	429a      	cmp	r2, r3
 8006416:	d01b      	beq.n	8006450 <HAL_ADC_Init+0x1dc>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641c:	2b01      	cmp	r3, #1
 800641e:	d017      	beq.n	8006450 <HAL_ADC_Init+0x1dc>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006424:	2b02      	cmp	r3, #2
 8006426:	d013      	beq.n	8006450 <HAL_ADC_Init+0x1dc>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642c:	2b03      	cmp	r3, #3
 800642e:	d00f      	beq.n	8006450 <HAL_ADC_Init+0x1dc>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006434:	2b04      	cmp	r3, #4
 8006436:	d00b      	beq.n	8006450 <HAL_ADC_Init+0x1dc>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643c:	2b05      	cmp	r3, #5
 800643e:	d007      	beq.n	8006450 <HAL_ADC_Init+0x1dc>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006444:	2b06      	cmp	r3, #6
 8006446:	d003      	beq.n	8006450 <HAL_ADC_Init+0x1dc>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644c:	2b07      	cmp	r3, #7
 800644e:	d112      	bne.n	8006476 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	695a      	ldr	r2, [r3, #20]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2107      	movs	r1, #7
 800645c:	438a      	bics	r2, r1
 800645e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6959      	ldr	r1, [r3, #20]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646a:	2207      	movs	r2, #7
 800646c:	401a      	ands	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	4a1c      	ldr	r2, [pc, #112]	; (80064f0 <HAL_ADC_Init+0x27c>)
 800647e:	4013      	ands	r3, r2
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	429a      	cmp	r2, r3
 8006484:	d10b      	bne.n	800649e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006490:	2203      	movs	r2, #3
 8006492:	4393      	bics	r3, r2
 8006494:	2201      	movs	r2, #1
 8006496:	431a      	orrs	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800649c:	e01c      	b.n	80064d8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a2:	2212      	movs	r2, #18
 80064a4:	4393      	bics	r3, r2
 80064a6:	2210      	movs	r2, #16
 80064a8:	431a      	orrs	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b2:	2201      	movs	r2, #1
 80064b4:	431a      	orrs	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80064ba:	230f      	movs	r3, #15
 80064bc:	18fb      	adds	r3, r7, r3
 80064be:	2201      	movs	r2, #1
 80064c0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80064c2:	e009      	b.n	80064d8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c8:	2210      	movs	r2, #16
 80064ca:	431a      	orrs	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80064d0:	230f      	movs	r3, #15
 80064d2:	18fb      	adds	r3, r7, r3
 80064d4:	2201      	movs	r2, #1
 80064d6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80064d8:	230f      	movs	r3, #15
 80064da:	18fb      	adds	r3, r7, r3
 80064dc:	781b      	ldrb	r3, [r3, #0]
}
 80064de:	0018      	movs	r0, r3
 80064e0:	46bd      	mov	sp, r7
 80064e2:	b004      	add	sp, #16
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	46c0      	nop			; (mov r8, r8)
 80064e8:	fffffefd 	.word	0xfffffefd
 80064ec:	fffe0219 	.word	0xfffe0219
 80064f0:	833fffe7 	.word	0x833fffe7

080064f4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80064f4:	b590      	push	{r4, r7, lr}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064fc:	230f      	movs	r3, #15
 80064fe:	18fb      	adds	r3, r7, r3
 8006500:	2200      	movs	r2, #0
 8006502:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	2204      	movs	r2, #4
 800650c:	4013      	ands	r3, r2
 800650e:	d138      	bne.n	8006582 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2234      	movs	r2, #52	; 0x34
 8006514:	5c9b      	ldrb	r3, [r3, r2]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d101      	bne.n	800651e <HAL_ADC_Start+0x2a>
 800651a:	2302      	movs	r3, #2
 800651c:	e038      	b.n	8006590 <HAL_ADC_Start+0x9c>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2234      	movs	r2, #52	; 0x34
 8006522:	2101      	movs	r1, #1
 8006524:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	7e5b      	ldrb	r3, [r3, #25]
 800652a:	2b01      	cmp	r3, #1
 800652c:	d007      	beq.n	800653e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800652e:	230f      	movs	r3, #15
 8006530:	18fc      	adds	r4, r7, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	0018      	movs	r0, r3
 8006536:	f000 fa23 	bl	8006980 <ADC_Enable>
 800653a:	0003      	movs	r3, r0
 800653c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800653e:	230f      	movs	r3, #15
 8006540:	18fb      	adds	r3, r7, r3
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d120      	bne.n	800658a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654c:	4a12      	ldr	r2, [pc, #72]	; (8006598 <HAL_ADC_Start+0xa4>)
 800654e:	4013      	ands	r3, r2
 8006550:	2280      	movs	r2, #128	; 0x80
 8006552:	0052      	lsls	r2, r2, #1
 8006554:	431a      	orrs	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2234      	movs	r2, #52	; 0x34
 8006564:	2100      	movs	r1, #0
 8006566:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	221c      	movs	r2, #28
 800656e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689a      	ldr	r2, [r3, #8]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2104      	movs	r1, #4
 800657c:	430a      	orrs	r2, r1
 800657e:	609a      	str	r2, [r3, #8]
 8006580:	e003      	b.n	800658a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006582:	230f      	movs	r3, #15
 8006584:	18fb      	adds	r3, r7, r3
 8006586:	2202      	movs	r2, #2
 8006588:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800658a:	230f      	movs	r3, #15
 800658c:	18fb      	adds	r3, r7, r3
 800658e:	781b      	ldrb	r3, [r3, #0]
}
 8006590:	0018      	movs	r0, r3
 8006592:	46bd      	mov	sp, r7
 8006594:	b005      	add	sp, #20
 8006596:	bd90      	pop	{r4, r7, pc}
 8006598:	fffff0fe 	.word	0xfffff0fe

0800659c <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 800659c:	b5b0      	push	{r4, r5, r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80065a4:	230f      	movs	r3, #15
 80065a6:	18fb      	adds	r3, r7, r3
 80065a8:	2200      	movs	r2, #0
 80065aa:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2234      	movs	r2, #52	; 0x34
 80065b0:	5c9b      	ldrb	r3, [r3, r2]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d101      	bne.n	80065ba <HAL_ADC_Stop+0x1e>
 80065b6:	2302      	movs	r3, #2
 80065b8:	e029      	b.n	800660e <HAL_ADC_Stop+0x72>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2234      	movs	r2, #52	; 0x34
 80065be:	2101      	movs	r1, #1
 80065c0:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80065c2:	250f      	movs	r5, #15
 80065c4:	197c      	adds	r4, r7, r5
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	0018      	movs	r0, r3
 80065ca:	f000 face 	bl	8006b6a <ADC_ConversionStop>
 80065ce:	0003      	movs	r3, r0
 80065d0:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80065d2:	197b      	adds	r3, r7, r5
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d112      	bne.n	8006600 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80065da:	197c      	adds	r4, r7, r5
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	0018      	movs	r0, r3
 80065e0:	f000 fa52 	bl	8006a88 <ADC_Disable>
 80065e4:	0003      	movs	r3, r0
 80065e6:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80065e8:	197b      	adds	r3, r7, r5
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d107      	bne.n	8006600 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f4:	4a08      	ldr	r2, [pc, #32]	; (8006618 <HAL_ADC_Stop+0x7c>)
 80065f6:	4013      	ands	r3, r2
 80065f8:	2201      	movs	r2, #1
 80065fa:	431a      	orrs	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2234      	movs	r2, #52	; 0x34
 8006604:	2100      	movs	r1, #0
 8006606:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006608:	230f      	movs	r3, #15
 800660a:	18fb      	adds	r3, r7, r3
 800660c:	781b      	ldrb	r3, [r3, #0]
}
 800660e:	0018      	movs	r0, r3
 8006610:	46bd      	mov	sp, r7
 8006612:	b004      	add	sp, #16
 8006614:	bdb0      	pop	{r4, r5, r7, pc}
 8006616:	46c0      	nop			; (mov r8, r8)
 8006618:	fffffefe 	.word	0xfffffefe

0800661c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	2b08      	cmp	r3, #8
 800662c:	d102      	bne.n	8006634 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800662e:	2308      	movs	r3, #8
 8006630:	60fb      	str	r3, [r7, #12]
 8006632:	e014      	b.n	800665e <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	2201      	movs	r2, #1
 800663c:	4013      	ands	r3, r2
 800663e:	2b01      	cmp	r3, #1
 8006640:	d10b      	bne.n	800665a <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006646:	2220      	movs	r2, #32
 8006648:	431a      	orrs	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2234      	movs	r2, #52	; 0x34
 8006652:	2100      	movs	r1, #0
 8006654:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e071      	b.n	800673e <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800665a:	230c      	movs	r3, #12
 800665c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800665e:	f7ff fddb 	bl	8006218 <HAL_GetTick>
 8006662:	0003      	movs	r3, r0
 8006664:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006666:	e01f      	b.n	80066a8 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	3301      	adds	r3, #1
 800666c:	d01c      	beq.n	80066a8 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d007      	beq.n	8006684 <HAL_ADC_PollForConversion+0x68>
 8006674:	f7ff fdd0 	bl	8006218 <HAL_GetTick>
 8006678:	0002      	movs	r2, r0
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	429a      	cmp	r2, r3
 8006682:	d211      	bcs.n	80066a8 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	4013      	ands	r3, r2
 800668e:	d10b      	bne.n	80066a8 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006694:	2204      	movs	r2, #4
 8006696:	431a      	orrs	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2234      	movs	r2, #52	; 0x34
 80066a0:	2100      	movs	r1, #0
 80066a2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e04a      	b.n	800673e <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	4013      	ands	r3, r2
 80066b2:	d0d9      	beq.n	8006668 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b8:	2280      	movs	r2, #128	; 0x80
 80066ba:	0092      	lsls	r2, r2, #2
 80066bc:	431a      	orrs	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68da      	ldr	r2, [r3, #12]
 80066c8:	23c0      	movs	r3, #192	; 0xc0
 80066ca:	011b      	lsls	r3, r3, #4
 80066cc:	4013      	ands	r3, r2
 80066ce:	d12d      	bne.n	800672c <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d129      	bne.n	800672c <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2208      	movs	r2, #8
 80066e0:	4013      	ands	r3, r2
 80066e2:	2b08      	cmp	r3, #8
 80066e4:	d122      	bne.n	800672c <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	2204      	movs	r2, #4
 80066ee:	4013      	ands	r3, r2
 80066f0:	d110      	bne.n	8006714 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	210c      	movs	r1, #12
 80066fe:	438a      	bics	r2, r1
 8006700:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006706:	4a10      	ldr	r2, [pc, #64]	; (8006748 <HAL_ADC_PollForConversion+0x12c>)
 8006708:	4013      	ands	r3, r2
 800670a:	2201      	movs	r2, #1
 800670c:	431a      	orrs	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	639a      	str	r2, [r3, #56]	; 0x38
 8006712:	e00b      	b.n	800672c <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006718:	2220      	movs	r2, #32
 800671a:	431a      	orrs	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006724:	2201      	movs	r2, #1
 8006726:	431a      	orrs	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	7e1b      	ldrb	r3, [r3, #24]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d103      	bne.n	800673c <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	220c      	movs	r2, #12
 800673a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	0018      	movs	r0, r3
 8006740:	46bd      	mov	sp, r7
 8006742:	b004      	add	sp, #16
 8006744:	bd80      	pop	{r7, pc}
 8006746:	46c0      	nop			; (mov r8, r8)
 8006748:	fffffefe 	.word	0xfffffefe

0800674c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800675a:	0018      	movs	r0, r3
 800675c:	46bd      	mov	sp, r7
 800675e:	b002      	add	sp, #8
 8006760:	bd80      	pop	{r7, pc}
	...

08006764 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800676e:	230f      	movs	r3, #15
 8006770:	18fb      	adds	r3, r7, r3
 8006772:	2200      	movs	r2, #0
 8006774:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8006776:	2300      	movs	r3, #0
 8006778:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800677e:	2380      	movs	r3, #128	; 0x80
 8006780:	055b      	lsls	r3, r3, #21
 8006782:	429a      	cmp	r2, r3
 8006784:	d011      	beq.n	80067aa <HAL_ADC_ConfigChannel+0x46>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678a:	2b01      	cmp	r3, #1
 800678c:	d00d      	beq.n	80067aa <HAL_ADC_ConfigChannel+0x46>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006792:	2b02      	cmp	r3, #2
 8006794:	d009      	beq.n	80067aa <HAL_ADC_ConfigChannel+0x46>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679a:	2b03      	cmp	r3, #3
 800679c:	d005      	beq.n	80067aa <HAL_ADC_ConfigChannel+0x46>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a2:	2b04      	cmp	r3, #4
 80067a4:	d001      	beq.n	80067aa <HAL_ADC_ConfigChannel+0x46>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2234      	movs	r2, #52	; 0x34
 80067ae:	5c9b      	ldrb	r3, [r3, r2]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d101      	bne.n	80067b8 <HAL_ADC_ConfigChannel+0x54>
 80067b4:	2302      	movs	r3, #2
 80067b6:	e0d0      	b.n	800695a <HAL_ADC_ConfigChannel+0x1f6>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2234      	movs	r2, #52	; 0x34
 80067bc:	2101      	movs	r1, #1
 80067be:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	2204      	movs	r2, #4
 80067c8:	4013      	ands	r3, r2
 80067ca:	d000      	beq.n	80067ce <HAL_ADC_ConfigChannel+0x6a>
 80067cc:	e0b4      	b.n	8006938 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	4a64      	ldr	r2, [pc, #400]	; (8006964 <HAL_ADC_ConfigChannel+0x200>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d100      	bne.n	80067da <HAL_ADC_ConfigChannel+0x76>
 80067d8:	e082      	b.n	80068e0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2201      	movs	r2, #1
 80067e6:	409a      	lsls	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	430a      	orrs	r2, r1
 80067ee:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f4:	2380      	movs	r3, #128	; 0x80
 80067f6:	055b      	lsls	r3, r3, #21
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d037      	beq.n	800686c <HAL_ADC_ConfigChannel+0x108>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006800:	2b01      	cmp	r3, #1
 8006802:	d033      	beq.n	800686c <HAL_ADC_ConfigChannel+0x108>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006808:	2b02      	cmp	r3, #2
 800680a:	d02f      	beq.n	800686c <HAL_ADC_ConfigChannel+0x108>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006810:	2b03      	cmp	r3, #3
 8006812:	d02b      	beq.n	800686c <HAL_ADC_ConfigChannel+0x108>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006818:	2b04      	cmp	r3, #4
 800681a:	d027      	beq.n	800686c <HAL_ADC_ConfigChannel+0x108>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	2b05      	cmp	r3, #5
 8006822:	d023      	beq.n	800686c <HAL_ADC_ConfigChannel+0x108>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006828:	2b06      	cmp	r3, #6
 800682a:	d01f      	beq.n	800686c <HAL_ADC_ConfigChannel+0x108>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006830:	2b07      	cmp	r3, #7
 8006832:	d01b      	beq.n	800686c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	689a      	ldr	r2, [r3, #8]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	2107      	movs	r1, #7
 8006840:	400b      	ands	r3, r1
 8006842:	429a      	cmp	r2, r3
 8006844:	d012      	beq.n	800686c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	695a      	ldr	r2, [r3, #20]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2107      	movs	r1, #7
 8006852:	438a      	bics	r2, r1
 8006854:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	6959      	ldr	r1, [r3, #20]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	2207      	movs	r2, #7
 8006862:	401a      	ands	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	430a      	orrs	r2, r1
 800686a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2b10      	cmp	r3, #16
 8006872:	d007      	beq.n	8006884 <HAL_ADC_ConfigChannel+0x120>
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2b11      	cmp	r3, #17
 800687a:	d003      	beq.n	8006884 <HAL_ADC_ConfigChannel+0x120>
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2b12      	cmp	r3, #18
 8006882:	d163      	bne.n	800694c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8006884:	4b38      	ldr	r3, [pc, #224]	; (8006968 <HAL_ADC_ConfigChannel+0x204>)
 8006886:	6819      	ldr	r1, [r3, #0]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b10      	cmp	r3, #16
 800688e:	d009      	beq.n	80068a4 <HAL_ADC_ConfigChannel+0x140>
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b11      	cmp	r3, #17
 8006896:	d102      	bne.n	800689e <HAL_ADC_ConfigChannel+0x13a>
 8006898:	2380      	movs	r3, #128	; 0x80
 800689a:	03db      	lsls	r3, r3, #15
 800689c:	e004      	b.n	80068a8 <HAL_ADC_ConfigChannel+0x144>
 800689e:	2380      	movs	r3, #128	; 0x80
 80068a0:	045b      	lsls	r3, r3, #17
 80068a2:	e001      	b.n	80068a8 <HAL_ADC_ConfigChannel+0x144>
 80068a4:	2380      	movs	r3, #128	; 0x80
 80068a6:	041b      	lsls	r3, r3, #16
 80068a8:	4a2f      	ldr	r2, [pc, #188]	; (8006968 <HAL_ADC_ConfigChannel+0x204>)
 80068aa:	430b      	orrs	r3, r1
 80068ac:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2b10      	cmp	r3, #16
 80068b4:	d14a      	bne.n	800694c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80068b6:	4b2d      	ldr	r3, [pc, #180]	; (800696c <HAL_ADC_ConfigChannel+0x208>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	492d      	ldr	r1, [pc, #180]	; (8006970 <HAL_ADC_ConfigChannel+0x20c>)
 80068bc:	0018      	movs	r0, r3
 80068be:	f7f9 fc3f 	bl	8000140 <__udivsi3>
 80068c2:	0003      	movs	r3, r0
 80068c4:	001a      	movs	r2, r3
 80068c6:	0013      	movs	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	189b      	adds	r3, r3, r2
 80068cc:	005b      	lsls	r3, r3, #1
 80068ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80068d0:	e002      	b.n	80068d8 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	3b01      	subs	r3, #1
 80068d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1f9      	bne.n	80068d2 <HAL_ADC_ConfigChannel+0x16e>
 80068de:	e035      	b.n	800694c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2101      	movs	r1, #1
 80068ec:	4099      	lsls	r1, r3
 80068ee:	000b      	movs	r3, r1
 80068f0:	43d9      	mvns	r1, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	400a      	ands	r2, r1
 80068f8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b10      	cmp	r3, #16
 8006900:	d007      	beq.n	8006912 <HAL_ADC_ConfigChannel+0x1ae>
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2b11      	cmp	r3, #17
 8006908:	d003      	beq.n	8006912 <HAL_ADC_ConfigChannel+0x1ae>
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b12      	cmp	r3, #18
 8006910:	d11c      	bne.n	800694c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8006912:	4b15      	ldr	r3, [pc, #84]	; (8006968 <HAL_ADC_ConfigChannel+0x204>)
 8006914:	6819      	ldr	r1, [r3, #0]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b10      	cmp	r3, #16
 800691c:	d007      	beq.n	800692e <HAL_ADC_ConfigChannel+0x1ca>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2b11      	cmp	r3, #17
 8006924:	d101      	bne.n	800692a <HAL_ADC_ConfigChannel+0x1c6>
 8006926:	4b13      	ldr	r3, [pc, #76]	; (8006974 <HAL_ADC_ConfigChannel+0x210>)
 8006928:	e002      	b.n	8006930 <HAL_ADC_ConfigChannel+0x1cc>
 800692a:	4b13      	ldr	r3, [pc, #76]	; (8006978 <HAL_ADC_ConfigChannel+0x214>)
 800692c:	e000      	b.n	8006930 <HAL_ADC_ConfigChannel+0x1cc>
 800692e:	4b13      	ldr	r3, [pc, #76]	; (800697c <HAL_ADC_ConfigChannel+0x218>)
 8006930:	4a0d      	ldr	r2, [pc, #52]	; (8006968 <HAL_ADC_ConfigChannel+0x204>)
 8006932:	400b      	ands	r3, r1
 8006934:	6013      	str	r3, [r2, #0]
 8006936:	e009      	b.n	800694c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693c:	2220      	movs	r2, #32
 800693e:	431a      	orrs	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8006944:	230f      	movs	r3, #15
 8006946:	18fb      	adds	r3, r7, r3
 8006948:	2201      	movs	r2, #1
 800694a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2234      	movs	r2, #52	; 0x34
 8006950:	2100      	movs	r1, #0
 8006952:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006954:	230f      	movs	r3, #15
 8006956:	18fb      	adds	r3, r7, r3
 8006958:	781b      	ldrb	r3, [r3, #0]
}
 800695a:	0018      	movs	r0, r3
 800695c:	46bd      	mov	sp, r7
 800695e:	b004      	add	sp, #16
 8006960:	bd80      	pop	{r7, pc}
 8006962:	46c0      	nop			; (mov r8, r8)
 8006964:	00001001 	.word	0x00001001
 8006968:	40012708 	.word	0x40012708
 800696c:	20000008 	.word	0x20000008
 8006970:	000f4240 	.word	0x000f4240
 8006974:	ffbfffff 	.word	0xffbfffff
 8006978:	feffffff 	.word	0xfeffffff
 800697c:	ff7fffff 	.word	0xff7fffff

08006980 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006988:	2300      	movs	r3, #0
 800698a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800698c:	2300      	movs	r3, #0
 800698e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	2203      	movs	r2, #3
 8006998:	4013      	ands	r3, r2
 800699a:	2b01      	cmp	r3, #1
 800699c:	d112      	bne.n	80069c4 <ADC_Enable+0x44>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2201      	movs	r2, #1
 80069a6:	4013      	ands	r3, r2
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d009      	beq.n	80069c0 <ADC_Enable+0x40>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68da      	ldr	r2, [r3, #12]
 80069b2:	2380      	movs	r3, #128	; 0x80
 80069b4:	021b      	lsls	r3, r3, #8
 80069b6:	401a      	ands	r2, r3
 80069b8:	2380      	movs	r3, #128	; 0x80
 80069ba:	021b      	lsls	r3, r3, #8
 80069bc:	429a      	cmp	r2, r3
 80069be:	d101      	bne.n	80069c4 <ADC_Enable+0x44>
 80069c0:	2301      	movs	r3, #1
 80069c2:	e000      	b.n	80069c6 <ADC_Enable+0x46>
 80069c4:	2300      	movs	r3, #0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d152      	bne.n	8006a70 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	4a2a      	ldr	r2, [pc, #168]	; (8006a7c <ADC_Enable+0xfc>)
 80069d2:	4013      	ands	r3, r2
 80069d4:	d00d      	beq.n	80069f2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069da:	2210      	movs	r2, #16
 80069dc:	431a      	orrs	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e6:	2201      	movs	r2, #1
 80069e8:	431a      	orrs	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e03f      	b.n	8006a72 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	689a      	ldr	r2, [r3, #8]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2101      	movs	r1, #1
 80069fe:	430a      	orrs	r2, r1
 8006a00:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006a02:	4b1f      	ldr	r3, [pc, #124]	; (8006a80 <ADC_Enable+0x100>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	491f      	ldr	r1, [pc, #124]	; (8006a84 <ADC_Enable+0x104>)
 8006a08:	0018      	movs	r0, r3
 8006a0a:	f7f9 fb99 	bl	8000140 <__udivsi3>
 8006a0e:	0003      	movs	r3, r0
 8006a10:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006a12:	e002      	b.n	8006a1a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	3b01      	subs	r3, #1
 8006a18:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1f9      	bne.n	8006a14 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8006a20:	f7ff fbfa 	bl	8006218 <HAL_GetTick>
 8006a24:	0003      	movs	r3, r0
 8006a26:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006a28:	e01b      	b.n	8006a62 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006a2a:	f7ff fbf5 	bl	8006218 <HAL_GetTick>
 8006a2e:	0002      	movs	r2, r0
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d914      	bls.n	8006a62 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	4013      	ands	r3, r2
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d00d      	beq.n	8006a62 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4a:	2210      	movs	r2, #16
 8006a4c:	431a      	orrs	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a56:	2201      	movs	r2, #1
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e007      	b.n	8006a72 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d1dc      	bne.n	8006a2a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	0018      	movs	r0, r3
 8006a74:	46bd      	mov	sp, r7
 8006a76:	b004      	add	sp, #16
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	46c0      	nop			; (mov r8, r8)
 8006a7c:	80000017 	.word	0x80000017
 8006a80:	20000008 	.word	0x20000008
 8006a84:	000f4240 	.word	0x000f4240

08006a88 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a90:	2300      	movs	r3, #0
 8006a92:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	2203      	movs	r2, #3
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d112      	bne.n	8006ac8 <ADC_Disable+0x40>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	4013      	ands	r3, r2
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d009      	beq.n	8006ac4 <ADC_Disable+0x3c>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68da      	ldr	r2, [r3, #12]
 8006ab6:	2380      	movs	r3, #128	; 0x80
 8006ab8:	021b      	lsls	r3, r3, #8
 8006aba:	401a      	ands	r2, r3
 8006abc:	2380      	movs	r3, #128	; 0x80
 8006abe:	021b      	lsls	r3, r3, #8
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d101      	bne.n	8006ac8 <ADC_Disable+0x40>
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e000      	b.n	8006aca <ADC_Disable+0x42>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d048      	beq.n	8006b60 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	2205      	movs	r2, #5
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d110      	bne.n	8006afe <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689a      	ldr	r2, [r3, #8]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2102      	movs	r1, #2
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	609a      	str	r2, [r3, #8]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2203      	movs	r2, #3
 8006af2:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006af4:	f7ff fb90 	bl	8006218 <HAL_GetTick>
 8006af8:	0003      	movs	r3, r0
 8006afa:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006afc:	e029      	b.n	8006b52 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b02:	2210      	movs	r2, #16
 8006b04:	431a      	orrs	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b0e:	2201      	movs	r2, #1
 8006b10:	431a      	orrs	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e023      	b.n	8006b62 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006b1a:	f7ff fb7d 	bl	8006218 <HAL_GetTick>
 8006b1e:	0002      	movs	r2, r0
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d914      	bls.n	8006b52 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	4013      	ands	r3, r2
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d10d      	bne.n	8006b52 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3a:	2210      	movs	r2, #16
 8006b3c:	431a      	orrs	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b46:	2201      	movs	r2, #1
 8006b48:	431a      	orrs	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e007      	b.n	8006b62 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d0dc      	beq.n	8006b1a <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	0018      	movs	r0, r3
 8006b64:	46bd      	mov	sp, r7
 8006b66:	b004      	add	sp, #16
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b72:	2300      	movs	r3, #0
 8006b74:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	2204      	movs	r2, #4
 8006b7e:	4013      	ands	r3, r2
 8006b80:	d03a      	beq.n	8006bf8 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	2204      	movs	r2, #4
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	2b04      	cmp	r3, #4
 8006b8e:	d10d      	bne.n	8006bac <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	2202      	movs	r2, #2
 8006b98:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8006b9a:	d107      	bne.n	8006bac <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	689a      	ldr	r2, [r3, #8]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2110      	movs	r1, #16
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006bac:	f7ff fb34 	bl	8006218 <HAL_GetTick>
 8006bb0:	0003      	movs	r3, r0
 8006bb2:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006bb4:	e01a      	b.n	8006bec <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006bb6:	f7ff fb2f 	bl	8006218 <HAL_GetTick>
 8006bba:	0002      	movs	r2, r0
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d913      	bls.n	8006bec <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	2204      	movs	r2, #4
 8006bcc:	4013      	ands	r3, r2
 8006bce:	d00d      	beq.n	8006bec <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd4:	2210      	movs	r2, #16
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be0:	2201      	movs	r2, #1
 8006be2:	431a      	orrs	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e006      	b.n	8006bfa <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	2204      	movs	r2, #4
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	d1de      	bne.n	8006bb6 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	0018      	movs	r0, r3
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	b004      	add	sp, #16
 8006c00:	bd80      	pop	{r7, pc}
	...

08006c04 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c0c:	2317      	movs	r3, #23
 8006c0e:	18fb      	adds	r3, r7, r3
 8006c10:	2200      	movs	r2, #0
 8006c12:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8006c18:	2300      	movs	r3, #0
 8006c1a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2234      	movs	r2, #52	; 0x34
 8006c20:	5c9b      	ldrb	r3, [r3, r2]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d101      	bne.n	8006c2a <HAL_ADCEx_Calibration_Start+0x26>
 8006c26:	2302      	movs	r3, #2
 8006c28:	e08d      	b.n	8006d46 <HAL_ADCEx_Calibration_Start+0x142>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2234      	movs	r2, #52	; 0x34
 8006c2e:	2101      	movs	r1, #1
 8006c30:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	2203      	movs	r2, #3
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d112      	bne.n	8006c66 <HAL_ADCEx_Calibration_Start+0x62>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2201      	movs	r2, #1
 8006c48:	4013      	ands	r3, r2
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d009      	beq.n	8006c62 <HAL_ADCEx_Calibration_Start+0x5e>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68da      	ldr	r2, [r3, #12]
 8006c54:	2380      	movs	r3, #128	; 0x80
 8006c56:	021b      	lsls	r3, r3, #8
 8006c58:	401a      	ands	r2, r3
 8006c5a:	2380      	movs	r3, #128	; 0x80
 8006c5c:	021b      	lsls	r3, r3, #8
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d101      	bne.n	8006c66 <HAL_ADCEx_Calibration_Start+0x62>
 8006c62:	2301      	movs	r3, #1
 8006c64:	e000      	b.n	8006c68 <HAL_ADCEx_Calibration_Start+0x64>
 8006c66:	2300      	movs	r3, #0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d15b      	bne.n	8006d24 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c70:	4a37      	ldr	r2, [pc, #220]	; (8006d50 <HAL_ADCEx_Calibration_Start+0x14c>)
 8006c72:	4013      	ands	r3, r2
 8006c74:	2202      	movs	r2, #2
 8006c76:	431a      	orrs	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	2203      	movs	r2, #3
 8006c84:	4013      	ands	r3, r2
 8006c86:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68da      	ldr	r2, [r3, #12]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2103      	movs	r1, #3
 8006c94:	438a      	bics	r2, r1
 8006c96:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	689a      	ldr	r2, [r3, #8]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2180      	movs	r1, #128	; 0x80
 8006ca4:	0609      	lsls	r1, r1, #24
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8006caa:	f7ff fab5 	bl	8006218 <HAL_GetTick>
 8006cae:	0003      	movs	r3, r0
 8006cb0:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006cb2:	e01d      	b.n	8006cf0 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8006cb4:	f7ff fab0 	bl	8006218 <HAL_GetTick>
 8006cb8:	0002      	movs	r2, r0
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d916      	bls.n	8006cf0 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	0fdb      	lsrs	r3, r3, #31
 8006cca:	07da      	lsls	r2, r3, #31
 8006ccc:	2380      	movs	r3, #128	; 0x80
 8006cce:	061b      	lsls	r3, r3, #24
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d10d      	bne.n	8006cf0 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd8:	2212      	movs	r2, #18
 8006cda:	4393      	bics	r3, r2
 8006cdc:	2210      	movs	r2, #16
 8006cde:	431a      	orrs	r2, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2234      	movs	r2, #52	; 0x34
 8006ce8:	2100      	movs	r1, #0
 8006cea:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e02a      	b.n	8006d46 <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	0fdb      	lsrs	r3, r3, #31
 8006cf8:	07da      	lsls	r2, r3, #31
 8006cfa:	2380      	movs	r3, #128	; 0x80
 8006cfc:	061b      	lsls	r3, r3, #24
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d0d8      	beq.n	8006cb4 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68d9      	ldr	r1, [r3, #12]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d16:	2203      	movs	r2, #3
 8006d18:	4393      	bics	r3, r2
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	431a      	orrs	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	639a      	str	r2, [r3, #56]	; 0x38
 8006d22:	e009      	b.n	8006d38 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d28:	2220      	movs	r2, #32
 8006d2a:	431a      	orrs	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8006d30:	2317      	movs	r3, #23
 8006d32:	18fb      	adds	r3, r7, r3
 8006d34:	2201      	movs	r2, #1
 8006d36:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2234      	movs	r2, #52	; 0x34
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006d40:	2317      	movs	r3, #23
 8006d42:	18fb      	adds	r3, r7, r3
 8006d44:	781b      	ldrb	r3, [r3, #0]
}
 8006d46:	0018      	movs	r0, r3
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	b006      	add	sp, #24
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	46c0      	nop			; (mov r8, r8)
 8006d50:	fffffefd 	.word	0xfffffefd

08006d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	0002      	movs	r2, r0
 8006d5c:	1dfb      	adds	r3, r7, #7
 8006d5e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006d60:	1dfb      	adds	r3, r7, #7
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	2b7f      	cmp	r3, #127	; 0x7f
 8006d66:	d809      	bhi.n	8006d7c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d68:	1dfb      	adds	r3, r7, #7
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	001a      	movs	r2, r3
 8006d6e:	231f      	movs	r3, #31
 8006d70:	401a      	ands	r2, r3
 8006d72:	4b04      	ldr	r3, [pc, #16]	; (8006d84 <__NVIC_EnableIRQ+0x30>)
 8006d74:	2101      	movs	r1, #1
 8006d76:	4091      	lsls	r1, r2
 8006d78:	000a      	movs	r2, r1
 8006d7a:	601a      	str	r2, [r3, #0]
  }
}
 8006d7c:	46c0      	nop			; (mov r8, r8)
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	b002      	add	sp, #8
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	e000e100 	.word	0xe000e100

08006d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006d88:	b590      	push	{r4, r7, lr}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	0002      	movs	r2, r0
 8006d90:	6039      	str	r1, [r7, #0]
 8006d92:	1dfb      	adds	r3, r7, #7
 8006d94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006d96:	1dfb      	adds	r3, r7, #7
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	2b7f      	cmp	r3, #127	; 0x7f
 8006d9c:	d828      	bhi.n	8006df0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006d9e:	4a2f      	ldr	r2, [pc, #188]	; (8006e5c <__NVIC_SetPriority+0xd4>)
 8006da0:	1dfb      	adds	r3, r7, #7
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	b25b      	sxtb	r3, r3
 8006da6:	089b      	lsrs	r3, r3, #2
 8006da8:	33c0      	adds	r3, #192	; 0xc0
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	589b      	ldr	r3, [r3, r2]
 8006dae:	1dfa      	adds	r2, r7, #7
 8006db0:	7812      	ldrb	r2, [r2, #0]
 8006db2:	0011      	movs	r1, r2
 8006db4:	2203      	movs	r2, #3
 8006db6:	400a      	ands	r2, r1
 8006db8:	00d2      	lsls	r2, r2, #3
 8006dba:	21ff      	movs	r1, #255	; 0xff
 8006dbc:	4091      	lsls	r1, r2
 8006dbe:	000a      	movs	r2, r1
 8006dc0:	43d2      	mvns	r2, r2
 8006dc2:	401a      	ands	r2, r3
 8006dc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	019b      	lsls	r3, r3, #6
 8006dca:	22ff      	movs	r2, #255	; 0xff
 8006dcc:	401a      	ands	r2, r3
 8006dce:	1dfb      	adds	r3, r7, #7
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	0018      	movs	r0, r3
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	4003      	ands	r3, r0
 8006dd8:	00db      	lsls	r3, r3, #3
 8006dda:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006ddc:	481f      	ldr	r0, [pc, #124]	; (8006e5c <__NVIC_SetPriority+0xd4>)
 8006dde:	1dfb      	adds	r3, r7, #7
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	b25b      	sxtb	r3, r3
 8006de4:	089b      	lsrs	r3, r3, #2
 8006de6:	430a      	orrs	r2, r1
 8006de8:	33c0      	adds	r3, #192	; 0xc0
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006dee:	e031      	b.n	8006e54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006df0:	4a1b      	ldr	r2, [pc, #108]	; (8006e60 <__NVIC_SetPriority+0xd8>)
 8006df2:	1dfb      	adds	r3, r7, #7
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	0019      	movs	r1, r3
 8006df8:	230f      	movs	r3, #15
 8006dfa:	400b      	ands	r3, r1
 8006dfc:	3b08      	subs	r3, #8
 8006dfe:	089b      	lsrs	r3, r3, #2
 8006e00:	3306      	adds	r3, #6
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	18d3      	adds	r3, r2, r3
 8006e06:	3304      	adds	r3, #4
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	1dfa      	adds	r2, r7, #7
 8006e0c:	7812      	ldrb	r2, [r2, #0]
 8006e0e:	0011      	movs	r1, r2
 8006e10:	2203      	movs	r2, #3
 8006e12:	400a      	ands	r2, r1
 8006e14:	00d2      	lsls	r2, r2, #3
 8006e16:	21ff      	movs	r1, #255	; 0xff
 8006e18:	4091      	lsls	r1, r2
 8006e1a:	000a      	movs	r2, r1
 8006e1c:	43d2      	mvns	r2, r2
 8006e1e:	401a      	ands	r2, r3
 8006e20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	019b      	lsls	r3, r3, #6
 8006e26:	22ff      	movs	r2, #255	; 0xff
 8006e28:	401a      	ands	r2, r3
 8006e2a:	1dfb      	adds	r3, r7, #7
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	0018      	movs	r0, r3
 8006e30:	2303      	movs	r3, #3
 8006e32:	4003      	ands	r3, r0
 8006e34:	00db      	lsls	r3, r3, #3
 8006e36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006e38:	4809      	ldr	r0, [pc, #36]	; (8006e60 <__NVIC_SetPriority+0xd8>)
 8006e3a:	1dfb      	adds	r3, r7, #7
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	001c      	movs	r4, r3
 8006e40:	230f      	movs	r3, #15
 8006e42:	4023      	ands	r3, r4
 8006e44:	3b08      	subs	r3, #8
 8006e46:	089b      	lsrs	r3, r3, #2
 8006e48:	430a      	orrs	r2, r1
 8006e4a:	3306      	adds	r3, #6
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	18c3      	adds	r3, r0, r3
 8006e50:	3304      	adds	r3, #4
 8006e52:	601a      	str	r2, [r3, #0]
}
 8006e54:	46c0      	nop			; (mov r8, r8)
 8006e56:	46bd      	mov	sp, r7
 8006e58:	b003      	add	sp, #12
 8006e5a:	bd90      	pop	{r4, r7, pc}
 8006e5c:	e000e100 	.word	0xe000e100
 8006e60:	e000ed00 	.word	0xe000ed00

08006e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	1e5a      	subs	r2, r3, #1
 8006e70:	2380      	movs	r3, #128	; 0x80
 8006e72:	045b      	lsls	r3, r3, #17
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d301      	bcc.n	8006e7c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e010      	b.n	8006e9e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ea8 <SysTick_Config+0x44>)
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	3a01      	subs	r2, #1
 8006e82:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006e84:	2301      	movs	r3, #1
 8006e86:	425b      	negs	r3, r3
 8006e88:	2103      	movs	r1, #3
 8006e8a:	0018      	movs	r0, r3
 8006e8c:	f7ff ff7c 	bl	8006d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e90:	4b05      	ldr	r3, [pc, #20]	; (8006ea8 <SysTick_Config+0x44>)
 8006e92:	2200      	movs	r2, #0
 8006e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e96:	4b04      	ldr	r3, [pc, #16]	; (8006ea8 <SysTick_Config+0x44>)
 8006e98:	2207      	movs	r2, #7
 8006e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	0018      	movs	r0, r3
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	b002      	add	sp, #8
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	46c0      	nop			; (mov r8, r8)
 8006ea8:	e000e010 	.word	0xe000e010

08006eac <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60b9      	str	r1, [r7, #8]
 8006eb4:	607a      	str	r2, [r7, #4]
 8006eb6:	210f      	movs	r1, #15
 8006eb8:	187b      	adds	r3, r7, r1
 8006eba:	1c02      	adds	r2, r0, #0
 8006ebc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8006ebe:	68ba      	ldr	r2, [r7, #8]
 8006ec0:	187b      	adds	r3, r7, r1
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	b25b      	sxtb	r3, r3
 8006ec6:	0011      	movs	r1, r2
 8006ec8:	0018      	movs	r0, r3
 8006eca:	f7ff ff5d 	bl	8006d88 <__NVIC_SetPriority>
}
 8006ece:	46c0      	nop			; (mov r8, r8)
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	b004      	add	sp, #16
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b082      	sub	sp, #8
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	0002      	movs	r2, r0
 8006ede:	1dfb      	adds	r3, r7, #7
 8006ee0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ee2:	1dfb      	adds	r3, r7, #7
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	b25b      	sxtb	r3, r3
 8006ee8:	0018      	movs	r0, r3
 8006eea:	f7ff ff33 	bl	8006d54 <__NVIC_EnableIRQ>
}
 8006eee:	46c0      	nop			; (mov r8, r8)
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	b002      	add	sp, #8
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b082      	sub	sp, #8
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	0018      	movs	r0, r3
 8006f02:	f7ff ffaf 	bl	8006e64 <SysTick_Config>
 8006f06:	0003      	movs	r3, r0
}
 8006f08:	0018      	movs	r0, r3
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	b002      	add	sp, #8
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2221      	movs	r2, #33	; 0x21
 8006f1c:	5c9b      	ldrb	r3, [r3, r2]
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d008      	beq.n	8006f36 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2204      	movs	r2, #4
 8006f28:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2220      	movs	r2, #32
 8006f2e:	2100      	movs	r1, #0
 8006f30:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e020      	b.n	8006f78 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	210e      	movs	r1, #14
 8006f42:	438a      	bics	r2, r1
 8006f44:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2101      	movs	r1, #1
 8006f52:	438a      	bics	r2, r1
 8006f54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f5e:	2101      	movs	r1, #1
 8006f60:	4091      	lsls	r1, r2
 8006f62:	000a      	movs	r2, r1
 8006f64:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2221      	movs	r2, #33	; 0x21
 8006f6a:	2101      	movs	r1, #1
 8006f6c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2220      	movs	r2, #32
 8006f72:	2100      	movs	r1, #0
 8006f74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	0018      	movs	r0, r3
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	b002      	add	sp, #8
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f88:	210f      	movs	r1, #15
 8006f8a:	187b      	adds	r3, r7, r1
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2221      	movs	r2, #33	; 0x21
 8006f94:	5c9b      	ldrb	r3, [r3, r2]
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d006      	beq.n	8006faa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2204      	movs	r2, #4
 8006fa0:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8006fa2:	187b      	adds	r3, r7, r1
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	701a      	strb	r2, [r3, #0]
 8006fa8:	e028      	b.n	8006ffc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	210e      	movs	r1, #14
 8006fb6:	438a      	bics	r2, r1
 8006fb8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	438a      	bics	r2, r1
 8006fc8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd2:	2101      	movs	r1, #1
 8006fd4:	4091      	lsls	r1, r2
 8006fd6:	000a      	movs	r2, r1
 8006fd8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2221      	movs	r2, #33	; 0x21
 8006fde:	2101      	movs	r1, #1
 8006fe0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d004      	beq.n	8006ffc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	0010      	movs	r0, r2
 8006ffa:	4798      	blx	r3
    }
  }
  return status;
 8006ffc:	230f      	movs	r3, #15
 8006ffe:	18fb      	adds	r3, r7, r3
 8007000:	781b      	ldrb	r3, [r3, #0]
}
 8007002:	0018      	movs	r0, r3
 8007004:	46bd      	mov	sp, r7
 8007006:	b004      	add	sp, #16
 8007008:	bd80      	pop	{r7, pc}
	...

0800700c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b086      	sub	sp, #24
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007016:	2300      	movs	r3, #0
 8007018:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800701a:	e155      	b.n	80072c8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2101      	movs	r1, #1
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	4091      	lsls	r1, r2
 8007026:	000a      	movs	r2, r1
 8007028:	4013      	ands	r3, r2
 800702a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d100      	bne.n	8007034 <HAL_GPIO_Init+0x28>
 8007032:	e146      	b.n	80072c2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	2203      	movs	r2, #3
 800703a:	4013      	ands	r3, r2
 800703c:	2b01      	cmp	r3, #1
 800703e:	d005      	beq.n	800704c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	2203      	movs	r2, #3
 8007046:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007048:	2b02      	cmp	r3, #2
 800704a:	d130      	bne.n	80070ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	005b      	lsls	r3, r3, #1
 8007056:	2203      	movs	r2, #3
 8007058:	409a      	lsls	r2, r3
 800705a:	0013      	movs	r3, r2
 800705c:	43da      	mvns	r2, r3
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	4013      	ands	r3, r2
 8007062:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	68da      	ldr	r2, [r3, #12]
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	005b      	lsls	r3, r3, #1
 800706c:	409a      	lsls	r2, r3
 800706e:	0013      	movs	r3, r2
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	4313      	orrs	r3, r2
 8007074:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007082:	2201      	movs	r2, #1
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	409a      	lsls	r2, r3
 8007088:	0013      	movs	r3, r2
 800708a:	43da      	mvns	r2, r3
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	4013      	ands	r3, r2
 8007090:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	091b      	lsrs	r3, r3, #4
 8007098:	2201      	movs	r2, #1
 800709a:	401a      	ands	r2, r3
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	409a      	lsls	r2, r3
 80070a0:	0013      	movs	r3, r2
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	2203      	movs	r2, #3
 80070b4:	4013      	ands	r3, r2
 80070b6:	2b03      	cmp	r3, #3
 80070b8:	d017      	beq.n	80070ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	005b      	lsls	r3, r3, #1
 80070c4:	2203      	movs	r2, #3
 80070c6:	409a      	lsls	r2, r3
 80070c8:	0013      	movs	r3, r2
 80070ca:	43da      	mvns	r2, r3
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	4013      	ands	r3, r2
 80070d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	689a      	ldr	r2, [r3, #8]
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	005b      	lsls	r3, r3, #1
 80070da:	409a      	lsls	r2, r3
 80070dc:	0013      	movs	r3, r2
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	2203      	movs	r2, #3
 80070f0:	4013      	ands	r3, r2
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d123      	bne.n	800713e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	08da      	lsrs	r2, r3, #3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	3208      	adds	r2, #8
 80070fe:	0092      	lsls	r2, r2, #2
 8007100:	58d3      	ldr	r3, [r2, r3]
 8007102:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	2207      	movs	r2, #7
 8007108:	4013      	ands	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	220f      	movs	r2, #15
 800710e:	409a      	lsls	r2, r3
 8007110:	0013      	movs	r3, r2
 8007112:	43da      	mvns	r2, r3
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	4013      	ands	r3, r2
 8007118:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	691a      	ldr	r2, [r3, #16]
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2107      	movs	r1, #7
 8007122:	400b      	ands	r3, r1
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	409a      	lsls	r2, r3
 8007128:	0013      	movs	r3, r2
 800712a:	693a      	ldr	r2, [r7, #16]
 800712c:	4313      	orrs	r3, r2
 800712e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	08da      	lsrs	r2, r3, #3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	3208      	adds	r2, #8
 8007138:	0092      	lsls	r2, r2, #2
 800713a:	6939      	ldr	r1, [r7, #16]
 800713c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	005b      	lsls	r3, r3, #1
 8007148:	2203      	movs	r2, #3
 800714a:	409a      	lsls	r2, r3
 800714c:	0013      	movs	r3, r2
 800714e:	43da      	mvns	r2, r3
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	4013      	ands	r3, r2
 8007154:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	2203      	movs	r2, #3
 800715c:	401a      	ands	r2, r3
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	005b      	lsls	r3, r3, #1
 8007162:	409a      	lsls	r2, r3
 8007164:	0013      	movs	r3, r2
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	4313      	orrs	r3, r2
 800716a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	693a      	ldr	r2, [r7, #16]
 8007170:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	23c0      	movs	r3, #192	; 0xc0
 8007178:	029b      	lsls	r3, r3, #10
 800717a:	4013      	ands	r3, r2
 800717c:	d100      	bne.n	8007180 <HAL_GPIO_Init+0x174>
 800717e:	e0a0      	b.n	80072c2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007180:	4b57      	ldr	r3, [pc, #348]	; (80072e0 <HAL_GPIO_Init+0x2d4>)
 8007182:	699a      	ldr	r2, [r3, #24]
 8007184:	4b56      	ldr	r3, [pc, #344]	; (80072e0 <HAL_GPIO_Init+0x2d4>)
 8007186:	2101      	movs	r1, #1
 8007188:	430a      	orrs	r2, r1
 800718a:	619a      	str	r2, [r3, #24]
 800718c:	4b54      	ldr	r3, [pc, #336]	; (80072e0 <HAL_GPIO_Init+0x2d4>)
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	2201      	movs	r2, #1
 8007192:	4013      	ands	r3, r2
 8007194:	60bb      	str	r3, [r7, #8]
 8007196:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007198:	4a52      	ldr	r2, [pc, #328]	; (80072e4 <HAL_GPIO_Init+0x2d8>)
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	089b      	lsrs	r3, r3, #2
 800719e:	3302      	adds	r3, #2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	589b      	ldr	r3, [r3, r2]
 80071a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	2203      	movs	r2, #3
 80071aa:	4013      	ands	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	220f      	movs	r2, #15
 80071b0:	409a      	lsls	r2, r3
 80071b2:	0013      	movs	r3, r2
 80071b4:	43da      	mvns	r2, r3
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	4013      	ands	r3, r2
 80071ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	2390      	movs	r3, #144	; 0x90
 80071c0:	05db      	lsls	r3, r3, #23
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d019      	beq.n	80071fa <HAL_GPIO_Init+0x1ee>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a47      	ldr	r2, [pc, #284]	; (80072e8 <HAL_GPIO_Init+0x2dc>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d013      	beq.n	80071f6 <HAL_GPIO_Init+0x1ea>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a46      	ldr	r2, [pc, #280]	; (80072ec <HAL_GPIO_Init+0x2e0>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d00d      	beq.n	80071f2 <HAL_GPIO_Init+0x1e6>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a45      	ldr	r2, [pc, #276]	; (80072f0 <HAL_GPIO_Init+0x2e4>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d007      	beq.n	80071ee <HAL_GPIO_Init+0x1e2>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a44      	ldr	r2, [pc, #272]	; (80072f4 <HAL_GPIO_Init+0x2e8>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d101      	bne.n	80071ea <HAL_GPIO_Init+0x1de>
 80071e6:	2304      	movs	r3, #4
 80071e8:	e008      	b.n	80071fc <HAL_GPIO_Init+0x1f0>
 80071ea:	2305      	movs	r3, #5
 80071ec:	e006      	b.n	80071fc <HAL_GPIO_Init+0x1f0>
 80071ee:	2303      	movs	r3, #3
 80071f0:	e004      	b.n	80071fc <HAL_GPIO_Init+0x1f0>
 80071f2:	2302      	movs	r3, #2
 80071f4:	e002      	b.n	80071fc <HAL_GPIO_Init+0x1f0>
 80071f6:	2301      	movs	r3, #1
 80071f8:	e000      	b.n	80071fc <HAL_GPIO_Init+0x1f0>
 80071fa:	2300      	movs	r3, #0
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	2103      	movs	r1, #3
 8007200:	400a      	ands	r2, r1
 8007202:	0092      	lsls	r2, r2, #2
 8007204:	4093      	lsls	r3, r2
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	4313      	orrs	r3, r2
 800720a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800720c:	4935      	ldr	r1, [pc, #212]	; (80072e4 <HAL_GPIO_Init+0x2d8>)
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	089b      	lsrs	r3, r3, #2
 8007212:	3302      	adds	r3, #2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	693a      	ldr	r2, [r7, #16]
 8007218:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800721a:	4b37      	ldr	r3, [pc, #220]	; (80072f8 <HAL_GPIO_Init+0x2ec>)
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	43da      	mvns	r2, r3
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	4013      	ands	r3, r2
 8007228:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	685a      	ldr	r2, [r3, #4]
 800722e:	2380      	movs	r3, #128	; 0x80
 8007230:	035b      	lsls	r3, r3, #13
 8007232:	4013      	ands	r3, r2
 8007234:	d003      	beq.n	800723e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	4313      	orrs	r3, r2
 800723c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800723e:	4b2e      	ldr	r3, [pc, #184]	; (80072f8 <HAL_GPIO_Init+0x2ec>)
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8007244:	4b2c      	ldr	r3, [pc, #176]	; (80072f8 <HAL_GPIO_Init+0x2ec>)
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	43da      	mvns	r2, r3
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	4013      	ands	r3, r2
 8007252:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	2380      	movs	r3, #128	; 0x80
 800725a:	039b      	lsls	r3, r3, #14
 800725c:	4013      	ands	r3, r2
 800725e:	d003      	beq.n	8007268 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	4313      	orrs	r3, r2
 8007266:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007268:	4b23      	ldr	r3, [pc, #140]	; (80072f8 <HAL_GPIO_Init+0x2ec>)
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800726e:	4b22      	ldr	r3, [pc, #136]	; (80072f8 <HAL_GPIO_Init+0x2ec>)
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	43da      	mvns	r2, r3
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	4013      	ands	r3, r2
 800727c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	685a      	ldr	r2, [r3, #4]
 8007282:	2380      	movs	r3, #128	; 0x80
 8007284:	029b      	lsls	r3, r3, #10
 8007286:	4013      	ands	r3, r2
 8007288:	d003      	beq.n	8007292 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	4313      	orrs	r3, r2
 8007290:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007292:	4b19      	ldr	r3, [pc, #100]	; (80072f8 <HAL_GPIO_Init+0x2ec>)
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8007298:	4b17      	ldr	r3, [pc, #92]	; (80072f8 <HAL_GPIO_Init+0x2ec>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	43da      	mvns	r2, r3
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	4013      	ands	r3, r2
 80072a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	2380      	movs	r3, #128	; 0x80
 80072ae:	025b      	lsls	r3, r3, #9
 80072b0:	4013      	ands	r3, r2
 80072b2:	d003      	beq.n	80072bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80072bc:	4b0e      	ldr	r3, [pc, #56]	; (80072f8 <HAL_GPIO_Init+0x2ec>)
 80072be:	693a      	ldr	r2, [r7, #16]
 80072c0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	3301      	adds	r3, #1
 80072c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	40da      	lsrs	r2, r3
 80072d0:	1e13      	subs	r3, r2, #0
 80072d2:	d000      	beq.n	80072d6 <HAL_GPIO_Init+0x2ca>
 80072d4:	e6a2      	b.n	800701c <HAL_GPIO_Init+0x10>
  } 
}
 80072d6:	46c0      	nop			; (mov r8, r8)
 80072d8:	46c0      	nop			; (mov r8, r8)
 80072da:	46bd      	mov	sp, r7
 80072dc:	b006      	add	sp, #24
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	40021000 	.word	0x40021000
 80072e4:	40010000 	.word	0x40010000
 80072e8:	48000400 	.word	0x48000400
 80072ec:	48000800 	.word	0x48000800
 80072f0:	48000c00 	.word	0x48000c00
 80072f4:	48001000 	.word	0x48001000
 80072f8:	40010400 	.word	0x40010400

080072fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	0008      	movs	r0, r1
 8007306:	0011      	movs	r1, r2
 8007308:	1cbb      	adds	r3, r7, #2
 800730a:	1c02      	adds	r2, r0, #0
 800730c:	801a      	strh	r2, [r3, #0]
 800730e:	1c7b      	adds	r3, r7, #1
 8007310:	1c0a      	adds	r2, r1, #0
 8007312:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007314:	1c7b      	adds	r3, r7, #1
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d004      	beq.n	8007326 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800731c:	1cbb      	adds	r3, r7, #2
 800731e:	881a      	ldrh	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007324:	e003      	b.n	800732e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007326:	1cbb      	adds	r3, r7, #2
 8007328:	881a      	ldrh	r2, [r3, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800732e:	46c0      	nop			; (mov r8, r8)
 8007330:	46bd      	mov	sp, r7
 8007332:	b002      	add	sp, #8
 8007334:	bd80      	pop	{r7, pc}
	...

08007338 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e082      	b.n	8007450 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2241      	movs	r2, #65	; 0x41
 800734e:	5c9b      	ldrb	r3, [r3, r2]
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b00      	cmp	r3, #0
 8007354:	d107      	bne.n	8007366 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2240      	movs	r2, #64	; 0x40
 800735a:	2100      	movs	r1, #0
 800735c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	0018      	movs	r0, r3
 8007362:	f7fc fcf9 	bl	8003d58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2241      	movs	r2, #65	; 0x41
 800736a:	2124      	movs	r1, #36	; 0x24
 800736c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2101      	movs	r1, #1
 800737a:	438a      	bics	r2, r1
 800737c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	685a      	ldr	r2, [r3, #4]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4934      	ldr	r1, [pc, #208]	; (8007458 <HAL_I2C_Init+0x120>)
 8007388:	400a      	ands	r2, r1
 800738a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	689a      	ldr	r2, [r3, #8]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4931      	ldr	r1, [pc, #196]	; (800745c <HAL_I2C_Init+0x124>)
 8007398:	400a      	ands	r2, r1
 800739a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d108      	bne.n	80073b6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	689a      	ldr	r2, [r3, #8]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2180      	movs	r1, #128	; 0x80
 80073ae:	0209      	lsls	r1, r1, #8
 80073b0:	430a      	orrs	r2, r1
 80073b2:	609a      	str	r2, [r3, #8]
 80073b4:	e007      	b.n	80073c6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	689a      	ldr	r2, [r3, #8]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2184      	movs	r1, #132	; 0x84
 80073c0:	0209      	lsls	r1, r1, #8
 80073c2:	430a      	orrs	r2, r1
 80073c4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d104      	bne.n	80073d8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2280      	movs	r2, #128	; 0x80
 80073d4:	0112      	lsls	r2, r2, #4
 80073d6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	685a      	ldr	r2, [r3, #4]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	491f      	ldr	r1, [pc, #124]	; (8007460 <HAL_I2C_Init+0x128>)
 80073e4:	430a      	orrs	r2, r1
 80073e6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68da      	ldr	r2, [r3, #12]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	491a      	ldr	r1, [pc, #104]	; (800745c <HAL_I2C_Init+0x124>)
 80073f4:	400a      	ands	r2, r1
 80073f6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	691a      	ldr	r2, [r3, #16]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	431a      	orrs	r2, r3
 8007402:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	430a      	orrs	r2, r1
 8007410:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	69d9      	ldr	r1, [r3, #28]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a1a      	ldr	r2, [r3, #32]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	430a      	orrs	r2, r1
 8007420:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2101      	movs	r1, #1
 800742e:	430a      	orrs	r2, r1
 8007430:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2241      	movs	r2, #65	; 0x41
 800743c:	2120      	movs	r1, #32
 800743e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2242      	movs	r2, #66	; 0x42
 800744a:	2100      	movs	r1, #0
 800744c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	0018      	movs	r0, r3
 8007452:	46bd      	mov	sp, r7
 8007454:	b002      	add	sp, #8
 8007456:	bd80      	pop	{r7, pc}
 8007458:	f0ffffff 	.word	0xf0ffffff
 800745c:	ffff7fff 	.word	0xffff7fff
 8007460:	02008000 	.word	0x02008000

08007464 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007464:	b590      	push	{r4, r7, lr}
 8007466:	b089      	sub	sp, #36	; 0x24
 8007468:	af02      	add	r7, sp, #8
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	0008      	movs	r0, r1
 800746e:	607a      	str	r2, [r7, #4]
 8007470:	0019      	movs	r1, r3
 8007472:	230a      	movs	r3, #10
 8007474:	18fb      	adds	r3, r7, r3
 8007476:	1c02      	adds	r2, r0, #0
 8007478:	801a      	strh	r2, [r3, #0]
 800747a:	2308      	movs	r3, #8
 800747c:	18fb      	adds	r3, r7, r3
 800747e:	1c0a      	adds	r2, r1, #0
 8007480:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2241      	movs	r2, #65	; 0x41
 8007486:	5c9b      	ldrb	r3, [r3, r2]
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b20      	cmp	r3, #32
 800748c:	d000      	beq.n	8007490 <HAL_I2C_Master_Transmit+0x2c>
 800748e:	e0e7      	b.n	8007660 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2240      	movs	r2, #64	; 0x40
 8007494:	5c9b      	ldrb	r3, [r3, r2]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d101      	bne.n	800749e <HAL_I2C_Master_Transmit+0x3a>
 800749a:	2302      	movs	r3, #2
 800749c:	e0e1      	b.n	8007662 <HAL_I2C_Master_Transmit+0x1fe>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2240      	movs	r2, #64	; 0x40
 80074a2:	2101      	movs	r1, #1
 80074a4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80074a6:	f7fe feb7 	bl	8006218 <HAL_GetTick>
 80074aa:	0003      	movs	r3, r0
 80074ac:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80074ae:	2380      	movs	r3, #128	; 0x80
 80074b0:	0219      	lsls	r1, r3, #8
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	2319      	movs	r3, #25
 80074ba:	2201      	movs	r2, #1
 80074bc:	f000 fd3e 	bl	8007f3c <I2C_WaitOnFlagUntilTimeout>
 80074c0:	1e03      	subs	r3, r0, #0
 80074c2:	d001      	beq.n	80074c8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e0cc      	b.n	8007662 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2241      	movs	r2, #65	; 0x41
 80074cc:	2121      	movs	r1, #33	; 0x21
 80074ce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2242      	movs	r2, #66	; 0x42
 80074d4:	2110      	movs	r1, #16
 80074d6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2208      	movs	r2, #8
 80074e8:	18ba      	adds	r2, r7, r2
 80074ea:	8812      	ldrh	r2, [r2, #0]
 80074ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	2bff      	cmp	r3, #255	; 0xff
 80074fc:	d911      	bls.n	8007522 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	22ff      	movs	r2, #255	; 0xff
 8007502:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007508:	b2da      	uxtb	r2, r3
 800750a:	2380      	movs	r3, #128	; 0x80
 800750c:	045c      	lsls	r4, r3, #17
 800750e:	230a      	movs	r3, #10
 8007510:	18fb      	adds	r3, r7, r3
 8007512:	8819      	ldrh	r1, [r3, #0]
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	4b55      	ldr	r3, [pc, #340]	; (800766c <HAL_I2C_Master_Transmit+0x208>)
 8007518:	9300      	str	r3, [sp, #0]
 800751a:	0023      	movs	r3, r4
 800751c:	f000 fee6 	bl	80082ec <I2C_TransferConfig>
 8007520:	e075      	b.n	800760e <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007526:	b29a      	uxth	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007530:	b2da      	uxtb	r2, r3
 8007532:	2380      	movs	r3, #128	; 0x80
 8007534:	049c      	lsls	r4, r3, #18
 8007536:	230a      	movs	r3, #10
 8007538:	18fb      	adds	r3, r7, r3
 800753a:	8819      	ldrh	r1, [r3, #0]
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	4b4b      	ldr	r3, [pc, #300]	; (800766c <HAL_I2C_Master_Transmit+0x208>)
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	0023      	movs	r3, r4
 8007544:	f000 fed2 	bl	80082ec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007548:	e061      	b.n	800760e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800754a:	697a      	ldr	r2, [r7, #20]
 800754c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	0018      	movs	r0, r3
 8007552:	f000 fd41 	bl	8007fd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007556:	1e03      	subs	r3, r0, #0
 8007558:	d001      	beq.n	800755e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e081      	b.n	8007662 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007562:	781a      	ldrb	r2, [r3, #0]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756e:	1c5a      	adds	r2, r3, #1
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007578:	b29b      	uxth	r3, r3
 800757a:	3b01      	subs	r3, #1
 800757c:	b29a      	uxth	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007586:	3b01      	subs	r3, #1
 8007588:	b29a      	uxth	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007592:	b29b      	uxth	r3, r3
 8007594:	2b00      	cmp	r3, #0
 8007596:	d03a      	beq.n	800760e <HAL_I2C_Master_Transmit+0x1aa>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800759c:	2b00      	cmp	r3, #0
 800759e:	d136      	bne.n	800760e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80075a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	0013      	movs	r3, r2
 80075aa:	2200      	movs	r2, #0
 80075ac:	2180      	movs	r1, #128	; 0x80
 80075ae:	f000 fcc5 	bl	8007f3c <I2C_WaitOnFlagUntilTimeout>
 80075b2:	1e03      	subs	r3, r0, #0
 80075b4:	d001      	beq.n	80075ba <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e053      	b.n	8007662 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075be:	b29b      	uxth	r3, r3
 80075c0:	2bff      	cmp	r3, #255	; 0xff
 80075c2:	d911      	bls.n	80075e8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	22ff      	movs	r2, #255	; 0xff
 80075c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ce:	b2da      	uxtb	r2, r3
 80075d0:	2380      	movs	r3, #128	; 0x80
 80075d2:	045c      	lsls	r4, r3, #17
 80075d4:	230a      	movs	r3, #10
 80075d6:	18fb      	adds	r3, r7, r3
 80075d8:	8819      	ldrh	r1, [r3, #0]
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	2300      	movs	r3, #0
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	0023      	movs	r3, r4
 80075e2:	f000 fe83 	bl	80082ec <I2C_TransferConfig>
 80075e6:	e012      	b.n	800760e <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075f6:	b2da      	uxtb	r2, r3
 80075f8:	2380      	movs	r3, #128	; 0x80
 80075fa:	049c      	lsls	r4, r3, #18
 80075fc:	230a      	movs	r3, #10
 80075fe:	18fb      	adds	r3, r7, r3
 8007600:	8819      	ldrh	r1, [r3, #0]
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	2300      	movs	r3, #0
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	0023      	movs	r3, r4
 800760a:	f000 fe6f 	bl	80082ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007612:	b29b      	uxth	r3, r3
 8007614:	2b00      	cmp	r3, #0
 8007616:	d198      	bne.n	800754a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	0018      	movs	r0, r3
 8007620:	f000 fd20 	bl	8008064 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007624:	1e03      	subs	r3, r0, #0
 8007626:	d001      	beq.n	800762c <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e01a      	b.n	8007662 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2220      	movs	r2, #32
 8007632:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685a      	ldr	r2, [r3, #4]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	490c      	ldr	r1, [pc, #48]	; (8007670 <HAL_I2C_Master_Transmit+0x20c>)
 8007640:	400a      	ands	r2, r1
 8007642:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2241      	movs	r2, #65	; 0x41
 8007648:	2120      	movs	r1, #32
 800764a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2242      	movs	r2, #66	; 0x42
 8007650:	2100      	movs	r1, #0
 8007652:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2240      	movs	r2, #64	; 0x40
 8007658:	2100      	movs	r1, #0
 800765a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	e000      	b.n	8007662 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8007660:	2302      	movs	r3, #2
  }
}
 8007662:	0018      	movs	r0, r3
 8007664:	46bd      	mov	sp, r7
 8007666:	b007      	add	sp, #28
 8007668:	bd90      	pop	{r4, r7, pc}
 800766a:	46c0      	nop			; (mov r8, r8)
 800766c:	80002000 	.word	0x80002000
 8007670:	fe00e800 	.word	0xfe00e800

08007674 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007674:	b590      	push	{r4, r7, lr}
 8007676:	b089      	sub	sp, #36	; 0x24
 8007678:	af02      	add	r7, sp, #8
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	000c      	movs	r4, r1
 800767e:	0010      	movs	r0, r2
 8007680:	0019      	movs	r1, r3
 8007682:	230a      	movs	r3, #10
 8007684:	18fb      	adds	r3, r7, r3
 8007686:	1c22      	adds	r2, r4, #0
 8007688:	801a      	strh	r2, [r3, #0]
 800768a:	2308      	movs	r3, #8
 800768c:	18fb      	adds	r3, r7, r3
 800768e:	1c02      	adds	r2, r0, #0
 8007690:	801a      	strh	r2, [r3, #0]
 8007692:	1dbb      	adds	r3, r7, #6
 8007694:	1c0a      	adds	r2, r1, #0
 8007696:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2241      	movs	r2, #65	; 0x41
 800769c:	5c9b      	ldrb	r3, [r3, r2]
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b20      	cmp	r3, #32
 80076a2:	d000      	beq.n	80076a6 <HAL_I2C_Mem_Write+0x32>
 80076a4:	e10c      	b.n	80078c0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80076a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d004      	beq.n	80076b6 <HAL_I2C_Mem_Write+0x42>
 80076ac:	232c      	movs	r3, #44	; 0x2c
 80076ae:	18fb      	adds	r3, r7, r3
 80076b0:	881b      	ldrh	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d105      	bne.n	80076c2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2280      	movs	r2, #128	; 0x80
 80076ba:	0092      	lsls	r2, r2, #2
 80076bc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e0ff      	b.n	80078c2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2240      	movs	r2, #64	; 0x40
 80076c6:	5c9b      	ldrb	r3, [r3, r2]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d101      	bne.n	80076d0 <HAL_I2C_Mem_Write+0x5c>
 80076cc:	2302      	movs	r3, #2
 80076ce:	e0f8      	b.n	80078c2 <HAL_I2C_Mem_Write+0x24e>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2240      	movs	r2, #64	; 0x40
 80076d4:	2101      	movs	r1, #1
 80076d6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80076d8:	f7fe fd9e 	bl	8006218 <HAL_GetTick>
 80076dc:	0003      	movs	r3, r0
 80076de:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80076e0:	2380      	movs	r3, #128	; 0x80
 80076e2:	0219      	lsls	r1, r3, #8
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	2319      	movs	r3, #25
 80076ec:	2201      	movs	r2, #1
 80076ee:	f000 fc25 	bl	8007f3c <I2C_WaitOnFlagUntilTimeout>
 80076f2:	1e03      	subs	r3, r0, #0
 80076f4:	d001      	beq.n	80076fa <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e0e3      	b.n	80078c2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2241      	movs	r2, #65	; 0x41
 80076fe:	2121      	movs	r1, #33	; 0x21
 8007700:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2242      	movs	r2, #66	; 0x42
 8007706:	2140      	movs	r1, #64	; 0x40
 8007708:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007714:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	222c      	movs	r2, #44	; 0x2c
 800771a:	18ba      	adds	r2, r7, r2
 800771c:	8812      	ldrh	r2, [r2, #0]
 800771e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2200      	movs	r2, #0
 8007724:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007726:	1dbb      	adds	r3, r7, #6
 8007728:	881c      	ldrh	r4, [r3, #0]
 800772a:	2308      	movs	r3, #8
 800772c:	18fb      	adds	r3, r7, r3
 800772e:	881a      	ldrh	r2, [r3, #0]
 8007730:	230a      	movs	r3, #10
 8007732:	18fb      	adds	r3, r7, r3
 8007734:	8819      	ldrh	r1, [r3, #0]
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	9301      	str	r3, [sp, #4]
 800773c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	0023      	movs	r3, r4
 8007742:	f000 fb13 	bl	8007d6c <I2C_RequestMemoryWrite>
 8007746:	1e03      	subs	r3, r0, #0
 8007748:	d005      	beq.n	8007756 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2240      	movs	r2, #64	; 0x40
 800774e:	2100      	movs	r1, #0
 8007750:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e0b5      	b.n	80078c2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800775a:	b29b      	uxth	r3, r3
 800775c:	2bff      	cmp	r3, #255	; 0xff
 800775e:	d911      	bls.n	8007784 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	22ff      	movs	r2, #255	; 0xff
 8007764:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800776a:	b2da      	uxtb	r2, r3
 800776c:	2380      	movs	r3, #128	; 0x80
 800776e:	045c      	lsls	r4, r3, #17
 8007770:	230a      	movs	r3, #10
 8007772:	18fb      	adds	r3, r7, r3
 8007774:	8819      	ldrh	r1, [r3, #0]
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	2300      	movs	r3, #0
 800777a:	9300      	str	r3, [sp, #0]
 800777c:	0023      	movs	r3, r4
 800777e:	f000 fdb5 	bl	80082ec <I2C_TransferConfig>
 8007782:	e012      	b.n	80077aa <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007788:	b29a      	uxth	r2, r3
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007792:	b2da      	uxtb	r2, r3
 8007794:	2380      	movs	r3, #128	; 0x80
 8007796:	049c      	lsls	r4, r3, #18
 8007798:	230a      	movs	r3, #10
 800779a:	18fb      	adds	r3, r7, r3
 800779c:	8819      	ldrh	r1, [r3, #0]
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	2300      	movs	r3, #0
 80077a2:	9300      	str	r3, [sp, #0]
 80077a4:	0023      	movs	r3, r4
 80077a6:	f000 fda1 	bl	80082ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077aa:	697a      	ldr	r2, [r7, #20]
 80077ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	0018      	movs	r0, r3
 80077b2:	f000 fc11 	bl	8007fd8 <I2C_WaitOnTXISFlagUntilTimeout>
 80077b6:	1e03      	subs	r3, r0, #0
 80077b8:	d001      	beq.n	80077be <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e081      	b.n	80078c2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c2:	781a      	ldrb	r2, [r3, #0]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ce:	1c5a      	adds	r2, r3, #1
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d8:	b29b      	uxth	r3, r3
 80077da:	3b01      	subs	r3, #1
 80077dc:	b29a      	uxth	r2, r3
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077e6:	3b01      	subs	r3, #1
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d03a      	beq.n	800786e <HAL_I2C_Mem_Write+0x1fa>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d136      	bne.n	800786e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	0013      	movs	r3, r2
 800780a:	2200      	movs	r2, #0
 800780c:	2180      	movs	r1, #128	; 0x80
 800780e:	f000 fb95 	bl	8007f3c <I2C_WaitOnFlagUntilTimeout>
 8007812:	1e03      	subs	r3, r0, #0
 8007814:	d001      	beq.n	800781a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e053      	b.n	80078c2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800781e:	b29b      	uxth	r3, r3
 8007820:	2bff      	cmp	r3, #255	; 0xff
 8007822:	d911      	bls.n	8007848 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	22ff      	movs	r2, #255	; 0xff
 8007828:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800782e:	b2da      	uxtb	r2, r3
 8007830:	2380      	movs	r3, #128	; 0x80
 8007832:	045c      	lsls	r4, r3, #17
 8007834:	230a      	movs	r3, #10
 8007836:	18fb      	adds	r3, r7, r3
 8007838:	8819      	ldrh	r1, [r3, #0]
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	2300      	movs	r3, #0
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	0023      	movs	r3, r4
 8007842:	f000 fd53 	bl	80082ec <I2C_TransferConfig>
 8007846:	e012      	b.n	800786e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800784c:	b29a      	uxth	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007856:	b2da      	uxtb	r2, r3
 8007858:	2380      	movs	r3, #128	; 0x80
 800785a:	049c      	lsls	r4, r3, #18
 800785c:	230a      	movs	r3, #10
 800785e:	18fb      	adds	r3, r7, r3
 8007860:	8819      	ldrh	r1, [r3, #0]
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	2300      	movs	r3, #0
 8007866:	9300      	str	r3, [sp, #0]
 8007868:	0023      	movs	r3, r4
 800786a:	f000 fd3f 	bl	80082ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007872:	b29b      	uxth	r3, r3
 8007874:	2b00      	cmp	r3, #0
 8007876:	d198      	bne.n	80077aa <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007878:	697a      	ldr	r2, [r7, #20]
 800787a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	0018      	movs	r0, r3
 8007880:	f000 fbf0 	bl	8008064 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007884:	1e03      	subs	r3, r0, #0
 8007886:	d001      	beq.n	800788c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e01a      	b.n	80078c2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2220      	movs	r2, #32
 8007892:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	685a      	ldr	r2, [r3, #4]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	490b      	ldr	r1, [pc, #44]	; (80078cc <HAL_I2C_Mem_Write+0x258>)
 80078a0:	400a      	ands	r2, r1
 80078a2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2241      	movs	r2, #65	; 0x41
 80078a8:	2120      	movs	r1, #32
 80078aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2242      	movs	r2, #66	; 0x42
 80078b0:	2100      	movs	r1, #0
 80078b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2240      	movs	r2, #64	; 0x40
 80078b8:	2100      	movs	r1, #0
 80078ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80078bc:	2300      	movs	r3, #0
 80078be:	e000      	b.n	80078c2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80078c0:	2302      	movs	r3, #2
  }
}
 80078c2:	0018      	movs	r0, r3
 80078c4:	46bd      	mov	sp, r7
 80078c6:	b007      	add	sp, #28
 80078c8:	bd90      	pop	{r4, r7, pc}
 80078ca:	46c0      	nop			; (mov r8, r8)
 80078cc:	fe00e800 	.word	0xfe00e800

080078d0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078d0:	b590      	push	{r4, r7, lr}
 80078d2:	b089      	sub	sp, #36	; 0x24
 80078d4:	af02      	add	r7, sp, #8
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	000c      	movs	r4, r1
 80078da:	0010      	movs	r0, r2
 80078dc:	0019      	movs	r1, r3
 80078de:	230a      	movs	r3, #10
 80078e0:	18fb      	adds	r3, r7, r3
 80078e2:	1c22      	adds	r2, r4, #0
 80078e4:	801a      	strh	r2, [r3, #0]
 80078e6:	2308      	movs	r3, #8
 80078e8:	18fb      	adds	r3, r7, r3
 80078ea:	1c02      	adds	r2, r0, #0
 80078ec:	801a      	strh	r2, [r3, #0]
 80078ee:	1dbb      	adds	r3, r7, #6
 80078f0:	1c0a      	adds	r2, r1, #0
 80078f2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2241      	movs	r2, #65	; 0x41
 80078f8:	5c9b      	ldrb	r3, [r3, r2]
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	2b20      	cmp	r3, #32
 80078fe:	d000      	beq.n	8007902 <HAL_I2C_Mem_Read+0x32>
 8007900:	e110      	b.n	8007b24 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8007902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007904:	2b00      	cmp	r3, #0
 8007906:	d004      	beq.n	8007912 <HAL_I2C_Mem_Read+0x42>
 8007908:	232c      	movs	r3, #44	; 0x2c
 800790a:	18fb      	adds	r3, r7, r3
 800790c:	881b      	ldrh	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d105      	bne.n	800791e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2280      	movs	r2, #128	; 0x80
 8007916:	0092      	lsls	r2, r2, #2
 8007918:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e103      	b.n	8007b26 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2240      	movs	r2, #64	; 0x40
 8007922:	5c9b      	ldrb	r3, [r3, r2]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d101      	bne.n	800792c <HAL_I2C_Mem_Read+0x5c>
 8007928:	2302      	movs	r3, #2
 800792a:	e0fc      	b.n	8007b26 <HAL_I2C_Mem_Read+0x256>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2240      	movs	r2, #64	; 0x40
 8007930:	2101      	movs	r1, #1
 8007932:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007934:	f7fe fc70 	bl	8006218 <HAL_GetTick>
 8007938:	0003      	movs	r3, r0
 800793a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800793c:	2380      	movs	r3, #128	; 0x80
 800793e:	0219      	lsls	r1, r3, #8
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	2319      	movs	r3, #25
 8007948:	2201      	movs	r2, #1
 800794a:	f000 faf7 	bl	8007f3c <I2C_WaitOnFlagUntilTimeout>
 800794e:	1e03      	subs	r3, r0, #0
 8007950:	d001      	beq.n	8007956 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e0e7      	b.n	8007b26 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2241      	movs	r2, #65	; 0x41
 800795a:	2122      	movs	r1, #34	; 0x22
 800795c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2242      	movs	r2, #66	; 0x42
 8007962:	2140      	movs	r1, #64	; 0x40
 8007964:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2200      	movs	r2, #0
 800796a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007970:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	222c      	movs	r2, #44	; 0x2c
 8007976:	18ba      	adds	r2, r7, r2
 8007978:	8812      	ldrh	r2, [r2, #0]
 800797a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007982:	1dbb      	adds	r3, r7, #6
 8007984:	881c      	ldrh	r4, [r3, #0]
 8007986:	2308      	movs	r3, #8
 8007988:	18fb      	adds	r3, r7, r3
 800798a:	881a      	ldrh	r2, [r3, #0]
 800798c:	230a      	movs	r3, #10
 800798e:	18fb      	adds	r3, r7, r3
 8007990:	8819      	ldrh	r1, [r3, #0]
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	9301      	str	r3, [sp, #4]
 8007998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799a:	9300      	str	r3, [sp, #0]
 800799c:	0023      	movs	r3, r4
 800799e:	f000 fa49 	bl	8007e34 <I2C_RequestMemoryRead>
 80079a2:	1e03      	subs	r3, r0, #0
 80079a4:	d005      	beq.n	80079b2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2240      	movs	r2, #64	; 0x40
 80079aa:	2100      	movs	r1, #0
 80079ac:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e0b9      	b.n	8007b26 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	2bff      	cmp	r3, #255	; 0xff
 80079ba:	d911      	bls.n	80079e0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	22ff      	movs	r2, #255	; 0xff
 80079c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	2380      	movs	r3, #128	; 0x80
 80079ca:	045c      	lsls	r4, r3, #17
 80079cc:	230a      	movs	r3, #10
 80079ce:	18fb      	adds	r3, r7, r3
 80079d0:	8819      	ldrh	r1, [r3, #0]
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	4b56      	ldr	r3, [pc, #344]	; (8007b30 <HAL_I2C_Mem_Read+0x260>)
 80079d6:	9300      	str	r3, [sp, #0]
 80079d8:	0023      	movs	r3, r4
 80079da:	f000 fc87 	bl	80082ec <I2C_TransferConfig>
 80079de:	e012      	b.n	8007a06 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ee:	b2da      	uxtb	r2, r3
 80079f0:	2380      	movs	r3, #128	; 0x80
 80079f2:	049c      	lsls	r4, r3, #18
 80079f4:	230a      	movs	r3, #10
 80079f6:	18fb      	adds	r3, r7, r3
 80079f8:	8819      	ldrh	r1, [r3, #0]
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	4b4c      	ldr	r3, [pc, #304]	; (8007b30 <HAL_I2C_Mem_Read+0x260>)
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	0023      	movs	r3, r4
 8007a02:	f000 fc73 	bl	80082ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	9300      	str	r3, [sp, #0]
 8007a0e:	0013      	movs	r3, r2
 8007a10:	2200      	movs	r2, #0
 8007a12:	2104      	movs	r1, #4
 8007a14:	f000 fa92 	bl	8007f3c <I2C_WaitOnFlagUntilTimeout>
 8007a18:	1e03      	subs	r3, r0, #0
 8007a1a:	d001      	beq.n	8007a20 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e082      	b.n	8007b26 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2a:	b2d2      	uxtb	r2, r2
 8007a2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a32:	1c5a      	adds	r2, r3, #1
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d03a      	beq.n	8007ad2 <HAL_I2C_Mem_Read+0x202>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d136      	bne.n	8007ad2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	0013      	movs	r3, r2
 8007a6e:	2200      	movs	r2, #0
 8007a70:	2180      	movs	r1, #128	; 0x80
 8007a72:	f000 fa63 	bl	8007f3c <I2C_WaitOnFlagUntilTimeout>
 8007a76:	1e03      	subs	r3, r0, #0
 8007a78:	d001      	beq.n	8007a7e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e053      	b.n	8007b26 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	2bff      	cmp	r3, #255	; 0xff
 8007a86:	d911      	bls.n	8007aac <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	22ff      	movs	r2, #255	; 0xff
 8007a8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a92:	b2da      	uxtb	r2, r3
 8007a94:	2380      	movs	r3, #128	; 0x80
 8007a96:	045c      	lsls	r4, r3, #17
 8007a98:	230a      	movs	r3, #10
 8007a9a:	18fb      	adds	r3, r7, r3
 8007a9c:	8819      	ldrh	r1, [r3, #0]
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	0023      	movs	r3, r4
 8007aa6:	f000 fc21 	bl	80082ec <I2C_TransferConfig>
 8007aaa:	e012      	b.n	8007ad2 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aba:	b2da      	uxtb	r2, r3
 8007abc:	2380      	movs	r3, #128	; 0x80
 8007abe:	049c      	lsls	r4, r3, #18
 8007ac0:	230a      	movs	r3, #10
 8007ac2:	18fb      	adds	r3, r7, r3
 8007ac4:	8819      	ldrh	r1, [r3, #0]
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	2300      	movs	r3, #0
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	0023      	movs	r3, r4
 8007ace:	f000 fc0d 	bl	80082ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d194      	bne.n	8007a06 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007adc:	697a      	ldr	r2, [r7, #20]
 8007ade:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	0018      	movs	r0, r3
 8007ae4:	f000 fabe 	bl	8008064 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007ae8:	1e03      	subs	r3, r0, #0
 8007aea:	d001      	beq.n	8007af0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e01a      	b.n	8007b26 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2220      	movs	r2, #32
 8007af6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685a      	ldr	r2, [r3, #4]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	490c      	ldr	r1, [pc, #48]	; (8007b34 <HAL_I2C_Mem_Read+0x264>)
 8007b04:	400a      	ands	r2, r1
 8007b06:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2241      	movs	r2, #65	; 0x41
 8007b0c:	2120      	movs	r1, #32
 8007b0e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2242      	movs	r2, #66	; 0x42
 8007b14:	2100      	movs	r1, #0
 8007b16:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2240      	movs	r2, #64	; 0x40
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	e000      	b.n	8007b26 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8007b24:	2302      	movs	r3, #2
  }
}
 8007b26:	0018      	movs	r0, r3
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	b007      	add	sp, #28
 8007b2c:	bd90      	pop	{r4, r7, pc}
 8007b2e:	46c0      	nop			; (mov r8, r8)
 8007b30:	80002400 	.word	0x80002400
 8007b34:	fe00e800 	.word	0xfe00e800

08007b38 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b08a      	sub	sp, #40	; 0x28
 8007b3c:	af02      	add	r7, sp, #8
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	607a      	str	r2, [r7, #4]
 8007b42:	603b      	str	r3, [r7, #0]
 8007b44:	230a      	movs	r3, #10
 8007b46:	18fb      	adds	r3, r7, r3
 8007b48:	1c0a      	adds	r2, r1, #0
 8007b4a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2241      	movs	r2, #65	; 0x41
 8007b54:	5c9b      	ldrb	r3, [r3, r2]
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b20      	cmp	r3, #32
 8007b5a:	d000      	beq.n	8007b5e <HAL_I2C_IsDeviceReady+0x26>
 8007b5c:	e0fd      	b.n	8007d5a <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	699a      	ldr	r2, [r3, #24]
 8007b64:	2380      	movs	r3, #128	; 0x80
 8007b66:	021b      	lsls	r3, r3, #8
 8007b68:	401a      	ands	r2, r3
 8007b6a:	2380      	movs	r3, #128	; 0x80
 8007b6c:	021b      	lsls	r3, r3, #8
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d101      	bne.n	8007b76 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8007b72:	2302      	movs	r3, #2
 8007b74:	e0f2      	b.n	8007d5c <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2240      	movs	r2, #64	; 0x40
 8007b7a:	5c9b      	ldrb	r3, [r3, r2]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d101      	bne.n	8007b84 <HAL_I2C_IsDeviceReady+0x4c>
 8007b80:	2302      	movs	r3, #2
 8007b82:	e0eb      	b.n	8007d5c <HAL_I2C_IsDeviceReady+0x224>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2240      	movs	r2, #64	; 0x40
 8007b88:	2101      	movs	r1, #1
 8007b8a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2241      	movs	r2, #65	; 0x41
 8007b90:	2124      	movs	r1, #36	; 0x24
 8007b92:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d107      	bne.n	8007bb2 <HAL_I2C_IsDeviceReady+0x7a>
 8007ba2:	230a      	movs	r3, #10
 8007ba4:	18fb      	adds	r3, r7, r3
 8007ba6:	881b      	ldrh	r3, [r3, #0]
 8007ba8:	059b      	lsls	r3, r3, #22
 8007baa:	0d9b      	lsrs	r3, r3, #22
 8007bac:	4a6d      	ldr	r2, [pc, #436]	; (8007d64 <HAL_I2C_IsDeviceReady+0x22c>)
 8007bae:	431a      	orrs	r2, r3
 8007bb0:	e006      	b.n	8007bc0 <HAL_I2C_IsDeviceReady+0x88>
 8007bb2:	230a      	movs	r3, #10
 8007bb4:	18fb      	adds	r3, r7, r3
 8007bb6:	881b      	ldrh	r3, [r3, #0]
 8007bb8:	059b      	lsls	r3, r3, #22
 8007bba:	0d9b      	lsrs	r3, r3, #22
 8007bbc:	4a6a      	ldr	r2, [pc, #424]	; (8007d68 <HAL_I2C_IsDeviceReady+0x230>)
 8007bbe:	431a      	orrs	r2, r3
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8007bc6:	f7fe fb27 	bl	8006218 <HAL_GetTick>
 8007bca:	0003      	movs	r3, r0
 8007bcc:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	699b      	ldr	r3, [r3, #24]
 8007bd4:	2220      	movs	r2, #32
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	3b20      	subs	r3, #32
 8007bda:	425a      	negs	r2, r3
 8007bdc:	4153      	adcs	r3, r2
 8007bde:	b2da      	uxtb	r2, r3
 8007be0:	231f      	movs	r3, #31
 8007be2:	18fb      	adds	r3, r7, r3
 8007be4:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	2210      	movs	r2, #16
 8007bee:	4013      	ands	r3, r2
 8007bf0:	3b10      	subs	r3, #16
 8007bf2:	425a      	negs	r2, r3
 8007bf4:	4153      	adcs	r3, r2
 8007bf6:	b2da      	uxtb	r2, r3
 8007bf8:	231e      	movs	r3, #30
 8007bfa:	18fb      	adds	r3, r7, r3
 8007bfc:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007bfe:	e035      	b.n	8007c6c <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	3301      	adds	r3, #1
 8007c04:	d01a      	beq.n	8007c3c <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007c06:	f7fe fb07 	bl	8006218 <HAL_GetTick>
 8007c0a:	0002      	movs	r2, r0
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	683a      	ldr	r2, [r7, #0]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d302      	bcc.n	8007c1c <HAL_I2C_IsDeviceReady+0xe4>
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10f      	bne.n	8007c3c <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2241      	movs	r2, #65	; 0x41
 8007c20:	2120      	movs	r1, #32
 8007c22:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c28:	2220      	movs	r2, #32
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2240      	movs	r2, #64	; 0x40
 8007c34:	2100      	movs	r1, #0
 8007c36:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e08f      	b.n	8007d5c <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	2220      	movs	r2, #32
 8007c44:	4013      	ands	r3, r2
 8007c46:	3b20      	subs	r3, #32
 8007c48:	425a      	negs	r2, r3
 8007c4a:	4153      	adcs	r3, r2
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	231f      	movs	r3, #31
 8007c50:	18fb      	adds	r3, r7, r3
 8007c52:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	2210      	movs	r2, #16
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	3b10      	subs	r3, #16
 8007c60:	425a      	negs	r2, r3
 8007c62:	4153      	adcs	r3, r2
 8007c64:	b2da      	uxtb	r2, r3
 8007c66:	231e      	movs	r3, #30
 8007c68:	18fb      	adds	r3, r7, r3
 8007c6a:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007c6c:	231f      	movs	r3, #31
 8007c6e:	18fb      	adds	r3, r7, r3
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d104      	bne.n	8007c80 <HAL_I2C_IsDeviceReady+0x148>
 8007c76:	231e      	movs	r3, #30
 8007c78:	18fb      	adds	r3, r7, r3
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d0bf      	beq.n	8007c00 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	2210      	movs	r2, #16
 8007c88:	4013      	ands	r3, r2
 8007c8a:	2b10      	cmp	r3, #16
 8007c8c:	d01a      	beq.n	8007cc4 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007c8e:	683a      	ldr	r2, [r7, #0]
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	0013      	movs	r3, r2
 8007c98:	2200      	movs	r2, #0
 8007c9a:	2120      	movs	r1, #32
 8007c9c:	f000 f94e 	bl	8007f3c <I2C_WaitOnFlagUntilTimeout>
 8007ca0:	1e03      	subs	r3, r0, #0
 8007ca2:	d001      	beq.n	8007ca8 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e059      	b.n	8007d5c <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2220      	movs	r2, #32
 8007cae:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2241      	movs	r2, #65	; 0x41
 8007cb4:	2120      	movs	r1, #32
 8007cb6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2240      	movs	r2, #64	; 0x40
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	e04b      	b.n	8007d5c <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007cc4:	683a      	ldr	r2, [r7, #0]
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	9300      	str	r3, [sp, #0]
 8007ccc:	0013      	movs	r3, r2
 8007cce:	2200      	movs	r2, #0
 8007cd0:	2120      	movs	r1, #32
 8007cd2:	f000 f933 	bl	8007f3c <I2C_WaitOnFlagUntilTimeout>
 8007cd6:	1e03      	subs	r3, r0, #0
 8007cd8:	d001      	beq.n	8007cde <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e03e      	b.n	8007d5c <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2210      	movs	r2, #16
 8007ce4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2220      	movs	r2, #32
 8007cec:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d119      	bne.n	8007d2a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2180      	movs	r1, #128	; 0x80
 8007d02:	01c9      	lsls	r1, r1, #7
 8007d04:	430a      	orrs	r2, r1
 8007d06:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	0013      	movs	r3, r2
 8007d12:	2200      	movs	r2, #0
 8007d14:	2120      	movs	r1, #32
 8007d16:	f000 f911 	bl	8007f3c <I2C_WaitOnFlagUntilTimeout>
 8007d1a:	1e03      	subs	r3, r0, #0
 8007d1c:	d001      	beq.n	8007d22 <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e01c      	b.n	8007d5c <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2220      	movs	r2, #32
 8007d28:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d900      	bls.n	8007d3a <HAL_I2C_IsDeviceReady+0x202>
 8007d38:	e72f      	b.n	8007b9a <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2241      	movs	r2, #65	; 0x41
 8007d3e:	2120      	movs	r1, #32
 8007d40:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d46:	2220      	movs	r2, #32
 8007d48:	431a      	orrs	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2240      	movs	r2, #64	; 0x40
 8007d52:	2100      	movs	r1, #0
 8007d54:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e000      	b.n	8007d5c <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007d5a:	2302      	movs	r3, #2
  }
}
 8007d5c:	0018      	movs	r0, r3
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	b008      	add	sp, #32
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	02002000 	.word	0x02002000
 8007d68:	02002800 	.word	0x02002800

08007d6c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007d6c:	b5b0      	push	{r4, r5, r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af02      	add	r7, sp, #8
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	000c      	movs	r4, r1
 8007d76:	0010      	movs	r0, r2
 8007d78:	0019      	movs	r1, r3
 8007d7a:	250a      	movs	r5, #10
 8007d7c:	197b      	adds	r3, r7, r5
 8007d7e:	1c22      	adds	r2, r4, #0
 8007d80:	801a      	strh	r2, [r3, #0]
 8007d82:	2308      	movs	r3, #8
 8007d84:	18fb      	adds	r3, r7, r3
 8007d86:	1c02      	adds	r2, r0, #0
 8007d88:	801a      	strh	r2, [r3, #0]
 8007d8a:	1dbb      	adds	r3, r7, #6
 8007d8c:	1c0a      	adds	r2, r1, #0
 8007d8e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007d90:	1dbb      	adds	r3, r7, #6
 8007d92:	881b      	ldrh	r3, [r3, #0]
 8007d94:	b2da      	uxtb	r2, r3
 8007d96:	2380      	movs	r3, #128	; 0x80
 8007d98:	045c      	lsls	r4, r3, #17
 8007d9a:	197b      	adds	r3, r7, r5
 8007d9c:	8819      	ldrh	r1, [r3, #0]
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	4b23      	ldr	r3, [pc, #140]	; (8007e30 <I2C_RequestMemoryWrite+0xc4>)
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	0023      	movs	r3, r4
 8007da6:	f000 faa1 	bl	80082ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dac:	6a39      	ldr	r1, [r7, #32]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	0018      	movs	r0, r3
 8007db2:	f000 f911 	bl	8007fd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007db6:	1e03      	subs	r3, r0, #0
 8007db8:	d001      	beq.n	8007dbe <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	e033      	b.n	8007e26 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007dbe:	1dbb      	adds	r3, r7, #6
 8007dc0:	881b      	ldrh	r3, [r3, #0]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d107      	bne.n	8007dd6 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007dc6:	2308      	movs	r3, #8
 8007dc8:	18fb      	adds	r3, r7, r3
 8007dca:	881b      	ldrh	r3, [r3, #0]
 8007dcc:	b2da      	uxtb	r2, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	629a      	str	r2, [r3, #40]	; 0x28
 8007dd4:	e019      	b.n	8007e0a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007dd6:	2308      	movs	r3, #8
 8007dd8:	18fb      	adds	r3, r7, r3
 8007dda:	881b      	ldrh	r3, [r3, #0]
 8007ddc:	0a1b      	lsrs	r3, r3, #8
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	b2da      	uxtb	r2, r3
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dea:	6a39      	ldr	r1, [r7, #32]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	0018      	movs	r0, r3
 8007df0:	f000 f8f2 	bl	8007fd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007df4:	1e03      	subs	r3, r0, #0
 8007df6:	d001      	beq.n	8007dfc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e014      	b.n	8007e26 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007dfc:	2308      	movs	r3, #8
 8007dfe:	18fb      	adds	r3, r7, r3
 8007e00:	881b      	ldrh	r3, [r3, #0]
 8007e02:	b2da      	uxtb	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007e0a:	6a3a      	ldr	r2, [r7, #32]
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e10:	9300      	str	r3, [sp, #0]
 8007e12:	0013      	movs	r3, r2
 8007e14:	2200      	movs	r2, #0
 8007e16:	2180      	movs	r1, #128	; 0x80
 8007e18:	f000 f890 	bl	8007f3c <I2C_WaitOnFlagUntilTimeout>
 8007e1c:	1e03      	subs	r3, r0, #0
 8007e1e:	d001      	beq.n	8007e24 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e000      	b.n	8007e26 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	0018      	movs	r0, r3
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	b004      	add	sp, #16
 8007e2c:	bdb0      	pop	{r4, r5, r7, pc}
 8007e2e:	46c0      	nop			; (mov r8, r8)
 8007e30:	80002000 	.word	0x80002000

08007e34 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007e34:	b5b0      	push	{r4, r5, r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af02      	add	r7, sp, #8
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	000c      	movs	r4, r1
 8007e3e:	0010      	movs	r0, r2
 8007e40:	0019      	movs	r1, r3
 8007e42:	250a      	movs	r5, #10
 8007e44:	197b      	adds	r3, r7, r5
 8007e46:	1c22      	adds	r2, r4, #0
 8007e48:	801a      	strh	r2, [r3, #0]
 8007e4a:	2308      	movs	r3, #8
 8007e4c:	18fb      	adds	r3, r7, r3
 8007e4e:	1c02      	adds	r2, r0, #0
 8007e50:	801a      	strh	r2, [r3, #0]
 8007e52:	1dbb      	adds	r3, r7, #6
 8007e54:	1c0a      	adds	r2, r1, #0
 8007e56:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007e58:	1dbb      	adds	r3, r7, #6
 8007e5a:	881b      	ldrh	r3, [r3, #0]
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	197b      	adds	r3, r7, r5
 8007e60:	8819      	ldrh	r1, [r3, #0]
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	4b23      	ldr	r3, [pc, #140]	; (8007ef4 <I2C_RequestMemoryRead+0xc0>)
 8007e66:	9300      	str	r3, [sp, #0]
 8007e68:	2300      	movs	r3, #0
 8007e6a:	f000 fa3f 	bl	80082ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e70:	6a39      	ldr	r1, [r7, #32]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	0018      	movs	r0, r3
 8007e76:	f000 f8af 	bl	8007fd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007e7a:	1e03      	subs	r3, r0, #0
 8007e7c:	d001      	beq.n	8007e82 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e033      	b.n	8007eea <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007e82:	1dbb      	adds	r3, r7, #6
 8007e84:	881b      	ldrh	r3, [r3, #0]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d107      	bne.n	8007e9a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007e8a:	2308      	movs	r3, #8
 8007e8c:	18fb      	adds	r3, r7, r3
 8007e8e:	881b      	ldrh	r3, [r3, #0]
 8007e90:	b2da      	uxtb	r2, r3
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	629a      	str	r2, [r3, #40]	; 0x28
 8007e98:	e019      	b.n	8007ece <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007e9a:	2308      	movs	r3, #8
 8007e9c:	18fb      	adds	r3, r7, r3
 8007e9e:	881b      	ldrh	r3, [r3, #0]
 8007ea0:	0a1b      	lsrs	r3, r3, #8
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	b2da      	uxtb	r2, r3
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eae:	6a39      	ldr	r1, [r7, #32]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	0018      	movs	r0, r3
 8007eb4:	f000 f890 	bl	8007fd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007eb8:	1e03      	subs	r3, r0, #0
 8007eba:	d001      	beq.n	8007ec0 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e014      	b.n	8007eea <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ec0:	2308      	movs	r3, #8
 8007ec2:	18fb      	adds	r3, r7, r3
 8007ec4:	881b      	ldrh	r3, [r3, #0]
 8007ec6:	b2da      	uxtb	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007ece:	6a3a      	ldr	r2, [r7, #32]
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	0013      	movs	r3, r2
 8007ed8:	2200      	movs	r2, #0
 8007eda:	2140      	movs	r1, #64	; 0x40
 8007edc:	f000 f82e 	bl	8007f3c <I2C_WaitOnFlagUntilTimeout>
 8007ee0:	1e03      	subs	r3, r0, #0
 8007ee2:	d001      	beq.n	8007ee8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e000      	b.n	8007eea <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	0018      	movs	r0, r3
 8007eec:	46bd      	mov	sp, r7
 8007eee:	b004      	add	sp, #16
 8007ef0:	bdb0      	pop	{r4, r5, r7, pc}
 8007ef2:	46c0      	nop			; (mov r8, r8)
 8007ef4:	80002000 	.word	0x80002000

08007ef8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	2202      	movs	r2, #2
 8007f08:	4013      	ands	r3, r2
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d103      	bne.n	8007f16 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2200      	movs	r2, #0
 8007f14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	699b      	ldr	r3, [r3, #24]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	4013      	ands	r3, r2
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d007      	beq.n	8007f34 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	699a      	ldr	r2, [r3, #24]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2101      	movs	r1, #1
 8007f30:	430a      	orrs	r2, r1
 8007f32:	619a      	str	r2, [r3, #24]
  }
}
 8007f34:	46c0      	nop			; (mov r8, r8)
 8007f36:	46bd      	mov	sp, r7
 8007f38:	b002      	add	sp, #8
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	603b      	str	r3, [r7, #0]
 8007f48:	1dfb      	adds	r3, r7, #7
 8007f4a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f4c:	e030      	b.n	8007fb0 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	3301      	adds	r3, #1
 8007f52:	d02d      	beq.n	8007fb0 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f54:	f7fe f960 	bl	8006218 <HAL_GetTick>
 8007f58:	0002      	movs	r2, r0
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	683a      	ldr	r2, [r7, #0]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d302      	bcc.n	8007f6a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d122      	bne.n	8007fb0 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	68ba      	ldr	r2, [r7, #8]
 8007f72:	4013      	ands	r3, r2
 8007f74:	68ba      	ldr	r2, [r7, #8]
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	425a      	negs	r2, r3
 8007f7a:	4153      	adcs	r3, r2
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	001a      	movs	r2, r3
 8007f80:	1dfb      	adds	r3, r7, #7
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d113      	bne.n	8007fb0 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f8c:	2220      	movs	r2, #32
 8007f8e:	431a      	orrs	r2, r3
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2241      	movs	r2, #65	; 0x41
 8007f98:	2120      	movs	r1, #32
 8007f9a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2242      	movs	r2, #66	; 0x42
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2240      	movs	r2, #64	; 0x40
 8007fa8:	2100      	movs	r1, #0
 8007faa:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e00f      	b.n	8007fd0 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	699b      	ldr	r3, [r3, #24]
 8007fb6:	68ba      	ldr	r2, [r7, #8]
 8007fb8:	4013      	ands	r3, r2
 8007fba:	68ba      	ldr	r2, [r7, #8]
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	425a      	negs	r2, r3
 8007fc0:	4153      	adcs	r3, r2
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	001a      	movs	r2, r3
 8007fc6:	1dfb      	adds	r3, r7, #7
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d0bf      	beq.n	8007f4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	0018      	movs	r0, r3
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	b004      	add	sp, #16
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007fe4:	e032      	b.n	800804c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	68b9      	ldr	r1, [r7, #8]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	0018      	movs	r0, r3
 8007fee:	f000 f87d 	bl	80080ec <I2C_IsErrorOccurred>
 8007ff2:	1e03      	subs	r3, r0, #0
 8007ff4:	d001      	beq.n	8007ffa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e030      	b.n	800805c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	d025      	beq.n	800804c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008000:	f7fe f90a 	bl	8006218 <HAL_GetTick>
 8008004:	0002      	movs	r2, r0
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	68ba      	ldr	r2, [r7, #8]
 800800c:	429a      	cmp	r2, r3
 800800e:	d302      	bcc.n	8008016 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d11a      	bne.n	800804c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	699b      	ldr	r3, [r3, #24]
 800801c:	2202      	movs	r2, #2
 800801e:	4013      	ands	r3, r2
 8008020:	2b02      	cmp	r3, #2
 8008022:	d013      	beq.n	800804c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008028:	2220      	movs	r2, #32
 800802a:	431a      	orrs	r2, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2241      	movs	r2, #65	; 0x41
 8008034:	2120      	movs	r1, #32
 8008036:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2242      	movs	r2, #66	; 0x42
 800803c:	2100      	movs	r1, #0
 800803e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2240      	movs	r2, #64	; 0x40
 8008044:	2100      	movs	r1, #0
 8008046:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	e007      	b.n	800805c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	2202      	movs	r2, #2
 8008054:	4013      	ands	r3, r2
 8008056:	2b02      	cmp	r3, #2
 8008058:	d1c5      	bne.n	8007fe6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	0018      	movs	r0, r3
 800805e:	46bd      	mov	sp, r7
 8008060:	b004      	add	sp, #16
 8008062:	bd80      	pop	{r7, pc}

08008064 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008070:	e02f      	b.n	80080d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	68b9      	ldr	r1, [r7, #8]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	0018      	movs	r0, r3
 800807a:	f000 f837 	bl	80080ec <I2C_IsErrorOccurred>
 800807e:	1e03      	subs	r3, r0, #0
 8008080:	d001      	beq.n	8008086 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e02d      	b.n	80080e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008086:	f7fe f8c7 	bl	8006218 <HAL_GetTick>
 800808a:	0002      	movs	r2, r0
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	429a      	cmp	r2, r3
 8008094:	d302      	bcc.n	800809c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d11a      	bne.n	80080d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	2220      	movs	r2, #32
 80080a4:	4013      	ands	r3, r2
 80080a6:	2b20      	cmp	r3, #32
 80080a8:	d013      	beq.n	80080d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ae:	2220      	movs	r2, #32
 80080b0:	431a      	orrs	r2, r3
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2241      	movs	r2, #65	; 0x41
 80080ba:	2120      	movs	r1, #32
 80080bc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2242      	movs	r2, #66	; 0x42
 80080c2:	2100      	movs	r1, #0
 80080c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2240      	movs	r2, #64	; 0x40
 80080ca:	2100      	movs	r1, #0
 80080cc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e007      	b.n	80080e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	699b      	ldr	r3, [r3, #24]
 80080d8:	2220      	movs	r2, #32
 80080da:	4013      	ands	r3, r2
 80080dc:	2b20      	cmp	r3, #32
 80080de:	d1c8      	bne.n	8008072 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	0018      	movs	r0, r3
 80080e4:	46bd      	mov	sp, r7
 80080e6:	b004      	add	sp, #16
 80080e8:	bd80      	pop	{r7, pc}
	...

080080ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80080ec:	b590      	push	{r4, r7, lr}
 80080ee:	b08b      	sub	sp, #44	; 0x2c
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080f8:	2327      	movs	r3, #39	; 0x27
 80080fa:	18fb      	adds	r3, r7, r3
 80080fc:	2200      	movs	r2, #0
 80080fe:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	699b      	ldr	r3, [r3, #24]
 8008106:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008108:	2300      	movs	r3, #0
 800810a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	2210      	movs	r2, #16
 8008114:	4013      	ands	r3, r2
 8008116:	d100      	bne.n	800811a <I2C_IsErrorOccurred+0x2e>
 8008118:	e082      	b.n	8008220 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2210      	movs	r2, #16
 8008120:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008122:	e060      	b.n	80081e6 <I2C_IsErrorOccurred+0xfa>
 8008124:	2427      	movs	r4, #39	; 0x27
 8008126:	193b      	adds	r3, r7, r4
 8008128:	193a      	adds	r2, r7, r4
 800812a:	7812      	ldrb	r2, [r2, #0]
 800812c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	3301      	adds	r3, #1
 8008132:	d058      	beq.n	80081e6 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008134:	f7fe f870 	bl	8006218 <HAL_GetTick>
 8008138:	0002      	movs	r2, r0
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	429a      	cmp	r2, r3
 8008142:	d306      	bcc.n	8008152 <I2C_IsErrorOccurred+0x66>
 8008144:	193b      	adds	r3, r7, r4
 8008146:	193a      	adds	r2, r7, r4
 8008148:	7812      	ldrb	r2, [r2, #0]
 800814a:	701a      	strb	r2, [r3, #0]
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d149      	bne.n	80081e6 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	685a      	ldr	r2, [r3, #4]
 8008158:	2380      	movs	r3, #128	; 0x80
 800815a:	01db      	lsls	r3, r3, #7
 800815c:	4013      	ands	r3, r2
 800815e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008160:	2013      	movs	r0, #19
 8008162:	183b      	adds	r3, r7, r0
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	2142      	movs	r1, #66	; 0x42
 8008168:	5c52      	ldrb	r2, [r2, r1]
 800816a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	699a      	ldr	r2, [r3, #24]
 8008172:	2380      	movs	r3, #128	; 0x80
 8008174:	021b      	lsls	r3, r3, #8
 8008176:	401a      	ands	r2, r3
 8008178:	2380      	movs	r3, #128	; 0x80
 800817a:	021b      	lsls	r3, r3, #8
 800817c:	429a      	cmp	r2, r3
 800817e:	d126      	bne.n	80081ce <I2C_IsErrorOccurred+0xe2>
 8008180:	697a      	ldr	r2, [r7, #20]
 8008182:	2380      	movs	r3, #128	; 0x80
 8008184:	01db      	lsls	r3, r3, #7
 8008186:	429a      	cmp	r2, r3
 8008188:	d021      	beq.n	80081ce <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800818a:	183b      	adds	r3, r7, r0
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	2b20      	cmp	r3, #32
 8008190:	d01d      	beq.n	80081ce <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	685a      	ldr	r2, [r3, #4]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2180      	movs	r1, #128	; 0x80
 800819e:	01c9      	lsls	r1, r1, #7
 80081a0:	430a      	orrs	r2, r1
 80081a2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80081a4:	f7fe f838 	bl	8006218 <HAL_GetTick>
 80081a8:	0003      	movs	r3, r0
 80081aa:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081ac:	e00f      	b.n	80081ce <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80081ae:	f7fe f833 	bl	8006218 <HAL_GetTick>
 80081b2:	0002      	movs	r2, r0
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	1ad3      	subs	r3, r2, r3
 80081b8:	2b19      	cmp	r3, #25
 80081ba:	d908      	bls.n	80081ce <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80081bc:	6a3b      	ldr	r3, [r7, #32]
 80081be:	2220      	movs	r2, #32
 80081c0:	4313      	orrs	r3, r2
 80081c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80081c4:	2327      	movs	r3, #39	; 0x27
 80081c6:	18fb      	adds	r3, r7, r3
 80081c8:	2201      	movs	r2, #1
 80081ca:	701a      	strb	r2, [r3, #0]

              break;
 80081cc:	e00b      	b.n	80081e6 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	2220      	movs	r2, #32
 80081d6:	4013      	ands	r3, r2
 80081d8:	2127      	movs	r1, #39	; 0x27
 80081da:	187a      	adds	r2, r7, r1
 80081dc:	1879      	adds	r1, r7, r1
 80081de:	7809      	ldrb	r1, [r1, #0]
 80081e0:	7011      	strb	r1, [r2, #0]
 80081e2:	2b20      	cmp	r3, #32
 80081e4:	d1e3      	bne.n	80081ae <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	2220      	movs	r2, #32
 80081ee:	4013      	ands	r3, r2
 80081f0:	2b20      	cmp	r3, #32
 80081f2:	d004      	beq.n	80081fe <I2C_IsErrorOccurred+0x112>
 80081f4:	2327      	movs	r3, #39	; 0x27
 80081f6:	18fb      	adds	r3, r7, r3
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d092      	beq.n	8008124 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80081fe:	2327      	movs	r3, #39	; 0x27
 8008200:	18fb      	adds	r3, r7, r3
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d103      	bne.n	8008210 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2220      	movs	r2, #32
 800820e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008210:	6a3b      	ldr	r3, [r7, #32]
 8008212:	2204      	movs	r2, #4
 8008214:	4313      	orrs	r3, r2
 8008216:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008218:	2327      	movs	r3, #39	; 0x27
 800821a:	18fb      	adds	r3, r7, r3
 800821c:	2201      	movs	r2, #1
 800821e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008228:	69ba      	ldr	r2, [r7, #24]
 800822a:	2380      	movs	r3, #128	; 0x80
 800822c:	005b      	lsls	r3, r3, #1
 800822e:	4013      	ands	r3, r2
 8008230:	d00c      	beq.n	800824c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008232:	6a3b      	ldr	r3, [r7, #32]
 8008234:	2201      	movs	r2, #1
 8008236:	4313      	orrs	r3, r2
 8008238:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2280      	movs	r2, #128	; 0x80
 8008240:	0052      	lsls	r2, r2, #1
 8008242:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008244:	2327      	movs	r3, #39	; 0x27
 8008246:	18fb      	adds	r3, r7, r3
 8008248:	2201      	movs	r2, #1
 800824a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800824c:	69ba      	ldr	r2, [r7, #24]
 800824e:	2380      	movs	r3, #128	; 0x80
 8008250:	00db      	lsls	r3, r3, #3
 8008252:	4013      	ands	r3, r2
 8008254:	d00c      	beq.n	8008270 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008256:	6a3b      	ldr	r3, [r7, #32]
 8008258:	2208      	movs	r2, #8
 800825a:	4313      	orrs	r3, r2
 800825c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2280      	movs	r2, #128	; 0x80
 8008264:	00d2      	lsls	r2, r2, #3
 8008266:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008268:	2327      	movs	r3, #39	; 0x27
 800826a:	18fb      	adds	r3, r7, r3
 800826c:	2201      	movs	r2, #1
 800826e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008270:	69ba      	ldr	r2, [r7, #24]
 8008272:	2380      	movs	r3, #128	; 0x80
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	4013      	ands	r3, r2
 8008278:	d00c      	beq.n	8008294 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800827a:	6a3b      	ldr	r3, [r7, #32]
 800827c:	2202      	movs	r2, #2
 800827e:	4313      	orrs	r3, r2
 8008280:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2280      	movs	r2, #128	; 0x80
 8008288:	0092      	lsls	r2, r2, #2
 800828a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800828c:	2327      	movs	r3, #39	; 0x27
 800828e:	18fb      	adds	r3, r7, r3
 8008290:	2201      	movs	r2, #1
 8008292:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8008294:	2327      	movs	r3, #39	; 0x27
 8008296:	18fb      	adds	r3, r7, r3
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d01d      	beq.n	80082da <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	0018      	movs	r0, r3
 80082a2:	f7ff fe29 	bl	8007ef8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	685a      	ldr	r2, [r3, #4]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	490d      	ldr	r1, [pc, #52]	; (80082e8 <I2C_IsErrorOccurred+0x1fc>)
 80082b2:	400a      	ands	r2, r1
 80082b4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082ba:	6a3b      	ldr	r3, [r7, #32]
 80082bc:	431a      	orrs	r2, r3
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2241      	movs	r2, #65	; 0x41
 80082c6:	2120      	movs	r1, #32
 80082c8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2242      	movs	r2, #66	; 0x42
 80082ce:	2100      	movs	r1, #0
 80082d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2240      	movs	r2, #64	; 0x40
 80082d6:	2100      	movs	r1, #0
 80082d8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80082da:	2327      	movs	r3, #39	; 0x27
 80082dc:	18fb      	adds	r3, r7, r3
 80082de:	781b      	ldrb	r3, [r3, #0]
}
 80082e0:	0018      	movs	r0, r3
 80082e2:	46bd      	mov	sp, r7
 80082e4:	b00b      	add	sp, #44	; 0x2c
 80082e6:	bd90      	pop	{r4, r7, pc}
 80082e8:	fe00e800 	.word	0xfe00e800

080082ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80082ec:	b590      	push	{r4, r7, lr}
 80082ee:	b087      	sub	sp, #28
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	0008      	movs	r0, r1
 80082f6:	0011      	movs	r1, r2
 80082f8:	607b      	str	r3, [r7, #4]
 80082fa:	240a      	movs	r4, #10
 80082fc:	193b      	adds	r3, r7, r4
 80082fe:	1c02      	adds	r2, r0, #0
 8008300:	801a      	strh	r2, [r3, #0]
 8008302:	2009      	movs	r0, #9
 8008304:	183b      	adds	r3, r7, r0
 8008306:	1c0a      	adds	r2, r1, #0
 8008308:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800830a:	193b      	adds	r3, r7, r4
 800830c:	881b      	ldrh	r3, [r3, #0]
 800830e:	059b      	lsls	r3, r3, #22
 8008310:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008312:	183b      	adds	r3, r7, r0
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	0419      	lsls	r1, r3, #16
 8008318:	23ff      	movs	r3, #255	; 0xff
 800831a:	041b      	lsls	r3, r3, #16
 800831c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800831e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008326:	4313      	orrs	r3, r2
 8008328:	005b      	lsls	r3, r3, #1
 800832a:	085b      	lsrs	r3, r3, #1
 800832c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008336:	0d51      	lsrs	r1, r2, #21
 8008338:	2280      	movs	r2, #128	; 0x80
 800833a:	00d2      	lsls	r2, r2, #3
 800833c:	400a      	ands	r2, r1
 800833e:	4907      	ldr	r1, [pc, #28]	; (800835c <I2C_TransferConfig+0x70>)
 8008340:	430a      	orrs	r2, r1
 8008342:	43d2      	mvns	r2, r2
 8008344:	401a      	ands	r2, r3
 8008346:	0011      	movs	r1, r2
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	430a      	orrs	r2, r1
 8008350:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008352:	46c0      	nop			; (mov r8, r8)
 8008354:	46bd      	mov	sp, r7
 8008356:	b007      	add	sp, #28
 8008358:	bd90      	pop	{r4, r7, pc}
 800835a:	46c0      	nop			; (mov r8, r8)
 800835c:	03ff63ff 	.word	0x03ff63ff

08008360 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2241      	movs	r2, #65	; 0x41
 800836e:	5c9b      	ldrb	r3, [r3, r2]
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b20      	cmp	r3, #32
 8008374:	d138      	bne.n	80083e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2240      	movs	r2, #64	; 0x40
 800837a:	5c9b      	ldrb	r3, [r3, r2]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d101      	bne.n	8008384 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008380:	2302      	movs	r3, #2
 8008382:	e032      	b.n	80083ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2240      	movs	r2, #64	; 0x40
 8008388:	2101      	movs	r1, #1
 800838a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2241      	movs	r2, #65	; 0x41
 8008390:	2124      	movs	r1, #36	; 0x24
 8008392:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2101      	movs	r1, #1
 80083a0:	438a      	bics	r2, r1
 80083a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4911      	ldr	r1, [pc, #68]	; (80083f4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80083b0:	400a      	ands	r2, r1
 80083b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	6819      	ldr	r1, [r3, #0]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	430a      	orrs	r2, r1
 80083c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2101      	movs	r1, #1
 80083d0:	430a      	orrs	r2, r1
 80083d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2241      	movs	r2, #65	; 0x41
 80083d8:	2120      	movs	r1, #32
 80083da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2240      	movs	r2, #64	; 0x40
 80083e0:	2100      	movs	r1, #0
 80083e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80083e4:	2300      	movs	r3, #0
 80083e6:	e000      	b.n	80083ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80083e8:	2302      	movs	r3, #2
  }
}
 80083ea:	0018      	movs	r0, r3
 80083ec:	46bd      	mov	sp, r7
 80083ee:	b002      	add	sp, #8
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	46c0      	nop			; (mov r8, r8)
 80083f4:	ffffefff 	.word	0xffffefff

080083f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2241      	movs	r2, #65	; 0x41
 8008406:	5c9b      	ldrb	r3, [r3, r2]
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b20      	cmp	r3, #32
 800840c:	d139      	bne.n	8008482 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2240      	movs	r2, #64	; 0x40
 8008412:	5c9b      	ldrb	r3, [r3, r2]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d101      	bne.n	800841c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008418:	2302      	movs	r3, #2
 800841a:	e033      	b.n	8008484 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2240      	movs	r2, #64	; 0x40
 8008420:	2101      	movs	r1, #1
 8008422:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2241      	movs	r2, #65	; 0x41
 8008428:	2124      	movs	r1, #36	; 0x24
 800842a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2101      	movs	r1, #1
 8008438:	438a      	bics	r2, r1
 800843a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	4a11      	ldr	r2, [pc, #68]	; (800848c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8008448:	4013      	ands	r3, r2
 800844a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	021b      	lsls	r3, r3, #8
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	4313      	orrs	r3, r2
 8008454:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2101      	movs	r1, #1
 800846a:	430a      	orrs	r2, r1
 800846c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2241      	movs	r2, #65	; 0x41
 8008472:	2120      	movs	r1, #32
 8008474:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2240      	movs	r2, #64	; 0x40
 800847a:	2100      	movs	r1, #0
 800847c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800847e:	2300      	movs	r3, #0
 8008480:	e000      	b.n	8008484 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008482:	2302      	movs	r3, #2
  }
}
 8008484:	0018      	movs	r0, r3
 8008486:	46bd      	mov	sp, r7
 8008488:	b004      	add	sp, #16
 800848a:	bd80      	pop	{r7, pc}
 800848c:	fffff0ff 	.word	0xfffff0ff

08008490 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008492:	b08b      	sub	sp, #44	; 0x2c
 8008494:	af06      	add	r7, sp, #24
 8008496:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d101      	bne.n	80084a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e0f0      	b.n	8008684 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	4a79      	ldr	r2, [pc, #484]	; (800868c <HAL_PCD_Init+0x1fc>)
 80084a6:	5c9b      	ldrb	r3, [r3, r2]
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d108      	bne.n	80084c0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	23aa      	movs	r3, #170	; 0xaa
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	2100      	movs	r1, #0
 80084b6:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	0018      	movs	r0, r3
 80084bc:	f7fd fe08 	bl	80060d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4a72      	ldr	r2, [pc, #456]	; (800868c <HAL_PCD_Init+0x1fc>)
 80084c4:	2103      	movs	r1, #3
 80084c6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	0018      	movs	r0, r3
 80084ce:	f003 fdff 	bl	800c0d0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084d2:	230f      	movs	r3, #15
 80084d4:	18fb      	adds	r3, r7, r3
 80084d6:	2200      	movs	r2, #0
 80084d8:	701a      	strb	r2, [r3, #0]
 80084da:	e049      	b.n	8008570 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80084dc:	200f      	movs	r0, #15
 80084de:	183b      	adds	r3, r7, r0
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	6879      	ldr	r1, [r7, #4]
 80084e4:	1c5a      	adds	r2, r3, #1
 80084e6:	0013      	movs	r3, r2
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	189b      	adds	r3, r3, r2
 80084ec:	00db      	lsls	r3, r3, #3
 80084ee:	18cb      	adds	r3, r1, r3
 80084f0:	3301      	adds	r3, #1
 80084f2:	2201      	movs	r2, #1
 80084f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80084f6:	183b      	adds	r3, r7, r0
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	6879      	ldr	r1, [r7, #4]
 80084fc:	1c5a      	adds	r2, r3, #1
 80084fe:	0013      	movs	r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	189b      	adds	r3, r3, r2
 8008504:	00db      	lsls	r3, r3, #3
 8008506:	183a      	adds	r2, r7, r0
 8008508:	7812      	ldrb	r2, [r2, #0]
 800850a:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800850c:	183b      	adds	r3, r7, r0
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	6879      	ldr	r1, [r7, #4]
 8008512:	1c5a      	adds	r2, r3, #1
 8008514:	0013      	movs	r3, r2
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	189b      	adds	r3, r3, r2
 800851a:	00db      	lsls	r3, r3, #3
 800851c:	18cb      	adds	r3, r1, r3
 800851e:	3303      	adds	r3, #3
 8008520:	2200      	movs	r2, #0
 8008522:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008524:	183b      	adds	r3, r7, r0
 8008526:	781a      	ldrb	r2, [r3, #0]
 8008528:	6879      	ldr	r1, [r7, #4]
 800852a:	0013      	movs	r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	189b      	adds	r3, r3, r2
 8008530:	00db      	lsls	r3, r3, #3
 8008532:	18cb      	adds	r3, r1, r3
 8008534:	3338      	adds	r3, #56	; 0x38
 8008536:	2200      	movs	r2, #0
 8008538:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800853a:	183b      	adds	r3, r7, r0
 800853c:	781a      	ldrb	r2, [r3, #0]
 800853e:	6879      	ldr	r1, [r7, #4]
 8008540:	0013      	movs	r3, r2
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	189b      	adds	r3, r3, r2
 8008546:	00db      	lsls	r3, r3, #3
 8008548:	18cb      	adds	r3, r1, r3
 800854a:	333c      	adds	r3, #60	; 0x3c
 800854c:	2200      	movs	r2, #0
 800854e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008550:	183b      	adds	r3, r7, r0
 8008552:	781a      	ldrb	r2, [r3, #0]
 8008554:	6879      	ldr	r1, [r7, #4]
 8008556:	0013      	movs	r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	189b      	adds	r3, r3, r2
 800855c:	00db      	lsls	r3, r3, #3
 800855e:	18cb      	adds	r3, r1, r3
 8008560:	3340      	adds	r3, #64	; 0x40
 8008562:	2200      	movs	r2, #0
 8008564:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008566:	183b      	adds	r3, r7, r0
 8008568:	781a      	ldrb	r2, [r3, #0]
 800856a:	183b      	adds	r3, r7, r0
 800856c:	3201      	adds	r2, #1
 800856e:	701a      	strb	r2, [r3, #0]
 8008570:	210f      	movs	r1, #15
 8008572:	187b      	adds	r3, r7, r1
 8008574:	781a      	ldrb	r2, [r3, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	429a      	cmp	r2, r3
 800857c:	d3ae      	bcc.n	80084dc <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800857e:	187b      	adds	r3, r7, r1
 8008580:	2200      	movs	r2, #0
 8008582:	701a      	strb	r2, [r3, #0]
 8008584:	e056      	b.n	8008634 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008586:	240f      	movs	r4, #15
 8008588:	193b      	adds	r3, r7, r4
 800858a:	781a      	ldrb	r2, [r3, #0]
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	236a      	movs	r3, #106	; 0x6a
 8008590:	33ff      	adds	r3, #255	; 0xff
 8008592:	0019      	movs	r1, r3
 8008594:	0013      	movs	r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	189b      	adds	r3, r3, r2
 800859a:	00db      	lsls	r3, r3, #3
 800859c:	18c3      	adds	r3, r0, r3
 800859e:	185b      	adds	r3, r3, r1
 80085a0:	2200      	movs	r2, #0
 80085a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80085a4:	193b      	adds	r3, r7, r4
 80085a6:	781a      	ldrb	r2, [r3, #0]
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	23b4      	movs	r3, #180	; 0xb4
 80085ac:	0059      	lsls	r1, r3, #1
 80085ae:	0013      	movs	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	189b      	adds	r3, r3, r2
 80085b4:	00db      	lsls	r3, r3, #3
 80085b6:	18c3      	adds	r3, r0, r3
 80085b8:	185b      	adds	r3, r3, r1
 80085ba:	193a      	adds	r2, r7, r4
 80085bc:	7812      	ldrb	r2, [r2, #0]
 80085be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80085c0:	193b      	adds	r3, r7, r4
 80085c2:	781a      	ldrb	r2, [r3, #0]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	236c      	movs	r3, #108	; 0x6c
 80085c8:	33ff      	adds	r3, #255	; 0xff
 80085ca:	0019      	movs	r1, r3
 80085cc:	0013      	movs	r3, r2
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	189b      	adds	r3, r3, r2
 80085d2:	00db      	lsls	r3, r3, #3
 80085d4:	18c3      	adds	r3, r0, r3
 80085d6:	185b      	adds	r3, r3, r1
 80085d8:	2200      	movs	r2, #0
 80085da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80085dc:	193b      	adds	r3, r7, r4
 80085de:	781a      	ldrb	r2, [r3, #0]
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	23bc      	movs	r3, #188	; 0xbc
 80085e4:	0059      	lsls	r1, r3, #1
 80085e6:	0013      	movs	r3, r2
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	189b      	adds	r3, r3, r2
 80085ec:	00db      	lsls	r3, r3, #3
 80085ee:	18c3      	adds	r3, r0, r3
 80085f0:	185b      	adds	r3, r3, r1
 80085f2:	2200      	movs	r2, #0
 80085f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80085f6:	193b      	adds	r3, r7, r4
 80085f8:	781a      	ldrb	r2, [r3, #0]
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	23be      	movs	r3, #190	; 0xbe
 80085fe:	0059      	lsls	r1, r3, #1
 8008600:	0013      	movs	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	189b      	adds	r3, r3, r2
 8008606:	00db      	lsls	r3, r3, #3
 8008608:	18c3      	adds	r3, r0, r3
 800860a:	185b      	adds	r3, r3, r1
 800860c:	2200      	movs	r2, #0
 800860e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008610:	193b      	adds	r3, r7, r4
 8008612:	781a      	ldrb	r2, [r3, #0]
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	23c0      	movs	r3, #192	; 0xc0
 8008618:	0059      	lsls	r1, r3, #1
 800861a:	0013      	movs	r3, r2
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	189b      	adds	r3, r3, r2
 8008620:	00db      	lsls	r3, r3, #3
 8008622:	18c3      	adds	r3, r0, r3
 8008624:	185b      	adds	r3, r3, r1
 8008626:	2200      	movs	r2, #0
 8008628:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800862a:	193b      	adds	r3, r7, r4
 800862c:	781a      	ldrb	r2, [r3, #0]
 800862e:	193b      	adds	r3, r7, r4
 8008630:	3201      	adds	r2, #1
 8008632:	701a      	strb	r2, [r3, #0]
 8008634:	230f      	movs	r3, #15
 8008636:	18fb      	adds	r3, r7, r3
 8008638:	781a      	ldrb	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	429a      	cmp	r2, r3
 8008640:	d3a1      	bcc.n	8008586 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6818      	ldr	r0, [r3, #0]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	466a      	mov	r2, sp
 800864a:	0011      	movs	r1, r2
 800864c:	001a      	movs	r2, r3
 800864e:	3210      	adds	r2, #16
 8008650:	ca70      	ldmia	r2!, {r4, r5, r6}
 8008652:	c170      	stmia	r1!, {r4, r5, r6}
 8008654:	ca30      	ldmia	r2!, {r4, r5}
 8008656:	c130      	stmia	r1!, {r4, r5}
 8008658:	6859      	ldr	r1, [r3, #4]
 800865a:	689a      	ldr	r2, [r3, #8]
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	f003 fd51 	bl	800c104 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2224      	movs	r2, #36	; 0x24
 8008666:	2100      	movs	r1, #0
 8008668:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a07      	ldr	r2, [pc, #28]	; (800868c <HAL_PCD_Init+0x1fc>)
 800866e:	2101      	movs	r1, #1
 8008670:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	69db      	ldr	r3, [r3, #28]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d103      	bne.n	8008682 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	0018      	movs	r0, r3
 800867e:	f000 f807 	bl	8008690 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	0018      	movs	r0, r3
 8008686:	46bd      	mov	sp, r7
 8008688:	b005      	add	sp, #20
 800868a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800868c:	000002a9 	.word	0x000002a9

08008690 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	23ba      	movs	r3, #186	; 0xba
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	2101      	movs	r1, #1
 80086a6:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	23b8      	movs	r3, #184	; 0xb8
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	2100      	movs	r1, #0
 80086b0:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2254      	movs	r2, #84	; 0x54
 80086b6:	5a9b      	ldrh	r3, [r3, r2]
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	2201      	movs	r2, #1
 80086bc:	4313      	orrs	r3, r2
 80086be:	b299      	uxth	r1, r3
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2254      	movs	r2, #84	; 0x54
 80086c4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2254      	movs	r2, #84	; 0x54
 80086ca:	5a9b      	ldrh	r3, [r3, r2]
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	2202      	movs	r2, #2
 80086d0:	4313      	orrs	r3, r2
 80086d2:	b299      	uxth	r1, r3
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2254      	movs	r2, #84	; 0x54
 80086d8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	0018      	movs	r0, r3
 80086de:	46bd      	mov	sp, r7
 80086e0:	b004      	add	sp, #16
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b088      	sub	sp, #32
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d102      	bne.n	80086f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	f000 fb76 	bl	8008de4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2201      	movs	r2, #1
 80086fe:	4013      	ands	r3, r2
 8008700:	d100      	bne.n	8008704 <HAL_RCC_OscConfig+0x20>
 8008702:	e08e      	b.n	8008822 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8008704:	4bc5      	ldr	r3, [pc, #788]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	220c      	movs	r2, #12
 800870a:	4013      	ands	r3, r2
 800870c:	2b04      	cmp	r3, #4
 800870e:	d00e      	beq.n	800872e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008710:	4bc2      	ldr	r3, [pc, #776]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	220c      	movs	r2, #12
 8008716:	4013      	ands	r3, r2
 8008718:	2b08      	cmp	r3, #8
 800871a:	d117      	bne.n	800874c <HAL_RCC_OscConfig+0x68>
 800871c:	4bbf      	ldr	r3, [pc, #764]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 800871e:	685a      	ldr	r2, [r3, #4]
 8008720:	23c0      	movs	r3, #192	; 0xc0
 8008722:	025b      	lsls	r3, r3, #9
 8008724:	401a      	ands	r2, r3
 8008726:	2380      	movs	r3, #128	; 0x80
 8008728:	025b      	lsls	r3, r3, #9
 800872a:	429a      	cmp	r2, r3
 800872c:	d10e      	bne.n	800874c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800872e:	4bbb      	ldr	r3, [pc, #748]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	2380      	movs	r3, #128	; 0x80
 8008734:	029b      	lsls	r3, r3, #10
 8008736:	4013      	ands	r3, r2
 8008738:	d100      	bne.n	800873c <HAL_RCC_OscConfig+0x58>
 800873a:	e071      	b.n	8008820 <HAL_RCC_OscConfig+0x13c>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d000      	beq.n	8008746 <HAL_RCC_OscConfig+0x62>
 8008744:	e06c      	b.n	8008820 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	f000 fb4c 	bl	8008de4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d107      	bne.n	8008764 <HAL_RCC_OscConfig+0x80>
 8008754:	4bb1      	ldr	r3, [pc, #708]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	4bb0      	ldr	r3, [pc, #704]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 800875a:	2180      	movs	r1, #128	; 0x80
 800875c:	0249      	lsls	r1, r1, #9
 800875e:	430a      	orrs	r2, r1
 8008760:	601a      	str	r2, [r3, #0]
 8008762:	e02f      	b.n	80087c4 <HAL_RCC_OscConfig+0xe0>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10c      	bne.n	8008786 <HAL_RCC_OscConfig+0xa2>
 800876c:	4bab      	ldr	r3, [pc, #684]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	4baa      	ldr	r3, [pc, #680]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 8008772:	49ab      	ldr	r1, [pc, #684]	; (8008a20 <HAL_RCC_OscConfig+0x33c>)
 8008774:	400a      	ands	r2, r1
 8008776:	601a      	str	r2, [r3, #0]
 8008778:	4ba8      	ldr	r3, [pc, #672]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	4ba7      	ldr	r3, [pc, #668]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 800877e:	49a9      	ldr	r1, [pc, #676]	; (8008a24 <HAL_RCC_OscConfig+0x340>)
 8008780:	400a      	ands	r2, r1
 8008782:	601a      	str	r2, [r3, #0]
 8008784:	e01e      	b.n	80087c4 <HAL_RCC_OscConfig+0xe0>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	2b05      	cmp	r3, #5
 800878c:	d10e      	bne.n	80087ac <HAL_RCC_OscConfig+0xc8>
 800878e:	4ba3      	ldr	r3, [pc, #652]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	4ba2      	ldr	r3, [pc, #648]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 8008794:	2180      	movs	r1, #128	; 0x80
 8008796:	02c9      	lsls	r1, r1, #11
 8008798:	430a      	orrs	r2, r1
 800879a:	601a      	str	r2, [r3, #0]
 800879c:	4b9f      	ldr	r3, [pc, #636]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	4b9e      	ldr	r3, [pc, #632]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 80087a2:	2180      	movs	r1, #128	; 0x80
 80087a4:	0249      	lsls	r1, r1, #9
 80087a6:	430a      	orrs	r2, r1
 80087a8:	601a      	str	r2, [r3, #0]
 80087aa:	e00b      	b.n	80087c4 <HAL_RCC_OscConfig+0xe0>
 80087ac:	4b9b      	ldr	r3, [pc, #620]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	4b9a      	ldr	r3, [pc, #616]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 80087b2:	499b      	ldr	r1, [pc, #620]	; (8008a20 <HAL_RCC_OscConfig+0x33c>)
 80087b4:	400a      	ands	r2, r1
 80087b6:	601a      	str	r2, [r3, #0]
 80087b8:	4b98      	ldr	r3, [pc, #608]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	4b97      	ldr	r3, [pc, #604]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 80087be:	4999      	ldr	r1, [pc, #612]	; (8008a24 <HAL_RCC_OscConfig+0x340>)
 80087c0:	400a      	ands	r2, r1
 80087c2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d014      	beq.n	80087f6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087cc:	f7fd fd24 	bl	8006218 <HAL_GetTick>
 80087d0:	0003      	movs	r3, r0
 80087d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087d4:	e008      	b.n	80087e8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80087d6:	f7fd fd1f 	bl	8006218 <HAL_GetTick>
 80087da:	0002      	movs	r2, r0
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	2b64      	cmp	r3, #100	; 0x64
 80087e2:	d901      	bls.n	80087e8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e2fd      	b.n	8008de4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087e8:	4b8c      	ldr	r3, [pc, #560]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	2380      	movs	r3, #128	; 0x80
 80087ee:	029b      	lsls	r3, r3, #10
 80087f0:	4013      	ands	r3, r2
 80087f2:	d0f0      	beq.n	80087d6 <HAL_RCC_OscConfig+0xf2>
 80087f4:	e015      	b.n	8008822 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087f6:	f7fd fd0f 	bl	8006218 <HAL_GetTick>
 80087fa:	0003      	movs	r3, r0
 80087fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087fe:	e008      	b.n	8008812 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008800:	f7fd fd0a 	bl	8006218 <HAL_GetTick>
 8008804:	0002      	movs	r2, r0
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	2b64      	cmp	r3, #100	; 0x64
 800880c:	d901      	bls.n	8008812 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800880e:	2303      	movs	r3, #3
 8008810:	e2e8      	b.n	8008de4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008812:	4b82      	ldr	r3, [pc, #520]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	2380      	movs	r3, #128	; 0x80
 8008818:	029b      	lsls	r3, r3, #10
 800881a:	4013      	ands	r3, r2
 800881c:	d1f0      	bne.n	8008800 <HAL_RCC_OscConfig+0x11c>
 800881e:	e000      	b.n	8008822 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008820:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2202      	movs	r2, #2
 8008828:	4013      	ands	r3, r2
 800882a:	d100      	bne.n	800882e <HAL_RCC_OscConfig+0x14a>
 800882c:	e06c      	b.n	8008908 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800882e:	4b7b      	ldr	r3, [pc, #492]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	220c      	movs	r2, #12
 8008834:	4013      	ands	r3, r2
 8008836:	d00e      	beq.n	8008856 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8008838:	4b78      	ldr	r3, [pc, #480]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	220c      	movs	r2, #12
 800883e:	4013      	ands	r3, r2
 8008840:	2b08      	cmp	r3, #8
 8008842:	d11f      	bne.n	8008884 <HAL_RCC_OscConfig+0x1a0>
 8008844:	4b75      	ldr	r3, [pc, #468]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 8008846:	685a      	ldr	r2, [r3, #4]
 8008848:	23c0      	movs	r3, #192	; 0xc0
 800884a:	025b      	lsls	r3, r3, #9
 800884c:	401a      	ands	r2, r3
 800884e:	2380      	movs	r3, #128	; 0x80
 8008850:	021b      	lsls	r3, r3, #8
 8008852:	429a      	cmp	r2, r3
 8008854:	d116      	bne.n	8008884 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008856:	4b71      	ldr	r3, [pc, #452]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2202      	movs	r2, #2
 800885c:	4013      	ands	r3, r2
 800885e:	d005      	beq.n	800886c <HAL_RCC_OscConfig+0x188>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d001      	beq.n	800886c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	e2bb      	b.n	8008de4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800886c:	4b6b      	ldr	r3, [pc, #428]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	22f8      	movs	r2, #248	; 0xf8
 8008872:	4393      	bics	r3, r2
 8008874:	0019      	movs	r1, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	00da      	lsls	r2, r3, #3
 800887c:	4b67      	ldr	r3, [pc, #412]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 800887e:	430a      	orrs	r2, r1
 8008880:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008882:	e041      	b.n	8008908 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d024      	beq.n	80088d6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800888c:	4b63      	ldr	r3, [pc, #396]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	4b62      	ldr	r3, [pc, #392]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 8008892:	2101      	movs	r1, #1
 8008894:	430a      	orrs	r2, r1
 8008896:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008898:	f7fd fcbe 	bl	8006218 <HAL_GetTick>
 800889c:	0003      	movs	r3, r0
 800889e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088a0:	e008      	b.n	80088b4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088a2:	f7fd fcb9 	bl	8006218 <HAL_GetTick>
 80088a6:	0002      	movs	r2, r0
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	1ad3      	subs	r3, r2, r3
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	d901      	bls.n	80088b4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80088b0:	2303      	movs	r3, #3
 80088b2:	e297      	b.n	8008de4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088b4:	4b59      	ldr	r3, [pc, #356]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2202      	movs	r2, #2
 80088ba:	4013      	ands	r3, r2
 80088bc:	d0f1      	beq.n	80088a2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088be:	4b57      	ldr	r3, [pc, #348]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	22f8      	movs	r2, #248	; 0xf8
 80088c4:	4393      	bics	r3, r2
 80088c6:	0019      	movs	r1, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	00da      	lsls	r2, r3, #3
 80088ce:	4b53      	ldr	r3, [pc, #332]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 80088d0:	430a      	orrs	r2, r1
 80088d2:	601a      	str	r2, [r3, #0]
 80088d4:	e018      	b.n	8008908 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088d6:	4b51      	ldr	r3, [pc, #324]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	4b50      	ldr	r3, [pc, #320]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 80088dc:	2101      	movs	r1, #1
 80088de:	438a      	bics	r2, r1
 80088e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088e2:	f7fd fc99 	bl	8006218 <HAL_GetTick>
 80088e6:	0003      	movs	r3, r0
 80088e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088ea:	e008      	b.n	80088fe <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088ec:	f7fd fc94 	bl	8006218 <HAL_GetTick>
 80088f0:	0002      	movs	r2, r0
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	1ad3      	subs	r3, r2, r3
 80088f6:	2b02      	cmp	r3, #2
 80088f8:	d901      	bls.n	80088fe <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80088fa:	2303      	movs	r3, #3
 80088fc:	e272      	b.n	8008de4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088fe:	4b47      	ldr	r3, [pc, #284]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2202      	movs	r2, #2
 8008904:	4013      	ands	r3, r2
 8008906:	d1f1      	bne.n	80088ec <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2208      	movs	r2, #8
 800890e:	4013      	ands	r3, r2
 8008910:	d036      	beq.n	8008980 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	69db      	ldr	r3, [r3, #28]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d019      	beq.n	800894e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800891a:	4b40      	ldr	r3, [pc, #256]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 800891c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800891e:	4b3f      	ldr	r3, [pc, #252]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 8008920:	2101      	movs	r1, #1
 8008922:	430a      	orrs	r2, r1
 8008924:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008926:	f7fd fc77 	bl	8006218 <HAL_GetTick>
 800892a:	0003      	movs	r3, r0
 800892c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800892e:	e008      	b.n	8008942 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008930:	f7fd fc72 	bl	8006218 <HAL_GetTick>
 8008934:	0002      	movs	r2, r0
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	1ad3      	subs	r3, r2, r3
 800893a:	2b02      	cmp	r3, #2
 800893c:	d901      	bls.n	8008942 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800893e:	2303      	movs	r3, #3
 8008940:	e250      	b.n	8008de4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008942:	4b36      	ldr	r3, [pc, #216]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 8008944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008946:	2202      	movs	r2, #2
 8008948:	4013      	ands	r3, r2
 800894a:	d0f1      	beq.n	8008930 <HAL_RCC_OscConfig+0x24c>
 800894c:	e018      	b.n	8008980 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800894e:	4b33      	ldr	r3, [pc, #204]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 8008950:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008952:	4b32      	ldr	r3, [pc, #200]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 8008954:	2101      	movs	r1, #1
 8008956:	438a      	bics	r2, r1
 8008958:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800895a:	f7fd fc5d 	bl	8006218 <HAL_GetTick>
 800895e:	0003      	movs	r3, r0
 8008960:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008962:	e008      	b.n	8008976 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008964:	f7fd fc58 	bl	8006218 <HAL_GetTick>
 8008968:	0002      	movs	r2, r0
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	1ad3      	subs	r3, r2, r3
 800896e:	2b02      	cmp	r3, #2
 8008970:	d901      	bls.n	8008976 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8008972:	2303      	movs	r3, #3
 8008974:	e236      	b.n	8008de4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008976:	4b29      	ldr	r3, [pc, #164]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 8008978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897a:	2202      	movs	r2, #2
 800897c:	4013      	ands	r3, r2
 800897e:	d1f1      	bne.n	8008964 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2204      	movs	r2, #4
 8008986:	4013      	ands	r3, r2
 8008988:	d100      	bne.n	800898c <HAL_RCC_OscConfig+0x2a8>
 800898a:	e0b5      	b.n	8008af8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800898c:	201f      	movs	r0, #31
 800898e:	183b      	adds	r3, r7, r0
 8008990:	2200      	movs	r2, #0
 8008992:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008994:	4b21      	ldr	r3, [pc, #132]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 8008996:	69da      	ldr	r2, [r3, #28]
 8008998:	2380      	movs	r3, #128	; 0x80
 800899a:	055b      	lsls	r3, r3, #21
 800899c:	4013      	ands	r3, r2
 800899e:	d110      	bne.n	80089c2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80089a0:	4b1e      	ldr	r3, [pc, #120]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 80089a2:	69da      	ldr	r2, [r3, #28]
 80089a4:	4b1d      	ldr	r3, [pc, #116]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 80089a6:	2180      	movs	r1, #128	; 0x80
 80089a8:	0549      	lsls	r1, r1, #21
 80089aa:	430a      	orrs	r2, r1
 80089ac:	61da      	str	r2, [r3, #28]
 80089ae:	4b1b      	ldr	r3, [pc, #108]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 80089b0:	69da      	ldr	r2, [r3, #28]
 80089b2:	2380      	movs	r3, #128	; 0x80
 80089b4:	055b      	lsls	r3, r3, #21
 80089b6:	4013      	ands	r3, r2
 80089b8:	60fb      	str	r3, [r7, #12]
 80089ba:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80089bc:	183b      	adds	r3, r7, r0
 80089be:	2201      	movs	r2, #1
 80089c0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089c2:	4b19      	ldr	r3, [pc, #100]	; (8008a28 <HAL_RCC_OscConfig+0x344>)
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	2380      	movs	r3, #128	; 0x80
 80089c8:	005b      	lsls	r3, r3, #1
 80089ca:	4013      	ands	r3, r2
 80089cc:	d11a      	bne.n	8008a04 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80089ce:	4b16      	ldr	r3, [pc, #88]	; (8008a28 <HAL_RCC_OscConfig+0x344>)
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	4b15      	ldr	r3, [pc, #84]	; (8008a28 <HAL_RCC_OscConfig+0x344>)
 80089d4:	2180      	movs	r1, #128	; 0x80
 80089d6:	0049      	lsls	r1, r1, #1
 80089d8:	430a      	orrs	r2, r1
 80089da:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089dc:	f7fd fc1c 	bl	8006218 <HAL_GetTick>
 80089e0:	0003      	movs	r3, r0
 80089e2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089e4:	e008      	b.n	80089f8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089e6:	f7fd fc17 	bl	8006218 <HAL_GetTick>
 80089ea:	0002      	movs	r2, r0
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	2b64      	cmp	r3, #100	; 0x64
 80089f2:	d901      	bls.n	80089f8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80089f4:	2303      	movs	r3, #3
 80089f6:	e1f5      	b.n	8008de4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089f8:	4b0b      	ldr	r3, [pc, #44]	; (8008a28 <HAL_RCC_OscConfig+0x344>)
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	2380      	movs	r3, #128	; 0x80
 80089fe:	005b      	lsls	r3, r3, #1
 8008a00:	4013      	ands	r3, r2
 8008a02:	d0f0      	beq.n	80089e6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d10f      	bne.n	8008a2c <HAL_RCC_OscConfig+0x348>
 8008a0c:	4b03      	ldr	r3, [pc, #12]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 8008a0e:	6a1a      	ldr	r2, [r3, #32]
 8008a10:	4b02      	ldr	r3, [pc, #8]	; (8008a1c <HAL_RCC_OscConfig+0x338>)
 8008a12:	2101      	movs	r1, #1
 8008a14:	430a      	orrs	r2, r1
 8008a16:	621a      	str	r2, [r3, #32]
 8008a18:	e036      	b.n	8008a88 <HAL_RCC_OscConfig+0x3a4>
 8008a1a:	46c0      	nop			; (mov r8, r8)
 8008a1c:	40021000 	.word	0x40021000
 8008a20:	fffeffff 	.word	0xfffeffff
 8008a24:	fffbffff 	.word	0xfffbffff
 8008a28:	40007000 	.word	0x40007000
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10c      	bne.n	8008a4e <HAL_RCC_OscConfig+0x36a>
 8008a34:	4bca      	ldr	r3, [pc, #808]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008a36:	6a1a      	ldr	r2, [r3, #32]
 8008a38:	4bc9      	ldr	r3, [pc, #804]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008a3a:	2101      	movs	r1, #1
 8008a3c:	438a      	bics	r2, r1
 8008a3e:	621a      	str	r2, [r3, #32]
 8008a40:	4bc7      	ldr	r3, [pc, #796]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008a42:	6a1a      	ldr	r2, [r3, #32]
 8008a44:	4bc6      	ldr	r3, [pc, #792]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008a46:	2104      	movs	r1, #4
 8008a48:	438a      	bics	r2, r1
 8008a4a:	621a      	str	r2, [r3, #32]
 8008a4c:	e01c      	b.n	8008a88 <HAL_RCC_OscConfig+0x3a4>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	2b05      	cmp	r3, #5
 8008a54:	d10c      	bne.n	8008a70 <HAL_RCC_OscConfig+0x38c>
 8008a56:	4bc2      	ldr	r3, [pc, #776]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008a58:	6a1a      	ldr	r2, [r3, #32]
 8008a5a:	4bc1      	ldr	r3, [pc, #772]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008a5c:	2104      	movs	r1, #4
 8008a5e:	430a      	orrs	r2, r1
 8008a60:	621a      	str	r2, [r3, #32]
 8008a62:	4bbf      	ldr	r3, [pc, #764]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008a64:	6a1a      	ldr	r2, [r3, #32]
 8008a66:	4bbe      	ldr	r3, [pc, #760]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008a68:	2101      	movs	r1, #1
 8008a6a:	430a      	orrs	r2, r1
 8008a6c:	621a      	str	r2, [r3, #32]
 8008a6e:	e00b      	b.n	8008a88 <HAL_RCC_OscConfig+0x3a4>
 8008a70:	4bbb      	ldr	r3, [pc, #748]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008a72:	6a1a      	ldr	r2, [r3, #32]
 8008a74:	4bba      	ldr	r3, [pc, #744]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008a76:	2101      	movs	r1, #1
 8008a78:	438a      	bics	r2, r1
 8008a7a:	621a      	str	r2, [r3, #32]
 8008a7c:	4bb8      	ldr	r3, [pc, #736]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008a7e:	6a1a      	ldr	r2, [r3, #32]
 8008a80:	4bb7      	ldr	r3, [pc, #732]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008a82:	2104      	movs	r1, #4
 8008a84:	438a      	bics	r2, r1
 8008a86:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d014      	beq.n	8008aba <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a90:	f7fd fbc2 	bl	8006218 <HAL_GetTick>
 8008a94:	0003      	movs	r3, r0
 8008a96:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a98:	e009      	b.n	8008aae <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a9a:	f7fd fbbd 	bl	8006218 <HAL_GetTick>
 8008a9e:	0002      	movs	r2, r0
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	1ad3      	subs	r3, r2, r3
 8008aa4:	4aaf      	ldr	r2, [pc, #700]	; (8008d64 <HAL_RCC_OscConfig+0x680>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d901      	bls.n	8008aae <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	e19a      	b.n	8008de4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008aae:	4bac      	ldr	r3, [pc, #688]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008ab0:	6a1b      	ldr	r3, [r3, #32]
 8008ab2:	2202      	movs	r2, #2
 8008ab4:	4013      	ands	r3, r2
 8008ab6:	d0f0      	beq.n	8008a9a <HAL_RCC_OscConfig+0x3b6>
 8008ab8:	e013      	b.n	8008ae2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008aba:	f7fd fbad 	bl	8006218 <HAL_GetTick>
 8008abe:	0003      	movs	r3, r0
 8008ac0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ac2:	e009      	b.n	8008ad8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ac4:	f7fd fba8 	bl	8006218 <HAL_GetTick>
 8008ac8:	0002      	movs	r2, r0
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	1ad3      	subs	r3, r2, r3
 8008ace:	4aa5      	ldr	r2, [pc, #660]	; (8008d64 <HAL_RCC_OscConfig+0x680>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d901      	bls.n	8008ad8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	e185      	b.n	8008de4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ad8:	4ba1      	ldr	r3, [pc, #644]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008ada:	6a1b      	ldr	r3, [r3, #32]
 8008adc:	2202      	movs	r2, #2
 8008ade:	4013      	ands	r3, r2
 8008ae0:	d1f0      	bne.n	8008ac4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008ae2:	231f      	movs	r3, #31
 8008ae4:	18fb      	adds	r3, r7, r3
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d105      	bne.n	8008af8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008aec:	4b9c      	ldr	r3, [pc, #624]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008aee:	69da      	ldr	r2, [r3, #28]
 8008af0:	4b9b      	ldr	r3, [pc, #620]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008af2:	499d      	ldr	r1, [pc, #628]	; (8008d68 <HAL_RCC_OscConfig+0x684>)
 8008af4:	400a      	ands	r2, r1
 8008af6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2210      	movs	r2, #16
 8008afe:	4013      	ands	r3, r2
 8008b00:	d063      	beq.n	8008bca <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d12a      	bne.n	8008b60 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8008b0a:	4b95      	ldr	r3, [pc, #596]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008b0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b0e:	4b94      	ldr	r3, [pc, #592]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008b10:	2104      	movs	r1, #4
 8008b12:	430a      	orrs	r2, r1
 8008b14:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8008b16:	4b92      	ldr	r3, [pc, #584]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b1a:	4b91      	ldr	r3, [pc, #580]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008b1c:	2101      	movs	r1, #1
 8008b1e:	430a      	orrs	r2, r1
 8008b20:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b22:	f7fd fb79 	bl	8006218 <HAL_GetTick>
 8008b26:	0003      	movs	r3, r0
 8008b28:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8008b2a:	e008      	b.n	8008b3e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8008b2c:	f7fd fb74 	bl	8006218 <HAL_GetTick>
 8008b30:	0002      	movs	r2, r0
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	d901      	bls.n	8008b3e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	e152      	b.n	8008de4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8008b3e:	4b88      	ldr	r3, [pc, #544]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b42:	2202      	movs	r2, #2
 8008b44:	4013      	ands	r3, r2
 8008b46:	d0f1      	beq.n	8008b2c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8008b48:	4b85      	ldr	r3, [pc, #532]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b4c:	22f8      	movs	r2, #248	; 0xf8
 8008b4e:	4393      	bics	r3, r2
 8008b50:	0019      	movs	r1, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	699b      	ldr	r3, [r3, #24]
 8008b56:	00da      	lsls	r2, r3, #3
 8008b58:	4b81      	ldr	r3, [pc, #516]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008b5a:	430a      	orrs	r2, r1
 8008b5c:	635a      	str	r2, [r3, #52]	; 0x34
 8008b5e:	e034      	b.n	8008bca <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	695b      	ldr	r3, [r3, #20]
 8008b64:	3305      	adds	r3, #5
 8008b66:	d111      	bne.n	8008b8c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8008b68:	4b7d      	ldr	r3, [pc, #500]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008b6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b6c:	4b7c      	ldr	r3, [pc, #496]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008b6e:	2104      	movs	r1, #4
 8008b70:	438a      	bics	r2, r1
 8008b72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8008b74:	4b7a      	ldr	r3, [pc, #488]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b78:	22f8      	movs	r2, #248	; 0xf8
 8008b7a:	4393      	bics	r3, r2
 8008b7c:	0019      	movs	r1, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	00da      	lsls	r2, r3, #3
 8008b84:	4b76      	ldr	r3, [pc, #472]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008b86:	430a      	orrs	r2, r1
 8008b88:	635a      	str	r2, [r3, #52]	; 0x34
 8008b8a:	e01e      	b.n	8008bca <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8008b8c:	4b74      	ldr	r3, [pc, #464]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008b8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b90:	4b73      	ldr	r3, [pc, #460]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008b92:	2104      	movs	r1, #4
 8008b94:	430a      	orrs	r2, r1
 8008b96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8008b98:	4b71      	ldr	r3, [pc, #452]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008b9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b9c:	4b70      	ldr	r3, [pc, #448]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008b9e:	2101      	movs	r1, #1
 8008ba0:	438a      	bics	r2, r1
 8008ba2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ba4:	f7fd fb38 	bl	8006218 <HAL_GetTick>
 8008ba8:	0003      	movs	r3, r0
 8008baa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8008bac:	e008      	b.n	8008bc0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8008bae:	f7fd fb33 	bl	8006218 <HAL_GetTick>
 8008bb2:	0002      	movs	r2, r0
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d901      	bls.n	8008bc0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	e111      	b.n	8008de4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8008bc0:	4b67      	ldr	r3, [pc, #412]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bc4:	2202      	movs	r2, #2
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	d1f1      	bne.n	8008bae <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2220      	movs	r2, #32
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	d05c      	beq.n	8008c8e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8008bd4:	4b62      	ldr	r3, [pc, #392]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	220c      	movs	r2, #12
 8008bda:	4013      	ands	r3, r2
 8008bdc:	2b0c      	cmp	r3, #12
 8008bde:	d00e      	beq.n	8008bfe <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8008be0:	4b5f      	ldr	r3, [pc, #380]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	220c      	movs	r2, #12
 8008be6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8008be8:	2b08      	cmp	r3, #8
 8008bea:	d114      	bne.n	8008c16 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8008bec:	4b5c      	ldr	r3, [pc, #368]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008bee:	685a      	ldr	r2, [r3, #4]
 8008bf0:	23c0      	movs	r3, #192	; 0xc0
 8008bf2:	025b      	lsls	r3, r3, #9
 8008bf4:	401a      	ands	r2, r3
 8008bf6:	23c0      	movs	r3, #192	; 0xc0
 8008bf8:	025b      	lsls	r3, r3, #9
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d10b      	bne.n	8008c16 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8008bfe:	4b58      	ldr	r3, [pc, #352]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c02:	2380      	movs	r3, #128	; 0x80
 8008c04:	029b      	lsls	r3, r3, #10
 8008c06:	4013      	ands	r3, r2
 8008c08:	d040      	beq.n	8008c8c <HAL_RCC_OscConfig+0x5a8>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a1b      	ldr	r3, [r3, #32]
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d03c      	beq.n	8008c8c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	e0e6      	b.n	8008de4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a1b      	ldr	r3, [r3, #32]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d01b      	beq.n	8008c56 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8008c1e:	4b50      	ldr	r3, [pc, #320]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c22:	4b4f      	ldr	r3, [pc, #316]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008c24:	2180      	movs	r1, #128	; 0x80
 8008c26:	0249      	lsls	r1, r1, #9
 8008c28:	430a      	orrs	r2, r1
 8008c2a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c2c:	f7fd faf4 	bl	8006218 <HAL_GetTick>
 8008c30:	0003      	movs	r3, r0
 8008c32:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8008c34:	e008      	b.n	8008c48 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c36:	f7fd faef 	bl	8006218 <HAL_GetTick>
 8008c3a:	0002      	movs	r2, r0
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	1ad3      	subs	r3, r2, r3
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d901      	bls.n	8008c48 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8008c44:	2303      	movs	r3, #3
 8008c46:	e0cd      	b.n	8008de4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8008c48:	4b45      	ldr	r3, [pc, #276]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008c4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c4c:	2380      	movs	r3, #128	; 0x80
 8008c4e:	029b      	lsls	r3, r3, #10
 8008c50:	4013      	ands	r3, r2
 8008c52:	d0f0      	beq.n	8008c36 <HAL_RCC_OscConfig+0x552>
 8008c54:	e01b      	b.n	8008c8e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8008c56:	4b42      	ldr	r3, [pc, #264]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008c58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c5a:	4b41      	ldr	r3, [pc, #260]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008c5c:	4943      	ldr	r1, [pc, #268]	; (8008d6c <HAL_RCC_OscConfig+0x688>)
 8008c5e:	400a      	ands	r2, r1
 8008c60:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c62:	f7fd fad9 	bl	8006218 <HAL_GetTick>
 8008c66:	0003      	movs	r3, r0
 8008c68:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8008c6a:	e008      	b.n	8008c7e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c6c:	f7fd fad4 	bl	8006218 <HAL_GetTick>
 8008c70:	0002      	movs	r2, r0
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	1ad3      	subs	r3, r2, r3
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d901      	bls.n	8008c7e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8008c7a:	2303      	movs	r3, #3
 8008c7c:	e0b2      	b.n	8008de4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8008c7e:	4b38      	ldr	r3, [pc, #224]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008c80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c82:	2380      	movs	r3, #128	; 0x80
 8008c84:	029b      	lsls	r3, r3, #10
 8008c86:	4013      	ands	r3, r2
 8008c88:	d1f0      	bne.n	8008c6c <HAL_RCC_OscConfig+0x588>
 8008c8a:	e000      	b.n	8008c8e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8008c8c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d100      	bne.n	8008c98 <HAL_RCC_OscConfig+0x5b4>
 8008c96:	e0a4      	b.n	8008de2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008c98:	4b31      	ldr	r3, [pc, #196]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	220c      	movs	r2, #12
 8008c9e:	4013      	ands	r3, r2
 8008ca0:	2b08      	cmp	r3, #8
 8008ca2:	d100      	bne.n	8008ca6 <HAL_RCC_OscConfig+0x5c2>
 8008ca4:	e078      	b.n	8008d98 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	d14c      	bne.n	8008d48 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008cae:	4b2c      	ldr	r3, [pc, #176]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	4b2b      	ldr	r3, [pc, #172]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008cb4:	492e      	ldr	r1, [pc, #184]	; (8008d70 <HAL_RCC_OscConfig+0x68c>)
 8008cb6:	400a      	ands	r2, r1
 8008cb8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cba:	f7fd faad 	bl	8006218 <HAL_GetTick>
 8008cbe:	0003      	movs	r3, r0
 8008cc0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008cc2:	e008      	b.n	8008cd6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008cc4:	f7fd faa8 	bl	8006218 <HAL_GetTick>
 8008cc8:	0002      	movs	r2, r0
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	2b02      	cmp	r3, #2
 8008cd0:	d901      	bls.n	8008cd6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e086      	b.n	8008de4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008cd6:	4b22      	ldr	r3, [pc, #136]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	2380      	movs	r3, #128	; 0x80
 8008cdc:	049b      	lsls	r3, r3, #18
 8008cde:	4013      	ands	r3, r2
 8008ce0:	d1f0      	bne.n	8008cc4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ce2:	4b1f      	ldr	r3, [pc, #124]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce6:	220f      	movs	r2, #15
 8008ce8:	4393      	bics	r3, r2
 8008cea:	0019      	movs	r1, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cf0:	4b1b      	ldr	r3, [pc, #108]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008cf2:	430a      	orrs	r2, r1
 8008cf4:	62da      	str	r2, [r3, #44]	; 0x2c
 8008cf6:	4b1a      	ldr	r3, [pc, #104]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	4a1e      	ldr	r2, [pc, #120]	; (8008d74 <HAL_RCC_OscConfig+0x690>)
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	0019      	movs	r1, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d08:	431a      	orrs	r2, r3
 8008d0a:	4b15      	ldr	r3, [pc, #84]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008d0c:	430a      	orrs	r2, r1
 8008d0e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d10:	4b13      	ldr	r3, [pc, #76]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	4b12      	ldr	r3, [pc, #72]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008d16:	2180      	movs	r1, #128	; 0x80
 8008d18:	0449      	lsls	r1, r1, #17
 8008d1a:	430a      	orrs	r2, r1
 8008d1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d1e:	f7fd fa7b 	bl	8006218 <HAL_GetTick>
 8008d22:	0003      	movs	r3, r0
 8008d24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008d26:	e008      	b.n	8008d3a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d28:	f7fd fa76 	bl	8006218 <HAL_GetTick>
 8008d2c:	0002      	movs	r2, r0
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d901      	bls.n	8008d3a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8008d36:	2303      	movs	r3, #3
 8008d38:	e054      	b.n	8008de4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008d3a:	4b09      	ldr	r3, [pc, #36]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	2380      	movs	r3, #128	; 0x80
 8008d40:	049b      	lsls	r3, r3, #18
 8008d42:	4013      	ands	r3, r2
 8008d44:	d0f0      	beq.n	8008d28 <HAL_RCC_OscConfig+0x644>
 8008d46:	e04c      	b.n	8008de2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d48:	4b05      	ldr	r3, [pc, #20]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	4b04      	ldr	r3, [pc, #16]	; (8008d60 <HAL_RCC_OscConfig+0x67c>)
 8008d4e:	4908      	ldr	r1, [pc, #32]	; (8008d70 <HAL_RCC_OscConfig+0x68c>)
 8008d50:	400a      	ands	r2, r1
 8008d52:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d54:	f7fd fa60 	bl	8006218 <HAL_GetTick>
 8008d58:	0003      	movs	r3, r0
 8008d5a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008d5c:	e015      	b.n	8008d8a <HAL_RCC_OscConfig+0x6a6>
 8008d5e:	46c0      	nop			; (mov r8, r8)
 8008d60:	40021000 	.word	0x40021000
 8008d64:	00001388 	.word	0x00001388
 8008d68:	efffffff 	.word	0xefffffff
 8008d6c:	fffeffff 	.word	0xfffeffff
 8008d70:	feffffff 	.word	0xfeffffff
 8008d74:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d78:	f7fd fa4e 	bl	8006218 <HAL_GetTick>
 8008d7c:	0002      	movs	r2, r0
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	2b02      	cmp	r3, #2
 8008d84:	d901      	bls.n	8008d8a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8008d86:	2303      	movs	r3, #3
 8008d88:	e02c      	b.n	8008de4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008d8a:	4b18      	ldr	r3, [pc, #96]	; (8008dec <HAL_RCC_OscConfig+0x708>)
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	2380      	movs	r3, #128	; 0x80
 8008d90:	049b      	lsls	r3, r3, #18
 8008d92:	4013      	ands	r3, r2
 8008d94:	d1f0      	bne.n	8008d78 <HAL_RCC_OscConfig+0x694>
 8008d96:	e024      	b.n	8008de2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d101      	bne.n	8008da4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8008da0:	2301      	movs	r3, #1
 8008da2:	e01f      	b.n	8008de4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8008da4:	4b11      	ldr	r3, [pc, #68]	; (8008dec <HAL_RCC_OscConfig+0x708>)
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8008daa:	4b10      	ldr	r3, [pc, #64]	; (8008dec <HAL_RCC_OscConfig+0x708>)
 8008dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dae:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008db0:	697a      	ldr	r2, [r7, #20]
 8008db2:	23c0      	movs	r3, #192	; 0xc0
 8008db4:	025b      	lsls	r3, r3, #9
 8008db6:	401a      	ands	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d10e      	bne.n	8008dde <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	220f      	movs	r2, #15
 8008dc4:	401a      	ands	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d107      	bne.n	8008dde <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8008dce:	697a      	ldr	r2, [r7, #20]
 8008dd0:	23f0      	movs	r3, #240	; 0xf0
 8008dd2:	039b      	lsls	r3, r3, #14
 8008dd4:	401a      	ands	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d001      	beq.n	8008de2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e000      	b.n	8008de4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	0018      	movs	r0, r3
 8008de6:	46bd      	mov	sp, r7
 8008de8:	b008      	add	sp, #32
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	40021000 	.word	0x40021000

08008df0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d101      	bne.n	8008e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	e0bf      	b.n	8008f84 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008e04:	4b61      	ldr	r3, [pc, #388]	; (8008f8c <HAL_RCC_ClockConfig+0x19c>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	4013      	ands	r3, r2
 8008e0c:	683a      	ldr	r2, [r7, #0]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d911      	bls.n	8008e36 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e12:	4b5e      	ldr	r3, [pc, #376]	; (8008f8c <HAL_RCC_ClockConfig+0x19c>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2201      	movs	r2, #1
 8008e18:	4393      	bics	r3, r2
 8008e1a:	0019      	movs	r1, r3
 8008e1c:	4b5b      	ldr	r3, [pc, #364]	; (8008f8c <HAL_RCC_ClockConfig+0x19c>)
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	430a      	orrs	r2, r1
 8008e22:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e24:	4b59      	ldr	r3, [pc, #356]	; (8008f8c <HAL_RCC_ClockConfig+0x19c>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	683a      	ldr	r2, [r7, #0]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d001      	beq.n	8008e36 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	e0a6      	b.n	8008f84 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2202      	movs	r2, #2
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	d015      	beq.n	8008e6c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2204      	movs	r2, #4
 8008e46:	4013      	ands	r3, r2
 8008e48:	d006      	beq.n	8008e58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008e4a:	4b51      	ldr	r3, [pc, #324]	; (8008f90 <HAL_RCC_ClockConfig+0x1a0>)
 8008e4c:	685a      	ldr	r2, [r3, #4]
 8008e4e:	4b50      	ldr	r3, [pc, #320]	; (8008f90 <HAL_RCC_ClockConfig+0x1a0>)
 8008e50:	21e0      	movs	r1, #224	; 0xe0
 8008e52:	00c9      	lsls	r1, r1, #3
 8008e54:	430a      	orrs	r2, r1
 8008e56:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e58:	4b4d      	ldr	r3, [pc, #308]	; (8008f90 <HAL_RCC_ClockConfig+0x1a0>)
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	22f0      	movs	r2, #240	; 0xf0
 8008e5e:	4393      	bics	r3, r2
 8008e60:	0019      	movs	r1, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	689a      	ldr	r2, [r3, #8]
 8008e66:	4b4a      	ldr	r3, [pc, #296]	; (8008f90 <HAL_RCC_ClockConfig+0x1a0>)
 8008e68:	430a      	orrs	r2, r1
 8008e6a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2201      	movs	r2, #1
 8008e72:	4013      	ands	r3, r2
 8008e74:	d04c      	beq.n	8008f10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d107      	bne.n	8008e8e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e7e:	4b44      	ldr	r3, [pc, #272]	; (8008f90 <HAL_RCC_ClockConfig+0x1a0>)
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	2380      	movs	r3, #128	; 0x80
 8008e84:	029b      	lsls	r3, r3, #10
 8008e86:	4013      	ands	r3, r2
 8008e88:	d120      	bne.n	8008ecc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e07a      	b.n	8008f84 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d107      	bne.n	8008ea6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e96:	4b3e      	ldr	r3, [pc, #248]	; (8008f90 <HAL_RCC_ClockConfig+0x1a0>)
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	2380      	movs	r3, #128	; 0x80
 8008e9c:	049b      	lsls	r3, r3, #18
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	d114      	bne.n	8008ecc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e06e      	b.n	8008f84 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	2b03      	cmp	r3, #3
 8008eac:	d107      	bne.n	8008ebe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8008eae:	4b38      	ldr	r3, [pc, #224]	; (8008f90 <HAL_RCC_ClockConfig+0x1a0>)
 8008eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008eb2:	2380      	movs	r3, #128	; 0x80
 8008eb4:	029b      	lsls	r3, r3, #10
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	d108      	bne.n	8008ecc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e062      	b.n	8008f84 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ebe:	4b34      	ldr	r3, [pc, #208]	; (8008f90 <HAL_RCC_ClockConfig+0x1a0>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2202      	movs	r2, #2
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	d101      	bne.n	8008ecc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e05b      	b.n	8008f84 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008ecc:	4b30      	ldr	r3, [pc, #192]	; (8008f90 <HAL_RCC_ClockConfig+0x1a0>)
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	2203      	movs	r2, #3
 8008ed2:	4393      	bics	r3, r2
 8008ed4:	0019      	movs	r1, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	685a      	ldr	r2, [r3, #4]
 8008eda:	4b2d      	ldr	r3, [pc, #180]	; (8008f90 <HAL_RCC_ClockConfig+0x1a0>)
 8008edc:	430a      	orrs	r2, r1
 8008ede:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008ee0:	f7fd f99a 	bl	8006218 <HAL_GetTick>
 8008ee4:	0003      	movs	r3, r0
 8008ee6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ee8:	e009      	b.n	8008efe <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008eea:	f7fd f995 	bl	8006218 <HAL_GetTick>
 8008eee:	0002      	movs	r2, r0
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	1ad3      	subs	r3, r2, r3
 8008ef4:	4a27      	ldr	r2, [pc, #156]	; (8008f94 <HAL_RCC_ClockConfig+0x1a4>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d901      	bls.n	8008efe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008efa:	2303      	movs	r3, #3
 8008efc:	e042      	b.n	8008f84 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008efe:	4b24      	ldr	r3, [pc, #144]	; (8008f90 <HAL_RCC_ClockConfig+0x1a0>)
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	220c      	movs	r2, #12
 8008f04:	401a      	ands	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d1ec      	bne.n	8008eea <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008f10:	4b1e      	ldr	r3, [pc, #120]	; (8008f8c <HAL_RCC_ClockConfig+0x19c>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	2201      	movs	r2, #1
 8008f16:	4013      	ands	r3, r2
 8008f18:	683a      	ldr	r2, [r7, #0]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d211      	bcs.n	8008f42 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f1e:	4b1b      	ldr	r3, [pc, #108]	; (8008f8c <HAL_RCC_ClockConfig+0x19c>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2201      	movs	r2, #1
 8008f24:	4393      	bics	r3, r2
 8008f26:	0019      	movs	r1, r3
 8008f28:	4b18      	ldr	r3, [pc, #96]	; (8008f8c <HAL_RCC_ClockConfig+0x19c>)
 8008f2a:	683a      	ldr	r2, [r7, #0]
 8008f2c:	430a      	orrs	r2, r1
 8008f2e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f30:	4b16      	ldr	r3, [pc, #88]	; (8008f8c <HAL_RCC_ClockConfig+0x19c>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2201      	movs	r2, #1
 8008f36:	4013      	ands	r3, r2
 8008f38:	683a      	ldr	r2, [r7, #0]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d001      	beq.n	8008f42 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e020      	b.n	8008f84 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2204      	movs	r2, #4
 8008f48:	4013      	ands	r3, r2
 8008f4a:	d009      	beq.n	8008f60 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008f4c:	4b10      	ldr	r3, [pc, #64]	; (8008f90 <HAL_RCC_ClockConfig+0x1a0>)
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	4a11      	ldr	r2, [pc, #68]	; (8008f98 <HAL_RCC_ClockConfig+0x1a8>)
 8008f52:	4013      	ands	r3, r2
 8008f54:	0019      	movs	r1, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	68da      	ldr	r2, [r3, #12]
 8008f5a:	4b0d      	ldr	r3, [pc, #52]	; (8008f90 <HAL_RCC_ClockConfig+0x1a0>)
 8008f5c:	430a      	orrs	r2, r1
 8008f5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008f60:	f000 f820 	bl	8008fa4 <HAL_RCC_GetSysClockFreq>
 8008f64:	0001      	movs	r1, r0
 8008f66:	4b0a      	ldr	r3, [pc, #40]	; (8008f90 <HAL_RCC_ClockConfig+0x1a0>)
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	091b      	lsrs	r3, r3, #4
 8008f6c:	220f      	movs	r2, #15
 8008f6e:	4013      	ands	r3, r2
 8008f70:	4a0a      	ldr	r2, [pc, #40]	; (8008f9c <HAL_RCC_ClockConfig+0x1ac>)
 8008f72:	5cd3      	ldrb	r3, [r2, r3]
 8008f74:	000a      	movs	r2, r1
 8008f76:	40da      	lsrs	r2, r3
 8008f78:	4b09      	ldr	r3, [pc, #36]	; (8008fa0 <HAL_RCC_ClockConfig+0x1b0>)
 8008f7a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8008f7c:	2000      	movs	r0, #0
 8008f7e:	f7fd f905 	bl	800618c <HAL_InitTick>
  
  return HAL_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	0018      	movs	r0, r3
 8008f86:	46bd      	mov	sp, r7
 8008f88:	b004      	add	sp, #16
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	40022000 	.word	0x40022000
 8008f90:	40021000 	.word	0x40021000
 8008f94:	00001388 	.word	0x00001388
 8008f98:	fffff8ff 	.word	0xfffff8ff
 8008f9c:	0800f50c 	.word	0x0800f50c
 8008fa0:	20000008 	.word	0x20000008

08008fa4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b086      	sub	sp, #24
 8008fa8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008faa:	2300      	movs	r3, #0
 8008fac:	60fb      	str	r3, [r7, #12]
 8008fae:	2300      	movs	r3, #0
 8008fb0:	60bb      	str	r3, [r7, #8]
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	617b      	str	r3, [r7, #20]
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8008fbe:	4b2d      	ldr	r3, [pc, #180]	; (8009074 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	220c      	movs	r2, #12
 8008fc8:	4013      	ands	r3, r2
 8008fca:	2b0c      	cmp	r3, #12
 8008fcc:	d046      	beq.n	800905c <HAL_RCC_GetSysClockFreq+0xb8>
 8008fce:	d848      	bhi.n	8009062 <HAL_RCC_GetSysClockFreq+0xbe>
 8008fd0:	2b04      	cmp	r3, #4
 8008fd2:	d002      	beq.n	8008fda <HAL_RCC_GetSysClockFreq+0x36>
 8008fd4:	2b08      	cmp	r3, #8
 8008fd6:	d003      	beq.n	8008fe0 <HAL_RCC_GetSysClockFreq+0x3c>
 8008fd8:	e043      	b.n	8009062 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008fda:	4b27      	ldr	r3, [pc, #156]	; (8009078 <HAL_RCC_GetSysClockFreq+0xd4>)
 8008fdc:	613b      	str	r3, [r7, #16]
      break;
 8008fde:	e043      	b.n	8009068 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	0c9b      	lsrs	r3, r3, #18
 8008fe4:	220f      	movs	r2, #15
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	4a24      	ldr	r2, [pc, #144]	; (800907c <HAL_RCC_GetSysClockFreq+0xd8>)
 8008fea:	5cd3      	ldrb	r3, [r2, r3]
 8008fec:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8008fee:	4b21      	ldr	r3, [pc, #132]	; (8009074 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff2:	220f      	movs	r2, #15
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	4a22      	ldr	r2, [pc, #136]	; (8009080 <HAL_RCC_GetSysClockFreq+0xdc>)
 8008ff8:	5cd3      	ldrb	r3, [r2, r3]
 8008ffa:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	23c0      	movs	r3, #192	; 0xc0
 8009000:	025b      	lsls	r3, r3, #9
 8009002:	401a      	ands	r2, r3
 8009004:	2380      	movs	r3, #128	; 0x80
 8009006:	025b      	lsls	r3, r3, #9
 8009008:	429a      	cmp	r2, r3
 800900a:	d109      	bne.n	8009020 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800900c:	68b9      	ldr	r1, [r7, #8]
 800900e:	481a      	ldr	r0, [pc, #104]	; (8009078 <HAL_RCC_GetSysClockFreq+0xd4>)
 8009010:	f7f7 f896 	bl	8000140 <__udivsi3>
 8009014:	0003      	movs	r3, r0
 8009016:	001a      	movs	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4353      	muls	r3, r2
 800901c:	617b      	str	r3, [r7, #20]
 800901e:	e01a      	b.n	8009056 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	23c0      	movs	r3, #192	; 0xc0
 8009024:	025b      	lsls	r3, r3, #9
 8009026:	401a      	ands	r2, r3
 8009028:	23c0      	movs	r3, #192	; 0xc0
 800902a:	025b      	lsls	r3, r3, #9
 800902c:	429a      	cmp	r2, r3
 800902e:	d109      	bne.n	8009044 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8009030:	68b9      	ldr	r1, [r7, #8]
 8009032:	4814      	ldr	r0, [pc, #80]	; (8009084 <HAL_RCC_GetSysClockFreq+0xe0>)
 8009034:	f7f7 f884 	bl	8000140 <__udivsi3>
 8009038:	0003      	movs	r3, r0
 800903a:	001a      	movs	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	4353      	muls	r3, r2
 8009040:	617b      	str	r3, [r7, #20]
 8009042:	e008      	b.n	8009056 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8009044:	68b9      	ldr	r1, [r7, #8]
 8009046:	480c      	ldr	r0, [pc, #48]	; (8009078 <HAL_RCC_GetSysClockFreq+0xd4>)
 8009048:	f7f7 f87a 	bl	8000140 <__udivsi3>
 800904c:	0003      	movs	r3, r0
 800904e:	001a      	movs	r2, r3
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4353      	muls	r3, r2
 8009054:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	613b      	str	r3, [r7, #16]
      break;
 800905a:	e005      	b.n	8009068 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800905c:	4b09      	ldr	r3, [pc, #36]	; (8009084 <HAL_RCC_GetSysClockFreq+0xe0>)
 800905e:	613b      	str	r3, [r7, #16]
      break;
 8009060:	e002      	b.n	8009068 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009062:	4b05      	ldr	r3, [pc, #20]	; (8009078 <HAL_RCC_GetSysClockFreq+0xd4>)
 8009064:	613b      	str	r3, [r7, #16]
      break;
 8009066:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8009068:	693b      	ldr	r3, [r7, #16]
}
 800906a:	0018      	movs	r0, r3
 800906c:	46bd      	mov	sp, r7
 800906e:	b006      	add	sp, #24
 8009070:	bd80      	pop	{r7, pc}
 8009072:	46c0      	nop			; (mov r8, r8)
 8009074:	40021000 	.word	0x40021000
 8009078:	007a1200 	.word	0x007a1200
 800907c:	0800f524 	.word	0x0800f524
 8009080:	0800f534 	.word	0x0800f534
 8009084:	02dc6c00 	.word	0x02dc6c00

08009088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800908c:	4b02      	ldr	r3, [pc, #8]	; (8009098 <HAL_RCC_GetHCLKFreq+0x10>)
 800908e:	681b      	ldr	r3, [r3, #0]
}
 8009090:	0018      	movs	r0, r3
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	46c0      	nop			; (mov r8, r8)
 8009098:	20000008 	.word	0x20000008

0800909c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80090a0:	f7ff fff2 	bl	8009088 <HAL_RCC_GetHCLKFreq>
 80090a4:	0001      	movs	r1, r0
 80090a6:	4b06      	ldr	r3, [pc, #24]	; (80090c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	0a1b      	lsrs	r3, r3, #8
 80090ac:	2207      	movs	r2, #7
 80090ae:	4013      	ands	r3, r2
 80090b0:	4a04      	ldr	r2, [pc, #16]	; (80090c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80090b2:	5cd3      	ldrb	r3, [r2, r3]
 80090b4:	40d9      	lsrs	r1, r3
 80090b6:	000b      	movs	r3, r1
}    
 80090b8:	0018      	movs	r0, r3
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	46c0      	nop			; (mov r8, r8)
 80090c0:	40021000 	.word	0x40021000
 80090c4:	0800f51c 	.word	0x0800f51c

080090c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b086      	sub	sp, #24
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80090d0:	2300      	movs	r3, #0
 80090d2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80090d4:	2300      	movs	r3, #0
 80090d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	2380      	movs	r3, #128	; 0x80
 80090de:	025b      	lsls	r3, r3, #9
 80090e0:	4013      	ands	r3, r2
 80090e2:	d100      	bne.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80090e4:	e08e      	b.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80090e6:	2017      	movs	r0, #23
 80090e8:	183b      	adds	r3, r7, r0
 80090ea:	2200      	movs	r2, #0
 80090ec:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80090ee:	4b6e      	ldr	r3, [pc, #440]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80090f0:	69da      	ldr	r2, [r3, #28]
 80090f2:	2380      	movs	r3, #128	; 0x80
 80090f4:	055b      	lsls	r3, r3, #21
 80090f6:	4013      	ands	r3, r2
 80090f8:	d110      	bne.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80090fa:	4b6b      	ldr	r3, [pc, #428]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80090fc:	69da      	ldr	r2, [r3, #28]
 80090fe:	4b6a      	ldr	r3, [pc, #424]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009100:	2180      	movs	r1, #128	; 0x80
 8009102:	0549      	lsls	r1, r1, #21
 8009104:	430a      	orrs	r2, r1
 8009106:	61da      	str	r2, [r3, #28]
 8009108:	4b67      	ldr	r3, [pc, #412]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800910a:	69da      	ldr	r2, [r3, #28]
 800910c:	2380      	movs	r3, #128	; 0x80
 800910e:	055b      	lsls	r3, r3, #21
 8009110:	4013      	ands	r3, r2
 8009112:	60bb      	str	r3, [r7, #8]
 8009114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009116:	183b      	adds	r3, r7, r0
 8009118:	2201      	movs	r2, #1
 800911a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800911c:	4b63      	ldr	r3, [pc, #396]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	2380      	movs	r3, #128	; 0x80
 8009122:	005b      	lsls	r3, r3, #1
 8009124:	4013      	ands	r3, r2
 8009126:	d11a      	bne.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009128:	4b60      	ldr	r3, [pc, #384]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	4b5f      	ldr	r3, [pc, #380]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800912e:	2180      	movs	r1, #128	; 0x80
 8009130:	0049      	lsls	r1, r1, #1
 8009132:	430a      	orrs	r2, r1
 8009134:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009136:	f7fd f86f 	bl	8006218 <HAL_GetTick>
 800913a:	0003      	movs	r3, r0
 800913c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800913e:	e008      	b.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009140:	f7fd f86a 	bl	8006218 <HAL_GetTick>
 8009144:	0002      	movs	r2, r0
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	1ad3      	subs	r3, r2, r3
 800914a:	2b64      	cmp	r3, #100	; 0x64
 800914c:	d901      	bls.n	8009152 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800914e:	2303      	movs	r3, #3
 8009150:	e0a6      	b.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009152:	4b56      	ldr	r3, [pc, #344]	; (80092ac <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	2380      	movs	r3, #128	; 0x80
 8009158:	005b      	lsls	r3, r3, #1
 800915a:	4013      	ands	r3, r2
 800915c:	d0f0      	beq.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800915e:	4b52      	ldr	r3, [pc, #328]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009160:	6a1a      	ldr	r2, [r3, #32]
 8009162:	23c0      	movs	r3, #192	; 0xc0
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	4013      	ands	r3, r2
 8009168:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d034      	beq.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x112>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	685a      	ldr	r2, [r3, #4]
 8009174:	23c0      	movs	r3, #192	; 0xc0
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4013      	ands	r3, r2
 800917a:	68fa      	ldr	r2, [r7, #12]
 800917c:	429a      	cmp	r2, r3
 800917e:	d02c      	beq.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009180:	4b49      	ldr	r3, [pc, #292]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009182:	6a1b      	ldr	r3, [r3, #32]
 8009184:	4a4a      	ldr	r2, [pc, #296]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8009186:	4013      	ands	r3, r2
 8009188:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800918a:	4b47      	ldr	r3, [pc, #284]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800918c:	6a1a      	ldr	r2, [r3, #32]
 800918e:	4b46      	ldr	r3, [pc, #280]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009190:	2180      	movs	r1, #128	; 0x80
 8009192:	0249      	lsls	r1, r1, #9
 8009194:	430a      	orrs	r2, r1
 8009196:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009198:	4b43      	ldr	r3, [pc, #268]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800919a:	6a1a      	ldr	r2, [r3, #32]
 800919c:	4b42      	ldr	r3, [pc, #264]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800919e:	4945      	ldr	r1, [pc, #276]	; (80092b4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80091a0:	400a      	ands	r2, r1
 80091a2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80091a4:	4b40      	ldr	r3, [pc, #256]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80091a6:	68fa      	ldr	r2, [r7, #12]
 80091a8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2201      	movs	r2, #1
 80091ae:	4013      	ands	r3, r2
 80091b0:	d013      	beq.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091b2:	f7fd f831 	bl	8006218 <HAL_GetTick>
 80091b6:	0003      	movs	r3, r0
 80091b8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091ba:	e009      	b.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091bc:	f7fd f82c 	bl	8006218 <HAL_GetTick>
 80091c0:	0002      	movs	r2, r0
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	1ad3      	subs	r3, r2, r3
 80091c6:	4a3c      	ldr	r2, [pc, #240]	; (80092b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d901      	bls.n	80091d0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80091cc:	2303      	movs	r3, #3
 80091ce:	e067      	b.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091d0:	4b35      	ldr	r3, [pc, #212]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80091d2:	6a1b      	ldr	r3, [r3, #32]
 80091d4:	2202      	movs	r2, #2
 80091d6:	4013      	ands	r3, r2
 80091d8:	d0f0      	beq.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80091da:	4b33      	ldr	r3, [pc, #204]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80091dc:	6a1b      	ldr	r3, [r3, #32]
 80091de:	4a34      	ldr	r2, [pc, #208]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80091e0:	4013      	ands	r3, r2
 80091e2:	0019      	movs	r1, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	685a      	ldr	r2, [r3, #4]
 80091e8:	4b2f      	ldr	r3, [pc, #188]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80091ea:	430a      	orrs	r2, r1
 80091ec:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80091ee:	2317      	movs	r3, #23
 80091f0:	18fb      	adds	r3, r7, r3
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d105      	bne.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80091f8:	4b2b      	ldr	r3, [pc, #172]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80091fa:	69da      	ldr	r2, [r3, #28]
 80091fc:	4b2a      	ldr	r3, [pc, #168]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80091fe:	492f      	ldr	r1, [pc, #188]	; (80092bc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8009200:	400a      	ands	r2, r1
 8009202:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	2201      	movs	r2, #1
 800920a:	4013      	ands	r3, r2
 800920c:	d009      	beq.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800920e:	4b26      	ldr	r3, [pc, #152]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009212:	2203      	movs	r2, #3
 8009214:	4393      	bics	r3, r2
 8009216:	0019      	movs	r1, r3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	689a      	ldr	r2, [r3, #8]
 800921c:	4b22      	ldr	r3, [pc, #136]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800921e:	430a      	orrs	r2, r1
 8009220:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2202      	movs	r2, #2
 8009228:	4013      	ands	r3, r2
 800922a:	d009      	beq.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800922c:	4b1e      	ldr	r3, [pc, #120]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800922e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009230:	4a23      	ldr	r2, [pc, #140]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009232:	4013      	ands	r3, r2
 8009234:	0019      	movs	r1, r3
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	68da      	ldr	r2, [r3, #12]
 800923a:	4b1b      	ldr	r3, [pc, #108]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800923c:	430a      	orrs	r2, r1
 800923e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2220      	movs	r2, #32
 8009246:	4013      	ands	r3, r2
 8009248:	d009      	beq.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800924a:	4b17      	ldr	r3, [pc, #92]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800924c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800924e:	2210      	movs	r2, #16
 8009250:	4393      	bics	r3, r2
 8009252:	0019      	movs	r1, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	691a      	ldr	r2, [r3, #16]
 8009258:	4b13      	ldr	r3, [pc, #76]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800925a:	430a      	orrs	r2, r1
 800925c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	2380      	movs	r3, #128	; 0x80
 8009264:	029b      	lsls	r3, r3, #10
 8009266:	4013      	ands	r3, r2
 8009268:	d009      	beq.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800926a:	4b0f      	ldr	r3, [pc, #60]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800926c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800926e:	2280      	movs	r2, #128	; 0x80
 8009270:	4393      	bics	r3, r2
 8009272:	0019      	movs	r1, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	699a      	ldr	r2, [r3, #24]
 8009278:	4b0b      	ldr	r3, [pc, #44]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800927a:	430a      	orrs	r2, r1
 800927c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	2380      	movs	r3, #128	; 0x80
 8009284:	00db      	lsls	r3, r3, #3
 8009286:	4013      	ands	r3, r2
 8009288:	d009      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800928a:	4b07      	ldr	r3, [pc, #28]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800928c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928e:	2240      	movs	r2, #64	; 0x40
 8009290:	4393      	bics	r3, r2
 8009292:	0019      	movs	r1, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	695a      	ldr	r2, [r3, #20]
 8009298:	4b03      	ldr	r3, [pc, #12]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800929a:	430a      	orrs	r2, r1
 800929c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800929e:	2300      	movs	r3, #0
}
 80092a0:	0018      	movs	r0, r3
 80092a2:	46bd      	mov	sp, r7
 80092a4:	b006      	add	sp, #24
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	40021000 	.word	0x40021000
 80092ac:	40007000 	.word	0x40007000
 80092b0:	fffffcff 	.word	0xfffffcff
 80092b4:	fffeffff 	.word	0xfffeffff
 80092b8:	00001388 	.word	0x00001388
 80092bc:	efffffff 	.word	0xefffffff
 80092c0:	fffcffff 	.word	0xfffcffff

080092c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d101      	bne.n	80092d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	e0a8      	b.n	8009428 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d109      	bne.n	80092f2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	685a      	ldr	r2, [r3, #4]
 80092e2:	2382      	movs	r3, #130	; 0x82
 80092e4:	005b      	lsls	r3, r3, #1
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d009      	beq.n	80092fe <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	61da      	str	r2, [r3, #28]
 80092f0:	e005      	b.n	80092fe <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	225d      	movs	r2, #93	; 0x5d
 8009308:	5c9b      	ldrb	r3, [r3, r2]
 800930a:	b2db      	uxtb	r3, r3
 800930c:	2b00      	cmp	r3, #0
 800930e:	d107      	bne.n	8009320 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	225c      	movs	r2, #92	; 0x5c
 8009314:	2100      	movs	r1, #0
 8009316:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	0018      	movs	r0, r3
 800931c:	f7fc fafc 	bl	8005918 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	225d      	movs	r2, #93	; 0x5d
 8009324:	2102      	movs	r1, #2
 8009326:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	2140      	movs	r1, #64	; 0x40
 8009334:	438a      	bics	r2, r1
 8009336:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	68da      	ldr	r2, [r3, #12]
 800933c:	23e0      	movs	r3, #224	; 0xe0
 800933e:	00db      	lsls	r3, r3, #3
 8009340:	429a      	cmp	r2, r3
 8009342:	d902      	bls.n	800934a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009344:	2300      	movs	r3, #0
 8009346:	60fb      	str	r3, [r7, #12]
 8009348:	e002      	b.n	8009350 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800934a:	2380      	movs	r3, #128	; 0x80
 800934c:	015b      	lsls	r3, r3, #5
 800934e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	68da      	ldr	r2, [r3, #12]
 8009354:	23f0      	movs	r3, #240	; 0xf0
 8009356:	011b      	lsls	r3, r3, #4
 8009358:	429a      	cmp	r2, r3
 800935a:	d008      	beq.n	800936e <HAL_SPI_Init+0xaa>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	68da      	ldr	r2, [r3, #12]
 8009360:	23e0      	movs	r3, #224	; 0xe0
 8009362:	00db      	lsls	r3, r3, #3
 8009364:	429a      	cmp	r2, r3
 8009366:	d002      	beq.n	800936e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	685a      	ldr	r2, [r3, #4]
 8009372:	2382      	movs	r3, #130	; 0x82
 8009374:	005b      	lsls	r3, r3, #1
 8009376:	401a      	ands	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6899      	ldr	r1, [r3, #8]
 800937c:	2384      	movs	r3, #132	; 0x84
 800937e:	021b      	lsls	r3, r3, #8
 8009380:	400b      	ands	r3, r1
 8009382:	431a      	orrs	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	691b      	ldr	r3, [r3, #16]
 8009388:	2102      	movs	r1, #2
 800938a:	400b      	ands	r3, r1
 800938c:	431a      	orrs	r2, r3
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	695b      	ldr	r3, [r3, #20]
 8009392:	2101      	movs	r1, #1
 8009394:	400b      	ands	r3, r1
 8009396:	431a      	orrs	r2, r3
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6999      	ldr	r1, [r3, #24]
 800939c:	2380      	movs	r3, #128	; 0x80
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	400b      	ands	r3, r1
 80093a2:	431a      	orrs	r2, r3
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	69db      	ldr	r3, [r3, #28]
 80093a8:	2138      	movs	r1, #56	; 0x38
 80093aa:	400b      	ands	r3, r1
 80093ac:	431a      	orrs	r2, r3
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a1b      	ldr	r3, [r3, #32]
 80093b2:	2180      	movs	r1, #128	; 0x80
 80093b4:	400b      	ands	r3, r1
 80093b6:	431a      	orrs	r2, r3
 80093b8:	0011      	movs	r1, r2
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093be:	2380      	movs	r3, #128	; 0x80
 80093c0:	019b      	lsls	r3, r3, #6
 80093c2:	401a      	ands	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	430a      	orrs	r2, r1
 80093ca:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	699b      	ldr	r3, [r3, #24]
 80093d0:	0c1b      	lsrs	r3, r3, #16
 80093d2:	2204      	movs	r2, #4
 80093d4:	401a      	ands	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093da:	2110      	movs	r1, #16
 80093dc:	400b      	ands	r3, r1
 80093de:	431a      	orrs	r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e4:	2108      	movs	r1, #8
 80093e6:	400b      	ands	r3, r1
 80093e8:	431a      	orrs	r2, r3
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	68d9      	ldr	r1, [r3, #12]
 80093ee:	23f0      	movs	r3, #240	; 0xf0
 80093f0:	011b      	lsls	r3, r3, #4
 80093f2:	400b      	ands	r3, r1
 80093f4:	431a      	orrs	r2, r3
 80093f6:	0011      	movs	r1, r2
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	2380      	movs	r3, #128	; 0x80
 80093fc:	015b      	lsls	r3, r3, #5
 80093fe:	401a      	ands	r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	430a      	orrs	r2, r1
 8009406:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	69da      	ldr	r2, [r3, #28]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4907      	ldr	r1, [pc, #28]	; (8009430 <HAL_SPI_Init+0x16c>)
 8009414:	400a      	ands	r2, r1
 8009416:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	225d      	movs	r2, #93	; 0x5d
 8009422:	2101      	movs	r1, #1
 8009424:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009426:	2300      	movs	r3, #0
}
 8009428:	0018      	movs	r0, r3
 800942a:	46bd      	mov	sp, r7
 800942c:	b004      	add	sp, #16
 800942e:	bd80      	pop	{r7, pc}
 8009430:	fffff7ff 	.word	0xfffff7ff

08009434 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b088      	sub	sp, #32
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	603b      	str	r3, [r7, #0]
 8009440:	1dbb      	adds	r3, r7, #6
 8009442:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009444:	231f      	movs	r3, #31
 8009446:	18fb      	adds	r3, r7, r3
 8009448:	2200      	movs	r2, #0
 800944a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	225c      	movs	r2, #92	; 0x5c
 8009450:	5c9b      	ldrb	r3, [r3, r2]
 8009452:	2b01      	cmp	r3, #1
 8009454:	d101      	bne.n	800945a <HAL_SPI_Transmit+0x26>
 8009456:	2302      	movs	r3, #2
 8009458:	e147      	b.n	80096ea <HAL_SPI_Transmit+0x2b6>
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	225c      	movs	r2, #92	; 0x5c
 800945e:	2101      	movs	r1, #1
 8009460:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009462:	f7fc fed9 	bl	8006218 <HAL_GetTick>
 8009466:	0003      	movs	r3, r0
 8009468:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800946a:	2316      	movs	r3, #22
 800946c:	18fb      	adds	r3, r7, r3
 800946e:	1dba      	adds	r2, r7, #6
 8009470:	8812      	ldrh	r2, [r2, #0]
 8009472:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	225d      	movs	r2, #93	; 0x5d
 8009478:	5c9b      	ldrb	r3, [r3, r2]
 800947a:	b2db      	uxtb	r3, r3
 800947c:	2b01      	cmp	r3, #1
 800947e:	d004      	beq.n	800948a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8009480:	231f      	movs	r3, #31
 8009482:	18fb      	adds	r3, r7, r3
 8009484:	2202      	movs	r2, #2
 8009486:	701a      	strb	r2, [r3, #0]
    goto error;
 8009488:	e128      	b.n	80096dc <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d003      	beq.n	8009498 <HAL_SPI_Transmit+0x64>
 8009490:	1dbb      	adds	r3, r7, #6
 8009492:	881b      	ldrh	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d104      	bne.n	80094a2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8009498:	231f      	movs	r3, #31
 800949a:	18fb      	adds	r3, r7, r3
 800949c:	2201      	movs	r2, #1
 800949e:	701a      	strb	r2, [r3, #0]
    goto error;
 80094a0:	e11c      	b.n	80096dc <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	225d      	movs	r2, #93	; 0x5d
 80094a6:	2103      	movs	r1, #3
 80094a8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2200      	movs	r2, #0
 80094ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	68ba      	ldr	r2, [r7, #8]
 80094b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	1dba      	adds	r2, r7, #6
 80094ba:	8812      	ldrh	r2, [r2, #0]
 80094bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	1dba      	adds	r2, r7, #6
 80094c2:	8812      	ldrh	r2, [r2, #0]
 80094c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2200      	movs	r2, #0
 80094ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2244      	movs	r2, #68	; 0x44
 80094d0:	2100      	movs	r1, #0
 80094d2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2246      	movs	r2, #70	; 0x46
 80094d8:	2100      	movs	r1, #0
 80094da:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2200      	movs	r2, #0
 80094e0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2200      	movs	r2, #0
 80094e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	689a      	ldr	r2, [r3, #8]
 80094ec:	2380      	movs	r3, #128	; 0x80
 80094ee:	021b      	lsls	r3, r3, #8
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d110      	bne.n	8009516 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2140      	movs	r1, #64	; 0x40
 8009500:	438a      	bics	r2, r1
 8009502:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2180      	movs	r1, #128	; 0x80
 8009510:	01c9      	lsls	r1, r1, #7
 8009512:	430a      	orrs	r2, r1
 8009514:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2240      	movs	r2, #64	; 0x40
 800951e:	4013      	ands	r3, r2
 8009520:	2b40      	cmp	r3, #64	; 0x40
 8009522:	d007      	beq.n	8009534 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2140      	movs	r1, #64	; 0x40
 8009530:	430a      	orrs	r2, r1
 8009532:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	68da      	ldr	r2, [r3, #12]
 8009538:	23e0      	movs	r3, #224	; 0xe0
 800953a:	00db      	lsls	r3, r3, #3
 800953c:	429a      	cmp	r2, r3
 800953e:	d952      	bls.n	80095e6 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d004      	beq.n	8009552 <HAL_SPI_Transmit+0x11e>
 8009548:	2316      	movs	r3, #22
 800954a:	18fb      	adds	r3, r7, r3
 800954c:	881b      	ldrh	r3, [r3, #0]
 800954e:	2b01      	cmp	r3, #1
 8009550:	d143      	bne.n	80095da <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009556:	881a      	ldrh	r2, [r3, #0]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009562:	1c9a      	adds	r2, r3, #2
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800956c:	b29b      	uxth	r3, r3
 800956e:	3b01      	subs	r3, #1
 8009570:	b29a      	uxth	r2, r3
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009576:	e030      	b.n	80095da <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	2202      	movs	r2, #2
 8009580:	4013      	ands	r3, r2
 8009582:	2b02      	cmp	r3, #2
 8009584:	d112      	bne.n	80095ac <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800958a:	881a      	ldrh	r2, [r3, #0]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009596:	1c9a      	adds	r2, r3, #2
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	3b01      	subs	r3, #1
 80095a4:	b29a      	uxth	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80095aa:	e016      	b.n	80095da <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095ac:	f7fc fe34 	bl	8006218 <HAL_GetTick>
 80095b0:	0002      	movs	r2, r0
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	1ad3      	subs	r3, r2, r3
 80095b6:	683a      	ldr	r2, [r7, #0]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d802      	bhi.n	80095c2 <HAL_SPI_Transmit+0x18e>
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	3301      	adds	r3, #1
 80095c0:	d102      	bne.n	80095c8 <HAL_SPI_Transmit+0x194>
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d108      	bne.n	80095da <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80095c8:	231f      	movs	r3, #31
 80095ca:	18fb      	adds	r3, r7, r3
 80095cc:	2203      	movs	r2, #3
 80095ce:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	225d      	movs	r2, #93	; 0x5d
 80095d4:	2101      	movs	r1, #1
 80095d6:	5499      	strb	r1, [r3, r2]
          goto error;
 80095d8:	e080      	b.n	80096dc <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095de:	b29b      	uxth	r3, r3
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1c9      	bne.n	8009578 <HAL_SPI_Transmit+0x144>
 80095e4:	e053      	b.n	800968e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d004      	beq.n	80095f8 <HAL_SPI_Transmit+0x1c4>
 80095ee:	2316      	movs	r3, #22
 80095f0:	18fb      	adds	r3, r7, r3
 80095f2:	881b      	ldrh	r3, [r3, #0]
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d145      	bne.n	8009684 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	330c      	adds	r3, #12
 8009602:	7812      	ldrb	r2, [r2, #0]
 8009604:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800960a:	1c5a      	adds	r2, r3, #1
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009614:	b29b      	uxth	r3, r3
 8009616:	3b01      	subs	r3, #1
 8009618:	b29a      	uxth	r2, r3
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800961e:	e031      	b.n	8009684 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	2202      	movs	r2, #2
 8009628:	4013      	ands	r3, r2
 800962a:	2b02      	cmp	r3, #2
 800962c:	d113      	bne.n	8009656 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	330c      	adds	r3, #12
 8009638:	7812      	ldrb	r2, [r2, #0]
 800963a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009640:	1c5a      	adds	r2, r3, #1
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800964a:	b29b      	uxth	r3, r3
 800964c:	3b01      	subs	r3, #1
 800964e:	b29a      	uxth	r2, r3
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009654:	e016      	b.n	8009684 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009656:	f7fc fddf 	bl	8006218 <HAL_GetTick>
 800965a:	0002      	movs	r2, r0
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	1ad3      	subs	r3, r2, r3
 8009660:	683a      	ldr	r2, [r7, #0]
 8009662:	429a      	cmp	r2, r3
 8009664:	d802      	bhi.n	800966c <HAL_SPI_Transmit+0x238>
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	3301      	adds	r3, #1
 800966a:	d102      	bne.n	8009672 <HAL_SPI_Transmit+0x23e>
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d108      	bne.n	8009684 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8009672:	231f      	movs	r3, #31
 8009674:	18fb      	adds	r3, r7, r3
 8009676:	2203      	movs	r2, #3
 8009678:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	225d      	movs	r2, #93	; 0x5d
 800967e:	2101      	movs	r1, #1
 8009680:	5499      	strb	r1, [r3, r2]
          goto error;
 8009682:	e02b      	b.n	80096dc <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009688:	b29b      	uxth	r3, r3
 800968a:	2b00      	cmp	r3, #0
 800968c:	d1c8      	bne.n	8009620 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800968e:	69ba      	ldr	r2, [r7, #24]
 8009690:	6839      	ldr	r1, [r7, #0]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	0018      	movs	r0, r3
 8009696:	f000 fb3f 	bl	8009d18 <SPI_EndRxTxTransaction>
 800969a:	1e03      	subs	r3, r0, #0
 800969c:	d002      	beq.n	80096a4 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2220      	movs	r2, #32
 80096a2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d10a      	bne.n	80096c2 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80096ac:	2300      	movs	r3, #0
 80096ae:	613b      	str	r3, [r7, #16]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	613b      	str	r3, [r7, #16]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	613b      	str	r3, [r7, #16]
 80096c0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d004      	beq.n	80096d4 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80096ca:	231f      	movs	r3, #31
 80096cc:	18fb      	adds	r3, r7, r3
 80096ce:	2201      	movs	r2, #1
 80096d0:	701a      	strb	r2, [r3, #0]
 80096d2:	e003      	b.n	80096dc <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	225d      	movs	r2, #93	; 0x5d
 80096d8:	2101      	movs	r1, #1
 80096da:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	225c      	movs	r2, #92	; 0x5c
 80096e0:	2100      	movs	r1, #0
 80096e2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80096e4:	231f      	movs	r3, #31
 80096e6:	18fb      	adds	r3, r7, r3
 80096e8:	781b      	ldrb	r3, [r3, #0]
}
 80096ea:	0018      	movs	r0, r3
 80096ec:	46bd      	mov	sp, r7
 80096ee:	b008      	add	sp, #32
 80096f0:	bd80      	pop	{r7, pc}
	...

080096f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b08a      	sub	sp, #40	; 0x28
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	607a      	str	r2, [r7, #4]
 8009700:	001a      	movs	r2, r3
 8009702:	1cbb      	adds	r3, r7, #2
 8009704:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009706:	2301      	movs	r3, #1
 8009708:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800970a:	2323      	movs	r3, #35	; 0x23
 800970c:	18fb      	adds	r3, r7, r3
 800970e:	2200      	movs	r2, #0
 8009710:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	225c      	movs	r2, #92	; 0x5c
 8009716:	5c9b      	ldrb	r3, [r3, r2]
 8009718:	2b01      	cmp	r3, #1
 800971a:	d101      	bne.n	8009720 <HAL_SPI_TransmitReceive+0x2c>
 800971c:	2302      	movs	r3, #2
 800971e:	e1c4      	b.n	8009aaa <HAL_SPI_TransmitReceive+0x3b6>
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	225c      	movs	r2, #92	; 0x5c
 8009724:	2101      	movs	r1, #1
 8009726:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009728:	f7fc fd76 	bl	8006218 <HAL_GetTick>
 800972c:	0003      	movs	r3, r0
 800972e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009730:	201b      	movs	r0, #27
 8009732:	183b      	adds	r3, r7, r0
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	215d      	movs	r1, #93	; 0x5d
 8009738:	5c52      	ldrb	r2, [r2, r1]
 800973a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009742:	2312      	movs	r3, #18
 8009744:	18fb      	adds	r3, r7, r3
 8009746:	1cba      	adds	r2, r7, #2
 8009748:	8812      	ldrh	r2, [r2, #0]
 800974a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800974c:	183b      	adds	r3, r7, r0
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	2b01      	cmp	r3, #1
 8009752:	d011      	beq.n	8009778 <HAL_SPI_TransmitReceive+0x84>
 8009754:	697a      	ldr	r2, [r7, #20]
 8009756:	2382      	movs	r3, #130	; 0x82
 8009758:	005b      	lsls	r3, r3, #1
 800975a:	429a      	cmp	r2, r3
 800975c:	d107      	bne.n	800976e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d103      	bne.n	800976e <HAL_SPI_TransmitReceive+0x7a>
 8009766:	183b      	adds	r3, r7, r0
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	2b04      	cmp	r3, #4
 800976c:	d004      	beq.n	8009778 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800976e:	2323      	movs	r3, #35	; 0x23
 8009770:	18fb      	adds	r3, r7, r3
 8009772:	2202      	movs	r2, #2
 8009774:	701a      	strb	r2, [r3, #0]
    goto error;
 8009776:	e191      	b.n	8009a9c <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d006      	beq.n	800978c <HAL_SPI_TransmitReceive+0x98>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d003      	beq.n	800978c <HAL_SPI_TransmitReceive+0x98>
 8009784:	1cbb      	adds	r3, r7, #2
 8009786:	881b      	ldrh	r3, [r3, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d104      	bne.n	8009796 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800978c:	2323      	movs	r3, #35	; 0x23
 800978e:	18fb      	adds	r3, r7, r3
 8009790:	2201      	movs	r2, #1
 8009792:	701a      	strb	r2, [r3, #0]
    goto error;
 8009794:	e182      	b.n	8009a9c <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	225d      	movs	r2, #93	; 0x5d
 800979a:	5c9b      	ldrb	r3, [r3, r2]
 800979c:	b2db      	uxtb	r3, r3
 800979e:	2b04      	cmp	r3, #4
 80097a0:	d003      	beq.n	80097aa <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	225d      	movs	r2, #93	; 0x5d
 80097a6:	2105      	movs	r1, #5
 80097a8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2200      	movs	r2, #0
 80097ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	1cba      	adds	r2, r7, #2
 80097ba:	2146      	movs	r1, #70	; 0x46
 80097bc:	8812      	ldrh	r2, [r2, #0]
 80097be:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	1cba      	adds	r2, r7, #2
 80097c4:	2144      	movs	r1, #68	; 0x44
 80097c6:	8812      	ldrh	r2, [r2, #0]
 80097c8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	68ba      	ldr	r2, [r7, #8]
 80097ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	1cba      	adds	r2, r7, #2
 80097d4:	8812      	ldrh	r2, [r2, #0]
 80097d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	1cba      	adds	r2, r7, #2
 80097dc:	8812      	ldrh	r2, [r2, #0]
 80097de:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2200      	movs	r2, #0
 80097e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2200      	movs	r2, #0
 80097ea:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	68da      	ldr	r2, [r3, #12]
 80097f0:	23e0      	movs	r3, #224	; 0xe0
 80097f2:	00db      	lsls	r3, r3, #3
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d908      	bls.n	800980a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	685a      	ldr	r2, [r3, #4]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	49ac      	ldr	r1, [pc, #688]	; (8009ab4 <HAL_SPI_TransmitReceive+0x3c0>)
 8009804:	400a      	ands	r2, r1
 8009806:	605a      	str	r2, [r3, #4]
 8009808:	e008      	b.n	800981c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	685a      	ldr	r2, [r3, #4]
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2180      	movs	r1, #128	; 0x80
 8009816:	0149      	lsls	r1, r1, #5
 8009818:	430a      	orrs	r2, r1
 800981a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2240      	movs	r2, #64	; 0x40
 8009824:	4013      	ands	r3, r2
 8009826:	2b40      	cmp	r3, #64	; 0x40
 8009828:	d007      	beq.n	800983a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2140      	movs	r1, #64	; 0x40
 8009836:	430a      	orrs	r2, r1
 8009838:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	68da      	ldr	r2, [r3, #12]
 800983e:	23e0      	movs	r3, #224	; 0xe0
 8009840:	00db      	lsls	r3, r3, #3
 8009842:	429a      	cmp	r2, r3
 8009844:	d800      	bhi.n	8009848 <HAL_SPI_TransmitReceive+0x154>
 8009846:	e083      	b.n	8009950 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d005      	beq.n	800985c <HAL_SPI_TransmitReceive+0x168>
 8009850:	2312      	movs	r3, #18
 8009852:	18fb      	adds	r3, r7, r3
 8009854:	881b      	ldrh	r3, [r3, #0]
 8009856:	2b01      	cmp	r3, #1
 8009858:	d000      	beq.n	800985c <HAL_SPI_TransmitReceive+0x168>
 800985a:	e06d      	b.n	8009938 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009860:	881a      	ldrh	r2, [r3, #0]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800986c:	1c9a      	adds	r2, r3, #2
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009876:	b29b      	uxth	r3, r3
 8009878:	3b01      	subs	r3, #1
 800987a:	b29a      	uxth	r2, r3
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009880:	e05a      	b.n	8009938 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	2202      	movs	r2, #2
 800988a:	4013      	ands	r3, r2
 800988c:	2b02      	cmp	r3, #2
 800988e:	d11b      	bne.n	80098c8 <HAL_SPI_TransmitReceive+0x1d4>
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009894:	b29b      	uxth	r3, r3
 8009896:	2b00      	cmp	r3, #0
 8009898:	d016      	beq.n	80098c8 <HAL_SPI_TransmitReceive+0x1d4>
 800989a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989c:	2b01      	cmp	r3, #1
 800989e:	d113      	bne.n	80098c8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a4:	881a      	ldrh	r2, [r3, #0]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b0:	1c9a      	adds	r2, r3, #2
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	3b01      	subs	r3, #1
 80098be:	b29a      	uxth	r2, r3
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80098c4:	2300      	movs	r3, #0
 80098c6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	2201      	movs	r2, #1
 80098d0:	4013      	ands	r3, r2
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d11c      	bne.n	8009910 <HAL_SPI_TransmitReceive+0x21c>
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2246      	movs	r2, #70	; 0x46
 80098da:	5a9b      	ldrh	r3, [r3, r2]
 80098dc:	b29b      	uxth	r3, r3
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d016      	beq.n	8009910 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	68da      	ldr	r2, [r3, #12]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ec:	b292      	uxth	r2, r2
 80098ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f4:	1c9a      	adds	r2, r3, #2
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2246      	movs	r2, #70	; 0x46
 80098fe:	5a9b      	ldrh	r3, [r3, r2]
 8009900:	b29b      	uxth	r3, r3
 8009902:	3b01      	subs	r3, #1
 8009904:	b299      	uxth	r1, r3
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2246      	movs	r2, #70	; 0x46
 800990a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800990c:	2301      	movs	r3, #1
 800990e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009910:	f7fc fc82 	bl	8006218 <HAL_GetTick>
 8009914:	0002      	movs	r2, r0
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	1ad3      	subs	r3, r2, r3
 800991a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800991c:	429a      	cmp	r2, r3
 800991e:	d80b      	bhi.n	8009938 <HAL_SPI_TransmitReceive+0x244>
 8009920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009922:	3301      	adds	r3, #1
 8009924:	d008      	beq.n	8009938 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8009926:	2323      	movs	r3, #35	; 0x23
 8009928:	18fb      	adds	r3, r7, r3
 800992a:	2203      	movs	r2, #3
 800992c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	225d      	movs	r2, #93	; 0x5d
 8009932:	2101      	movs	r1, #1
 8009934:	5499      	strb	r1, [r3, r2]
        goto error;
 8009936:	e0b1      	b.n	8009a9c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800993c:	b29b      	uxth	r3, r3
 800993e:	2b00      	cmp	r3, #0
 8009940:	d19f      	bne.n	8009882 <HAL_SPI_TransmitReceive+0x18e>
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2246      	movs	r2, #70	; 0x46
 8009946:	5a9b      	ldrh	r3, [r3, r2]
 8009948:	b29b      	uxth	r3, r3
 800994a:	2b00      	cmp	r3, #0
 800994c:	d199      	bne.n	8009882 <HAL_SPI_TransmitReceive+0x18e>
 800994e:	e089      	b.n	8009a64 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d005      	beq.n	8009964 <HAL_SPI_TransmitReceive+0x270>
 8009958:	2312      	movs	r3, #18
 800995a:	18fb      	adds	r3, r7, r3
 800995c:	881b      	ldrh	r3, [r3, #0]
 800995e:	2b01      	cmp	r3, #1
 8009960:	d000      	beq.n	8009964 <HAL_SPI_TransmitReceive+0x270>
 8009962:	e074      	b.n	8009a4e <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	330c      	adds	r3, #12
 800996e:	7812      	ldrb	r2, [r2, #0]
 8009970:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009976:	1c5a      	adds	r2, r3, #1
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009980:	b29b      	uxth	r3, r3
 8009982:	3b01      	subs	r3, #1
 8009984:	b29a      	uxth	r2, r3
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800998a:	e060      	b.n	8009a4e <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	2202      	movs	r2, #2
 8009994:	4013      	ands	r3, r2
 8009996:	2b02      	cmp	r3, #2
 8009998:	d11c      	bne.n	80099d4 <HAL_SPI_TransmitReceive+0x2e0>
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800999e:	b29b      	uxth	r3, r3
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d017      	beq.n	80099d4 <HAL_SPI_TransmitReceive+0x2e0>
 80099a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d114      	bne.n	80099d4 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	330c      	adds	r3, #12
 80099b4:	7812      	ldrb	r2, [r2, #0]
 80099b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099bc:	1c5a      	adds	r2, r3, #1
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	3b01      	subs	r3, #1
 80099ca:	b29a      	uxth	r2, r3
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80099d0:	2300      	movs	r3, #0
 80099d2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	2201      	movs	r2, #1
 80099dc:	4013      	ands	r3, r2
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d11e      	bne.n	8009a20 <HAL_SPI_TransmitReceive+0x32c>
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2246      	movs	r2, #70	; 0x46
 80099e6:	5a9b      	ldrh	r3, [r3, r2]
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d018      	beq.n	8009a20 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	330c      	adds	r3, #12
 80099f4:	001a      	movs	r2, r3
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099fa:	7812      	ldrb	r2, [r2, #0]
 80099fc:	b2d2      	uxtb	r2, r2
 80099fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a04:	1c5a      	adds	r2, r3, #1
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2246      	movs	r2, #70	; 0x46
 8009a0e:	5a9b      	ldrh	r3, [r3, r2]
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	3b01      	subs	r3, #1
 8009a14:	b299      	uxth	r1, r3
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2246      	movs	r2, #70	; 0x46
 8009a1a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009a20:	f7fc fbfa 	bl	8006218 <HAL_GetTick>
 8009a24:	0002      	movs	r2, r0
 8009a26:	69fb      	ldr	r3, [r7, #28]
 8009a28:	1ad3      	subs	r3, r2, r3
 8009a2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d802      	bhi.n	8009a36 <HAL_SPI_TransmitReceive+0x342>
 8009a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a32:	3301      	adds	r3, #1
 8009a34:	d102      	bne.n	8009a3c <HAL_SPI_TransmitReceive+0x348>
 8009a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d108      	bne.n	8009a4e <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8009a3c:	2323      	movs	r3, #35	; 0x23
 8009a3e:	18fb      	adds	r3, r7, r3
 8009a40:	2203      	movs	r2, #3
 8009a42:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	225d      	movs	r2, #93	; 0x5d
 8009a48:	2101      	movs	r1, #1
 8009a4a:	5499      	strb	r1, [r3, r2]
        goto error;
 8009a4c:	e026      	b.n	8009a9c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d199      	bne.n	800998c <HAL_SPI_TransmitReceive+0x298>
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2246      	movs	r2, #70	; 0x46
 8009a5c:	5a9b      	ldrh	r3, [r3, r2]
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d193      	bne.n	800998c <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009a64:	69fa      	ldr	r2, [r7, #28]
 8009a66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	0018      	movs	r0, r3
 8009a6c:	f000 f954 	bl	8009d18 <SPI_EndRxTxTransaction>
 8009a70:	1e03      	subs	r3, r0, #0
 8009a72:	d006      	beq.n	8009a82 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8009a74:	2323      	movs	r3, #35	; 0x23
 8009a76:	18fb      	adds	r3, r7, r3
 8009a78:	2201      	movs	r2, #1
 8009a7a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2220      	movs	r2, #32
 8009a80:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d004      	beq.n	8009a94 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8009a8a:	2323      	movs	r3, #35	; 0x23
 8009a8c:	18fb      	adds	r3, r7, r3
 8009a8e:	2201      	movs	r2, #1
 8009a90:	701a      	strb	r2, [r3, #0]
 8009a92:	e003      	b.n	8009a9c <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	225d      	movs	r2, #93	; 0x5d
 8009a98:	2101      	movs	r1, #1
 8009a9a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	225c      	movs	r2, #92	; 0x5c
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009aa4:	2323      	movs	r3, #35	; 0x23
 8009aa6:	18fb      	adds	r3, r7, r3
 8009aa8:	781b      	ldrb	r3, [r3, #0]
}
 8009aaa:	0018      	movs	r0, r3
 8009aac:	46bd      	mov	sp, r7
 8009aae:	b00a      	add	sp, #40	; 0x28
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	46c0      	nop			; (mov r8, r8)
 8009ab4:	ffffefff 	.word	0xffffefff

08009ab8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b088      	sub	sp, #32
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	603b      	str	r3, [r7, #0]
 8009ac4:	1dfb      	adds	r3, r7, #7
 8009ac6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009ac8:	f7fc fba6 	bl	8006218 <HAL_GetTick>
 8009acc:	0002      	movs	r2, r0
 8009ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad0:	1a9b      	subs	r3, r3, r2
 8009ad2:	683a      	ldr	r2, [r7, #0]
 8009ad4:	18d3      	adds	r3, r2, r3
 8009ad6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009ad8:	f7fc fb9e 	bl	8006218 <HAL_GetTick>
 8009adc:	0003      	movs	r3, r0
 8009ade:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009ae0:	4b3a      	ldr	r3, [pc, #232]	; (8009bcc <SPI_WaitFlagStateUntilTimeout+0x114>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	015b      	lsls	r3, r3, #5
 8009ae6:	0d1b      	lsrs	r3, r3, #20
 8009ae8:	69fa      	ldr	r2, [r7, #28]
 8009aea:	4353      	muls	r3, r2
 8009aec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009aee:	e058      	b.n	8009ba2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	3301      	adds	r3, #1
 8009af4:	d055      	beq.n	8009ba2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009af6:	f7fc fb8f 	bl	8006218 <HAL_GetTick>
 8009afa:	0002      	movs	r2, r0
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	1ad3      	subs	r3, r2, r3
 8009b00:	69fa      	ldr	r2, [r7, #28]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d902      	bls.n	8009b0c <SPI_WaitFlagStateUntilTimeout+0x54>
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d142      	bne.n	8009b92 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	685a      	ldr	r2, [r3, #4]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	21e0      	movs	r1, #224	; 0xe0
 8009b18:	438a      	bics	r2, r1
 8009b1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	685a      	ldr	r2, [r3, #4]
 8009b20:	2382      	movs	r3, #130	; 0x82
 8009b22:	005b      	lsls	r3, r3, #1
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d113      	bne.n	8009b50 <SPI_WaitFlagStateUntilTimeout+0x98>
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	689a      	ldr	r2, [r3, #8]
 8009b2c:	2380      	movs	r3, #128	; 0x80
 8009b2e:	021b      	lsls	r3, r3, #8
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d005      	beq.n	8009b40 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	689a      	ldr	r2, [r3, #8]
 8009b38:	2380      	movs	r3, #128	; 0x80
 8009b3a:	00db      	lsls	r3, r3, #3
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d107      	bne.n	8009b50 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2140      	movs	r1, #64	; 0x40
 8009b4c:	438a      	bics	r2, r1
 8009b4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b54:	2380      	movs	r3, #128	; 0x80
 8009b56:	019b      	lsls	r3, r3, #6
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d110      	bne.n	8009b7e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	491a      	ldr	r1, [pc, #104]	; (8009bd0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8009b68:	400a      	ands	r2, r1
 8009b6a:	601a      	str	r2, [r3, #0]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2180      	movs	r1, #128	; 0x80
 8009b78:	0189      	lsls	r1, r1, #6
 8009b7a:	430a      	orrs	r2, r1
 8009b7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	225d      	movs	r2, #93	; 0x5d
 8009b82:	2101      	movs	r1, #1
 8009b84:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	225c      	movs	r2, #92	; 0x5c
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	e017      	b.n	8009bc2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d101      	bne.n	8009b9c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	3b01      	subs	r3, #1
 8009ba0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	68ba      	ldr	r2, [r7, #8]
 8009baa:	4013      	ands	r3, r2
 8009bac:	68ba      	ldr	r2, [r7, #8]
 8009bae:	1ad3      	subs	r3, r2, r3
 8009bb0:	425a      	negs	r2, r3
 8009bb2:	4153      	adcs	r3, r2
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	001a      	movs	r2, r3
 8009bb8:	1dfb      	adds	r3, r7, #7
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d197      	bne.n	8009af0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	0018      	movs	r0, r3
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	b008      	add	sp, #32
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	46c0      	nop			; (mov r8, r8)
 8009bcc:	20000008 	.word	0x20000008
 8009bd0:	ffffdfff 	.word	0xffffdfff

08009bd4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b08a      	sub	sp, #40	; 0x28
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	607a      	str	r2, [r7, #4]
 8009be0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009be2:	2317      	movs	r3, #23
 8009be4:	18fb      	adds	r3, r7, r3
 8009be6:	2200      	movs	r2, #0
 8009be8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009bea:	f7fc fb15 	bl	8006218 <HAL_GetTick>
 8009bee:	0002      	movs	r2, r0
 8009bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf2:	1a9b      	subs	r3, r3, r2
 8009bf4:	683a      	ldr	r2, [r7, #0]
 8009bf6:	18d3      	adds	r3, r2, r3
 8009bf8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009bfa:	f7fc fb0d 	bl	8006218 <HAL_GetTick>
 8009bfe:	0003      	movs	r3, r0
 8009c00:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	330c      	adds	r3, #12
 8009c08:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009c0a:	4b41      	ldr	r3, [pc, #260]	; (8009d10 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	0013      	movs	r3, r2
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	189b      	adds	r3, r3, r2
 8009c14:	00da      	lsls	r2, r3, #3
 8009c16:	1ad3      	subs	r3, r2, r3
 8009c18:	0d1b      	lsrs	r3, r3, #20
 8009c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c1c:	4353      	muls	r3, r2
 8009c1e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009c20:	e068      	b.n	8009cf4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009c22:	68ba      	ldr	r2, [r7, #8]
 8009c24:	23c0      	movs	r3, #192	; 0xc0
 8009c26:	00db      	lsls	r3, r3, #3
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d10a      	bne.n	8009c42 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d107      	bne.n	8009c42 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	b2da      	uxtb	r2, r3
 8009c38:	2117      	movs	r1, #23
 8009c3a:	187b      	adds	r3, r7, r1
 8009c3c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009c3e:	187b      	adds	r3, r7, r1
 8009c40:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	3301      	adds	r3, #1
 8009c46:	d055      	beq.n	8009cf4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009c48:	f7fc fae6 	bl	8006218 <HAL_GetTick>
 8009c4c:	0002      	movs	r2, r0
 8009c4e:	6a3b      	ldr	r3, [r7, #32]
 8009c50:	1ad3      	subs	r3, r2, r3
 8009c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d902      	bls.n	8009c5e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8009c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d142      	bne.n	8009ce4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	685a      	ldr	r2, [r3, #4]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	21e0      	movs	r1, #224	; 0xe0
 8009c6a:	438a      	bics	r2, r1
 8009c6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	685a      	ldr	r2, [r3, #4]
 8009c72:	2382      	movs	r3, #130	; 0x82
 8009c74:	005b      	lsls	r3, r3, #1
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d113      	bne.n	8009ca2 <SPI_WaitFifoStateUntilTimeout+0xce>
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	689a      	ldr	r2, [r3, #8]
 8009c7e:	2380      	movs	r3, #128	; 0x80
 8009c80:	021b      	lsls	r3, r3, #8
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d005      	beq.n	8009c92 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	689a      	ldr	r2, [r3, #8]
 8009c8a:	2380      	movs	r3, #128	; 0x80
 8009c8c:	00db      	lsls	r3, r3, #3
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d107      	bne.n	8009ca2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	2140      	movs	r1, #64	; 0x40
 8009c9e:	438a      	bics	r2, r1
 8009ca0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ca6:	2380      	movs	r3, #128	; 0x80
 8009ca8:	019b      	lsls	r3, r3, #6
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d110      	bne.n	8009cd0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4916      	ldr	r1, [pc, #88]	; (8009d14 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8009cba:	400a      	ands	r2, r1
 8009cbc:	601a      	str	r2, [r3, #0]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	2180      	movs	r1, #128	; 0x80
 8009cca:	0189      	lsls	r1, r1, #6
 8009ccc:	430a      	orrs	r2, r1
 8009cce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	225d      	movs	r2, #93	; 0x5d
 8009cd4:	2101      	movs	r1, #1
 8009cd6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	225c      	movs	r2, #92	; 0x5c
 8009cdc:	2100      	movs	r1, #0
 8009cde:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009ce0:	2303      	movs	r3, #3
 8009ce2:	e010      	b.n	8009d06 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d101      	bne.n	8009cee <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8009cea:	2300      	movs	r3, #0
 8009cec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	3b01      	subs	r3, #1
 8009cf2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	4013      	ands	r3, r2
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d18e      	bne.n	8009c22 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	0018      	movs	r0, r3
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	b00a      	add	sp, #40	; 0x28
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	46c0      	nop			; (mov r8, r8)
 8009d10:	20000008 	.word	0x20000008
 8009d14:	ffffdfff 	.word	0xffffdfff

08009d18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b086      	sub	sp, #24
 8009d1c:	af02      	add	r7, sp, #8
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009d24:	68ba      	ldr	r2, [r7, #8]
 8009d26:	23c0      	movs	r3, #192	; 0xc0
 8009d28:	0159      	lsls	r1, r3, #5
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	9300      	str	r3, [sp, #0]
 8009d30:	0013      	movs	r3, r2
 8009d32:	2200      	movs	r2, #0
 8009d34:	f7ff ff4e 	bl	8009bd4 <SPI_WaitFifoStateUntilTimeout>
 8009d38:	1e03      	subs	r3, r0, #0
 8009d3a:	d007      	beq.n	8009d4c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d40:	2220      	movs	r2, #32
 8009d42:	431a      	orrs	r2, r3
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009d48:	2303      	movs	r3, #3
 8009d4a:	e027      	b.n	8009d9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	9300      	str	r3, [sp, #0]
 8009d54:	0013      	movs	r3, r2
 8009d56:	2200      	movs	r2, #0
 8009d58:	2180      	movs	r1, #128	; 0x80
 8009d5a:	f7ff fead 	bl	8009ab8 <SPI_WaitFlagStateUntilTimeout>
 8009d5e:	1e03      	subs	r3, r0, #0
 8009d60:	d007      	beq.n	8009d72 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d66:	2220      	movs	r2, #32
 8009d68:	431a      	orrs	r2, r3
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009d6e:	2303      	movs	r3, #3
 8009d70:	e014      	b.n	8009d9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009d72:	68ba      	ldr	r2, [r7, #8]
 8009d74:	23c0      	movs	r3, #192	; 0xc0
 8009d76:	00d9      	lsls	r1, r3, #3
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	9300      	str	r3, [sp, #0]
 8009d7e:	0013      	movs	r3, r2
 8009d80:	2200      	movs	r2, #0
 8009d82:	f7ff ff27 	bl	8009bd4 <SPI_WaitFifoStateUntilTimeout>
 8009d86:	1e03      	subs	r3, r0, #0
 8009d88:	d007      	beq.n	8009d9a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d8e:	2220      	movs	r2, #32
 8009d90:	431a      	orrs	r2, r3
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009d96:	2303      	movs	r3, #3
 8009d98:	e000      	b.n	8009d9c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009d9a:	2300      	movs	r3, #0
}
 8009d9c:	0018      	movs	r0, r3
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	b004      	add	sp, #16
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d101      	bne.n	8009db6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	e042      	b.n	8009e3c <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	223d      	movs	r2, #61	; 0x3d
 8009dba:	5c9b      	ldrb	r3, [r3, r2]
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d107      	bne.n	8009dd2 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	223c      	movs	r2, #60	; 0x3c
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	0018      	movs	r0, r3
 8009dce:	f7fb ff65 	bl	8005c9c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	223d      	movs	r2, #61	; 0x3d
 8009dd6:	2102      	movs	r1, #2
 8009dd8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	3304      	adds	r3, #4
 8009de2:	0019      	movs	r1, r3
 8009de4:	0010      	movs	r0, r2
 8009de6:	f000 fb49 	bl	800a47c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2246      	movs	r2, #70	; 0x46
 8009dee:	2101      	movs	r1, #1
 8009df0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	223e      	movs	r2, #62	; 0x3e
 8009df6:	2101      	movs	r1, #1
 8009df8:	5499      	strb	r1, [r3, r2]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	223f      	movs	r2, #63	; 0x3f
 8009dfe:	2101      	movs	r1, #1
 8009e00:	5499      	strb	r1, [r3, r2]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2240      	movs	r2, #64	; 0x40
 8009e06:	2101      	movs	r1, #1
 8009e08:	5499      	strb	r1, [r3, r2]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2241      	movs	r2, #65	; 0x41
 8009e0e:	2101      	movs	r1, #1
 8009e10:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2242      	movs	r2, #66	; 0x42
 8009e16:	2101      	movs	r1, #1
 8009e18:	5499      	strb	r1, [r3, r2]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2243      	movs	r2, #67	; 0x43
 8009e1e:	2101      	movs	r1, #1
 8009e20:	5499      	strb	r1, [r3, r2]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2244      	movs	r2, #68	; 0x44
 8009e26:	2101      	movs	r1, #1
 8009e28:	5499      	strb	r1, [r3, r2]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2245      	movs	r2, #69	; 0x45
 8009e2e:	2101      	movs	r1, #1
 8009e30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	223d      	movs	r2, #61	; 0x3d
 8009e36:	2101      	movs	r1, #1
 8009e38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	0018      	movs	r0, r3
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	b002      	add	sp, #8
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009e4e:	230f      	movs	r3, #15
 8009e50:	18fb      	adds	r3, r7, r3
 8009e52:	2200      	movs	r2, #0
 8009e54:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d104      	bne.n	8009e66 <HAL_TIM_IC_Start_IT+0x22>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	223e      	movs	r2, #62	; 0x3e
 8009e60:	5c9b      	ldrb	r3, [r3, r2]
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	e013      	b.n	8009e8e <HAL_TIM_IC_Start_IT+0x4a>
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	2b04      	cmp	r3, #4
 8009e6a:	d104      	bne.n	8009e76 <HAL_TIM_IC_Start_IT+0x32>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	223f      	movs	r2, #63	; 0x3f
 8009e70:	5c9b      	ldrb	r3, [r3, r2]
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	e00b      	b.n	8009e8e <HAL_TIM_IC_Start_IT+0x4a>
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	2b08      	cmp	r3, #8
 8009e7a:	d104      	bne.n	8009e86 <HAL_TIM_IC_Start_IT+0x42>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2240      	movs	r2, #64	; 0x40
 8009e80:	5c9b      	ldrb	r3, [r3, r2]
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	e003      	b.n	8009e8e <HAL_TIM_IC_Start_IT+0x4a>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2241      	movs	r2, #65	; 0x41
 8009e8a:	5c9b      	ldrb	r3, [r3, r2]
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	220e      	movs	r2, #14
 8009e90:	18ba      	adds	r2, r7, r2
 8009e92:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d104      	bne.n	8009ea4 <HAL_TIM_IC_Start_IT+0x60>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2242      	movs	r2, #66	; 0x42
 8009e9e:	5c9b      	ldrb	r3, [r3, r2]
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	e013      	b.n	8009ecc <HAL_TIM_IC_Start_IT+0x88>
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	2b04      	cmp	r3, #4
 8009ea8:	d104      	bne.n	8009eb4 <HAL_TIM_IC_Start_IT+0x70>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2243      	movs	r2, #67	; 0x43
 8009eae:	5c9b      	ldrb	r3, [r3, r2]
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	e00b      	b.n	8009ecc <HAL_TIM_IC_Start_IT+0x88>
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	2b08      	cmp	r3, #8
 8009eb8:	d104      	bne.n	8009ec4 <HAL_TIM_IC_Start_IT+0x80>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2244      	movs	r2, #68	; 0x44
 8009ebe:	5c9b      	ldrb	r3, [r3, r2]
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	e003      	b.n	8009ecc <HAL_TIM_IC_Start_IT+0x88>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2245      	movs	r2, #69	; 0x45
 8009ec8:	5c9b      	ldrb	r3, [r3, r2]
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	210d      	movs	r1, #13
 8009ece:	187a      	adds	r2, r7, r1
 8009ed0:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009ed2:	230e      	movs	r3, #14
 8009ed4:	18fb      	adds	r3, r7, r3
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d103      	bne.n	8009ee4 <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009edc:	187b      	adds	r3, r7, r1
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d001      	beq.n	8009ee8 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	e0b1      	b.n	800a04c <HAL_TIM_IC_Start_IT+0x208>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d104      	bne.n	8009ef8 <HAL_TIM_IC_Start_IT+0xb4>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	223e      	movs	r2, #62	; 0x3e
 8009ef2:	2102      	movs	r1, #2
 8009ef4:	5499      	strb	r1, [r3, r2]
 8009ef6:	e013      	b.n	8009f20 <HAL_TIM_IC_Start_IT+0xdc>
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	2b04      	cmp	r3, #4
 8009efc:	d104      	bne.n	8009f08 <HAL_TIM_IC_Start_IT+0xc4>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	223f      	movs	r2, #63	; 0x3f
 8009f02:	2102      	movs	r1, #2
 8009f04:	5499      	strb	r1, [r3, r2]
 8009f06:	e00b      	b.n	8009f20 <HAL_TIM_IC_Start_IT+0xdc>
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	2b08      	cmp	r3, #8
 8009f0c:	d104      	bne.n	8009f18 <HAL_TIM_IC_Start_IT+0xd4>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2240      	movs	r2, #64	; 0x40
 8009f12:	2102      	movs	r1, #2
 8009f14:	5499      	strb	r1, [r3, r2]
 8009f16:	e003      	b.n	8009f20 <HAL_TIM_IC_Start_IT+0xdc>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2241      	movs	r2, #65	; 0x41
 8009f1c:	2102      	movs	r1, #2
 8009f1e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d104      	bne.n	8009f30 <HAL_TIM_IC_Start_IT+0xec>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2242      	movs	r2, #66	; 0x42
 8009f2a:	2102      	movs	r1, #2
 8009f2c:	5499      	strb	r1, [r3, r2]
 8009f2e:	e013      	b.n	8009f58 <HAL_TIM_IC_Start_IT+0x114>
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	2b04      	cmp	r3, #4
 8009f34:	d104      	bne.n	8009f40 <HAL_TIM_IC_Start_IT+0xfc>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2243      	movs	r2, #67	; 0x43
 8009f3a:	2102      	movs	r1, #2
 8009f3c:	5499      	strb	r1, [r3, r2]
 8009f3e:	e00b      	b.n	8009f58 <HAL_TIM_IC_Start_IT+0x114>
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	2b08      	cmp	r3, #8
 8009f44:	d104      	bne.n	8009f50 <HAL_TIM_IC_Start_IT+0x10c>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2244      	movs	r2, #68	; 0x44
 8009f4a:	2102      	movs	r1, #2
 8009f4c:	5499      	strb	r1, [r3, r2]
 8009f4e:	e003      	b.n	8009f58 <HAL_TIM_IC_Start_IT+0x114>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2245      	movs	r2, #69	; 0x45
 8009f54:	2102      	movs	r1, #2
 8009f56:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	2b0c      	cmp	r3, #12
 8009f5c:	d02a      	beq.n	8009fb4 <HAL_TIM_IC_Start_IT+0x170>
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	2b0c      	cmp	r3, #12
 8009f62:	d830      	bhi.n	8009fc6 <HAL_TIM_IC_Start_IT+0x182>
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	2b08      	cmp	r3, #8
 8009f68:	d01b      	beq.n	8009fa2 <HAL_TIM_IC_Start_IT+0x15e>
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	2b08      	cmp	r3, #8
 8009f6e:	d82a      	bhi.n	8009fc6 <HAL_TIM_IC_Start_IT+0x182>
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d003      	beq.n	8009f7e <HAL_TIM_IC_Start_IT+0x13a>
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	2b04      	cmp	r3, #4
 8009f7a:	d009      	beq.n	8009f90 <HAL_TIM_IC_Start_IT+0x14c>
 8009f7c:	e023      	b.n	8009fc6 <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	68da      	ldr	r2, [r3, #12]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2102      	movs	r1, #2
 8009f8a:	430a      	orrs	r2, r1
 8009f8c:	60da      	str	r2, [r3, #12]
      break;
 8009f8e:	e01f      	b.n	8009fd0 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	68da      	ldr	r2, [r3, #12]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2104      	movs	r1, #4
 8009f9c:	430a      	orrs	r2, r1
 8009f9e:	60da      	str	r2, [r3, #12]
      break;
 8009fa0:	e016      	b.n	8009fd0 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	68da      	ldr	r2, [r3, #12]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	2108      	movs	r1, #8
 8009fae:	430a      	orrs	r2, r1
 8009fb0:	60da      	str	r2, [r3, #12]
      break;
 8009fb2:	e00d      	b.n	8009fd0 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	68da      	ldr	r2, [r3, #12]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2110      	movs	r1, #16
 8009fc0:	430a      	orrs	r2, r1
 8009fc2:	60da      	str	r2, [r3, #12]
      break;
 8009fc4:	e004      	b.n	8009fd0 <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 8009fc6:	230f      	movs	r3, #15
 8009fc8:	18fb      	adds	r3, r7, r3
 8009fca:	2201      	movs	r2, #1
 8009fcc:	701a      	strb	r2, [r3, #0]
      break;
 8009fce:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8009fd0:	230f      	movs	r3, #15
 8009fd2:	18fb      	adds	r3, r7, r3
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d135      	bne.n	800a046 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	6839      	ldr	r1, [r7, #0]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	0018      	movs	r0, r3
 8009fe4:	f000 fbee 	bl	800a7c4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a19      	ldr	r2, [pc, #100]	; (800a054 <HAL_TIM_IC_Start_IT+0x210>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d00f      	beq.n	800a012 <HAL_TIM_IC_Start_IT+0x1ce>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	2380      	movs	r3, #128	; 0x80
 8009ff8:	05db      	lsls	r3, r3, #23
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d009      	beq.n	800a012 <HAL_TIM_IC_Start_IT+0x1ce>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a15      	ldr	r2, [pc, #84]	; (800a058 <HAL_TIM_IC_Start_IT+0x214>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d004      	beq.n	800a012 <HAL_TIM_IC_Start_IT+0x1ce>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a13      	ldr	r2, [pc, #76]	; (800a05c <HAL_TIM_IC_Start_IT+0x218>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d111      	bne.n	800a036 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	2207      	movs	r2, #7
 800a01a:	4013      	ands	r3, r2
 800a01c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	2b06      	cmp	r3, #6
 800a022:	d010      	beq.n	800a046 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2101      	movs	r1, #1
 800a030:	430a      	orrs	r2, r1
 800a032:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a034:	e007      	b.n	800a046 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2101      	movs	r1, #1
 800a042:	430a      	orrs	r2, r1
 800a044:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800a046:	230f      	movs	r3, #15
 800a048:	18fb      	adds	r3, r7, r3
 800a04a:	781b      	ldrb	r3, [r3, #0]
}
 800a04c:	0018      	movs	r0, r3
 800a04e:	46bd      	mov	sp, r7
 800a050:	b004      	add	sp, #16
 800a052:	bd80      	pop	{r7, pc}
 800a054:	40012c00 	.word	0x40012c00
 800a058:	40000400 	.word	0x40000400
 800a05c:	40014000 	.word	0x40014000

0800a060 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	691b      	ldr	r3, [r3, #16]
 800a06e:	2202      	movs	r2, #2
 800a070:	4013      	ands	r3, r2
 800a072:	2b02      	cmp	r3, #2
 800a074:	d124      	bne.n	800a0c0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	2202      	movs	r2, #2
 800a07e:	4013      	ands	r3, r2
 800a080:	2b02      	cmp	r3, #2
 800a082:	d11d      	bne.n	800a0c0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2203      	movs	r2, #3
 800a08a:	4252      	negs	r2, r2
 800a08c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2201      	movs	r2, #1
 800a092:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	699b      	ldr	r3, [r3, #24]
 800a09a:	2203      	movs	r2, #3
 800a09c:	4013      	ands	r3, r2
 800a09e:	d004      	beq.n	800a0aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	0018      	movs	r0, r3
 800a0a4:	f7fb f846 	bl	8005134 <HAL_TIM_IC_CaptureCallback>
 800a0a8:	e007      	b.n	800a0ba <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	0018      	movs	r0, r3
 800a0ae:	f000 f9cd 	bl	800a44c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	0018      	movs	r0, r3
 800a0b6:	f000 f9d1 	bl	800a45c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	691b      	ldr	r3, [r3, #16]
 800a0c6:	2204      	movs	r2, #4
 800a0c8:	4013      	ands	r3, r2
 800a0ca:	2b04      	cmp	r3, #4
 800a0cc:	d125      	bne.n	800a11a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	2204      	movs	r2, #4
 800a0d6:	4013      	ands	r3, r2
 800a0d8:	2b04      	cmp	r3, #4
 800a0da:	d11e      	bne.n	800a11a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2205      	movs	r2, #5
 800a0e2:	4252      	negs	r2, r2
 800a0e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2202      	movs	r2, #2
 800a0ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	699a      	ldr	r2, [r3, #24]
 800a0f2:	23c0      	movs	r3, #192	; 0xc0
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	4013      	ands	r3, r2
 800a0f8:	d004      	beq.n	800a104 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	0018      	movs	r0, r3
 800a0fe:	f7fb f819 	bl	8005134 <HAL_TIM_IC_CaptureCallback>
 800a102:	e007      	b.n	800a114 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	0018      	movs	r0, r3
 800a108:	f000 f9a0 	bl	800a44c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	0018      	movs	r0, r3
 800a110:	f000 f9a4 	bl	800a45c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	691b      	ldr	r3, [r3, #16]
 800a120:	2208      	movs	r2, #8
 800a122:	4013      	ands	r3, r2
 800a124:	2b08      	cmp	r3, #8
 800a126:	d124      	bne.n	800a172 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	68db      	ldr	r3, [r3, #12]
 800a12e:	2208      	movs	r2, #8
 800a130:	4013      	ands	r3, r2
 800a132:	2b08      	cmp	r3, #8
 800a134:	d11d      	bne.n	800a172 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	2209      	movs	r2, #9
 800a13c:	4252      	negs	r2, r2
 800a13e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2204      	movs	r2, #4
 800a144:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	69db      	ldr	r3, [r3, #28]
 800a14c:	2203      	movs	r2, #3
 800a14e:	4013      	ands	r3, r2
 800a150:	d004      	beq.n	800a15c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	0018      	movs	r0, r3
 800a156:	f7fa ffed 	bl	8005134 <HAL_TIM_IC_CaptureCallback>
 800a15a:	e007      	b.n	800a16c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	0018      	movs	r0, r3
 800a160:	f000 f974 	bl	800a44c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	0018      	movs	r0, r3
 800a168:	f000 f978 	bl	800a45c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	691b      	ldr	r3, [r3, #16]
 800a178:	2210      	movs	r2, #16
 800a17a:	4013      	ands	r3, r2
 800a17c:	2b10      	cmp	r3, #16
 800a17e:	d125      	bne.n	800a1cc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	2210      	movs	r2, #16
 800a188:	4013      	ands	r3, r2
 800a18a:	2b10      	cmp	r3, #16
 800a18c:	d11e      	bne.n	800a1cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	2211      	movs	r2, #17
 800a194:	4252      	negs	r2, r2
 800a196:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2208      	movs	r2, #8
 800a19c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	69da      	ldr	r2, [r3, #28]
 800a1a4:	23c0      	movs	r3, #192	; 0xc0
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	4013      	ands	r3, r2
 800a1aa:	d004      	beq.n	800a1b6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	0018      	movs	r0, r3
 800a1b0:	f7fa ffc0 	bl	8005134 <HAL_TIM_IC_CaptureCallback>
 800a1b4:	e007      	b.n	800a1c6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	0018      	movs	r0, r3
 800a1ba:	f000 f947 	bl	800a44c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	0018      	movs	r0, r3
 800a1c2:	f000 f94b 	bl	800a45c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	691b      	ldr	r3, [r3, #16]
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	4013      	ands	r3, r2
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d10f      	bne.n	800a1fa <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	68db      	ldr	r3, [r3, #12]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	4013      	ands	r3, r2
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d108      	bne.n	800a1fa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	2202      	movs	r2, #2
 800a1ee:	4252      	negs	r2, r2
 800a1f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	0018      	movs	r0, r3
 800a1f6:	f000 f921 	bl	800a43c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	691b      	ldr	r3, [r3, #16]
 800a200:	2280      	movs	r2, #128	; 0x80
 800a202:	4013      	ands	r3, r2
 800a204:	2b80      	cmp	r3, #128	; 0x80
 800a206:	d10f      	bne.n	800a228 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	2280      	movs	r2, #128	; 0x80
 800a210:	4013      	ands	r3, r2
 800a212:	2b80      	cmp	r3, #128	; 0x80
 800a214:	d108      	bne.n	800a228 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	2281      	movs	r2, #129	; 0x81
 800a21c:	4252      	negs	r2, r2
 800a21e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	0018      	movs	r0, r3
 800a224:	f000 fb58 	bl	800a8d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	691b      	ldr	r3, [r3, #16]
 800a22e:	2240      	movs	r2, #64	; 0x40
 800a230:	4013      	ands	r3, r2
 800a232:	2b40      	cmp	r3, #64	; 0x40
 800a234:	d10f      	bne.n	800a256 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	2240      	movs	r2, #64	; 0x40
 800a23e:	4013      	ands	r3, r2
 800a240:	2b40      	cmp	r3, #64	; 0x40
 800a242:	d108      	bne.n	800a256 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2241      	movs	r2, #65	; 0x41
 800a24a:	4252      	negs	r2, r2
 800a24c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	0018      	movs	r0, r3
 800a252:	f000 f90b 	bl	800a46c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	691b      	ldr	r3, [r3, #16]
 800a25c:	2220      	movs	r2, #32
 800a25e:	4013      	ands	r3, r2
 800a260:	2b20      	cmp	r3, #32
 800a262:	d10f      	bne.n	800a284 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	68db      	ldr	r3, [r3, #12]
 800a26a:	2220      	movs	r2, #32
 800a26c:	4013      	ands	r3, r2
 800a26e:	2b20      	cmp	r3, #32
 800a270:	d108      	bne.n	800a284 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	2221      	movs	r2, #33	; 0x21
 800a278:	4252      	negs	r2, r2
 800a27a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	0018      	movs	r0, r3
 800a280:	f000 fb22 	bl	800a8c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a284:	46c0      	nop			; (mov r8, r8)
 800a286:	46bd      	mov	sp, r7
 800a288:	b002      	add	sp, #8
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b086      	sub	sp, #24
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a298:	2317      	movs	r3, #23
 800a29a:	18fb      	adds	r3, r7, r3
 800a29c:	2200      	movs	r2, #0
 800a29e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	223c      	movs	r2, #60	; 0x3c
 800a2a4:	5c9b      	ldrb	r3, [r3, r2]
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d101      	bne.n	800a2ae <HAL_TIM_IC_ConfigChannel+0x22>
 800a2aa:	2302      	movs	r3, #2
 800a2ac:	e08c      	b.n	800a3c8 <HAL_TIM_IC_ConfigChannel+0x13c>
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	223c      	movs	r2, #60	; 0x3c
 800a2b2:	2101      	movs	r1, #1
 800a2b4:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d11b      	bne.n	800a2f4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	6818      	ldr	r0, [r3, #0]
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	6819      	ldr	r1, [r3, #0]
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	685a      	ldr	r2, [r3, #4]
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	f000 f956 	bl	800a57c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	699a      	ldr	r2, [r3, #24]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	210c      	movs	r1, #12
 800a2dc:	438a      	bics	r2, r1
 800a2de:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	6999      	ldr	r1, [r3, #24]
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	689a      	ldr	r2, [r3, #8]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	430a      	orrs	r2, r1
 800a2f0:	619a      	str	r2, [r3, #24]
 800a2f2:	e062      	b.n	800a3ba <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b04      	cmp	r3, #4
 800a2f8:	d11c      	bne.n	800a334 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	6818      	ldr	r0, [r3, #0]
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	6819      	ldr	r1, [r3, #0]
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	685a      	ldr	r2, [r3, #4]
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	68db      	ldr	r3, [r3, #12]
 800a30a:	f000 f993 	bl	800a634 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	699a      	ldr	r2, [r3, #24]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	492d      	ldr	r1, [pc, #180]	; (800a3d0 <HAL_TIM_IC_ConfigChannel+0x144>)
 800a31a:	400a      	ands	r2, r1
 800a31c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	6999      	ldr	r1, [r3, #24]
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	021a      	lsls	r2, r3, #8
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	430a      	orrs	r2, r1
 800a330:	619a      	str	r2, [r3, #24]
 800a332:	e042      	b.n	800a3ba <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2b08      	cmp	r3, #8
 800a338:	d11b      	bne.n	800a372 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	6818      	ldr	r0, [r3, #0]
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	6819      	ldr	r1, [r3, #0]
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	685a      	ldr	r2, [r3, #4]
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	f000 f9b5 	bl	800a6b8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	69da      	ldr	r2, [r3, #28]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	210c      	movs	r1, #12
 800a35a:	438a      	bics	r2, r1
 800a35c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	69d9      	ldr	r1, [r3, #28]
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	689a      	ldr	r2, [r3, #8]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	430a      	orrs	r2, r1
 800a36e:	61da      	str	r2, [r3, #28]
 800a370:	e023      	b.n	800a3ba <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2b0c      	cmp	r3, #12
 800a376:	d11c      	bne.n	800a3b2 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6818      	ldr	r0, [r3, #0]
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	6819      	ldr	r1, [r3, #0]
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	685a      	ldr	r2, [r3, #4]
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	f000 f9d6 	bl	800a738 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	69da      	ldr	r2, [r3, #28]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	490e      	ldr	r1, [pc, #56]	; (800a3d0 <HAL_TIM_IC_ConfigChannel+0x144>)
 800a398:	400a      	ands	r2, r1
 800a39a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	69d9      	ldr	r1, [r3, #28]
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	689b      	ldr	r3, [r3, #8]
 800a3a6:	021a      	lsls	r2, r3, #8
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	430a      	orrs	r2, r1
 800a3ae:	61da      	str	r2, [r3, #28]
 800a3b0:	e003      	b.n	800a3ba <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800a3b2:	2317      	movs	r3, #23
 800a3b4:	18fb      	adds	r3, r7, r3
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	223c      	movs	r2, #60	; 0x3c
 800a3be:	2100      	movs	r1, #0
 800a3c0:	5499      	strb	r1, [r3, r2]

  return status;
 800a3c2:	2317      	movs	r3, #23
 800a3c4:	18fb      	adds	r3, r7, r3
 800a3c6:	781b      	ldrb	r3, [r3, #0]
}
 800a3c8:	0018      	movs	r0, r3
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	b006      	add	sp, #24
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	fffff3ff 	.word	0xfffff3ff

0800a3d4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	2b0c      	cmp	r3, #12
 800a3e6:	d01e      	beq.n	800a426 <HAL_TIM_ReadCapturedValue+0x52>
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	2b0c      	cmp	r3, #12
 800a3ec:	d820      	bhi.n	800a430 <HAL_TIM_ReadCapturedValue+0x5c>
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	2b08      	cmp	r3, #8
 800a3f2:	d013      	beq.n	800a41c <HAL_TIM_ReadCapturedValue+0x48>
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	2b08      	cmp	r3, #8
 800a3f8:	d81a      	bhi.n	800a430 <HAL_TIM_ReadCapturedValue+0x5c>
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d003      	beq.n	800a408 <HAL_TIM_ReadCapturedValue+0x34>
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	2b04      	cmp	r3, #4
 800a404:	d005      	beq.n	800a412 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 800a406:	e013      	b.n	800a430 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a40e:	60fb      	str	r3, [r7, #12]
      break;
 800a410:	e00f      	b.n	800a432 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a418:	60fb      	str	r3, [r7, #12]
      break;
 800a41a:	e00a      	b.n	800a432 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a422:	60fb      	str	r3, [r7, #12]
      break;
 800a424:	e005      	b.n	800a432 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a42c:	60fb      	str	r3, [r7, #12]
      break;
 800a42e:	e000      	b.n	800a432 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 800a430:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 800a432:	68fb      	ldr	r3, [r7, #12]
}
 800a434:	0018      	movs	r0, r3
 800a436:	46bd      	mov	sp, r7
 800a438:	b004      	add	sp, #16
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a444:	46c0      	nop			; (mov r8, r8)
 800a446:	46bd      	mov	sp, r7
 800a448:	b002      	add	sp, #8
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a454:	46c0      	nop			; (mov r8, r8)
 800a456:	46bd      	mov	sp, r7
 800a458:	b002      	add	sp, #8
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a464:	46c0      	nop			; (mov r8, r8)
 800a466:	46bd      	mov	sp, r7
 800a468:	b002      	add	sp, #8
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a474:	46c0      	nop			; (mov r8, r8)
 800a476:	46bd      	mov	sp, r7
 800a478:	b002      	add	sp, #8
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	4a34      	ldr	r2, [pc, #208]	; (800a560 <TIM_Base_SetConfig+0xe4>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d008      	beq.n	800a4a6 <TIM_Base_SetConfig+0x2a>
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	2380      	movs	r3, #128	; 0x80
 800a498:	05db      	lsls	r3, r3, #23
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d003      	beq.n	800a4a6 <TIM_Base_SetConfig+0x2a>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4a30      	ldr	r2, [pc, #192]	; (800a564 <TIM_Base_SetConfig+0xe8>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d108      	bne.n	800a4b8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2270      	movs	r2, #112	; 0x70
 800a4aa:	4393      	bics	r3, r2
 800a4ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	68fa      	ldr	r2, [r7, #12]
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a29      	ldr	r2, [pc, #164]	; (800a560 <TIM_Base_SetConfig+0xe4>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d018      	beq.n	800a4f2 <TIM_Base_SetConfig+0x76>
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	2380      	movs	r3, #128	; 0x80
 800a4c4:	05db      	lsls	r3, r3, #23
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d013      	beq.n	800a4f2 <TIM_Base_SetConfig+0x76>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	4a25      	ldr	r2, [pc, #148]	; (800a564 <TIM_Base_SetConfig+0xe8>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d00f      	beq.n	800a4f2 <TIM_Base_SetConfig+0x76>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	4a24      	ldr	r2, [pc, #144]	; (800a568 <TIM_Base_SetConfig+0xec>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d00b      	beq.n	800a4f2 <TIM_Base_SetConfig+0x76>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4a23      	ldr	r2, [pc, #140]	; (800a56c <TIM_Base_SetConfig+0xf0>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d007      	beq.n	800a4f2 <TIM_Base_SetConfig+0x76>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	4a22      	ldr	r2, [pc, #136]	; (800a570 <TIM_Base_SetConfig+0xf4>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d003      	beq.n	800a4f2 <TIM_Base_SetConfig+0x76>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4a21      	ldr	r2, [pc, #132]	; (800a574 <TIM_Base_SetConfig+0xf8>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d108      	bne.n	800a504 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	4a20      	ldr	r2, [pc, #128]	; (800a578 <TIM_Base_SetConfig+0xfc>)
 800a4f6:	4013      	ands	r3, r2
 800a4f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	68fa      	ldr	r2, [r7, #12]
 800a500:	4313      	orrs	r3, r2
 800a502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2280      	movs	r2, #128	; 0x80
 800a508:	4393      	bics	r3, r2
 800a50a:	001a      	movs	r2, r3
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	695b      	ldr	r3, [r3, #20]
 800a510:	4313      	orrs	r3, r2
 800a512:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	689a      	ldr	r2, [r3, #8]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4a0c      	ldr	r2, [pc, #48]	; (800a560 <TIM_Base_SetConfig+0xe4>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d00b      	beq.n	800a54a <TIM_Base_SetConfig+0xce>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	4a0d      	ldr	r2, [pc, #52]	; (800a56c <TIM_Base_SetConfig+0xf0>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d007      	beq.n	800a54a <TIM_Base_SetConfig+0xce>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	4a0c      	ldr	r2, [pc, #48]	; (800a570 <TIM_Base_SetConfig+0xf4>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d003      	beq.n	800a54a <TIM_Base_SetConfig+0xce>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	4a0b      	ldr	r2, [pc, #44]	; (800a574 <TIM_Base_SetConfig+0xf8>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d103      	bne.n	800a552 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	691a      	ldr	r2, [r3, #16]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2201      	movs	r2, #1
 800a556:	615a      	str	r2, [r3, #20]
}
 800a558:	46c0      	nop			; (mov r8, r8)
 800a55a:	46bd      	mov	sp, r7
 800a55c:	b004      	add	sp, #16
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	40012c00 	.word	0x40012c00
 800a564:	40000400 	.word	0x40000400
 800a568:	40002000 	.word	0x40002000
 800a56c:	40014000 	.word	0x40014000
 800a570:	40014400 	.word	0x40014400
 800a574:	40014800 	.word	0x40014800
 800a578:	fffffcff 	.word	0xfffffcff

0800a57c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b086      	sub	sp, #24
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	607a      	str	r2, [r7, #4]
 800a588:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	6a1b      	ldr	r3, [r3, #32]
 800a58e:	2201      	movs	r2, #1
 800a590:	4393      	bics	r3, r2
 800a592:	001a      	movs	r2, r3
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	699b      	ldr	r3, [r3, #24]
 800a59c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	6a1b      	ldr	r3, [r3, #32]
 800a5a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	4a20      	ldr	r2, [pc, #128]	; (800a628 <TIM_TI1_SetConfig+0xac>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d00c      	beq.n	800a5c6 <TIM_TI1_SetConfig+0x4a>
 800a5ac:	68fa      	ldr	r2, [r7, #12]
 800a5ae:	2380      	movs	r3, #128	; 0x80
 800a5b0:	05db      	lsls	r3, r3, #23
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d007      	beq.n	800a5c6 <TIM_TI1_SetConfig+0x4a>
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	4a1c      	ldr	r2, [pc, #112]	; (800a62c <TIM_TI1_SetConfig+0xb0>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d003      	beq.n	800a5c6 <TIM_TI1_SetConfig+0x4a>
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	4a1b      	ldr	r2, [pc, #108]	; (800a630 <TIM_TI1_SetConfig+0xb4>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d101      	bne.n	800a5ca <TIM_TI1_SetConfig+0x4e>
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e000      	b.n	800a5cc <TIM_TI1_SetConfig+0x50>
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d008      	beq.n	800a5e2 <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	2203      	movs	r2, #3
 800a5d4:	4393      	bics	r3, r2
 800a5d6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a5d8:	697a      	ldr	r2, [r7, #20]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	617b      	str	r3, [r7, #20]
 800a5e0:	e003      	b.n	800a5ea <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	22f0      	movs	r2, #240	; 0xf0
 800a5ee:	4393      	bics	r3, r2
 800a5f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	011b      	lsls	r3, r3, #4
 800a5f6:	22ff      	movs	r2, #255	; 0xff
 800a5f8:	4013      	ands	r3, r2
 800a5fa:	697a      	ldr	r2, [r7, #20]
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	220a      	movs	r2, #10
 800a604:	4393      	bics	r3, r2
 800a606:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	220a      	movs	r2, #10
 800a60c:	4013      	ands	r3, r2
 800a60e:	693a      	ldr	r2, [r7, #16]
 800a610:	4313      	orrs	r3, r2
 800a612:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	697a      	ldr	r2, [r7, #20]
 800a618:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	693a      	ldr	r2, [r7, #16]
 800a61e:	621a      	str	r2, [r3, #32]
}
 800a620:	46c0      	nop			; (mov r8, r8)
 800a622:	46bd      	mov	sp, r7
 800a624:	b006      	add	sp, #24
 800a626:	bd80      	pop	{r7, pc}
 800a628:	40012c00 	.word	0x40012c00
 800a62c:	40000400 	.word	0x40000400
 800a630:	40014000 	.word	0x40014000

0800a634 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b086      	sub	sp, #24
 800a638:	af00      	add	r7, sp, #0
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	607a      	str	r2, [r7, #4]
 800a640:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	6a1b      	ldr	r3, [r3, #32]
 800a646:	2210      	movs	r2, #16
 800a648:	4393      	bics	r3, r2
 800a64a:	001a      	movs	r2, r3
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	699b      	ldr	r3, [r3, #24]
 800a654:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	6a1b      	ldr	r3, [r3, #32]
 800a65a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	4a14      	ldr	r2, [pc, #80]	; (800a6b0 <TIM_TI2_SetConfig+0x7c>)
 800a660:	4013      	ands	r3, r2
 800a662:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	021b      	lsls	r3, r3, #8
 800a668:	697a      	ldr	r2, [r7, #20]
 800a66a:	4313      	orrs	r3, r2
 800a66c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	4a10      	ldr	r2, [pc, #64]	; (800a6b4 <TIM_TI2_SetConfig+0x80>)
 800a672:	4013      	ands	r3, r2
 800a674:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	031b      	lsls	r3, r3, #12
 800a67a:	041b      	lsls	r3, r3, #16
 800a67c:	0c1b      	lsrs	r3, r3, #16
 800a67e:	697a      	ldr	r2, [r7, #20]
 800a680:	4313      	orrs	r3, r2
 800a682:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	22a0      	movs	r2, #160	; 0xa0
 800a688:	4393      	bics	r3, r2
 800a68a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	011b      	lsls	r3, r3, #4
 800a690:	22a0      	movs	r2, #160	; 0xa0
 800a692:	4013      	ands	r3, r2
 800a694:	693a      	ldr	r2, [r7, #16]
 800a696:	4313      	orrs	r3, r2
 800a698:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	697a      	ldr	r2, [r7, #20]
 800a69e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	693a      	ldr	r2, [r7, #16]
 800a6a4:	621a      	str	r2, [r3, #32]
}
 800a6a6:	46c0      	nop			; (mov r8, r8)
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	b006      	add	sp, #24
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	46c0      	nop			; (mov r8, r8)
 800a6b0:	fffffcff 	.word	0xfffffcff
 800a6b4:	ffff0fff 	.word	0xffff0fff

0800a6b8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b086      	sub	sp, #24
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
 800a6c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	6a1b      	ldr	r3, [r3, #32]
 800a6ca:	4a19      	ldr	r2, [pc, #100]	; (800a730 <TIM_TI3_SetConfig+0x78>)
 800a6cc:	401a      	ands	r2, r3
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	69db      	ldr	r3, [r3, #28]
 800a6d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	6a1b      	ldr	r3, [r3, #32]
 800a6dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	2203      	movs	r2, #3
 800a6e2:	4393      	bics	r3, r2
 800a6e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a6e6:	697a      	ldr	r2, [r7, #20]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	22f0      	movs	r2, #240	; 0xf0
 800a6f2:	4393      	bics	r3, r2
 800a6f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	011b      	lsls	r3, r3, #4
 800a6fa:	22ff      	movs	r2, #255	; 0xff
 800a6fc:	4013      	ands	r3, r2
 800a6fe:	697a      	ldr	r2, [r7, #20]
 800a700:	4313      	orrs	r3, r2
 800a702:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	4a0b      	ldr	r2, [pc, #44]	; (800a734 <TIM_TI3_SetConfig+0x7c>)
 800a708:	4013      	ands	r3, r2
 800a70a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	021a      	lsls	r2, r3, #8
 800a710:	23a0      	movs	r3, #160	; 0xa0
 800a712:	011b      	lsls	r3, r3, #4
 800a714:	4013      	ands	r3, r2
 800a716:	693a      	ldr	r2, [r7, #16]
 800a718:	4313      	orrs	r3, r2
 800a71a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	697a      	ldr	r2, [r7, #20]
 800a720:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	693a      	ldr	r2, [r7, #16]
 800a726:	621a      	str	r2, [r3, #32]
}
 800a728:	46c0      	nop			; (mov r8, r8)
 800a72a:	46bd      	mov	sp, r7
 800a72c:	b006      	add	sp, #24
 800a72e:	bd80      	pop	{r7, pc}
 800a730:	fffffeff 	.word	0xfffffeff
 800a734:	fffff5ff 	.word	0xfffff5ff

0800a738 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b086      	sub	sp, #24
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	607a      	str	r2, [r7, #4]
 800a744:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	6a1b      	ldr	r3, [r3, #32]
 800a74a:	4a1a      	ldr	r2, [pc, #104]	; (800a7b4 <TIM_TI4_SetConfig+0x7c>)
 800a74c:	401a      	ands	r2, r3
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	69db      	ldr	r3, [r3, #28]
 800a756:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	6a1b      	ldr	r3, [r3, #32]
 800a75c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	4a15      	ldr	r2, [pc, #84]	; (800a7b8 <TIM_TI4_SetConfig+0x80>)
 800a762:	4013      	ands	r3, r2
 800a764:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	021b      	lsls	r3, r3, #8
 800a76a:	697a      	ldr	r2, [r7, #20]
 800a76c:	4313      	orrs	r3, r2
 800a76e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	4a12      	ldr	r2, [pc, #72]	; (800a7bc <TIM_TI4_SetConfig+0x84>)
 800a774:	4013      	ands	r3, r2
 800a776:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	031b      	lsls	r3, r3, #12
 800a77c:	041b      	lsls	r3, r3, #16
 800a77e:	0c1b      	lsrs	r3, r3, #16
 800a780:	697a      	ldr	r2, [r7, #20]
 800a782:	4313      	orrs	r3, r2
 800a784:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	4a0d      	ldr	r2, [pc, #52]	; (800a7c0 <TIM_TI4_SetConfig+0x88>)
 800a78a:	4013      	ands	r3, r2
 800a78c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	031a      	lsls	r2, r3, #12
 800a792:	23a0      	movs	r3, #160	; 0xa0
 800a794:	021b      	lsls	r3, r3, #8
 800a796:	4013      	ands	r3, r2
 800a798:	693a      	ldr	r2, [r7, #16]
 800a79a:	4313      	orrs	r3, r2
 800a79c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	697a      	ldr	r2, [r7, #20]
 800a7a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	693a      	ldr	r2, [r7, #16]
 800a7a8:	621a      	str	r2, [r3, #32]
}
 800a7aa:	46c0      	nop			; (mov r8, r8)
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	b006      	add	sp, #24
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	46c0      	nop			; (mov r8, r8)
 800a7b4:	ffffefff 	.word	0xffffefff
 800a7b8:	fffffcff 	.word	0xfffffcff
 800a7bc:	ffff0fff 	.word	0xffff0fff
 800a7c0:	ffff5fff 	.word	0xffff5fff

0800a7c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b086      	sub	sp, #24
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	60f8      	str	r0, [r7, #12]
 800a7cc:	60b9      	str	r1, [r7, #8]
 800a7ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	221f      	movs	r2, #31
 800a7d4:	4013      	ands	r3, r2
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	409a      	lsls	r2, r3
 800a7da:	0013      	movs	r3, r2
 800a7dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	6a1b      	ldr	r3, [r3, #32]
 800a7e2:	697a      	ldr	r2, [r7, #20]
 800a7e4:	43d2      	mvns	r2, r2
 800a7e6:	401a      	ands	r2, r3
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	6a1a      	ldr	r2, [r3, #32]
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	211f      	movs	r1, #31
 800a7f4:	400b      	ands	r3, r1
 800a7f6:	6879      	ldr	r1, [r7, #4]
 800a7f8:	4099      	lsls	r1, r3
 800a7fa:	000b      	movs	r3, r1
 800a7fc:	431a      	orrs	r2, r3
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	621a      	str	r2, [r3, #32]
}
 800a802:	46c0      	nop			; (mov r8, r8)
 800a804:	46bd      	mov	sp, r7
 800a806:	b006      	add	sp, #24
 800a808:	bd80      	pop	{r7, pc}
	...

0800a80c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	223c      	movs	r2, #60	; 0x3c
 800a81a:	5c9b      	ldrb	r3, [r3, r2]
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d101      	bne.n	800a824 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a820:	2302      	movs	r3, #2
 800a822:	e047      	b.n	800a8b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	223c      	movs	r2, #60	; 0x3c
 800a828:	2101      	movs	r1, #1
 800a82a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	223d      	movs	r2, #61	; 0x3d
 800a830:	2102      	movs	r1, #2
 800a832:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2270      	movs	r2, #112	; 0x70
 800a848:	4393      	bics	r3, r2
 800a84a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	68fa      	ldr	r2, [r7, #12]
 800a852:	4313      	orrs	r3, r2
 800a854:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	68fa      	ldr	r2, [r7, #12]
 800a85c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a16      	ldr	r2, [pc, #88]	; (800a8bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d00f      	beq.n	800a888 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	2380      	movs	r3, #128	; 0x80
 800a86e:	05db      	lsls	r3, r3, #23
 800a870:	429a      	cmp	r2, r3
 800a872:	d009      	beq.n	800a888 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a11      	ldr	r2, [pc, #68]	; (800a8c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d004      	beq.n	800a888 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a10      	ldr	r2, [pc, #64]	; (800a8c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d10c      	bne.n	800a8a2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	2280      	movs	r2, #128	; 0x80
 800a88c:	4393      	bics	r3, r2
 800a88e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	68ba      	ldr	r2, [r7, #8]
 800a896:	4313      	orrs	r3, r2
 800a898:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	68ba      	ldr	r2, [r7, #8]
 800a8a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	223d      	movs	r2, #61	; 0x3d
 800a8a6:	2101      	movs	r1, #1
 800a8a8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	223c      	movs	r2, #60	; 0x3c
 800a8ae:	2100      	movs	r1, #0
 800a8b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	0018      	movs	r0, r3
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	b004      	add	sp, #16
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	40012c00 	.word	0x40012c00
 800a8c0:	40000400 	.word	0x40000400
 800a8c4:	40014000 	.word	0x40014000

0800a8c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a8d0:	46c0      	nop			; (mov r8, r8)
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	b002      	add	sp, #8
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a8e0:	46c0      	nop			; (mov r8, r8)
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	b002      	add	sp, #8
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 800a8e8:	b590      	push	{r4, r7, lr}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d101      	bne.n	800a8fa <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e074      	b.n	800a9e4 <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	223c      	movs	r2, #60	; 0x3c
 800a8fe:	5c9b      	ldrb	r3, [r3, r2]
 800a900:	b2db      	uxtb	r3, r3
 800a902:	2b00      	cmp	r3, #0
 800a904:	d107      	bne.n	800a916 <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	223d      	movs	r2, #61	; 0x3d
 800a90a:	2100      	movs	r1, #0
 800a90c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	0018      	movs	r0, r3
 800a912:	f7fb fa57 	bl	8005dc4 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	223c      	movs	r2, #60	; 0x3c
 800a91a:	2102      	movs	r1, #2
 800a91c:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2201      	movs	r2, #1
 800a924:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	6819      	ldr	r1, [r3, #0]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800a934:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	691b      	ldr	r3, [r3, #16]
 800a93a:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 800a93c:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 800a942:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 800a948:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 800a94e:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 800a954:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 800a95a:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	430a      	orrs	r2, r1
 800a962:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	7b1b      	ldrb	r3, [r3, #12]
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d108      	bne.n	800a97e <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	2180      	movs	r1, #128	; 0x80
 800a978:	0249      	lsls	r1, r1, #9
 800a97a:	430a      	orrs	r2, r1
 800a97c:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a986:	431a      	orrs	r2, r3
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a98c:	431a      	orrs	r2, r3
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	43d2      	mvns	r2, r2
 800a994:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	430a      	orrs	r2, r1
 800a9a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a9ae:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681c      	ldr	r4, [r3, #0]
 800a9b8:	0010      	movs	r0, r2
 800a9ba:	f000 f817 	bl	800a9ec <TSC_extract_groups>
 800a9be:	0003      	movs	r3, r0
 800a9c0:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	685a      	ldr	r2, [r3, #4]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	2103      	movs	r1, #3
 800a9ce:	438a      	bics	r2, r1
 800a9d0:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	2203      	movs	r2, #3
 800a9d8:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	223c      	movs	r2, #60	; 0x3c
 800a9de:	2101      	movs	r1, #1
 800a9e0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800a9e2:	2300      	movs	r3, #0
}
 800a9e4:	0018      	movs	r0, r3
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	b003      	add	sp, #12
 800a9ea:	bd90      	pop	{r4, r7, pc}

0800a9ec <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b084      	sub	sp, #16
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	60bb      	str	r3, [r7, #8]
 800a9fc:	e011      	b.n	800aa22 <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	220f      	movs	r2, #15
 800aa04:	409a      	lsls	r2, r3
 800aa06:	0013      	movs	r3, r2
 800aa08:	687a      	ldr	r2, [r7, #4]
 800aa0a:	4013      	ands	r3, r2
 800aa0c:	d006      	beq.n	800aa1c <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 800aa0e:	2201      	movs	r2, #1
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	409a      	lsls	r2, r3
 800aa14:	0013      	movs	r3, r2
 800aa16:	68fa      	ldr	r2, [r7, #12]
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	3301      	adds	r3, #1
 800aa20:	60bb      	str	r3, [r7, #8]
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	2b07      	cmp	r3, #7
 800aa26:	d9ea      	bls.n	800a9fe <TSC_extract_groups+0x12>
    }
  }

  return groups;
 800aa28:	68fb      	ldr	r3, [r7, #12]
}
 800aa2a:	0018      	movs	r0, r3
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	b004      	add	sp, #16
 800aa30:	bd80      	pop	{r7, pc}
	...

0800aa34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b082      	sub	sp, #8
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d101      	bne.n	800aa46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aa42:	2301      	movs	r3, #1
 800aa44:	e044      	b.n	800aad0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d107      	bne.n	800aa5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2278      	movs	r2, #120	; 0x78
 800aa52:	2100      	movs	r1, #0
 800aa54:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	0018      	movs	r0, r3
 800aa5a:	f7fb fa81 	bl	8005f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2224      	movs	r2, #36	; 0x24
 800aa62:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2101      	movs	r1, #1
 800aa70:	438a      	bics	r2, r1
 800aa72:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	0018      	movs	r0, r3
 800aa78:	f000 fbf4 	bl	800b264 <UART_SetConfig>
 800aa7c:	0003      	movs	r3, r0
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	d101      	bne.n	800aa86 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800aa82:	2301      	movs	r3, #1
 800aa84:	e024      	b.n	800aad0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d003      	beq.n	800aa96 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	0018      	movs	r0, r3
 800aa92:	f000 fd6f 	bl	800b574 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	685a      	ldr	r2, [r3, #4]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	490d      	ldr	r1, [pc, #52]	; (800aad8 <HAL_UART_Init+0xa4>)
 800aaa2:	400a      	ands	r2, r1
 800aaa4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	689a      	ldr	r2, [r3, #8]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	212a      	movs	r1, #42	; 0x2a
 800aab2:	438a      	bics	r2, r1
 800aab4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2101      	movs	r1, #1
 800aac2:	430a      	orrs	r2, r1
 800aac4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	0018      	movs	r0, r3
 800aaca:	f000 fe07 	bl	800b6dc <UART_CheckIdleState>
 800aace:	0003      	movs	r3, r0
}
 800aad0:	0018      	movs	r0, r3
 800aad2:	46bd      	mov	sp, r7
 800aad4:	b002      	add	sp, #8
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	ffffb7ff 	.word	0xffffb7ff

0800aadc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b088      	sub	sp, #32
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	60b9      	str	r1, [r7, #8]
 800aae6:	1dbb      	adds	r3, r7, #6
 800aae8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aaee:	2b20      	cmp	r3, #32
 800aaf0:	d15b      	bne.n	800abaa <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d003      	beq.n	800ab00 <HAL_UART_Transmit_IT+0x24>
 800aaf8:	1dbb      	adds	r3, r7, #6
 800aafa:	881b      	ldrh	r3, [r3, #0]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d101      	bne.n	800ab04 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800ab00:	2301      	movs	r3, #1
 800ab02:	e053      	b.n	800abac <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	689a      	ldr	r2, [r3, #8]
 800ab08:	2380      	movs	r3, #128	; 0x80
 800ab0a:	015b      	lsls	r3, r3, #5
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d109      	bne.n	800ab24 <HAL_UART_Transmit_IT+0x48>
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	691b      	ldr	r3, [r3, #16]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d105      	bne.n	800ab24 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	4013      	ands	r3, r2
 800ab1e:	d001      	beq.n	800ab24 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 800ab20:	2301      	movs	r3, #1
 800ab22:	e043      	b.n	800abac <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	68ba      	ldr	r2, [r7, #8]
 800ab28:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	1dba      	adds	r2, r7, #6
 800ab2e:	2150      	movs	r1, #80	; 0x50
 800ab30:	8812      	ldrh	r2, [r2, #0]
 800ab32:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	1dba      	adds	r2, r7, #6
 800ab38:	2152      	movs	r1, #82	; 0x52
 800ab3a:	8812      	ldrh	r2, [r2, #0]
 800ab3c:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2200      	movs	r2, #0
 800ab42:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2284      	movs	r2, #132	; 0x84
 800ab48:	2100      	movs	r1, #0
 800ab4a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2221      	movs	r2, #33	; 0x21
 800ab50:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	689a      	ldr	r2, [r3, #8]
 800ab56:	2380      	movs	r3, #128	; 0x80
 800ab58:	015b      	lsls	r3, r3, #5
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d107      	bne.n	800ab6e <HAL_UART_Transmit_IT+0x92>
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	691b      	ldr	r3, [r3, #16]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d103      	bne.n	800ab6e <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	4a12      	ldr	r2, [pc, #72]	; (800abb4 <HAL_UART_Transmit_IT+0xd8>)
 800ab6a:	66da      	str	r2, [r3, #108]	; 0x6c
 800ab6c:	e002      	b.n	800ab74 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	4a11      	ldr	r2, [pc, #68]	; (800abb8 <HAL_UART_Transmit_IT+0xdc>)
 800ab72:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab74:	f3ef 8310 	mrs	r3, PRIMASK
 800ab78:	613b      	str	r3, [r7, #16]
  return(result);
 800ab7a:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ab7c:	61fb      	str	r3, [r7, #28]
 800ab7e:	2301      	movs	r3, #1
 800ab80:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	f383 8810 	msr	PRIMASK, r3
}
 800ab88:	46c0      	nop			; (mov r8, r8)
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2180      	movs	r1, #128	; 0x80
 800ab96:	430a      	orrs	r2, r1
 800ab98:	601a      	str	r2, [r3, #0]
 800ab9a:	69fb      	ldr	r3, [r7, #28]
 800ab9c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab9e:	69bb      	ldr	r3, [r7, #24]
 800aba0:	f383 8810 	msr	PRIMASK, r3
}
 800aba4:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 800aba6:	2300      	movs	r3, #0
 800aba8:	e000      	b.n	800abac <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 800abaa:	2302      	movs	r3, #2
  }
}
 800abac:	0018      	movs	r0, r3
 800abae:	46bd      	mov	sp, r7
 800abb0:	b008      	add	sp, #32
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	0800bc3f 	.word	0x0800bc3f
 800abb8:	0800bb8b 	.word	0x0800bb8b

0800abbc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b088      	sub	sp, #32
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	1dbb      	adds	r3, r7, #6
 800abc8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2280      	movs	r2, #128	; 0x80
 800abce:	589b      	ldr	r3, [r3, r2]
 800abd0:	2b20      	cmp	r3, #32
 800abd2:	d145      	bne.n	800ac60 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d003      	beq.n	800abe2 <HAL_UART_Receive_IT+0x26>
 800abda:	1dbb      	adds	r3, r7, #6
 800abdc:	881b      	ldrh	r3, [r3, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d101      	bne.n	800abe6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800abe2:	2301      	movs	r3, #1
 800abe4:	e03d      	b.n	800ac62 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	689a      	ldr	r2, [r3, #8]
 800abea:	2380      	movs	r3, #128	; 0x80
 800abec:	015b      	lsls	r3, r3, #5
 800abee:	429a      	cmp	r2, r3
 800abf0:	d109      	bne.n	800ac06 <HAL_UART_Receive_IT+0x4a>
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	691b      	ldr	r3, [r3, #16]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d105      	bne.n	800ac06 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	2201      	movs	r2, #1
 800abfe:	4013      	ands	r3, r2
 800ac00:	d001      	beq.n	800ac06 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	e02d      	b.n	800ac62 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	685a      	ldr	r2, [r3, #4]
 800ac12:	2380      	movs	r3, #128	; 0x80
 800ac14:	041b      	lsls	r3, r3, #16
 800ac16:	4013      	ands	r3, r2
 800ac18:	d019      	beq.n	800ac4e <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac1a:	f3ef 8310 	mrs	r3, PRIMASK
 800ac1e:	613b      	str	r3, [r7, #16]
  return(result);
 800ac20:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ac22:	61fb      	str	r3, [r7, #28]
 800ac24:	2301      	movs	r3, #1
 800ac26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	f383 8810 	msr	PRIMASK, r3
}
 800ac2e:	46c0      	nop			; (mov r8, r8)
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	2180      	movs	r1, #128	; 0x80
 800ac3c:	04c9      	lsls	r1, r1, #19
 800ac3e:	430a      	orrs	r2, r1
 800ac40:	601a      	str	r2, [r3, #0]
 800ac42:	69fb      	ldr	r3, [r7, #28]
 800ac44:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac46:	69bb      	ldr	r3, [r7, #24]
 800ac48:	f383 8810 	msr	PRIMASK, r3
}
 800ac4c:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ac4e:	1dbb      	adds	r3, r7, #6
 800ac50:	881a      	ldrh	r2, [r3, #0]
 800ac52:	68b9      	ldr	r1, [r7, #8]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	0018      	movs	r0, r3
 800ac58:	f000 fe52 	bl	800b900 <UART_Start_Receive_IT>
 800ac5c:	0003      	movs	r3, r0
 800ac5e:	e000      	b.n	800ac62 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800ac60:	2302      	movs	r3, #2
  }
}
 800ac62:	0018      	movs	r0, r3
 800ac64:	46bd      	mov	sp, r7
 800ac66:	b008      	add	sp, #32
 800ac68:	bd80      	pop	{r7, pc}
	...

0800ac6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ac6c:	b590      	push	{r4, r7, lr}
 800ac6e:	b0ab      	sub	sp, #172	; 0xac
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	69db      	ldr	r3, [r3, #28]
 800ac7a:	22a4      	movs	r2, #164	; 0xa4
 800ac7c:	18b9      	adds	r1, r7, r2
 800ac7e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	20a0      	movs	r0, #160	; 0xa0
 800ac88:	1839      	adds	r1, r7, r0
 800ac8a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	219c      	movs	r1, #156	; 0x9c
 800ac94:	1879      	adds	r1, r7, r1
 800ac96:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ac98:	0011      	movs	r1, r2
 800ac9a:	18bb      	adds	r3, r7, r2
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4a99      	ldr	r2, [pc, #612]	; (800af04 <HAL_UART_IRQHandler+0x298>)
 800aca0:	4013      	ands	r3, r2
 800aca2:	2298      	movs	r2, #152	; 0x98
 800aca4:	18bc      	adds	r4, r7, r2
 800aca6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800aca8:	18bb      	adds	r3, r7, r2
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d114      	bne.n	800acda <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800acb0:	187b      	adds	r3, r7, r1
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	2220      	movs	r2, #32
 800acb6:	4013      	ands	r3, r2
 800acb8:	d00f      	beq.n	800acda <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800acba:	183b      	adds	r3, r7, r0
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	2220      	movs	r2, #32
 800acc0:	4013      	ands	r3, r2
 800acc2:	d00a      	beq.n	800acda <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d100      	bne.n	800acce <HAL_UART_IRQHandler+0x62>
 800accc:	e29e      	b.n	800b20c <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	0010      	movs	r0, r2
 800acd6:	4798      	blx	r3
      }
      return;
 800acd8:	e298      	b.n	800b20c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800acda:	2398      	movs	r3, #152	; 0x98
 800acdc:	18fb      	adds	r3, r7, r3
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d100      	bne.n	800ace6 <HAL_UART_IRQHandler+0x7a>
 800ace4:	e114      	b.n	800af10 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ace6:	239c      	movs	r3, #156	; 0x9c
 800ace8:	18fb      	adds	r3, r7, r3
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2201      	movs	r2, #1
 800acee:	4013      	ands	r3, r2
 800acf0:	d106      	bne.n	800ad00 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800acf2:	23a0      	movs	r3, #160	; 0xa0
 800acf4:	18fb      	adds	r3, r7, r3
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a83      	ldr	r2, [pc, #524]	; (800af08 <HAL_UART_IRQHandler+0x29c>)
 800acfa:	4013      	ands	r3, r2
 800acfc:	d100      	bne.n	800ad00 <HAL_UART_IRQHandler+0x94>
 800acfe:	e107      	b.n	800af10 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ad00:	23a4      	movs	r3, #164	; 0xa4
 800ad02:	18fb      	adds	r3, r7, r3
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	2201      	movs	r2, #1
 800ad08:	4013      	ands	r3, r2
 800ad0a:	d012      	beq.n	800ad32 <HAL_UART_IRQHandler+0xc6>
 800ad0c:	23a0      	movs	r3, #160	; 0xa0
 800ad0e:	18fb      	adds	r3, r7, r3
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	2380      	movs	r3, #128	; 0x80
 800ad14:	005b      	lsls	r3, r3, #1
 800ad16:	4013      	ands	r3, r2
 800ad18:	d00b      	beq.n	800ad32 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2284      	movs	r2, #132	; 0x84
 800ad26:	589b      	ldr	r3, [r3, r2]
 800ad28:	2201      	movs	r2, #1
 800ad2a:	431a      	orrs	r2, r3
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2184      	movs	r1, #132	; 0x84
 800ad30:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ad32:	23a4      	movs	r3, #164	; 0xa4
 800ad34:	18fb      	adds	r3, r7, r3
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2202      	movs	r2, #2
 800ad3a:	4013      	ands	r3, r2
 800ad3c:	d011      	beq.n	800ad62 <HAL_UART_IRQHandler+0xf6>
 800ad3e:	239c      	movs	r3, #156	; 0x9c
 800ad40:	18fb      	adds	r3, r7, r3
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	2201      	movs	r2, #1
 800ad46:	4013      	ands	r3, r2
 800ad48:	d00b      	beq.n	800ad62 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	2202      	movs	r2, #2
 800ad50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2284      	movs	r2, #132	; 0x84
 800ad56:	589b      	ldr	r3, [r3, r2]
 800ad58:	2204      	movs	r2, #4
 800ad5a:	431a      	orrs	r2, r3
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2184      	movs	r1, #132	; 0x84
 800ad60:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ad62:	23a4      	movs	r3, #164	; 0xa4
 800ad64:	18fb      	adds	r3, r7, r3
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	2204      	movs	r2, #4
 800ad6a:	4013      	ands	r3, r2
 800ad6c:	d011      	beq.n	800ad92 <HAL_UART_IRQHandler+0x126>
 800ad6e:	239c      	movs	r3, #156	; 0x9c
 800ad70:	18fb      	adds	r3, r7, r3
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	2201      	movs	r2, #1
 800ad76:	4013      	ands	r3, r2
 800ad78:	d00b      	beq.n	800ad92 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2204      	movs	r2, #4
 800ad80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2284      	movs	r2, #132	; 0x84
 800ad86:	589b      	ldr	r3, [r3, r2]
 800ad88:	2202      	movs	r2, #2
 800ad8a:	431a      	orrs	r2, r3
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2184      	movs	r1, #132	; 0x84
 800ad90:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ad92:	23a4      	movs	r3, #164	; 0xa4
 800ad94:	18fb      	adds	r3, r7, r3
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	2208      	movs	r2, #8
 800ad9a:	4013      	ands	r3, r2
 800ad9c:	d017      	beq.n	800adce <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ad9e:	23a0      	movs	r3, #160	; 0xa0
 800ada0:	18fb      	adds	r3, r7, r3
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2220      	movs	r2, #32
 800ada6:	4013      	ands	r3, r2
 800ada8:	d105      	bne.n	800adb6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800adaa:	239c      	movs	r3, #156	; 0x9c
 800adac:	18fb      	adds	r3, r7, r3
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2201      	movs	r2, #1
 800adb2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800adb4:	d00b      	beq.n	800adce <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	2208      	movs	r2, #8
 800adbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2284      	movs	r2, #132	; 0x84
 800adc2:	589b      	ldr	r3, [r3, r2]
 800adc4:	2208      	movs	r2, #8
 800adc6:	431a      	orrs	r2, r3
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2184      	movs	r1, #132	; 0x84
 800adcc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800adce:	23a4      	movs	r3, #164	; 0xa4
 800add0:	18fb      	adds	r3, r7, r3
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	2380      	movs	r3, #128	; 0x80
 800add6:	011b      	lsls	r3, r3, #4
 800add8:	4013      	ands	r3, r2
 800adda:	d013      	beq.n	800ae04 <HAL_UART_IRQHandler+0x198>
 800addc:	23a0      	movs	r3, #160	; 0xa0
 800adde:	18fb      	adds	r3, r7, r3
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	2380      	movs	r3, #128	; 0x80
 800ade4:	04db      	lsls	r3, r3, #19
 800ade6:	4013      	ands	r3, r2
 800ade8:	d00c      	beq.n	800ae04 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2280      	movs	r2, #128	; 0x80
 800adf0:	0112      	lsls	r2, r2, #4
 800adf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2284      	movs	r2, #132	; 0x84
 800adf8:	589b      	ldr	r3, [r3, r2]
 800adfa:	2220      	movs	r2, #32
 800adfc:	431a      	orrs	r2, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2184      	movs	r1, #132	; 0x84
 800ae02:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2284      	movs	r2, #132	; 0x84
 800ae08:	589b      	ldr	r3, [r3, r2]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d100      	bne.n	800ae10 <HAL_UART_IRQHandler+0x1a4>
 800ae0e:	e1ff      	b.n	800b210 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ae10:	23a4      	movs	r3, #164	; 0xa4
 800ae12:	18fb      	adds	r3, r7, r3
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	2220      	movs	r2, #32
 800ae18:	4013      	ands	r3, r2
 800ae1a:	d00e      	beq.n	800ae3a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ae1c:	23a0      	movs	r3, #160	; 0xa0
 800ae1e:	18fb      	adds	r3, r7, r3
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	2220      	movs	r2, #32
 800ae24:	4013      	ands	r3, r2
 800ae26:	d008      	beq.n	800ae3a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d004      	beq.n	800ae3a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	0010      	movs	r0, r2
 800ae38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2284      	movs	r2, #132	; 0x84
 800ae3e:	589b      	ldr	r3, [r3, r2]
 800ae40:	2194      	movs	r1, #148	; 0x94
 800ae42:	187a      	adds	r2, r7, r1
 800ae44:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	2240      	movs	r2, #64	; 0x40
 800ae4e:	4013      	ands	r3, r2
 800ae50:	2b40      	cmp	r3, #64	; 0x40
 800ae52:	d004      	beq.n	800ae5e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ae54:	187b      	adds	r3, r7, r1
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	2228      	movs	r2, #40	; 0x28
 800ae5a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ae5c:	d047      	beq.n	800aeee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	0018      	movs	r0, r3
 800ae62:	f000 fe17 	bl	800ba94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	2240      	movs	r2, #64	; 0x40
 800ae6e:	4013      	ands	r3, r2
 800ae70:	2b40      	cmp	r3, #64	; 0x40
 800ae72:	d137      	bne.n	800aee4 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae74:	f3ef 8310 	mrs	r3, PRIMASK
 800ae78:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800ae7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae7c:	2090      	movs	r0, #144	; 0x90
 800ae7e:	183a      	adds	r2, r7, r0
 800ae80:	6013      	str	r3, [r2, #0]
 800ae82:	2301      	movs	r3, #1
 800ae84:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae88:	f383 8810 	msr	PRIMASK, r3
}
 800ae8c:	46c0      	nop			; (mov r8, r8)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	689a      	ldr	r2, [r3, #8]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	2140      	movs	r1, #64	; 0x40
 800ae9a:	438a      	bics	r2, r1
 800ae9c:	609a      	str	r2, [r3, #8]
 800ae9e:	183b      	adds	r3, r7, r0
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aea4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aea6:	f383 8810 	msr	PRIMASK, r3
}
 800aeaa:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d012      	beq.n	800aeda <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aeb8:	4a14      	ldr	r2, [pc, #80]	; (800af0c <HAL_UART_IRQHandler+0x2a0>)
 800aeba:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aec0:	0018      	movs	r0, r3
 800aec2:	f7fc f85d 	bl	8006f80 <HAL_DMA_Abort_IT>
 800aec6:	1e03      	subs	r3, r0, #0
 800aec8:	d01a      	beq.n	800af00 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aed4:	0018      	movs	r0, r3
 800aed6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aed8:	e012      	b.n	800af00 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	0018      	movs	r0, r3
 800aede:	f000 f9ad 	bl	800b23c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aee2:	e00d      	b.n	800af00 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	0018      	movs	r0, r3
 800aee8:	f000 f9a8 	bl	800b23c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aeec:	e008      	b.n	800af00 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	0018      	movs	r0, r3
 800aef2:	f000 f9a3 	bl	800b23c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2284      	movs	r2, #132	; 0x84
 800aefa:	2100      	movs	r1, #0
 800aefc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800aefe:	e187      	b.n	800b210 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af00:	46c0      	nop			; (mov r8, r8)
    return;
 800af02:	e185      	b.n	800b210 <HAL_UART_IRQHandler+0x5a4>
 800af04:	0000080f 	.word	0x0000080f
 800af08:	04000120 	.word	0x04000120
 800af0c:	0800bb5d 	.word	0x0800bb5d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af14:	2b01      	cmp	r3, #1
 800af16:	d000      	beq.n	800af1a <HAL_UART_IRQHandler+0x2ae>
 800af18:	e139      	b.n	800b18e <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800af1a:	23a4      	movs	r3, #164	; 0xa4
 800af1c:	18fb      	adds	r3, r7, r3
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	2210      	movs	r2, #16
 800af22:	4013      	ands	r3, r2
 800af24:	d100      	bne.n	800af28 <HAL_UART_IRQHandler+0x2bc>
 800af26:	e132      	b.n	800b18e <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800af28:	23a0      	movs	r3, #160	; 0xa0
 800af2a:	18fb      	adds	r3, r7, r3
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	2210      	movs	r2, #16
 800af30:	4013      	ands	r3, r2
 800af32:	d100      	bne.n	800af36 <HAL_UART_IRQHandler+0x2ca>
 800af34:	e12b      	b.n	800b18e <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	2210      	movs	r2, #16
 800af3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	689b      	ldr	r3, [r3, #8]
 800af44:	2240      	movs	r2, #64	; 0x40
 800af46:	4013      	ands	r3, r2
 800af48:	2b40      	cmp	r3, #64	; 0x40
 800af4a:	d000      	beq.n	800af4e <HAL_UART_IRQHandler+0x2e2>
 800af4c:	e09f      	b.n	800b08e <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	685a      	ldr	r2, [r3, #4]
 800af56:	217e      	movs	r1, #126	; 0x7e
 800af58:	187b      	adds	r3, r7, r1
 800af5a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800af5c:	187b      	adds	r3, r7, r1
 800af5e:	881b      	ldrh	r3, [r3, #0]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d100      	bne.n	800af66 <HAL_UART_IRQHandler+0x2fa>
 800af64:	e156      	b.n	800b214 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2258      	movs	r2, #88	; 0x58
 800af6a:	5a9b      	ldrh	r3, [r3, r2]
 800af6c:	187a      	adds	r2, r7, r1
 800af6e:	8812      	ldrh	r2, [r2, #0]
 800af70:	429a      	cmp	r2, r3
 800af72:	d300      	bcc.n	800af76 <HAL_UART_IRQHandler+0x30a>
 800af74:	e14e      	b.n	800b214 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	187a      	adds	r2, r7, r1
 800af7a:	215a      	movs	r1, #90	; 0x5a
 800af7c:	8812      	ldrh	r2, [r2, #0]
 800af7e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af84:	699b      	ldr	r3, [r3, #24]
 800af86:	2b20      	cmp	r3, #32
 800af88:	d06f      	beq.n	800b06a <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af8a:	f3ef 8310 	mrs	r3, PRIMASK
 800af8e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800af90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af92:	67bb      	str	r3, [r7, #120]	; 0x78
 800af94:	2301      	movs	r3, #1
 800af96:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af9a:	f383 8810 	msr	PRIMASK, r3
}
 800af9e:	46c0      	nop			; (mov r8, r8)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	681a      	ldr	r2, [r3, #0]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	499e      	ldr	r1, [pc, #632]	; (800b224 <HAL_UART_IRQHandler+0x5b8>)
 800afac:	400a      	ands	r2, r1
 800afae:	601a      	str	r2, [r3, #0]
 800afb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afb2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb6:	f383 8810 	msr	PRIMASK, r3
}
 800afba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afbc:	f3ef 8310 	mrs	r3, PRIMASK
 800afc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800afc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afc4:	677b      	str	r3, [r7, #116]	; 0x74
 800afc6:	2301      	movs	r3, #1
 800afc8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afcc:	f383 8810 	msr	PRIMASK, r3
}
 800afd0:	46c0      	nop			; (mov r8, r8)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	689a      	ldr	r2, [r3, #8]
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	2101      	movs	r1, #1
 800afde:	438a      	bics	r2, r1
 800afe0:	609a      	str	r2, [r3, #8]
 800afe2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afe4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afe8:	f383 8810 	msr	PRIMASK, r3
}
 800afec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afee:	f3ef 8310 	mrs	r3, PRIMASK
 800aff2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800aff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aff6:	673b      	str	r3, [r7, #112]	; 0x70
 800aff8:	2301      	movs	r3, #1
 800affa:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800affc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800affe:	f383 8810 	msr	PRIMASK, r3
}
 800b002:	46c0      	nop			; (mov r8, r8)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	689a      	ldr	r2, [r3, #8]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	2140      	movs	r1, #64	; 0x40
 800b010:	438a      	bics	r2, r1
 800b012:	609a      	str	r2, [r3, #8]
 800b014:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b016:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b01a:	f383 8810 	msr	PRIMASK, r3
}
 800b01e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2280      	movs	r2, #128	; 0x80
 800b024:	2120      	movs	r1, #32
 800b026:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2200      	movs	r2, #0
 800b02c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b02e:	f3ef 8310 	mrs	r3, PRIMASK
 800b032:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800b034:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b036:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b038:	2301      	movs	r3, #1
 800b03a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b03c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b03e:	f383 8810 	msr	PRIMASK, r3
}
 800b042:	46c0      	nop			; (mov r8, r8)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	2110      	movs	r1, #16
 800b050:	438a      	bics	r2, r1
 800b052:	601a      	str	r2, [r3, #0]
 800b054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b056:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b058:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b05a:	f383 8810 	msr	PRIMASK, r3
}
 800b05e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b064:	0018      	movs	r0, r3
 800b066:	f7fb ff53 	bl	8006f10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2202      	movs	r2, #2
 800b06e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2258      	movs	r2, #88	; 0x58
 800b074:	5a9a      	ldrh	r2, [r3, r2]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	215a      	movs	r1, #90	; 0x5a
 800b07a:	5a5b      	ldrh	r3, [r3, r1]
 800b07c:	b29b      	uxth	r3, r3
 800b07e:	1ad3      	subs	r3, r2, r3
 800b080:	b29a      	uxth	r2, r3
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	0011      	movs	r1, r2
 800b086:	0018      	movs	r0, r3
 800b088:	f000 f8e0 	bl	800b24c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b08c:	e0c2      	b.n	800b214 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2258      	movs	r2, #88	; 0x58
 800b092:	5a99      	ldrh	r1, [r3, r2]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	225a      	movs	r2, #90	; 0x5a
 800b098:	5a9b      	ldrh	r3, [r3, r2]
 800b09a:	b29a      	uxth	r2, r3
 800b09c:	208e      	movs	r0, #142	; 0x8e
 800b09e:	183b      	adds	r3, r7, r0
 800b0a0:	1a8a      	subs	r2, r1, r2
 800b0a2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	225a      	movs	r2, #90	; 0x5a
 800b0a8:	5a9b      	ldrh	r3, [r3, r2]
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d100      	bne.n	800b0b2 <HAL_UART_IRQHandler+0x446>
 800b0b0:	e0b2      	b.n	800b218 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 800b0b2:	183b      	adds	r3, r7, r0
 800b0b4:	881b      	ldrh	r3, [r3, #0]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d100      	bne.n	800b0bc <HAL_UART_IRQHandler+0x450>
 800b0ba:	e0ad      	b.n	800b218 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0bc:	f3ef 8310 	mrs	r3, PRIMASK
 800b0c0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b0c4:	2488      	movs	r4, #136	; 0x88
 800b0c6:	193a      	adds	r2, r7, r4
 800b0c8:	6013      	str	r3, [r2, #0]
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	f383 8810 	msr	PRIMASK, r3
}
 800b0d4:	46c0      	nop			; (mov r8, r8)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4951      	ldr	r1, [pc, #324]	; (800b228 <HAL_UART_IRQHandler+0x5bc>)
 800b0e2:	400a      	ands	r2, r1
 800b0e4:	601a      	str	r2, [r3, #0]
 800b0e6:	193b      	adds	r3, r7, r4
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	f383 8810 	msr	PRIMASK, r3
}
 800b0f2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0f4:	f3ef 8310 	mrs	r3, PRIMASK
 800b0f8:	61bb      	str	r3, [r7, #24]
  return(result);
 800b0fa:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0fc:	2484      	movs	r4, #132	; 0x84
 800b0fe:	193a      	adds	r2, r7, r4
 800b100:	6013      	str	r3, [r2, #0]
 800b102:	2301      	movs	r3, #1
 800b104:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b106:	69fb      	ldr	r3, [r7, #28]
 800b108:	f383 8810 	msr	PRIMASK, r3
}
 800b10c:	46c0      	nop			; (mov r8, r8)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	689a      	ldr	r2, [r3, #8]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	2101      	movs	r1, #1
 800b11a:	438a      	bics	r2, r1
 800b11c:	609a      	str	r2, [r3, #8]
 800b11e:	193b      	adds	r3, r7, r4
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b124:	6a3b      	ldr	r3, [r7, #32]
 800b126:	f383 8810 	msr	PRIMASK, r3
}
 800b12a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2280      	movs	r2, #128	; 0x80
 800b130:	2120      	movs	r1, #32
 800b132:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2200      	movs	r2, #0
 800b138:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b140:	f3ef 8310 	mrs	r3, PRIMASK
 800b144:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800b146:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b148:	2480      	movs	r4, #128	; 0x80
 800b14a:	193a      	adds	r2, r7, r4
 800b14c:	6013      	str	r3, [r2, #0]
 800b14e:	2301      	movs	r3, #1
 800b150:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b154:	f383 8810 	msr	PRIMASK, r3
}
 800b158:	46c0      	nop			; (mov r8, r8)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	681a      	ldr	r2, [r3, #0]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	2110      	movs	r1, #16
 800b166:	438a      	bics	r2, r1
 800b168:	601a      	str	r2, [r3, #0]
 800b16a:	193b      	adds	r3, r7, r4
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b172:	f383 8810 	msr	PRIMASK, r3
}
 800b176:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2202      	movs	r2, #2
 800b17c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b17e:	183b      	adds	r3, r7, r0
 800b180:	881a      	ldrh	r2, [r3, #0]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	0011      	movs	r1, r2
 800b186:	0018      	movs	r0, r3
 800b188:	f000 f860 	bl	800b24c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b18c:	e044      	b.n	800b218 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b18e:	23a4      	movs	r3, #164	; 0xa4
 800b190:	18fb      	adds	r3, r7, r3
 800b192:	681a      	ldr	r2, [r3, #0]
 800b194:	2380      	movs	r3, #128	; 0x80
 800b196:	035b      	lsls	r3, r3, #13
 800b198:	4013      	ands	r3, r2
 800b19a:	d010      	beq.n	800b1be <HAL_UART_IRQHandler+0x552>
 800b19c:	239c      	movs	r3, #156	; 0x9c
 800b19e:	18fb      	adds	r3, r7, r3
 800b1a0:	681a      	ldr	r2, [r3, #0]
 800b1a2:	2380      	movs	r3, #128	; 0x80
 800b1a4:	03db      	lsls	r3, r3, #15
 800b1a6:	4013      	ands	r3, r2
 800b1a8:	d009      	beq.n	800b1be <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	2280      	movs	r2, #128	; 0x80
 800b1b0:	0352      	lsls	r2, r2, #13
 800b1b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	0018      	movs	r0, r3
 800b1b8:	f000 ff82 	bl	800c0c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b1bc:	e02f      	b.n	800b21e <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b1be:	23a4      	movs	r3, #164	; 0xa4
 800b1c0:	18fb      	adds	r3, r7, r3
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	2280      	movs	r2, #128	; 0x80
 800b1c6:	4013      	ands	r3, r2
 800b1c8:	d00f      	beq.n	800b1ea <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b1ca:	23a0      	movs	r3, #160	; 0xa0
 800b1cc:	18fb      	adds	r3, r7, r3
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2280      	movs	r2, #128	; 0x80
 800b1d2:	4013      	ands	r3, r2
 800b1d4:	d009      	beq.n	800b1ea <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d01e      	beq.n	800b21c <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	0010      	movs	r0, r2
 800b1e6:	4798      	blx	r3
    }
    return;
 800b1e8:	e018      	b.n	800b21c <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b1ea:	23a4      	movs	r3, #164	; 0xa4
 800b1ec:	18fb      	adds	r3, r7, r3
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	2240      	movs	r2, #64	; 0x40
 800b1f2:	4013      	ands	r3, r2
 800b1f4:	d013      	beq.n	800b21e <HAL_UART_IRQHandler+0x5b2>
 800b1f6:	23a0      	movs	r3, #160	; 0xa0
 800b1f8:	18fb      	adds	r3, r7, r3
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	2240      	movs	r2, #64	; 0x40
 800b1fe:	4013      	ands	r3, r2
 800b200:	d00d      	beq.n	800b21e <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	0018      	movs	r0, r3
 800b206:	f000 fd78 	bl	800bcfa <UART_EndTransmit_IT>
    return;
 800b20a:	e008      	b.n	800b21e <HAL_UART_IRQHandler+0x5b2>
      return;
 800b20c:	46c0      	nop			; (mov r8, r8)
 800b20e:	e006      	b.n	800b21e <HAL_UART_IRQHandler+0x5b2>
    return;
 800b210:	46c0      	nop			; (mov r8, r8)
 800b212:	e004      	b.n	800b21e <HAL_UART_IRQHandler+0x5b2>
      return;
 800b214:	46c0      	nop			; (mov r8, r8)
 800b216:	e002      	b.n	800b21e <HAL_UART_IRQHandler+0x5b2>
      return;
 800b218:	46c0      	nop			; (mov r8, r8)
 800b21a:	e000      	b.n	800b21e <HAL_UART_IRQHandler+0x5b2>
    return;
 800b21c:	46c0      	nop			; (mov r8, r8)
  }

}
 800b21e:	46bd      	mov	sp, r7
 800b220:	b02b      	add	sp, #172	; 0xac
 800b222:	bd90      	pop	{r4, r7, pc}
 800b224:	fffffeff 	.word	0xfffffeff
 800b228:	fffffedf 	.word	0xfffffedf

0800b22c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b082      	sub	sp, #8
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b234:	46c0      	nop			; (mov r8, r8)
 800b236:	46bd      	mov	sp, r7
 800b238:	b002      	add	sp, #8
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b244:	46c0      	nop			; (mov r8, r8)
 800b246:	46bd      	mov	sp, r7
 800b248:	b002      	add	sp, #8
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	000a      	movs	r2, r1
 800b256:	1cbb      	adds	r3, r7, #2
 800b258:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b25a:	46c0      	nop			; (mov r8, r8)
 800b25c:	46bd      	mov	sp, r7
 800b25e:	b002      	add	sp, #8
 800b260:	bd80      	pop	{r7, pc}
	...

0800b264 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b088      	sub	sp, #32
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b26c:	231e      	movs	r3, #30
 800b26e:	18fb      	adds	r3, r7, r3
 800b270:	2200      	movs	r2, #0
 800b272:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	689a      	ldr	r2, [r3, #8]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	691b      	ldr	r3, [r3, #16]
 800b27c:	431a      	orrs	r2, r3
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	695b      	ldr	r3, [r3, #20]
 800b282:	431a      	orrs	r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	69db      	ldr	r3, [r3, #28]
 800b288:	4313      	orrs	r3, r2
 800b28a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4aaf      	ldr	r2, [pc, #700]	; (800b550 <UART_SetConfig+0x2ec>)
 800b294:	4013      	ands	r3, r2
 800b296:	0019      	movs	r1, r3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	697a      	ldr	r2, [r7, #20]
 800b29e:	430a      	orrs	r2, r1
 800b2a0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	4aaa      	ldr	r2, [pc, #680]	; (800b554 <UART_SetConfig+0x2f0>)
 800b2aa:	4013      	ands	r3, r2
 800b2ac:	0019      	movs	r1, r3
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	68da      	ldr	r2, [r3, #12]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	430a      	orrs	r2, r1
 800b2b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	699b      	ldr	r3, [r3, #24]
 800b2be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6a1b      	ldr	r3, [r3, #32]
 800b2c4:	697a      	ldr	r2, [r7, #20]
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	4aa1      	ldr	r2, [pc, #644]	; (800b558 <UART_SetConfig+0x2f4>)
 800b2d2:	4013      	ands	r3, r2
 800b2d4:	0019      	movs	r1, r3
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	697a      	ldr	r2, [r7, #20]
 800b2dc:	430a      	orrs	r2, r1
 800b2de:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4a9d      	ldr	r2, [pc, #628]	; (800b55c <UART_SetConfig+0x2f8>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d127      	bne.n	800b33a <UART_SetConfig+0xd6>
 800b2ea:	4b9d      	ldr	r3, [pc, #628]	; (800b560 <UART_SetConfig+0x2fc>)
 800b2ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ee:	2203      	movs	r2, #3
 800b2f0:	4013      	ands	r3, r2
 800b2f2:	2b03      	cmp	r3, #3
 800b2f4:	d00d      	beq.n	800b312 <UART_SetConfig+0xae>
 800b2f6:	d81b      	bhi.n	800b330 <UART_SetConfig+0xcc>
 800b2f8:	2b02      	cmp	r3, #2
 800b2fa:	d014      	beq.n	800b326 <UART_SetConfig+0xc2>
 800b2fc:	d818      	bhi.n	800b330 <UART_SetConfig+0xcc>
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d002      	beq.n	800b308 <UART_SetConfig+0xa4>
 800b302:	2b01      	cmp	r3, #1
 800b304:	d00a      	beq.n	800b31c <UART_SetConfig+0xb8>
 800b306:	e013      	b.n	800b330 <UART_SetConfig+0xcc>
 800b308:	231f      	movs	r3, #31
 800b30a:	18fb      	adds	r3, r7, r3
 800b30c:	2200      	movs	r2, #0
 800b30e:	701a      	strb	r2, [r3, #0]
 800b310:	e065      	b.n	800b3de <UART_SetConfig+0x17a>
 800b312:	231f      	movs	r3, #31
 800b314:	18fb      	adds	r3, r7, r3
 800b316:	2202      	movs	r2, #2
 800b318:	701a      	strb	r2, [r3, #0]
 800b31a:	e060      	b.n	800b3de <UART_SetConfig+0x17a>
 800b31c:	231f      	movs	r3, #31
 800b31e:	18fb      	adds	r3, r7, r3
 800b320:	2204      	movs	r2, #4
 800b322:	701a      	strb	r2, [r3, #0]
 800b324:	e05b      	b.n	800b3de <UART_SetConfig+0x17a>
 800b326:	231f      	movs	r3, #31
 800b328:	18fb      	adds	r3, r7, r3
 800b32a:	2208      	movs	r2, #8
 800b32c:	701a      	strb	r2, [r3, #0]
 800b32e:	e056      	b.n	800b3de <UART_SetConfig+0x17a>
 800b330:	231f      	movs	r3, #31
 800b332:	18fb      	adds	r3, r7, r3
 800b334:	2210      	movs	r2, #16
 800b336:	701a      	strb	r2, [r3, #0]
 800b338:	e051      	b.n	800b3de <UART_SetConfig+0x17a>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	4a89      	ldr	r2, [pc, #548]	; (800b564 <UART_SetConfig+0x300>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d134      	bne.n	800b3ae <UART_SetConfig+0x14a>
 800b344:	4b86      	ldr	r3, [pc, #536]	; (800b560 <UART_SetConfig+0x2fc>)
 800b346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b348:	23c0      	movs	r3, #192	; 0xc0
 800b34a:	029b      	lsls	r3, r3, #10
 800b34c:	4013      	ands	r3, r2
 800b34e:	22c0      	movs	r2, #192	; 0xc0
 800b350:	0292      	lsls	r2, r2, #10
 800b352:	4293      	cmp	r3, r2
 800b354:	d017      	beq.n	800b386 <UART_SetConfig+0x122>
 800b356:	22c0      	movs	r2, #192	; 0xc0
 800b358:	0292      	lsls	r2, r2, #10
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d822      	bhi.n	800b3a4 <UART_SetConfig+0x140>
 800b35e:	2280      	movs	r2, #128	; 0x80
 800b360:	0292      	lsls	r2, r2, #10
 800b362:	4293      	cmp	r3, r2
 800b364:	d019      	beq.n	800b39a <UART_SetConfig+0x136>
 800b366:	2280      	movs	r2, #128	; 0x80
 800b368:	0292      	lsls	r2, r2, #10
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d81a      	bhi.n	800b3a4 <UART_SetConfig+0x140>
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d004      	beq.n	800b37c <UART_SetConfig+0x118>
 800b372:	2280      	movs	r2, #128	; 0x80
 800b374:	0252      	lsls	r2, r2, #9
 800b376:	4293      	cmp	r3, r2
 800b378:	d00a      	beq.n	800b390 <UART_SetConfig+0x12c>
 800b37a:	e013      	b.n	800b3a4 <UART_SetConfig+0x140>
 800b37c:	231f      	movs	r3, #31
 800b37e:	18fb      	adds	r3, r7, r3
 800b380:	2200      	movs	r2, #0
 800b382:	701a      	strb	r2, [r3, #0]
 800b384:	e02b      	b.n	800b3de <UART_SetConfig+0x17a>
 800b386:	231f      	movs	r3, #31
 800b388:	18fb      	adds	r3, r7, r3
 800b38a:	2202      	movs	r2, #2
 800b38c:	701a      	strb	r2, [r3, #0]
 800b38e:	e026      	b.n	800b3de <UART_SetConfig+0x17a>
 800b390:	231f      	movs	r3, #31
 800b392:	18fb      	adds	r3, r7, r3
 800b394:	2204      	movs	r2, #4
 800b396:	701a      	strb	r2, [r3, #0]
 800b398:	e021      	b.n	800b3de <UART_SetConfig+0x17a>
 800b39a:	231f      	movs	r3, #31
 800b39c:	18fb      	adds	r3, r7, r3
 800b39e:	2208      	movs	r2, #8
 800b3a0:	701a      	strb	r2, [r3, #0]
 800b3a2:	e01c      	b.n	800b3de <UART_SetConfig+0x17a>
 800b3a4:	231f      	movs	r3, #31
 800b3a6:	18fb      	adds	r3, r7, r3
 800b3a8:	2210      	movs	r2, #16
 800b3aa:	701a      	strb	r2, [r3, #0]
 800b3ac:	e017      	b.n	800b3de <UART_SetConfig+0x17a>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4a6d      	ldr	r2, [pc, #436]	; (800b568 <UART_SetConfig+0x304>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d104      	bne.n	800b3c2 <UART_SetConfig+0x15e>
 800b3b8:	231f      	movs	r3, #31
 800b3ba:	18fb      	adds	r3, r7, r3
 800b3bc:	2200      	movs	r2, #0
 800b3be:	701a      	strb	r2, [r3, #0]
 800b3c0:	e00d      	b.n	800b3de <UART_SetConfig+0x17a>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4a69      	ldr	r2, [pc, #420]	; (800b56c <UART_SetConfig+0x308>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d104      	bne.n	800b3d6 <UART_SetConfig+0x172>
 800b3cc:	231f      	movs	r3, #31
 800b3ce:	18fb      	adds	r3, r7, r3
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	701a      	strb	r2, [r3, #0]
 800b3d4:	e003      	b.n	800b3de <UART_SetConfig+0x17a>
 800b3d6:	231f      	movs	r3, #31
 800b3d8:	18fb      	adds	r3, r7, r3
 800b3da:	2210      	movs	r2, #16
 800b3dc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	69da      	ldr	r2, [r3, #28]
 800b3e2:	2380      	movs	r3, #128	; 0x80
 800b3e4:	021b      	lsls	r3, r3, #8
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d15c      	bne.n	800b4a4 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 800b3ea:	231f      	movs	r3, #31
 800b3ec:	18fb      	adds	r3, r7, r3
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	2b08      	cmp	r3, #8
 800b3f2:	d015      	beq.n	800b420 <UART_SetConfig+0x1bc>
 800b3f4:	dc18      	bgt.n	800b428 <UART_SetConfig+0x1c4>
 800b3f6:	2b04      	cmp	r3, #4
 800b3f8:	d00d      	beq.n	800b416 <UART_SetConfig+0x1b2>
 800b3fa:	dc15      	bgt.n	800b428 <UART_SetConfig+0x1c4>
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d002      	beq.n	800b406 <UART_SetConfig+0x1a2>
 800b400:	2b02      	cmp	r3, #2
 800b402:	d005      	beq.n	800b410 <UART_SetConfig+0x1ac>
 800b404:	e010      	b.n	800b428 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b406:	f7fd fe49 	bl	800909c <HAL_RCC_GetPCLK1Freq>
 800b40a:	0003      	movs	r3, r0
 800b40c:	61bb      	str	r3, [r7, #24]
        break;
 800b40e:	e012      	b.n	800b436 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b410:	4b57      	ldr	r3, [pc, #348]	; (800b570 <UART_SetConfig+0x30c>)
 800b412:	61bb      	str	r3, [r7, #24]
        break;
 800b414:	e00f      	b.n	800b436 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b416:	f7fd fdc5 	bl	8008fa4 <HAL_RCC_GetSysClockFreq>
 800b41a:	0003      	movs	r3, r0
 800b41c:	61bb      	str	r3, [r7, #24]
        break;
 800b41e:	e00a      	b.n	800b436 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b420:	2380      	movs	r3, #128	; 0x80
 800b422:	021b      	lsls	r3, r3, #8
 800b424:	61bb      	str	r3, [r7, #24]
        break;
 800b426:	e006      	b.n	800b436 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800b428:	2300      	movs	r3, #0
 800b42a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b42c:	231e      	movs	r3, #30
 800b42e:	18fb      	adds	r3, r7, r3
 800b430:	2201      	movs	r2, #1
 800b432:	701a      	strb	r2, [r3, #0]
        break;
 800b434:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b436:	69bb      	ldr	r3, [r7, #24]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d100      	bne.n	800b43e <UART_SetConfig+0x1da>
 800b43c:	e07a      	b.n	800b534 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b43e:	69bb      	ldr	r3, [r7, #24]
 800b440:	005a      	lsls	r2, r3, #1
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	085b      	lsrs	r3, r3, #1
 800b448:	18d2      	adds	r2, r2, r3
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	0019      	movs	r1, r3
 800b450:	0010      	movs	r0, r2
 800b452:	f7f4 fe75 	bl	8000140 <__udivsi3>
 800b456:	0003      	movs	r3, r0
 800b458:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	2b0f      	cmp	r3, #15
 800b45e:	d91c      	bls.n	800b49a <UART_SetConfig+0x236>
 800b460:	693a      	ldr	r2, [r7, #16]
 800b462:	2380      	movs	r3, #128	; 0x80
 800b464:	025b      	lsls	r3, r3, #9
 800b466:	429a      	cmp	r2, r3
 800b468:	d217      	bcs.n	800b49a <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	b29a      	uxth	r2, r3
 800b46e:	200e      	movs	r0, #14
 800b470:	183b      	adds	r3, r7, r0
 800b472:	210f      	movs	r1, #15
 800b474:	438a      	bics	r2, r1
 800b476:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	085b      	lsrs	r3, r3, #1
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	2207      	movs	r2, #7
 800b480:	4013      	ands	r3, r2
 800b482:	b299      	uxth	r1, r3
 800b484:	183b      	adds	r3, r7, r0
 800b486:	183a      	adds	r2, r7, r0
 800b488:	8812      	ldrh	r2, [r2, #0]
 800b48a:	430a      	orrs	r2, r1
 800b48c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	183a      	adds	r2, r7, r0
 800b494:	8812      	ldrh	r2, [r2, #0]
 800b496:	60da      	str	r2, [r3, #12]
 800b498:	e04c      	b.n	800b534 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800b49a:	231e      	movs	r3, #30
 800b49c:	18fb      	adds	r3, r7, r3
 800b49e:	2201      	movs	r2, #1
 800b4a0:	701a      	strb	r2, [r3, #0]
 800b4a2:	e047      	b.n	800b534 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b4a4:	231f      	movs	r3, #31
 800b4a6:	18fb      	adds	r3, r7, r3
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	2b08      	cmp	r3, #8
 800b4ac:	d015      	beq.n	800b4da <UART_SetConfig+0x276>
 800b4ae:	dc18      	bgt.n	800b4e2 <UART_SetConfig+0x27e>
 800b4b0:	2b04      	cmp	r3, #4
 800b4b2:	d00d      	beq.n	800b4d0 <UART_SetConfig+0x26c>
 800b4b4:	dc15      	bgt.n	800b4e2 <UART_SetConfig+0x27e>
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d002      	beq.n	800b4c0 <UART_SetConfig+0x25c>
 800b4ba:	2b02      	cmp	r3, #2
 800b4bc:	d005      	beq.n	800b4ca <UART_SetConfig+0x266>
 800b4be:	e010      	b.n	800b4e2 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b4c0:	f7fd fdec 	bl	800909c <HAL_RCC_GetPCLK1Freq>
 800b4c4:	0003      	movs	r3, r0
 800b4c6:	61bb      	str	r3, [r7, #24]
        break;
 800b4c8:	e012      	b.n	800b4f0 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b4ca:	4b29      	ldr	r3, [pc, #164]	; (800b570 <UART_SetConfig+0x30c>)
 800b4cc:	61bb      	str	r3, [r7, #24]
        break;
 800b4ce:	e00f      	b.n	800b4f0 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b4d0:	f7fd fd68 	bl	8008fa4 <HAL_RCC_GetSysClockFreq>
 800b4d4:	0003      	movs	r3, r0
 800b4d6:	61bb      	str	r3, [r7, #24]
        break;
 800b4d8:	e00a      	b.n	800b4f0 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4da:	2380      	movs	r3, #128	; 0x80
 800b4dc:	021b      	lsls	r3, r3, #8
 800b4de:	61bb      	str	r3, [r7, #24]
        break;
 800b4e0:	e006      	b.n	800b4f0 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b4e6:	231e      	movs	r3, #30
 800b4e8:	18fb      	adds	r3, r7, r3
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	701a      	strb	r2, [r3, #0]
        break;
 800b4ee:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800b4f0:	69bb      	ldr	r3, [r7, #24]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d01e      	beq.n	800b534 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	085a      	lsrs	r2, r3, #1
 800b4fc:	69bb      	ldr	r3, [r7, #24]
 800b4fe:	18d2      	adds	r2, r2, r3
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	0019      	movs	r1, r3
 800b506:	0010      	movs	r0, r2
 800b508:	f7f4 fe1a 	bl	8000140 <__udivsi3>
 800b50c:	0003      	movs	r3, r0
 800b50e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	2b0f      	cmp	r3, #15
 800b514:	d90a      	bls.n	800b52c <UART_SetConfig+0x2c8>
 800b516:	693a      	ldr	r2, [r7, #16]
 800b518:	2380      	movs	r3, #128	; 0x80
 800b51a:	025b      	lsls	r3, r3, #9
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d205      	bcs.n	800b52c <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	b29a      	uxth	r2, r3
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	60da      	str	r2, [r3, #12]
 800b52a:	e003      	b.n	800b534 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800b52c:	231e      	movs	r3, #30
 800b52e:	18fb      	adds	r3, r7, r3
 800b530:	2201      	movs	r2, #1
 800b532:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2200      	movs	r2, #0
 800b538:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2200      	movs	r2, #0
 800b53e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800b540:	231e      	movs	r3, #30
 800b542:	18fb      	adds	r3, r7, r3
 800b544:	781b      	ldrb	r3, [r3, #0]
}
 800b546:	0018      	movs	r0, r3
 800b548:	46bd      	mov	sp, r7
 800b54a:	b008      	add	sp, #32
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	46c0      	nop			; (mov r8, r8)
 800b550:	efff69f3 	.word	0xefff69f3
 800b554:	ffffcfff 	.word	0xffffcfff
 800b558:	fffff4ff 	.word	0xfffff4ff
 800b55c:	40013800 	.word	0x40013800
 800b560:	40021000 	.word	0x40021000
 800b564:	40004400 	.word	0x40004400
 800b568:	40004800 	.word	0x40004800
 800b56c:	40004c00 	.word	0x40004c00
 800b570:	007a1200 	.word	0x007a1200

0800b574 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b580:	2201      	movs	r2, #1
 800b582:	4013      	ands	r3, r2
 800b584:	d00b      	beq.n	800b59e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	4a4a      	ldr	r2, [pc, #296]	; (800b6b8 <UART_AdvFeatureConfig+0x144>)
 800b58e:	4013      	ands	r3, r2
 800b590:	0019      	movs	r1, r3
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	430a      	orrs	r2, r1
 800b59c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a2:	2202      	movs	r2, #2
 800b5a4:	4013      	ands	r3, r2
 800b5a6:	d00b      	beq.n	800b5c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	4a43      	ldr	r2, [pc, #268]	; (800b6bc <UART_AdvFeatureConfig+0x148>)
 800b5b0:	4013      	ands	r3, r2
 800b5b2:	0019      	movs	r1, r3
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	430a      	orrs	r2, r1
 800b5be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c4:	2204      	movs	r2, #4
 800b5c6:	4013      	ands	r3, r2
 800b5c8:	d00b      	beq.n	800b5e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	4a3b      	ldr	r2, [pc, #236]	; (800b6c0 <UART_AdvFeatureConfig+0x14c>)
 800b5d2:	4013      	ands	r3, r2
 800b5d4:	0019      	movs	r1, r3
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	430a      	orrs	r2, r1
 800b5e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e6:	2208      	movs	r2, #8
 800b5e8:	4013      	ands	r3, r2
 800b5ea:	d00b      	beq.n	800b604 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	4a34      	ldr	r2, [pc, #208]	; (800b6c4 <UART_AdvFeatureConfig+0x150>)
 800b5f4:	4013      	ands	r3, r2
 800b5f6:	0019      	movs	r1, r3
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	430a      	orrs	r2, r1
 800b602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b608:	2210      	movs	r2, #16
 800b60a:	4013      	ands	r3, r2
 800b60c:	d00b      	beq.n	800b626 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	689b      	ldr	r3, [r3, #8]
 800b614:	4a2c      	ldr	r2, [pc, #176]	; (800b6c8 <UART_AdvFeatureConfig+0x154>)
 800b616:	4013      	ands	r3, r2
 800b618:	0019      	movs	r1, r3
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	430a      	orrs	r2, r1
 800b624:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b62a:	2220      	movs	r2, #32
 800b62c:	4013      	ands	r3, r2
 800b62e:	d00b      	beq.n	800b648 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	4a25      	ldr	r2, [pc, #148]	; (800b6cc <UART_AdvFeatureConfig+0x158>)
 800b638:	4013      	ands	r3, r2
 800b63a:	0019      	movs	r1, r3
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	430a      	orrs	r2, r1
 800b646:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b64c:	2240      	movs	r2, #64	; 0x40
 800b64e:	4013      	ands	r3, r2
 800b650:	d01d      	beq.n	800b68e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	4a1d      	ldr	r2, [pc, #116]	; (800b6d0 <UART_AdvFeatureConfig+0x15c>)
 800b65a:	4013      	ands	r3, r2
 800b65c:	0019      	movs	r1, r3
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	430a      	orrs	r2, r1
 800b668:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b66e:	2380      	movs	r3, #128	; 0x80
 800b670:	035b      	lsls	r3, r3, #13
 800b672:	429a      	cmp	r2, r3
 800b674:	d10b      	bne.n	800b68e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	4a15      	ldr	r2, [pc, #84]	; (800b6d4 <UART_AdvFeatureConfig+0x160>)
 800b67e:	4013      	ands	r3, r2
 800b680:	0019      	movs	r1, r3
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	430a      	orrs	r2, r1
 800b68c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b692:	2280      	movs	r2, #128	; 0x80
 800b694:	4013      	ands	r3, r2
 800b696:	d00b      	beq.n	800b6b0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	4a0e      	ldr	r2, [pc, #56]	; (800b6d8 <UART_AdvFeatureConfig+0x164>)
 800b6a0:	4013      	ands	r3, r2
 800b6a2:	0019      	movs	r1, r3
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	430a      	orrs	r2, r1
 800b6ae:	605a      	str	r2, [r3, #4]
  }
}
 800b6b0:	46c0      	nop			; (mov r8, r8)
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	b002      	add	sp, #8
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	fffdffff 	.word	0xfffdffff
 800b6bc:	fffeffff 	.word	0xfffeffff
 800b6c0:	fffbffff 	.word	0xfffbffff
 800b6c4:	ffff7fff 	.word	0xffff7fff
 800b6c8:	ffffefff 	.word	0xffffefff
 800b6cc:	ffffdfff 	.word	0xffffdfff
 800b6d0:	ffefffff 	.word	0xffefffff
 800b6d4:	ff9fffff 	.word	0xff9fffff
 800b6d8:	fff7ffff 	.word	0xfff7ffff

0800b6dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b092      	sub	sp, #72	; 0x48
 800b6e0:	af02      	add	r7, sp, #8
 800b6e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2284      	movs	r2, #132	; 0x84
 800b6e8:	2100      	movs	r1, #0
 800b6ea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b6ec:	f7fa fd94 	bl	8006218 <HAL_GetTick>
 800b6f0:	0003      	movs	r3, r0
 800b6f2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	2208      	movs	r2, #8
 800b6fc:	4013      	ands	r3, r2
 800b6fe:	2b08      	cmp	r3, #8
 800b700:	d12c      	bne.n	800b75c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b704:	2280      	movs	r2, #128	; 0x80
 800b706:	0391      	lsls	r1, r2, #14
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	4a46      	ldr	r2, [pc, #280]	; (800b824 <UART_CheckIdleState+0x148>)
 800b70c:	9200      	str	r2, [sp, #0]
 800b70e:	2200      	movs	r2, #0
 800b710:	f000 f88c 	bl	800b82c <UART_WaitOnFlagUntilTimeout>
 800b714:	1e03      	subs	r3, r0, #0
 800b716:	d021      	beq.n	800b75c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b718:	f3ef 8310 	mrs	r3, PRIMASK
 800b71c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800b71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b720:	63bb      	str	r3, [r7, #56]	; 0x38
 800b722:	2301      	movs	r3, #1
 800b724:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b728:	f383 8810 	msr	PRIMASK, r3
}
 800b72c:	46c0      	nop			; (mov r8, r8)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	681a      	ldr	r2, [r3, #0]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2180      	movs	r1, #128	; 0x80
 800b73a:	438a      	bics	r2, r1
 800b73c:	601a      	str	r2, [r3, #0]
 800b73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b740:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b744:	f383 8810 	msr	PRIMASK, r3
}
 800b748:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2220      	movs	r2, #32
 800b74e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2278      	movs	r2, #120	; 0x78
 800b754:	2100      	movs	r1, #0
 800b756:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b758:	2303      	movs	r3, #3
 800b75a:	e05f      	b.n	800b81c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	2204      	movs	r2, #4
 800b764:	4013      	ands	r3, r2
 800b766:	2b04      	cmp	r3, #4
 800b768:	d146      	bne.n	800b7f8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b76a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b76c:	2280      	movs	r2, #128	; 0x80
 800b76e:	03d1      	lsls	r1, r2, #15
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	4a2c      	ldr	r2, [pc, #176]	; (800b824 <UART_CheckIdleState+0x148>)
 800b774:	9200      	str	r2, [sp, #0]
 800b776:	2200      	movs	r2, #0
 800b778:	f000 f858 	bl	800b82c <UART_WaitOnFlagUntilTimeout>
 800b77c:	1e03      	subs	r3, r0, #0
 800b77e:	d03b      	beq.n	800b7f8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b780:	f3ef 8310 	mrs	r3, PRIMASK
 800b784:	60fb      	str	r3, [r7, #12]
  return(result);
 800b786:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b788:	637b      	str	r3, [r7, #52]	; 0x34
 800b78a:	2301      	movs	r3, #1
 800b78c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	f383 8810 	msr	PRIMASK, r3
}
 800b794:	46c0      	nop			; (mov r8, r8)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	681a      	ldr	r2, [r3, #0]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4921      	ldr	r1, [pc, #132]	; (800b828 <UART_CheckIdleState+0x14c>)
 800b7a2:	400a      	ands	r2, r1
 800b7a4:	601a      	str	r2, [r3, #0]
 800b7a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	f383 8810 	msr	PRIMASK, r3
}
 800b7b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7b2:	f3ef 8310 	mrs	r3, PRIMASK
 800b7b6:	61bb      	str	r3, [r7, #24]
  return(result);
 800b7b8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7ba:	633b      	str	r3, [r7, #48]	; 0x30
 800b7bc:	2301      	movs	r3, #1
 800b7be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7c0:	69fb      	ldr	r3, [r7, #28]
 800b7c2:	f383 8810 	msr	PRIMASK, r3
}
 800b7c6:	46c0      	nop			; (mov r8, r8)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	689a      	ldr	r2, [r3, #8]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	2101      	movs	r1, #1
 800b7d4:	438a      	bics	r2, r1
 800b7d6:	609a      	str	r2, [r3, #8]
 800b7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7dc:	6a3b      	ldr	r3, [r7, #32]
 800b7de:	f383 8810 	msr	PRIMASK, r3
}
 800b7e2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2280      	movs	r2, #128	; 0x80
 800b7e8:	2120      	movs	r1, #32
 800b7ea:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2278      	movs	r2, #120	; 0x78
 800b7f0:	2100      	movs	r1, #0
 800b7f2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b7f4:	2303      	movs	r3, #3
 800b7f6:	e011      	b.n	800b81c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2220      	movs	r2, #32
 800b7fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2280      	movs	r2, #128	; 0x80
 800b802:	2120      	movs	r1, #32
 800b804:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2200      	movs	r2, #0
 800b80a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2200      	movs	r2, #0
 800b810:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2278      	movs	r2, #120	; 0x78
 800b816:	2100      	movs	r1, #0
 800b818:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b81a:	2300      	movs	r3, #0
}
 800b81c:	0018      	movs	r0, r3
 800b81e:	46bd      	mov	sp, r7
 800b820:	b010      	add	sp, #64	; 0x40
 800b822:	bd80      	pop	{r7, pc}
 800b824:	01ffffff 	.word	0x01ffffff
 800b828:	fffffedf 	.word	0xfffffedf

0800b82c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	60b9      	str	r1, [r7, #8]
 800b836:	603b      	str	r3, [r7, #0]
 800b838:	1dfb      	adds	r3, r7, #7
 800b83a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b83c:	e04b      	b.n	800b8d6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b83e:	69bb      	ldr	r3, [r7, #24]
 800b840:	3301      	adds	r3, #1
 800b842:	d048      	beq.n	800b8d6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b844:	f7fa fce8 	bl	8006218 <HAL_GetTick>
 800b848:	0002      	movs	r2, r0
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	1ad3      	subs	r3, r2, r3
 800b84e:	69ba      	ldr	r2, [r7, #24]
 800b850:	429a      	cmp	r2, r3
 800b852:	d302      	bcc.n	800b85a <UART_WaitOnFlagUntilTimeout+0x2e>
 800b854:	69bb      	ldr	r3, [r7, #24]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d101      	bne.n	800b85e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800b85a:	2303      	movs	r3, #3
 800b85c:	e04b      	b.n	800b8f6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	2204      	movs	r2, #4
 800b866:	4013      	ands	r3, r2
 800b868:	d035      	beq.n	800b8d6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	69db      	ldr	r3, [r3, #28]
 800b870:	2208      	movs	r2, #8
 800b872:	4013      	ands	r3, r2
 800b874:	2b08      	cmp	r3, #8
 800b876:	d111      	bne.n	800b89c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	2208      	movs	r2, #8
 800b87e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	0018      	movs	r0, r3
 800b884:	f000 f906 	bl	800ba94 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2284      	movs	r2, #132	; 0x84
 800b88c:	2108      	movs	r1, #8
 800b88e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2278      	movs	r2, #120	; 0x78
 800b894:	2100      	movs	r1, #0
 800b896:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800b898:	2301      	movs	r3, #1
 800b89a:	e02c      	b.n	800b8f6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	69da      	ldr	r2, [r3, #28]
 800b8a2:	2380      	movs	r3, #128	; 0x80
 800b8a4:	011b      	lsls	r3, r3, #4
 800b8a6:	401a      	ands	r2, r3
 800b8a8:	2380      	movs	r3, #128	; 0x80
 800b8aa:	011b      	lsls	r3, r3, #4
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d112      	bne.n	800b8d6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	2280      	movs	r2, #128	; 0x80
 800b8b6:	0112      	lsls	r2, r2, #4
 800b8b8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	0018      	movs	r0, r3
 800b8be:	f000 f8e9 	bl	800ba94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2284      	movs	r2, #132	; 0x84
 800b8c6:	2120      	movs	r1, #32
 800b8c8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2278      	movs	r2, #120	; 0x78
 800b8ce:	2100      	movs	r1, #0
 800b8d0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800b8d2:	2303      	movs	r3, #3
 800b8d4:	e00f      	b.n	800b8f6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	69db      	ldr	r3, [r3, #28]
 800b8dc:	68ba      	ldr	r2, [r7, #8]
 800b8de:	4013      	ands	r3, r2
 800b8e0:	68ba      	ldr	r2, [r7, #8]
 800b8e2:	1ad3      	subs	r3, r2, r3
 800b8e4:	425a      	negs	r2, r3
 800b8e6:	4153      	adcs	r3, r2
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	001a      	movs	r2, r3
 800b8ec:	1dfb      	adds	r3, r7, #7
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d0a4      	beq.n	800b83e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b8f4:	2300      	movs	r3, #0
}
 800b8f6:	0018      	movs	r0, r3
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	b004      	add	sp, #16
 800b8fc:	bd80      	pop	{r7, pc}
	...

0800b900 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b090      	sub	sp, #64	; 0x40
 800b904:	af00      	add	r7, sp, #0
 800b906:	60f8      	str	r0, [r7, #12]
 800b908:	60b9      	str	r1, [r7, #8]
 800b90a:	1dbb      	adds	r3, r7, #6
 800b90c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	68ba      	ldr	r2, [r7, #8]
 800b912:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	1dba      	adds	r2, r7, #6
 800b918:	2158      	movs	r1, #88	; 0x58
 800b91a:	8812      	ldrh	r2, [r2, #0]
 800b91c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	1dba      	adds	r2, r7, #6
 800b922:	215a      	movs	r1, #90	; 0x5a
 800b924:	8812      	ldrh	r2, [r2, #0]
 800b926:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	2200      	movs	r2, #0
 800b92c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	689a      	ldr	r2, [r3, #8]
 800b932:	2380      	movs	r3, #128	; 0x80
 800b934:	015b      	lsls	r3, r3, #5
 800b936:	429a      	cmp	r2, r3
 800b938:	d10d      	bne.n	800b956 <UART_Start_Receive_IT+0x56>
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	691b      	ldr	r3, [r3, #16]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d104      	bne.n	800b94c <UART_Start_Receive_IT+0x4c>
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	225c      	movs	r2, #92	; 0x5c
 800b946:	4950      	ldr	r1, [pc, #320]	; (800ba88 <UART_Start_Receive_IT+0x188>)
 800b948:	5299      	strh	r1, [r3, r2]
 800b94a:	e02e      	b.n	800b9aa <UART_Start_Receive_IT+0xaa>
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	225c      	movs	r2, #92	; 0x5c
 800b950:	21ff      	movs	r1, #255	; 0xff
 800b952:	5299      	strh	r1, [r3, r2]
 800b954:	e029      	b.n	800b9aa <UART_Start_Receive_IT+0xaa>
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	689b      	ldr	r3, [r3, #8]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d10d      	bne.n	800b97a <UART_Start_Receive_IT+0x7a>
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	691b      	ldr	r3, [r3, #16]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d104      	bne.n	800b970 <UART_Start_Receive_IT+0x70>
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	225c      	movs	r2, #92	; 0x5c
 800b96a:	21ff      	movs	r1, #255	; 0xff
 800b96c:	5299      	strh	r1, [r3, r2]
 800b96e:	e01c      	b.n	800b9aa <UART_Start_Receive_IT+0xaa>
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	225c      	movs	r2, #92	; 0x5c
 800b974:	217f      	movs	r1, #127	; 0x7f
 800b976:	5299      	strh	r1, [r3, r2]
 800b978:	e017      	b.n	800b9aa <UART_Start_Receive_IT+0xaa>
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	689a      	ldr	r2, [r3, #8]
 800b97e:	2380      	movs	r3, #128	; 0x80
 800b980:	055b      	lsls	r3, r3, #21
 800b982:	429a      	cmp	r2, r3
 800b984:	d10d      	bne.n	800b9a2 <UART_Start_Receive_IT+0xa2>
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	691b      	ldr	r3, [r3, #16]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d104      	bne.n	800b998 <UART_Start_Receive_IT+0x98>
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	225c      	movs	r2, #92	; 0x5c
 800b992:	217f      	movs	r1, #127	; 0x7f
 800b994:	5299      	strh	r1, [r3, r2]
 800b996:	e008      	b.n	800b9aa <UART_Start_Receive_IT+0xaa>
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	225c      	movs	r2, #92	; 0x5c
 800b99c:	213f      	movs	r1, #63	; 0x3f
 800b99e:	5299      	strh	r1, [r3, r2]
 800b9a0:	e003      	b.n	800b9aa <UART_Start_Receive_IT+0xaa>
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	225c      	movs	r2, #92	; 0x5c
 800b9a6:	2100      	movs	r1, #0
 800b9a8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2284      	movs	r2, #132	; 0x84
 800b9ae:	2100      	movs	r1, #0
 800b9b0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	2280      	movs	r2, #128	; 0x80
 800b9b6:	2122      	movs	r1, #34	; 0x22
 800b9b8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9ba:	f3ef 8310 	mrs	r3, PRIMASK
 800b9be:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800b9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ca:	f383 8810 	msr	PRIMASK, r3
}
 800b9ce:	46c0      	nop			; (mov r8, r8)
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	689a      	ldr	r2, [r3, #8]
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	2101      	movs	r1, #1
 800b9dc:	430a      	orrs	r2, r1
 800b9de:	609a      	str	r2, [r3, #8]
 800b9e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9e2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e6:	f383 8810 	msr	PRIMASK, r3
}
 800b9ea:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	689a      	ldr	r2, [r3, #8]
 800b9f0:	2380      	movs	r3, #128	; 0x80
 800b9f2:	015b      	lsls	r3, r3, #5
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d107      	bne.n	800ba08 <UART_Start_Receive_IT+0x108>
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	691b      	ldr	r3, [r3, #16]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d103      	bne.n	800ba08 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	4a22      	ldr	r2, [pc, #136]	; (800ba8c <UART_Start_Receive_IT+0x18c>)
 800ba04:	669a      	str	r2, [r3, #104]	; 0x68
 800ba06:	e002      	b.n	800ba0e <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	4a21      	ldr	r2, [pc, #132]	; (800ba90 <UART_Start_Receive_IT+0x190>)
 800ba0c:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	691b      	ldr	r3, [r3, #16]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d019      	beq.n	800ba4a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba16:	f3ef 8310 	mrs	r3, PRIMASK
 800ba1a:	61fb      	str	r3, [r7, #28]
  return(result);
 800ba1c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ba1e:	637b      	str	r3, [r7, #52]	; 0x34
 800ba20:	2301      	movs	r3, #1
 800ba22:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba24:	6a3b      	ldr	r3, [r7, #32]
 800ba26:	f383 8810 	msr	PRIMASK, r3
}
 800ba2a:	46c0      	nop			; (mov r8, r8)
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	681a      	ldr	r2, [r3, #0]
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2190      	movs	r1, #144	; 0x90
 800ba38:	0049      	lsls	r1, r1, #1
 800ba3a:	430a      	orrs	r2, r1
 800ba3c:	601a      	str	r2, [r3, #0]
 800ba3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba40:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba44:	f383 8810 	msr	PRIMASK, r3
}
 800ba48:	e018      	b.n	800ba7c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba4a:	f3ef 8310 	mrs	r3, PRIMASK
 800ba4e:	613b      	str	r3, [r7, #16]
  return(result);
 800ba50:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800ba52:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba54:	2301      	movs	r3, #1
 800ba56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	f383 8810 	msr	PRIMASK, r3
}
 800ba5e:	46c0      	nop			; (mov r8, r8)
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	681a      	ldr	r2, [r3, #0]
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	2120      	movs	r1, #32
 800ba6c:	430a      	orrs	r2, r1
 800ba6e:	601a      	str	r2, [r3, #0]
 800ba70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba72:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba74:	69bb      	ldr	r3, [r7, #24]
 800ba76:	f383 8810 	msr	PRIMASK, r3
}
 800ba7a:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 800ba7c:	2300      	movs	r3, #0
}
 800ba7e:	0018      	movs	r0, r3
 800ba80:	46bd      	mov	sp, r7
 800ba82:	b010      	add	sp, #64	; 0x40
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	46c0      	nop			; (mov r8, r8)
 800ba88:	000001ff 	.word	0x000001ff
 800ba8c:	0800bf09 	.word	0x0800bf09
 800ba90:	0800bd51 	.word	0x0800bd51

0800ba94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b08e      	sub	sp, #56	; 0x38
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba9c:	f3ef 8310 	mrs	r3, PRIMASK
 800baa0:	617b      	str	r3, [r7, #20]
  return(result);
 800baa2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800baa4:	637b      	str	r3, [r7, #52]	; 0x34
 800baa6:	2301      	movs	r3, #1
 800baa8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800baaa:	69bb      	ldr	r3, [r7, #24]
 800baac:	f383 8810 	msr	PRIMASK, r3
}
 800bab0:	46c0      	nop			; (mov r8, r8)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	4926      	ldr	r1, [pc, #152]	; (800bb58 <UART_EndRxTransfer+0xc4>)
 800babe:	400a      	ands	r2, r1
 800bac0:	601a      	str	r2, [r3, #0]
 800bac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bac4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bac6:	69fb      	ldr	r3, [r7, #28]
 800bac8:	f383 8810 	msr	PRIMASK, r3
}
 800bacc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bace:	f3ef 8310 	mrs	r3, PRIMASK
 800bad2:	623b      	str	r3, [r7, #32]
  return(result);
 800bad4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bad6:	633b      	str	r3, [r7, #48]	; 0x30
 800bad8:	2301      	movs	r3, #1
 800bada:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800badc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bade:	f383 8810 	msr	PRIMASK, r3
}
 800bae2:	46c0      	nop			; (mov r8, r8)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	689a      	ldr	r2, [r3, #8]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	2101      	movs	r1, #1
 800baf0:	438a      	bics	r2, r1
 800baf2:	609a      	str	r2, [r3, #8]
 800baf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800baf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bafa:	f383 8810 	msr	PRIMASK, r3
}
 800bafe:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d118      	bne.n	800bb3a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb08:	f3ef 8310 	mrs	r3, PRIMASK
 800bb0c:	60bb      	str	r3, [r7, #8]
  return(result);
 800bb0e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb10:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb12:	2301      	movs	r3, #1
 800bb14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f383 8810 	msr	PRIMASK, r3
}
 800bb1c:	46c0      	nop			; (mov r8, r8)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	2110      	movs	r1, #16
 800bb2a:	438a      	bics	r2, r1
 800bb2c:	601a      	str	r2, [r3, #0]
 800bb2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	f383 8810 	msr	PRIMASK, r3
}
 800bb38:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2280      	movs	r2, #128	; 0x80
 800bb3e:	2120      	movs	r1, #32
 800bb40:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2200      	movs	r2, #0
 800bb46:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800bb4e:	46c0      	nop			; (mov r8, r8)
 800bb50:	46bd      	mov	sp, r7
 800bb52:	b00e      	add	sp, #56	; 0x38
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	46c0      	nop			; (mov r8, r8)
 800bb58:	fffffedf 	.word	0xfffffedf

0800bb5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	225a      	movs	r2, #90	; 0x5a
 800bb6e:	2100      	movs	r1, #0
 800bb70:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2252      	movs	r2, #82	; 0x52
 800bb76:	2100      	movs	r1, #0
 800bb78:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	0018      	movs	r0, r3
 800bb7e:	f7ff fb5d 	bl	800b23c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb82:	46c0      	nop			; (mov r8, r8)
 800bb84:	46bd      	mov	sp, r7
 800bb86:	b004      	add	sp, #16
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b08a      	sub	sp, #40	; 0x28
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb96:	2b21      	cmp	r3, #33	; 0x21
 800bb98:	d14d      	bne.n	800bc36 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2252      	movs	r2, #82	; 0x52
 800bb9e:	5a9b      	ldrh	r3, [r3, r2]
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d132      	bne.n	800bc0c <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bba6:	f3ef 8310 	mrs	r3, PRIMASK
 800bbaa:	60bb      	str	r3, [r7, #8]
  return(result);
 800bbac:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bbae:	627b      	str	r3, [r7, #36]	; 0x24
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f383 8810 	msr	PRIMASK, r3
}
 800bbba:	46c0      	nop			; (mov r8, r8)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	681a      	ldr	r2, [r3, #0]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	2180      	movs	r1, #128	; 0x80
 800bbc8:	438a      	bics	r2, r1
 800bbca:	601a      	str	r2, [r3, #0]
 800bbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	f383 8810 	msr	PRIMASK, r3
}
 800bbd6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bbd8:	f3ef 8310 	mrs	r3, PRIMASK
 800bbdc:	617b      	str	r3, [r7, #20]
  return(result);
 800bbde:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bbe0:	623b      	str	r3, [r7, #32]
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbe6:	69bb      	ldr	r3, [r7, #24]
 800bbe8:	f383 8810 	msr	PRIMASK, r3
}
 800bbec:	46c0      	nop			; (mov r8, r8)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	681a      	ldr	r2, [r3, #0]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	2140      	movs	r1, #64	; 0x40
 800bbfa:	430a      	orrs	r2, r1
 800bbfc:	601a      	str	r2, [r3, #0]
 800bbfe:	6a3b      	ldr	r3, [r7, #32]
 800bc00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc02:	69fb      	ldr	r3, [r7, #28]
 800bc04:	f383 8810 	msr	PRIMASK, r3
}
 800bc08:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800bc0a:	e014      	b.n	800bc36 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc10:	781a      	ldrb	r2, [r3, #0]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	b292      	uxth	r2, r2
 800bc18:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc1e:	1c5a      	adds	r2, r3, #1
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2252      	movs	r2, #82	; 0x52
 800bc28:	5a9b      	ldrh	r3, [r3, r2]
 800bc2a:	b29b      	uxth	r3, r3
 800bc2c:	3b01      	subs	r3, #1
 800bc2e:	b299      	uxth	r1, r3
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2252      	movs	r2, #82	; 0x52
 800bc34:	5299      	strh	r1, [r3, r2]
}
 800bc36:	46c0      	nop			; (mov r8, r8)
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	b00a      	add	sp, #40	; 0x28
 800bc3c:	bd80      	pop	{r7, pc}

0800bc3e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bc3e:	b580      	push	{r7, lr}
 800bc40:	b08c      	sub	sp, #48	; 0x30
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc4a:	2b21      	cmp	r3, #33	; 0x21
 800bc4c:	d151      	bne.n	800bcf2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2252      	movs	r2, #82	; 0x52
 800bc52:	5a9b      	ldrh	r3, [r3, r2]
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d132      	bne.n	800bcc0 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc5a:	f3ef 8310 	mrs	r3, PRIMASK
 800bc5e:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc60:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bc62:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc64:	2301      	movs	r3, #1
 800bc66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	f383 8810 	msr	PRIMASK, r3
}
 800bc6e:	46c0      	nop			; (mov r8, r8)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	681a      	ldr	r2, [r3, #0]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	2180      	movs	r1, #128	; 0x80
 800bc7c:	438a      	bics	r2, r1
 800bc7e:	601a      	str	r2, [r3, #0]
 800bc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	f383 8810 	msr	PRIMASK, r3
}
 800bc8a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc8c:	f3ef 8310 	mrs	r3, PRIMASK
 800bc90:	61bb      	str	r3, [r7, #24]
  return(result);
 800bc92:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc94:	627b      	str	r3, [r7, #36]	; 0x24
 800bc96:	2301      	movs	r3, #1
 800bc98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc9a:	69fb      	ldr	r3, [r7, #28]
 800bc9c:	f383 8810 	msr	PRIMASK, r3
}
 800bca0:	46c0      	nop			; (mov r8, r8)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	681a      	ldr	r2, [r3, #0]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2140      	movs	r1, #64	; 0x40
 800bcae:	430a      	orrs	r2, r1
 800bcb0:	601a      	str	r2, [r3, #0]
 800bcb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bcb6:	6a3b      	ldr	r3, [r7, #32]
 800bcb8:	f383 8810 	msr	PRIMASK, r3
}
 800bcbc:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800bcbe:	e018      	b.n	800bcf2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bcc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc8:	881a      	ldrh	r2, [r3, #0]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	05d2      	lsls	r2, r2, #23
 800bcd0:	0dd2      	lsrs	r2, r2, #23
 800bcd2:	b292      	uxth	r2, r2
 800bcd4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcda:	1c9a      	adds	r2, r3, #2
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2252      	movs	r2, #82	; 0x52
 800bce4:	5a9b      	ldrh	r3, [r3, r2]
 800bce6:	b29b      	uxth	r3, r3
 800bce8:	3b01      	subs	r3, #1
 800bcea:	b299      	uxth	r1, r3
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2252      	movs	r2, #82	; 0x52
 800bcf0:	5299      	strh	r1, [r3, r2]
}
 800bcf2:	46c0      	nop			; (mov r8, r8)
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	b00c      	add	sp, #48	; 0x30
 800bcf8:	bd80      	pop	{r7, pc}

0800bcfa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bcfa:	b580      	push	{r7, lr}
 800bcfc:	b086      	sub	sp, #24
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd02:	f3ef 8310 	mrs	r3, PRIMASK
 800bd06:	60bb      	str	r3, [r7, #8]
  return(result);
 800bd08:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd0a:	617b      	str	r3, [r7, #20]
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f383 8810 	msr	PRIMASK, r3
}
 800bd16:	46c0      	nop			; (mov r8, r8)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	2140      	movs	r1, #64	; 0x40
 800bd24:	438a      	bics	r2, r1
 800bd26:	601a      	str	r2, [r3, #0]
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	f383 8810 	msr	PRIMASK, r3
}
 800bd32:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2220      	movs	r2, #32
 800bd38:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	0018      	movs	r0, r3
 800bd44:	f7ff fa72 	bl	800b22c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd48:	46c0      	nop			; (mov r8, r8)
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	b006      	add	sp, #24
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b094      	sub	sp, #80	; 0x50
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bd58:	204e      	movs	r0, #78	; 0x4e
 800bd5a:	183b      	adds	r3, r7, r0
 800bd5c:	687a      	ldr	r2, [r7, #4]
 800bd5e:	215c      	movs	r1, #92	; 0x5c
 800bd60:	5a52      	ldrh	r2, [r2, r1]
 800bd62:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2280      	movs	r2, #128	; 0x80
 800bd68:	589b      	ldr	r3, [r3, r2]
 800bd6a:	2b22      	cmp	r3, #34	; 0x22
 800bd6c:	d000      	beq.n	800bd70 <UART_RxISR_8BIT+0x20>
 800bd6e:	e0ba      	b.n	800bee6 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681a      	ldr	r2, [r3, #0]
 800bd74:	214c      	movs	r1, #76	; 0x4c
 800bd76:	187b      	adds	r3, r7, r1
 800bd78:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800bd7a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bd7c:	187b      	adds	r3, r7, r1
 800bd7e:	881b      	ldrh	r3, [r3, #0]
 800bd80:	b2da      	uxtb	r2, r3
 800bd82:	183b      	adds	r3, r7, r0
 800bd84:	881b      	ldrh	r3, [r3, #0]
 800bd86:	b2d9      	uxtb	r1, r3
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd8c:	400a      	ands	r2, r1
 800bd8e:	b2d2      	uxtb	r2, r2
 800bd90:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd96:	1c5a      	adds	r2, r3, #1
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	225a      	movs	r2, #90	; 0x5a
 800bda0:	5a9b      	ldrh	r3, [r3, r2]
 800bda2:	b29b      	uxth	r3, r3
 800bda4:	3b01      	subs	r3, #1
 800bda6:	b299      	uxth	r1, r3
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	225a      	movs	r2, #90	; 0x5a
 800bdac:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	225a      	movs	r2, #90	; 0x5a
 800bdb2:	5a9b      	ldrh	r3, [r3, r2]
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d000      	beq.n	800bdbc <UART_RxISR_8BIT+0x6c>
 800bdba:	e09c      	b.n	800bef6 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bdbc:	f3ef 8310 	mrs	r3, PRIMASK
 800bdc0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800bdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bdc4:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bdca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdcc:	f383 8810 	msr	PRIMASK, r3
}
 800bdd0:	46c0      	nop			; (mov r8, r8)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	681a      	ldr	r2, [r3, #0]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4948      	ldr	r1, [pc, #288]	; (800bf00 <UART_RxISR_8BIT+0x1b0>)
 800bdde:	400a      	ands	r2, r1
 800bde0:	601a      	str	r2, [r3, #0]
 800bde2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bde4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde8:	f383 8810 	msr	PRIMASK, r3
}
 800bdec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bdee:	f3ef 8310 	mrs	r3, PRIMASK
 800bdf2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800bdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdf6:	647b      	str	r3, [r7, #68]	; 0x44
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bdfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdfe:	f383 8810 	msr	PRIMASK, r3
}
 800be02:	46c0      	nop			; (mov r8, r8)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	689a      	ldr	r2, [r3, #8]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	2101      	movs	r1, #1
 800be10:	438a      	bics	r2, r1
 800be12:	609a      	str	r2, [r3, #8]
 800be14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be16:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be1a:	f383 8810 	msr	PRIMASK, r3
}
 800be1e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2280      	movs	r2, #128	; 0x80
 800be24:	2120      	movs	r1, #32
 800be26:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2200      	movs	r2, #0
 800be2c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2200      	movs	r2, #0
 800be32:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	685a      	ldr	r2, [r3, #4]
 800be3a:	2380      	movs	r3, #128	; 0x80
 800be3c:	041b      	lsls	r3, r3, #16
 800be3e:	4013      	ands	r3, r2
 800be40:	d018      	beq.n	800be74 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be42:	f3ef 8310 	mrs	r3, PRIMASK
 800be46:	61bb      	str	r3, [r7, #24]
  return(result);
 800be48:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800be4a:	643b      	str	r3, [r7, #64]	; 0x40
 800be4c:	2301      	movs	r3, #1
 800be4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be50:	69fb      	ldr	r3, [r7, #28]
 800be52:	f383 8810 	msr	PRIMASK, r3
}
 800be56:	46c0      	nop			; (mov r8, r8)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	681a      	ldr	r2, [r3, #0]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	4928      	ldr	r1, [pc, #160]	; (800bf04 <UART_RxISR_8BIT+0x1b4>)
 800be64:	400a      	ands	r2, r1
 800be66:	601a      	str	r2, [r3, #0]
 800be68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be6a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be6c:	6a3b      	ldr	r3, [r7, #32]
 800be6e:	f383 8810 	msr	PRIMASK, r3
}
 800be72:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be78:	2b01      	cmp	r3, #1
 800be7a:	d12f      	bne.n	800bedc <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2200      	movs	r2, #0
 800be80:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be82:	f3ef 8310 	mrs	r3, PRIMASK
 800be86:	60fb      	str	r3, [r7, #12]
  return(result);
 800be88:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be8c:	2301      	movs	r3, #1
 800be8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	f383 8810 	msr	PRIMASK, r3
}
 800be96:	46c0      	nop			; (mov r8, r8)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	681a      	ldr	r2, [r3, #0]
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	2110      	movs	r1, #16
 800bea4:	438a      	bics	r2, r1
 800bea6:	601a      	str	r2, [r3, #0]
 800bea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beaa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	f383 8810 	msr	PRIMASK, r3
}
 800beb2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	69db      	ldr	r3, [r3, #28]
 800beba:	2210      	movs	r2, #16
 800bebc:	4013      	ands	r3, r2
 800bebe:	2b10      	cmp	r3, #16
 800bec0:	d103      	bne.n	800beca <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	2210      	movs	r2, #16
 800bec8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2258      	movs	r2, #88	; 0x58
 800bece:	5a9a      	ldrh	r2, [r3, r2]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	0011      	movs	r1, r2
 800bed4:	0018      	movs	r0, r3
 800bed6:	f7ff f9b9 	bl	800b24c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800beda:	e00c      	b.n	800bef6 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	0018      	movs	r0, r3
 800bee0:	f7f9 f88c 	bl	8004ffc <HAL_UART_RxCpltCallback>
}
 800bee4:	e007      	b.n	800bef6 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	699a      	ldr	r2, [r3, #24]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	2108      	movs	r1, #8
 800bef2:	430a      	orrs	r2, r1
 800bef4:	619a      	str	r2, [r3, #24]
}
 800bef6:	46c0      	nop			; (mov r8, r8)
 800bef8:	46bd      	mov	sp, r7
 800befa:	b014      	add	sp, #80	; 0x50
 800befc:	bd80      	pop	{r7, pc}
 800befe:	46c0      	nop			; (mov r8, r8)
 800bf00:	fffffedf 	.word	0xfffffedf
 800bf04:	fbffffff 	.word	0xfbffffff

0800bf08 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b094      	sub	sp, #80	; 0x50
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bf10:	204e      	movs	r0, #78	; 0x4e
 800bf12:	183b      	adds	r3, r7, r0
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	215c      	movs	r1, #92	; 0x5c
 800bf18:	5a52      	ldrh	r2, [r2, r1]
 800bf1a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2280      	movs	r2, #128	; 0x80
 800bf20:	589b      	ldr	r3, [r3, r2]
 800bf22:	2b22      	cmp	r3, #34	; 0x22
 800bf24:	d000      	beq.n	800bf28 <UART_RxISR_16BIT+0x20>
 800bf26:	e0ba      	b.n	800c09e <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681a      	ldr	r2, [r3, #0]
 800bf2c:	214c      	movs	r1, #76	; 0x4c
 800bf2e:	187b      	adds	r3, r7, r1
 800bf30:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800bf32:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf38:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800bf3a:	187b      	adds	r3, r7, r1
 800bf3c:	183a      	adds	r2, r7, r0
 800bf3e:	881b      	ldrh	r3, [r3, #0]
 800bf40:	8812      	ldrh	r2, [r2, #0]
 800bf42:	4013      	ands	r3, r2
 800bf44:	b29a      	uxth	r2, r3
 800bf46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf48:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf4e:	1c9a      	adds	r2, r3, #2
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	225a      	movs	r2, #90	; 0x5a
 800bf58:	5a9b      	ldrh	r3, [r3, r2]
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	3b01      	subs	r3, #1
 800bf5e:	b299      	uxth	r1, r3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	225a      	movs	r2, #90	; 0x5a
 800bf64:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	225a      	movs	r2, #90	; 0x5a
 800bf6a:	5a9b      	ldrh	r3, [r3, r2]
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d000      	beq.n	800bf74 <UART_RxISR_16BIT+0x6c>
 800bf72:	e09c      	b.n	800c0ae <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf74:	f3ef 8310 	mrs	r3, PRIMASK
 800bf78:	623b      	str	r3, [r7, #32]
  return(result);
 800bf7a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf7c:	647b      	str	r3, [r7, #68]	; 0x44
 800bf7e:	2301      	movs	r3, #1
 800bf80:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf84:	f383 8810 	msr	PRIMASK, r3
}
 800bf88:	46c0      	nop			; (mov r8, r8)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	681a      	ldr	r2, [r3, #0]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4948      	ldr	r1, [pc, #288]	; (800c0b8 <UART_RxISR_16BIT+0x1b0>)
 800bf96:	400a      	ands	r2, r1
 800bf98:	601a      	str	r2, [r3, #0]
 800bf9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf9c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa0:	f383 8810 	msr	PRIMASK, r3
}
 800bfa4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bfa6:	f3ef 8310 	mrs	r3, PRIMASK
 800bfaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800bfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfae:	643b      	str	r3, [r7, #64]	; 0x40
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb6:	f383 8810 	msr	PRIMASK, r3
}
 800bfba:	46c0      	nop			; (mov r8, r8)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	689a      	ldr	r2, [r3, #8]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	2101      	movs	r1, #1
 800bfc8:	438a      	bics	r2, r1
 800bfca:	609a      	str	r2, [r3, #8]
 800bfcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfce:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfd2:	f383 8810 	msr	PRIMASK, r3
}
 800bfd6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2280      	movs	r2, #128	; 0x80
 800bfdc:	2120      	movs	r1, #32
 800bfde:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	685a      	ldr	r2, [r3, #4]
 800bff2:	2380      	movs	r3, #128	; 0x80
 800bff4:	041b      	lsls	r3, r3, #16
 800bff6:	4013      	ands	r3, r2
 800bff8:	d018      	beq.n	800c02c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bffa:	f3ef 8310 	mrs	r3, PRIMASK
 800bffe:	617b      	str	r3, [r7, #20]
  return(result);
 800c000:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c002:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c004:	2301      	movs	r3, #1
 800c006:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c008:	69bb      	ldr	r3, [r7, #24]
 800c00a:	f383 8810 	msr	PRIMASK, r3
}
 800c00e:	46c0      	nop			; (mov r8, r8)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	681a      	ldr	r2, [r3, #0]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	4928      	ldr	r1, [pc, #160]	; (800c0bc <UART_RxISR_16BIT+0x1b4>)
 800c01c:	400a      	ands	r2, r1
 800c01e:	601a      	str	r2, [r3, #0]
 800c020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c022:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	f383 8810 	msr	PRIMASK, r3
}
 800c02a:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c030:	2b01      	cmp	r3, #1
 800c032:	d12f      	bne.n	800c094 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2200      	movs	r2, #0
 800c038:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c03a:	f3ef 8310 	mrs	r3, PRIMASK
 800c03e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c040:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c042:	63bb      	str	r3, [r7, #56]	; 0x38
 800c044:	2301      	movs	r3, #1
 800c046:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f383 8810 	msr	PRIMASK, r3
}
 800c04e:	46c0      	nop			; (mov r8, r8)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	2110      	movs	r1, #16
 800c05c:	438a      	bics	r2, r1
 800c05e:	601a      	str	r2, [r3, #0]
 800c060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c062:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	f383 8810 	msr	PRIMASK, r3
}
 800c06a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	69db      	ldr	r3, [r3, #28]
 800c072:	2210      	movs	r2, #16
 800c074:	4013      	ands	r3, r2
 800c076:	2b10      	cmp	r3, #16
 800c078:	d103      	bne.n	800c082 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	2210      	movs	r2, #16
 800c080:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2258      	movs	r2, #88	; 0x58
 800c086:	5a9a      	ldrh	r2, [r3, r2]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	0011      	movs	r1, r2
 800c08c:	0018      	movs	r0, r3
 800c08e:	f7ff f8dd 	bl	800b24c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c092:	e00c      	b.n	800c0ae <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	0018      	movs	r0, r3
 800c098:	f7f8 ffb0 	bl	8004ffc <HAL_UART_RxCpltCallback>
}
 800c09c:	e007      	b.n	800c0ae <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	699a      	ldr	r2, [r3, #24]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	2108      	movs	r1, #8
 800c0aa:	430a      	orrs	r2, r1
 800c0ac:	619a      	str	r2, [r3, #24]
}
 800c0ae:	46c0      	nop			; (mov r8, r8)
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	b014      	add	sp, #80	; 0x50
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	46c0      	nop			; (mov r8, r8)
 800c0b8:	fffffedf 	.word	0xfffffedf
 800c0bc:	fbffffff 	.word	0xfbffffff

0800c0c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c0c8:	46c0      	nop			; (mov r8, r8)
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	b002      	add	sp, #8
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b084      	sub	sp, #16
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c0d8:	4b09      	ldr	r3, [pc, #36]	; (800c100 <USB_DisableGlobalInt+0x30>)
 800c0da:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2240      	movs	r2, #64	; 0x40
 800c0e0:	5a9b      	ldrh	r3, [r3, r2]
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	68fa      	ldr	r2, [r7, #12]
 800c0e6:	b292      	uxth	r2, r2
 800c0e8:	43d2      	mvns	r2, r2
 800c0ea:	b292      	uxth	r2, r2
 800c0ec:	4013      	ands	r3, r2
 800c0ee:	b299      	uxth	r1, r3
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2240      	movs	r2, #64	; 0x40
 800c0f4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800c0f6:	2300      	movs	r3, #0
}
 800c0f8:	0018      	movs	r0, r3
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	b004      	add	sp, #16
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	0000bf80 	.word	0x0000bf80

0800c104 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c104:	b084      	sub	sp, #16
 800c106:	b590      	push	{r4, r7, lr}
 800c108:	b083      	sub	sp, #12
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
 800c10e:	2004      	movs	r0, #4
 800c110:	2410      	movs	r4, #16
 800c112:	1900      	adds	r0, r0, r4
 800c114:	2408      	movs	r4, #8
 800c116:	46a4      	mov	ip, r4
 800c118:	44bc      	add	ip, r7
 800c11a:	4460      	add	r0, ip
 800c11c:	6001      	str	r1, [r0, #0]
 800c11e:	6042      	str	r2, [r0, #4]
 800c120:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2240      	movs	r2, #64	; 0x40
 800c126:	2101      	movs	r1, #1
 800c128:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2240      	movs	r2, #64	; 0x40
 800c12e:	2100      	movs	r1, #0
 800c130:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2244      	movs	r2, #68	; 0x44
 800c136:	2100      	movs	r1, #0
 800c138:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2250      	movs	r2, #80	; 0x50
 800c13e:	2100      	movs	r1, #0
 800c140:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800c142:	2300      	movs	r3, #0
}
 800c144:	0018      	movs	r0, r3
 800c146:	46bd      	mov	sp, r7
 800c148:	b003      	add	sp, #12
 800c14a:	bc90      	pop	{r4, r7}
 800c14c:	bc08      	pop	{r3}
 800c14e:	b004      	add	sp, #16
 800c150:	4718      	bx	r3
	...

0800c154 <__errno>:
 800c154:	4b01      	ldr	r3, [pc, #4]	; (800c15c <__errno+0x8>)
 800c156:	6818      	ldr	r0, [r3, #0]
 800c158:	4770      	bx	lr
 800c15a:	46c0      	nop			; (mov r8, r8)
 800c15c:	20000014 	.word	0x20000014

0800c160 <__libc_init_array>:
 800c160:	b570      	push	{r4, r5, r6, lr}
 800c162:	2600      	movs	r6, #0
 800c164:	4d0c      	ldr	r5, [pc, #48]	; (800c198 <__libc_init_array+0x38>)
 800c166:	4c0d      	ldr	r4, [pc, #52]	; (800c19c <__libc_init_array+0x3c>)
 800c168:	1b64      	subs	r4, r4, r5
 800c16a:	10a4      	asrs	r4, r4, #2
 800c16c:	42a6      	cmp	r6, r4
 800c16e:	d109      	bne.n	800c184 <__libc_init_array+0x24>
 800c170:	2600      	movs	r6, #0
 800c172:	f003 f843 	bl	800f1fc <_init>
 800c176:	4d0a      	ldr	r5, [pc, #40]	; (800c1a0 <__libc_init_array+0x40>)
 800c178:	4c0a      	ldr	r4, [pc, #40]	; (800c1a4 <__libc_init_array+0x44>)
 800c17a:	1b64      	subs	r4, r4, r5
 800c17c:	10a4      	asrs	r4, r4, #2
 800c17e:	42a6      	cmp	r6, r4
 800c180:	d105      	bne.n	800c18e <__libc_init_array+0x2e>
 800c182:	bd70      	pop	{r4, r5, r6, pc}
 800c184:	00b3      	lsls	r3, r6, #2
 800c186:	58eb      	ldr	r3, [r5, r3]
 800c188:	4798      	blx	r3
 800c18a:	3601      	adds	r6, #1
 800c18c:	e7ee      	b.n	800c16c <__libc_init_array+0xc>
 800c18e:	00b3      	lsls	r3, r6, #2
 800c190:	58eb      	ldr	r3, [r5, r3]
 800c192:	4798      	blx	r3
 800c194:	3601      	adds	r6, #1
 800c196:	e7f2      	b.n	800c17e <__libc_init_array+0x1e>
 800c198:	0800f91c 	.word	0x0800f91c
 800c19c:	0800f91c 	.word	0x0800f91c
 800c1a0:	0800f91c 	.word	0x0800f91c
 800c1a4:	0800f920 	.word	0x0800f920

0800c1a8 <memcpy>:
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	b510      	push	{r4, lr}
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d100      	bne.n	800c1b2 <memcpy+0xa>
 800c1b0:	bd10      	pop	{r4, pc}
 800c1b2:	5ccc      	ldrb	r4, [r1, r3]
 800c1b4:	54c4      	strb	r4, [r0, r3]
 800c1b6:	3301      	adds	r3, #1
 800c1b8:	e7f8      	b.n	800c1ac <memcpy+0x4>

0800c1ba <memset>:
 800c1ba:	0003      	movs	r3, r0
 800c1bc:	1882      	adds	r2, r0, r2
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d100      	bne.n	800c1c4 <memset+0xa>
 800c1c2:	4770      	bx	lr
 800c1c4:	7019      	strb	r1, [r3, #0]
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	e7f9      	b.n	800c1be <memset+0x4>

0800c1ca <__cvt>:
 800c1ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1cc:	001e      	movs	r6, r3
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	0014      	movs	r4, r2
 800c1d2:	b08b      	sub	sp, #44	; 0x2c
 800c1d4:	429e      	cmp	r6, r3
 800c1d6:	da04      	bge.n	800c1e2 <__cvt+0x18>
 800c1d8:	2180      	movs	r1, #128	; 0x80
 800c1da:	0609      	lsls	r1, r1, #24
 800c1dc:	1873      	adds	r3, r6, r1
 800c1de:	001e      	movs	r6, r3
 800c1e0:	232d      	movs	r3, #45	; 0x2d
 800c1e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c1e4:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c1e6:	7013      	strb	r3, [r2, #0]
 800c1e8:	2320      	movs	r3, #32
 800c1ea:	2203      	movs	r2, #3
 800c1ec:	439f      	bics	r7, r3
 800c1ee:	2f46      	cmp	r7, #70	; 0x46
 800c1f0:	d007      	beq.n	800c202 <__cvt+0x38>
 800c1f2:	003b      	movs	r3, r7
 800c1f4:	3b45      	subs	r3, #69	; 0x45
 800c1f6:	4259      	negs	r1, r3
 800c1f8:	414b      	adcs	r3, r1
 800c1fa:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c1fc:	3a01      	subs	r2, #1
 800c1fe:	18cb      	adds	r3, r1, r3
 800c200:	9310      	str	r3, [sp, #64]	; 0x40
 800c202:	ab09      	add	r3, sp, #36	; 0x24
 800c204:	9304      	str	r3, [sp, #16]
 800c206:	ab08      	add	r3, sp, #32
 800c208:	9303      	str	r3, [sp, #12]
 800c20a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c20c:	9200      	str	r2, [sp, #0]
 800c20e:	9302      	str	r3, [sp, #8]
 800c210:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c212:	0022      	movs	r2, r4
 800c214:	9301      	str	r3, [sp, #4]
 800c216:	0033      	movs	r3, r6
 800c218:	f000 fd04 	bl	800cc24 <_dtoa_r>
 800c21c:	0005      	movs	r5, r0
 800c21e:	2f47      	cmp	r7, #71	; 0x47
 800c220:	d102      	bne.n	800c228 <__cvt+0x5e>
 800c222:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c224:	07db      	lsls	r3, r3, #31
 800c226:	d528      	bpl.n	800c27a <__cvt+0xb0>
 800c228:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c22a:	18eb      	adds	r3, r5, r3
 800c22c:	9307      	str	r3, [sp, #28]
 800c22e:	2f46      	cmp	r7, #70	; 0x46
 800c230:	d114      	bne.n	800c25c <__cvt+0x92>
 800c232:	782b      	ldrb	r3, [r5, #0]
 800c234:	2b30      	cmp	r3, #48	; 0x30
 800c236:	d10c      	bne.n	800c252 <__cvt+0x88>
 800c238:	2200      	movs	r2, #0
 800c23a:	2300      	movs	r3, #0
 800c23c:	0020      	movs	r0, r4
 800c23e:	0031      	movs	r1, r6
 800c240:	f7f4 f904 	bl	800044c <__aeabi_dcmpeq>
 800c244:	2800      	cmp	r0, #0
 800c246:	d104      	bne.n	800c252 <__cvt+0x88>
 800c248:	2301      	movs	r3, #1
 800c24a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c24c:	1a9b      	subs	r3, r3, r2
 800c24e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c250:	6013      	str	r3, [r2, #0]
 800c252:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c254:	9a07      	ldr	r2, [sp, #28]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	18d3      	adds	r3, r2, r3
 800c25a:	9307      	str	r3, [sp, #28]
 800c25c:	2200      	movs	r2, #0
 800c25e:	2300      	movs	r3, #0
 800c260:	0020      	movs	r0, r4
 800c262:	0031      	movs	r1, r6
 800c264:	f7f4 f8f2 	bl	800044c <__aeabi_dcmpeq>
 800c268:	2800      	cmp	r0, #0
 800c26a:	d001      	beq.n	800c270 <__cvt+0xa6>
 800c26c:	9b07      	ldr	r3, [sp, #28]
 800c26e:	9309      	str	r3, [sp, #36]	; 0x24
 800c270:	2230      	movs	r2, #48	; 0x30
 800c272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c274:	9907      	ldr	r1, [sp, #28]
 800c276:	428b      	cmp	r3, r1
 800c278:	d306      	bcc.n	800c288 <__cvt+0xbe>
 800c27a:	0028      	movs	r0, r5
 800c27c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c27e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c280:	1b5b      	subs	r3, r3, r5
 800c282:	6013      	str	r3, [r2, #0]
 800c284:	b00b      	add	sp, #44	; 0x2c
 800c286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c288:	1c59      	adds	r1, r3, #1
 800c28a:	9109      	str	r1, [sp, #36]	; 0x24
 800c28c:	701a      	strb	r2, [r3, #0]
 800c28e:	e7f0      	b.n	800c272 <__cvt+0xa8>

0800c290 <__exponent>:
 800c290:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c292:	1c83      	adds	r3, r0, #2
 800c294:	b087      	sub	sp, #28
 800c296:	9303      	str	r3, [sp, #12]
 800c298:	0005      	movs	r5, r0
 800c29a:	000c      	movs	r4, r1
 800c29c:	232b      	movs	r3, #43	; 0x2b
 800c29e:	7002      	strb	r2, [r0, #0]
 800c2a0:	2900      	cmp	r1, #0
 800c2a2:	da01      	bge.n	800c2a8 <__exponent+0x18>
 800c2a4:	424c      	negs	r4, r1
 800c2a6:	3302      	adds	r3, #2
 800c2a8:	706b      	strb	r3, [r5, #1]
 800c2aa:	2c09      	cmp	r4, #9
 800c2ac:	dd31      	ble.n	800c312 <__exponent+0x82>
 800c2ae:	270a      	movs	r7, #10
 800c2b0:	ab04      	add	r3, sp, #16
 800c2b2:	1dde      	adds	r6, r3, #7
 800c2b4:	0020      	movs	r0, r4
 800c2b6:	0039      	movs	r1, r7
 800c2b8:	9601      	str	r6, [sp, #4]
 800c2ba:	f7f4 f8b1 	bl	8000420 <__aeabi_idivmod>
 800c2be:	3e01      	subs	r6, #1
 800c2c0:	3130      	adds	r1, #48	; 0x30
 800c2c2:	0020      	movs	r0, r4
 800c2c4:	7031      	strb	r1, [r6, #0]
 800c2c6:	0039      	movs	r1, r7
 800c2c8:	9402      	str	r4, [sp, #8]
 800c2ca:	f7f3 ffc3 	bl	8000254 <__divsi3>
 800c2ce:	9b02      	ldr	r3, [sp, #8]
 800c2d0:	0004      	movs	r4, r0
 800c2d2:	2b63      	cmp	r3, #99	; 0x63
 800c2d4:	dcee      	bgt.n	800c2b4 <__exponent+0x24>
 800c2d6:	9b01      	ldr	r3, [sp, #4]
 800c2d8:	3430      	adds	r4, #48	; 0x30
 800c2da:	1e9a      	subs	r2, r3, #2
 800c2dc:	0013      	movs	r3, r2
 800c2de:	9903      	ldr	r1, [sp, #12]
 800c2e0:	7014      	strb	r4, [r2, #0]
 800c2e2:	a804      	add	r0, sp, #16
 800c2e4:	3007      	adds	r0, #7
 800c2e6:	4298      	cmp	r0, r3
 800c2e8:	d80e      	bhi.n	800c308 <__exponent+0x78>
 800c2ea:	ab04      	add	r3, sp, #16
 800c2ec:	3307      	adds	r3, #7
 800c2ee:	2000      	movs	r0, #0
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d804      	bhi.n	800c2fe <__exponent+0x6e>
 800c2f4:	ab04      	add	r3, sp, #16
 800c2f6:	3009      	adds	r0, #9
 800c2f8:	18c0      	adds	r0, r0, r3
 800c2fa:	9b01      	ldr	r3, [sp, #4]
 800c2fc:	1ac0      	subs	r0, r0, r3
 800c2fe:	9b03      	ldr	r3, [sp, #12]
 800c300:	1818      	adds	r0, r3, r0
 800c302:	1b40      	subs	r0, r0, r5
 800c304:	b007      	add	sp, #28
 800c306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c308:	7818      	ldrb	r0, [r3, #0]
 800c30a:	3301      	adds	r3, #1
 800c30c:	7008      	strb	r0, [r1, #0]
 800c30e:	3101      	adds	r1, #1
 800c310:	e7e7      	b.n	800c2e2 <__exponent+0x52>
 800c312:	2330      	movs	r3, #48	; 0x30
 800c314:	18e4      	adds	r4, r4, r3
 800c316:	70ab      	strb	r3, [r5, #2]
 800c318:	1d28      	adds	r0, r5, #4
 800c31a:	70ec      	strb	r4, [r5, #3]
 800c31c:	e7f1      	b.n	800c302 <__exponent+0x72>
	...

0800c320 <_printf_float>:
 800c320:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c322:	b095      	sub	sp, #84	; 0x54
 800c324:	000c      	movs	r4, r1
 800c326:	9209      	str	r2, [sp, #36]	; 0x24
 800c328:	001e      	movs	r6, r3
 800c32a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800c32c:	0007      	movs	r7, r0
 800c32e:	f001 fa93 	bl	800d858 <_localeconv_r>
 800c332:	6803      	ldr	r3, [r0, #0]
 800c334:	0018      	movs	r0, r3
 800c336:	930c      	str	r3, [sp, #48]	; 0x30
 800c338:	f7f3 fee6 	bl	8000108 <strlen>
 800c33c:	2300      	movs	r3, #0
 800c33e:	9312      	str	r3, [sp, #72]	; 0x48
 800c340:	7e23      	ldrb	r3, [r4, #24]
 800c342:	2207      	movs	r2, #7
 800c344:	930a      	str	r3, [sp, #40]	; 0x28
 800c346:	6823      	ldr	r3, [r4, #0]
 800c348:	900e      	str	r0, [sp, #56]	; 0x38
 800c34a:	930d      	str	r3, [sp, #52]	; 0x34
 800c34c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c34e:	682b      	ldr	r3, [r5, #0]
 800c350:	05c9      	lsls	r1, r1, #23
 800c352:	d547      	bpl.n	800c3e4 <_printf_float+0xc4>
 800c354:	189b      	adds	r3, r3, r2
 800c356:	4393      	bics	r3, r2
 800c358:	001a      	movs	r2, r3
 800c35a:	3208      	adds	r2, #8
 800c35c:	602a      	str	r2, [r5, #0]
 800c35e:	681a      	ldr	r2, [r3, #0]
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	64a2      	str	r2, [r4, #72]	; 0x48
 800c364:	64e3      	str	r3, [r4, #76]	; 0x4c
 800c366:	2201      	movs	r2, #1
 800c368:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c36a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800c36c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c36e:	006b      	lsls	r3, r5, #1
 800c370:	085b      	lsrs	r3, r3, #1
 800c372:	930f      	str	r3, [sp, #60]	; 0x3c
 800c374:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c376:	4ba7      	ldr	r3, [pc, #668]	; (800c614 <_printf_float+0x2f4>)
 800c378:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c37a:	4252      	negs	r2, r2
 800c37c:	f7f6 fcea 	bl	8002d54 <__aeabi_dcmpun>
 800c380:	2800      	cmp	r0, #0
 800c382:	d131      	bne.n	800c3e8 <_printf_float+0xc8>
 800c384:	2201      	movs	r2, #1
 800c386:	4ba3      	ldr	r3, [pc, #652]	; (800c614 <_printf_float+0x2f4>)
 800c388:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c38a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c38c:	4252      	negs	r2, r2
 800c38e:	f7f4 f86d 	bl	800046c <__aeabi_dcmple>
 800c392:	2800      	cmp	r0, #0
 800c394:	d128      	bne.n	800c3e8 <_printf_float+0xc8>
 800c396:	2200      	movs	r2, #0
 800c398:	2300      	movs	r3, #0
 800c39a:	0029      	movs	r1, r5
 800c39c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c39e:	f7f4 f85b 	bl	8000458 <__aeabi_dcmplt>
 800c3a2:	2800      	cmp	r0, #0
 800c3a4:	d003      	beq.n	800c3ae <_printf_float+0x8e>
 800c3a6:	0023      	movs	r3, r4
 800c3a8:	222d      	movs	r2, #45	; 0x2d
 800c3aa:	3343      	adds	r3, #67	; 0x43
 800c3ac:	701a      	strb	r2, [r3, #0]
 800c3ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3b0:	4d99      	ldr	r5, [pc, #612]	; (800c618 <_printf_float+0x2f8>)
 800c3b2:	2b47      	cmp	r3, #71	; 0x47
 800c3b4:	d900      	bls.n	800c3b8 <_printf_float+0x98>
 800c3b6:	4d99      	ldr	r5, [pc, #612]	; (800c61c <_printf_float+0x2fc>)
 800c3b8:	2303      	movs	r3, #3
 800c3ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3bc:	6123      	str	r3, [r4, #16]
 800c3be:	3301      	adds	r3, #1
 800c3c0:	439a      	bics	r2, r3
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	6022      	str	r2, [r4, #0]
 800c3c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c3c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3ca:	0021      	movs	r1, r4
 800c3cc:	0038      	movs	r0, r7
 800c3ce:	9600      	str	r6, [sp, #0]
 800c3d0:	aa13      	add	r2, sp, #76	; 0x4c
 800c3d2:	f000 f9e7 	bl	800c7a4 <_printf_common>
 800c3d6:	1c43      	adds	r3, r0, #1
 800c3d8:	d000      	beq.n	800c3dc <_printf_float+0xbc>
 800c3da:	e0a2      	b.n	800c522 <_printf_float+0x202>
 800c3dc:	2001      	movs	r0, #1
 800c3de:	4240      	negs	r0, r0
 800c3e0:	b015      	add	sp, #84	; 0x54
 800c3e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3e4:	3307      	adds	r3, #7
 800c3e6:	e7b6      	b.n	800c356 <_printf_float+0x36>
 800c3e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c3ea:	002b      	movs	r3, r5
 800c3ec:	0010      	movs	r0, r2
 800c3ee:	0029      	movs	r1, r5
 800c3f0:	f7f6 fcb0 	bl	8002d54 <__aeabi_dcmpun>
 800c3f4:	2800      	cmp	r0, #0
 800c3f6:	d00b      	beq.n	800c410 <_printf_float+0xf0>
 800c3f8:	2d00      	cmp	r5, #0
 800c3fa:	da03      	bge.n	800c404 <_printf_float+0xe4>
 800c3fc:	0023      	movs	r3, r4
 800c3fe:	222d      	movs	r2, #45	; 0x2d
 800c400:	3343      	adds	r3, #67	; 0x43
 800c402:	701a      	strb	r2, [r3, #0]
 800c404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c406:	4d86      	ldr	r5, [pc, #536]	; (800c620 <_printf_float+0x300>)
 800c408:	2b47      	cmp	r3, #71	; 0x47
 800c40a:	d9d5      	bls.n	800c3b8 <_printf_float+0x98>
 800c40c:	4d85      	ldr	r5, [pc, #532]	; (800c624 <_printf_float+0x304>)
 800c40e:	e7d3      	b.n	800c3b8 <_printf_float+0x98>
 800c410:	2220      	movs	r2, #32
 800c412:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c414:	6863      	ldr	r3, [r4, #4]
 800c416:	4391      	bics	r1, r2
 800c418:	910f      	str	r1, [sp, #60]	; 0x3c
 800c41a:	1c5a      	adds	r2, r3, #1
 800c41c:	d149      	bne.n	800c4b2 <_printf_float+0x192>
 800c41e:	3307      	adds	r3, #7
 800c420:	6063      	str	r3, [r4, #4]
 800c422:	2380      	movs	r3, #128	; 0x80
 800c424:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c426:	00db      	lsls	r3, r3, #3
 800c428:	4313      	orrs	r3, r2
 800c42a:	2200      	movs	r2, #0
 800c42c:	9206      	str	r2, [sp, #24]
 800c42e:	aa12      	add	r2, sp, #72	; 0x48
 800c430:	9205      	str	r2, [sp, #20]
 800c432:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c434:	a908      	add	r1, sp, #32
 800c436:	9204      	str	r2, [sp, #16]
 800c438:	aa11      	add	r2, sp, #68	; 0x44
 800c43a:	9203      	str	r2, [sp, #12]
 800c43c:	2223      	movs	r2, #35	; 0x23
 800c43e:	6023      	str	r3, [r4, #0]
 800c440:	9301      	str	r3, [sp, #4]
 800c442:	6863      	ldr	r3, [r4, #4]
 800c444:	1852      	adds	r2, r2, r1
 800c446:	9202      	str	r2, [sp, #8]
 800c448:	9300      	str	r3, [sp, #0]
 800c44a:	0038      	movs	r0, r7
 800c44c:	002b      	movs	r3, r5
 800c44e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c450:	f7ff febb 	bl	800c1ca <__cvt>
 800c454:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c456:	0005      	movs	r5, r0
 800c458:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c45a:	2b47      	cmp	r3, #71	; 0x47
 800c45c:	d108      	bne.n	800c470 <_printf_float+0x150>
 800c45e:	1ccb      	adds	r3, r1, #3
 800c460:	db02      	blt.n	800c468 <_printf_float+0x148>
 800c462:	6863      	ldr	r3, [r4, #4]
 800c464:	4299      	cmp	r1, r3
 800c466:	dd48      	ble.n	800c4fa <_printf_float+0x1da>
 800c468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c46a:	3b02      	subs	r3, #2
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	930a      	str	r3, [sp, #40]	; 0x28
 800c470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c472:	2b65      	cmp	r3, #101	; 0x65
 800c474:	d824      	bhi.n	800c4c0 <_printf_float+0x1a0>
 800c476:	0020      	movs	r0, r4
 800c478:	001a      	movs	r2, r3
 800c47a:	3901      	subs	r1, #1
 800c47c:	3050      	adds	r0, #80	; 0x50
 800c47e:	9111      	str	r1, [sp, #68]	; 0x44
 800c480:	f7ff ff06 	bl	800c290 <__exponent>
 800c484:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c486:	900b      	str	r0, [sp, #44]	; 0x2c
 800c488:	1813      	adds	r3, r2, r0
 800c48a:	6123      	str	r3, [r4, #16]
 800c48c:	2a01      	cmp	r2, #1
 800c48e:	dc02      	bgt.n	800c496 <_printf_float+0x176>
 800c490:	6822      	ldr	r2, [r4, #0]
 800c492:	07d2      	lsls	r2, r2, #31
 800c494:	d501      	bpl.n	800c49a <_printf_float+0x17a>
 800c496:	3301      	adds	r3, #1
 800c498:	6123      	str	r3, [r4, #16]
 800c49a:	2323      	movs	r3, #35	; 0x23
 800c49c:	aa08      	add	r2, sp, #32
 800c49e:	189b      	adds	r3, r3, r2
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d100      	bne.n	800c4a8 <_printf_float+0x188>
 800c4a6:	e78f      	b.n	800c3c8 <_printf_float+0xa8>
 800c4a8:	0023      	movs	r3, r4
 800c4aa:	222d      	movs	r2, #45	; 0x2d
 800c4ac:	3343      	adds	r3, #67	; 0x43
 800c4ae:	701a      	strb	r2, [r3, #0]
 800c4b0:	e78a      	b.n	800c3c8 <_printf_float+0xa8>
 800c4b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c4b4:	2a47      	cmp	r2, #71	; 0x47
 800c4b6:	d1b4      	bne.n	800c422 <_printf_float+0x102>
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d1b2      	bne.n	800c422 <_printf_float+0x102>
 800c4bc:	3301      	adds	r3, #1
 800c4be:	e7af      	b.n	800c420 <_printf_float+0x100>
 800c4c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4c2:	2b66      	cmp	r3, #102	; 0x66
 800c4c4:	d11b      	bne.n	800c4fe <_printf_float+0x1de>
 800c4c6:	6863      	ldr	r3, [r4, #4]
 800c4c8:	2900      	cmp	r1, #0
 800c4ca:	dd0d      	ble.n	800c4e8 <_printf_float+0x1c8>
 800c4cc:	6121      	str	r1, [r4, #16]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d102      	bne.n	800c4d8 <_printf_float+0x1b8>
 800c4d2:	6822      	ldr	r2, [r4, #0]
 800c4d4:	07d2      	lsls	r2, r2, #31
 800c4d6:	d502      	bpl.n	800c4de <_printf_float+0x1be>
 800c4d8:	3301      	adds	r3, #1
 800c4da:	1859      	adds	r1, r3, r1
 800c4dc:	6121      	str	r1, [r4, #16]
 800c4de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4e0:	65a3      	str	r3, [r4, #88]	; 0x58
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	930b      	str	r3, [sp, #44]	; 0x2c
 800c4e6:	e7d8      	b.n	800c49a <_printf_float+0x17a>
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d103      	bne.n	800c4f4 <_printf_float+0x1d4>
 800c4ec:	2201      	movs	r2, #1
 800c4ee:	6821      	ldr	r1, [r4, #0]
 800c4f0:	4211      	tst	r1, r2
 800c4f2:	d000      	beq.n	800c4f6 <_printf_float+0x1d6>
 800c4f4:	1c9a      	adds	r2, r3, #2
 800c4f6:	6122      	str	r2, [r4, #16]
 800c4f8:	e7f1      	b.n	800c4de <_printf_float+0x1be>
 800c4fa:	2367      	movs	r3, #103	; 0x67
 800c4fc:	930a      	str	r3, [sp, #40]	; 0x28
 800c4fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c500:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c502:	4293      	cmp	r3, r2
 800c504:	db06      	blt.n	800c514 <_printf_float+0x1f4>
 800c506:	6822      	ldr	r2, [r4, #0]
 800c508:	6123      	str	r3, [r4, #16]
 800c50a:	07d2      	lsls	r2, r2, #31
 800c50c:	d5e7      	bpl.n	800c4de <_printf_float+0x1be>
 800c50e:	3301      	adds	r3, #1
 800c510:	6123      	str	r3, [r4, #16]
 800c512:	e7e4      	b.n	800c4de <_printf_float+0x1be>
 800c514:	2101      	movs	r1, #1
 800c516:	2b00      	cmp	r3, #0
 800c518:	dc01      	bgt.n	800c51e <_printf_float+0x1fe>
 800c51a:	1849      	adds	r1, r1, r1
 800c51c:	1ac9      	subs	r1, r1, r3
 800c51e:	1852      	adds	r2, r2, r1
 800c520:	e7e9      	b.n	800c4f6 <_printf_float+0x1d6>
 800c522:	6822      	ldr	r2, [r4, #0]
 800c524:	0553      	lsls	r3, r2, #21
 800c526:	d407      	bmi.n	800c538 <_printf_float+0x218>
 800c528:	6923      	ldr	r3, [r4, #16]
 800c52a:	002a      	movs	r2, r5
 800c52c:	0038      	movs	r0, r7
 800c52e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c530:	47b0      	blx	r6
 800c532:	1c43      	adds	r3, r0, #1
 800c534:	d128      	bne.n	800c588 <_printf_float+0x268>
 800c536:	e751      	b.n	800c3dc <_printf_float+0xbc>
 800c538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c53a:	2b65      	cmp	r3, #101	; 0x65
 800c53c:	d800      	bhi.n	800c540 <_printf_float+0x220>
 800c53e:	e0e1      	b.n	800c704 <_printf_float+0x3e4>
 800c540:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800c542:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800c544:	2200      	movs	r2, #0
 800c546:	2300      	movs	r3, #0
 800c548:	f7f3 ff80 	bl	800044c <__aeabi_dcmpeq>
 800c54c:	2800      	cmp	r0, #0
 800c54e:	d031      	beq.n	800c5b4 <_printf_float+0x294>
 800c550:	2301      	movs	r3, #1
 800c552:	0038      	movs	r0, r7
 800c554:	4a34      	ldr	r2, [pc, #208]	; (800c628 <_printf_float+0x308>)
 800c556:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c558:	47b0      	blx	r6
 800c55a:	1c43      	adds	r3, r0, #1
 800c55c:	d100      	bne.n	800c560 <_printf_float+0x240>
 800c55e:	e73d      	b.n	800c3dc <_printf_float+0xbc>
 800c560:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c562:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c564:	4293      	cmp	r3, r2
 800c566:	db02      	blt.n	800c56e <_printf_float+0x24e>
 800c568:	6823      	ldr	r3, [r4, #0]
 800c56a:	07db      	lsls	r3, r3, #31
 800c56c:	d50c      	bpl.n	800c588 <_printf_float+0x268>
 800c56e:	0038      	movs	r0, r7
 800c570:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c572:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c574:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c576:	47b0      	blx	r6
 800c578:	2500      	movs	r5, #0
 800c57a:	1c43      	adds	r3, r0, #1
 800c57c:	d100      	bne.n	800c580 <_printf_float+0x260>
 800c57e:	e72d      	b.n	800c3dc <_printf_float+0xbc>
 800c580:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c582:	3b01      	subs	r3, #1
 800c584:	42ab      	cmp	r3, r5
 800c586:	dc0a      	bgt.n	800c59e <_printf_float+0x27e>
 800c588:	6823      	ldr	r3, [r4, #0]
 800c58a:	079b      	lsls	r3, r3, #30
 800c58c:	d500      	bpl.n	800c590 <_printf_float+0x270>
 800c58e:	e106      	b.n	800c79e <_printf_float+0x47e>
 800c590:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c592:	68e0      	ldr	r0, [r4, #12]
 800c594:	4298      	cmp	r0, r3
 800c596:	db00      	blt.n	800c59a <_printf_float+0x27a>
 800c598:	e722      	b.n	800c3e0 <_printf_float+0xc0>
 800c59a:	0018      	movs	r0, r3
 800c59c:	e720      	b.n	800c3e0 <_printf_float+0xc0>
 800c59e:	0022      	movs	r2, r4
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	0038      	movs	r0, r7
 800c5a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c5a6:	321a      	adds	r2, #26
 800c5a8:	47b0      	blx	r6
 800c5aa:	1c43      	adds	r3, r0, #1
 800c5ac:	d100      	bne.n	800c5b0 <_printf_float+0x290>
 800c5ae:	e715      	b.n	800c3dc <_printf_float+0xbc>
 800c5b0:	3501      	adds	r5, #1
 800c5b2:	e7e5      	b.n	800c580 <_printf_float+0x260>
 800c5b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	dc38      	bgt.n	800c62c <_printf_float+0x30c>
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	0038      	movs	r0, r7
 800c5be:	4a1a      	ldr	r2, [pc, #104]	; (800c628 <_printf_float+0x308>)
 800c5c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c5c2:	47b0      	blx	r6
 800c5c4:	1c43      	adds	r3, r0, #1
 800c5c6:	d100      	bne.n	800c5ca <_printf_float+0x2aa>
 800c5c8:	e708      	b.n	800c3dc <_printf_float+0xbc>
 800c5ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c5cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c5ce:	4313      	orrs	r3, r2
 800c5d0:	d102      	bne.n	800c5d8 <_printf_float+0x2b8>
 800c5d2:	6823      	ldr	r3, [r4, #0]
 800c5d4:	07db      	lsls	r3, r3, #31
 800c5d6:	d5d7      	bpl.n	800c588 <_printf_float+0x268>
 800c5d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c5da:	0038      	movs	r0, r7
 800c5dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c5de:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c5e0:	47b0      	blx	r6
 800c5e2:	1c43      	adds	r3, r0, #1
 800c5e4:	d100      	bne.n	800c5e8 <_printf_float+0x2c8>
 800c5e6:	e6f9      	b.n	800c3dc <_printf_float+0xbc>
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	930a      	str	r3, [sp, #40]	; 0x28
 800c5ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c5ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5f0:	425b      	negs	r3, r3
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	dc01      	bgt.n	800c5fa <_printf_float+0x2da>
 800c5f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c5f8:	e797      	b.n	800c52a <_printf_float+0x20a>
 800c5fa:	0022      	movs	r2, r4
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	0038      	movs	r0, r7
 800c600:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c602:	321a      	adds	r2, #26
 800c604:	47b0      	blx	r6
 800c606:	1c43      	adds	r3, r0, #1
 800c608:	d100      	bne.n	800c60c <_printf_float+0x2ec>
 800c60a:	e6e7      	b.n	800c3dc <_printf_float+0xbc>
 800c60c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c60e:	3301      	adds	r3, #1
 800c610:	e7eb      	b.n	800c5ea <_printf_float+0x2ca>
 800c612:	46c0      	nop			; (mov r8, r8)
 800c614:	7fefffff 	.word	0x7fefffff
 800c618:	0800f548 	.word	0x0800f548
 800c61c:	0800f54c 	.word	0x0800f54c
 800c620:	0800f550 	.word	0x0800f550
 800c624:	0800f554 	.word	0x0800f554
 800c628:	0800f558 	.word	0x0800f558
 800c62c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c62e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c630:	920a      	str	r2, [sp, #40]	; 0x28
 800c632:	429a      	cmp	r2, r3
 800c634:	dd00      	ble.n	800c638 <_printf_float+0x318>
 800c636:	930a      	str	r3, [sp, #40]	; 0x28
 800c638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	dc3c      	bgt.n	800c6b8 <_printf_float+0x398>
 800c63e:	2300      	movs	r3, #0
 800c640:	930d      	str	r3, [sp, #52]	; 0x34
 800c642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c644:	43db      	mvns	r3, r3
 800c646:	17db      	asrs	r3, r3, #31
 800c648:	930f      	str	r3, [sp, #60]	; 0x3c
 800c64a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c64c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c64e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c652:	4013      	ands	r3, r2
 800c654:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c656:	1ad3      	subs	r3, r2, r3
 800c658:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c65a:	4293      	cmp	r3, r2
 800c65c:	dc34      	bgt.n	800c6c8 <_printf_float+0x3a8>
 800c65e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c660:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c662:	4293      	cmp	r3, r2
 800c664:	db3d      	blt.n	800c6e2 <_printf_float+0x3c2>
 800c666:	6823      	ldr	r3, [r4, #0]
 800c668:	07db      	lsls	r3, r3, #31
 800c66a:	d43a      	bmi.n	800c6e2 <_printf_float+0x3c2>
 800c66c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c66e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c670:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c672:	1ad3      	subs	r3, r2, r3
 800c674:	1a52      	subs	r2, r2, r1
 800c676:	920a      	str	r2, [sp, #40]	; 0x28
 800c678:	429a      	cmp	r2, r3
 800c67a:	dd00      	ble.n	800c67e <_printf_float+0x35e>
 800c67c:	930a      	str	r3, [sp, #40]	; 0x28
 800c67e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c680:	2b00      	cmp	r3, #0
 800c682:	dc36      	bgt.n	800c6f2 <_printf_float+0x3d2>
 800c684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c686:	2500      	movs	r5, #0
 800c688:	43db      	mvns	r3, r3
 800c68a:	17db      	asrs	r3, r3, #31
 800c68c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c68e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c690:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c692:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c694:	1a9b      	subs	r3, r3, r2
 800c696:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c698:	400a      	ands	r2, r1
 800c69a:	1a9b      	subs	r3, r3, r2
 800c69c:	42ab      	cmp	r3, r5
 800c69e:	dc00      	bgt.n	800c6a2 <_printf_float+0x382>
 800c6a0:	e772      	b.n	800c588 <_printf_float+0x268>
 800c6a2:	0022      	movs	r2, r4
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	0038      	movs	r0, r7
 800c6a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c6aa:	321a      	adds	r2, #26
 800c6ac:	47b0      	blx	r6
 800c6ae:	1c43      	adds	r3, r0, #1
 800c6b0:	d100      	bne.n	800c6b4 <_printf_float+0x394>
 800c6b2:	e693      	b.n	800c3dc <_printf_float+0xbc>
 800c6b4:	3501      	adds	r5, #1
 800c6b6:	e7ea      	b.n	800c68e <_printf_float+0x36e>
 800c6b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6ba:	002a      	movs	r2, r5
 800c6bc:	0038      	movs	r0, r7
 800c6be:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c6c0:	47b0      	blx	r6
 800c6c2:	1c43      	adds	r3, r0, #1
 800c6c4:	d1bb      	bne.n	800c63e <_printf_float+0x31e>
 800c6c6:	e689      	b.n	800c3dc <_printf_float+0xbc>
 800c6c8:	0022      	movs	r2, r4
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	0038      	movs	r0, r7
 800c6ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c6d0:	321a      	adds	r2, #26
 800c6d2:	47b0      	blx	r6
 800c6d4:	1c43      	adds	r3, r0, #1
 800c6d6:	d100      	bne.n	800c6da <_printf_float+0x3ba>
 800c6d8:	e680      	b.n	800c3dc <_printf_float+0xbc>
 800c6da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6dc:	3301      	adds	r3, #1
 800c6de:	930d      	str	r3, [sp, #52]	; 0x34
 800c6e0:	e7b3      	b.n	800c64a <_printf_float+0x32a>
 800c6e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6e4:	0038      	movs	r0, r7
 800c6e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c6ea:	47b0      	blx	r6
 800c6ec:	1c43      	adds	r3, r0, #1
 800c6ee:	d1bd      	bne.n	800c66c <_printf_float+0x34c>
 800c6f0:	e674      	b.n	800c3dc <_printf_float+0xbc>
 800c6f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6f4:	0038      	movs	r0, r7
 800c6f6:	18ea      	adds	r2, r5, r3
 800c6f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c6fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6fc:	47b0      	blx	r6
 800c6fe:	1c43      	adds	r3, r0, #1
 800c700:	d1c0      	bne.n	800c684 <_printf_float+0x364>
 800c702:	e66b      	b.n	800c3dc <_printf_float+0xbc>
 800c704:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c706:	2b01      	cmp	r3, #1
 800c708:	dc02      	bgt.n	800c710 <_printf_float+0x3f0>
 800c70a:	2301      	movs	r3, #1
 800c70c:	421a      	tst	r2, r3
 800c70e:	d034      	beq.n	800c77a <_printf_float+0x45a>
 800c710:	2301      	movs	r3, #1
 800c712:	002a      	movs	r2, r5
 800c714:	0038      	movs	r0, r7
 800c716:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c718:	47b0      	blx	r6
 800c71a:	1c43      	adds	r3, r0, #1
 800c71c:	d100      	bne.n	800c720 <_printf_float+0x400>
 800c71e:	e65d      	b.n	800c3dc <_printf_float+0xbc>
 800c720:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c722:	0038      	movs	r0, r7
 800c724:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c726:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c728:	47b0      	blx	r6
 800c72a:	1c43      	adds	r3, r0, #1
 800c72c:	d100      	bne.n	800c730 <_printf_float+0x410>
 800c72e:	e655      	b.n	800c3dc <_printf_float+0xbc>
 800c730:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800c732:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800c734:	2200      	movs	r2, #0
 800c736:	2300      	movs	r3, #0
 800c738:	f7f3 fe88 	bl	800044c <__aeabi_dcmpeq>
 800c73c:	2800      	cmp	r0, #0
 800c73e:	d11a      	bne.n	800c776 <_printf_float+0x456>
 800c740:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c742:	1c6a      	adds	r2, r5, #1
 800c744:	3b01      	subs	r3, #1
 800c746:	0038      	movs	r0, r7
 800c748:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c74a:	47b0      	blx	r6
 800c74c:	1c43      	adds	r3, r0, #1
 800c74e:	d10e      	bne.n	800c76e <_printf_float+0x44e>
 800c750:	e644      	b.n	800c3dc <_printf_float+0xbc>
 800c752:	0022      	movs	r2, r4
 800c754:	2301      	movs	r3, #1
 800c756:	0038      	movs	r0, r7
 800c758:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c75a:	321a      	adds	r2, #26
 800c75c:	47b0      	blx	r6
 800c75e:	1c43      	adds	r3, r0, #1
 800c760:	d100      	bne.n	800c764 <_printf_float+0x444>
 800c762:	e63b      	b.n	800c3dc <_printf_float+0xbc>
 800c764:	3501      	adds	r5, #1
 800c766:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c768:	3b01      	subs	r3, #1
 800c76a:	42ab      	cmp	r3, r5
 800c76c:	dcf1      	bgt.n	800c752 <_printf_float+0x432>
 800c76e:	0022      	movs	r2, r4
 800c770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c772:	3250      	adds	r2, #80	; 0x50
 800c774:	e6da      	b.n	800c52c <_printf_float+0x20c>
 800c776:	2500      	movs	r5, #0
 800c778:	e7f5      	b.n	800c766 <_printf_float+0x446>
 800c77a:	002a      	movs	r2, r5
 800c77c:	e7e3      	b.n	800c746 <_printf_float+0x426>
 800c77e:	0022      	movs	r2, r4
 800c780:	2301      	movs	r3, #1
 800c782:	0038      	movs	r0, r7
 800c784:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c786:	3219      	adds	r2, #25
 800c788:	47b0      	blx	r6
 800c78a:	1c43      	adds	r3, r0, #1
 800c78c:	d100      	bne.n	800c790 <_printf_float+0x470>
 800c78e:	e625      	b.n	800c3dc <_printf_float+0xbc>
 800c790:	3501      	adds	r5, #1
 800c792:	68e3      	ldr	r3, [r4, #12]
 800c794:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c796:	1a9b      	subs	r3, r3, r2
 800c798:	42ab      	cmp	r3, r5
 800c79a:	dcf0      	bgt.n	800c77e <_printf_float+0x45e>
 800c79c:	e6f8      	b.n	800c590 <_printf_float+0x270>
 800c79e:	2500      	movs	r5, #0
 800c7a0:	e7f7      	b.n	800c792 <_printf_float+0x472>
 800c7a2:	46c0      	nop			; (mov r8, r8)

0800c7a4 <_printf_common>:
 800c7a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7a6:	0015      	movs	r5, r2
 800c7a8:	9301      	str	r3, [sp, #4]
 800c7aa:	688a      	ldr	r2, [r1, #8]
 800c7ac:	690b      	ldr	r3, [r1, #16]
 800c7ae:	000c      	movs	r4, r1
 800c7b0:	9000      	str	r0, [sp, #0]
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	da00      	bge.n	800c7b8 <_printf_common+0x14>
 800c7b6:	0013      	movs	r3, r2
 800c7b8:	0022      	movs	r2, r4
 800c7ba:	602b      	str	r3, [r5, #0]
 800c7bc:	3243      	adds	r2, #67	; 0x43
 800c7be:	7812      	ldrb	r2, [r2, #0]
 800c7c0:	2a00      	cmp	r2, #0
 800c7c2:	d001      	beq.n	800c7c8 <_printf_common+0x24>
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	602b      	str	r3, [r5, #0]
 800c7c8:	6823      	ldr	r3, [r4, #0]
 800c7ca:	069b      	lsls	r3, r3, #26
 800c7cc:	d502      	bpl.n	800c7d4 <_printf_common+0x30>
 800c7ce:	682b      	ldr	r3, [r5, #0]
 800c7d0:	3302      	adds	r3, #2
 800c7d2:	602b      	str	r3, [r5, #0]
 800c7d4:	6822      	ldr	r2, [r4, #0]
 800c7d6:	2306      	movs	r3, #6
 800c7d8:	0017      	movs	r7, r2
 800c7da:	401f      	ands	r7, r3
 800c7dc:	421a      	tst	r2, r3
 800c7de:	d027      	beq.n	800c830 <_printf_common+0x8c>
 800c7e0:	0023      	movs	r3, r4
 800c7e2:	3343      	adds	r3, #67	; 0x43
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	1e5a      	subs	r2, r3, #1
 800c7e8:	4193      	sbcs	r3, r2
 800c7ea:	6822      	ldr	r2, [r4, #0]
 800c7ec:	0692      	lsls	r2, r2, #26
 800c7ee:	d430      	bmi.n	800c852 <_printf_common+0xae>
 800c7f0:	0022      	movs	r2, r4
 800c7f2:	9901      	ldr	r1, [sp, #4]
 800c7f4:	9800      	ldr	r0, [sp, #0]
 800c7f6:	9e08      	ldr	r6, [sp, #32]
 800c7f8:	3243      	adds	r2, #67	; 0x43
 800c7fa:	47b0      	blx	r6
 800c7fc:	1c43      	adds	r3, r0, #1
 800c7fe:	d025      	beq.n	800c84c <_printf_common+0xa8>
 800c800:	2306      	movs	r3, #6
 800c802:	6820      	ldr	r0, [r4, #0]
 800c804:	682a      	ldr	r2, [r5, #0]
 800c806:	68e1      	ldr	r1, [r4, #12]
 800c808:	2500      	movs	r5, #0
 800c80a:	4003      	ands	r3, r0
 800c80c:	2b04      	cmp	r3, #4
 800c80e:	d103      	bne.n	800c818 <_printf_common+0x74>
 800c810:	1a8d      	subs	r5, r1, r2
 800c812:	43eb      	mvns	r3, r5
 800c814:	17db      	asrs	r3, r3, #31
 800c816:	401d      	ands	r5, r3
 800c818:	68a3      	ldr	r3, [r4, #8]
 800c81a:	6922      	ldr	r2, [r4, #16]
 800c81c:	4293      	cmp	r3, r2
 800c81e:	dd01      	ble.n	800c824 <_printf_common+0x80>
 800c820:	1a9b      	subs	r3, r3, r2
 800c822:	18ed      	adds	r5, r5, r3
 800c824:	2700      	movs	r7, #0
 800c826:	42bd      	cmp	r5, r7
 800c828:	d120      	bne.n	800c86c <_printf_common+0xc8>
 800c82a:	2000      	movs	r0, #0
 800c82c:	e010      	b.n	800c850 <_printf_common+0xac>
 800c82e:	3701      	adds	r7, #1
 800c830:	68e3      	ldr	r3, [r4, #12]
 800c832:	682a      	ldr	r2, [r5, #0]
 800c834:	1a9b      	subs	r3, r3, r2
 800c836:	42bb      	cmp	r3, r7
 800c838:	ddd2      	ble.n	800c7e0 <_printf_common+0x3c>
 800c83a:	0022      	movs	r2, r4
 800c83c:	2301      	movs	r3, #1
 800c83e:	9901      	ldr	r1, [sp, #4]
 800c840:	9800      	ldr	r0, [sp, #0]
 800c842:	9e08      	ldr	r6, [sp, #32]
 800c844:	3219      	adds	r2, #25
 800c846:	47b0      	blx	r6
 800c848:	1c43      	adds	r3, r0, #1
 800c84a:	d1f0      	bne.n	800c82e <_printf_common+0x8a>
 800c84c:	2001      	movs	r0, #1
 800c84e:	4240      	negs	r0, r0
 800c850:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c852:	2030      	movs	r0, #48	; 0x30
 800c854:	18e1      	adds	r1, r4, r3
 800c856:	3143      	adds	r1, #67	; 0x43
 800c858:	7008      	strb	r0, [r1, #0]
 800c85a:	0021      	movs	r1, r4
 800c85c:	1c5a      	adds	r2, r3, #1
 800c85e:	3145      	adds	r1, #69	; 0x45
 800c860:	7809      	ldrb	r1, [r1, #0]
 800c862:	18a2      	adds	r2, r4, r2
 800c864:	3243      	adds	r2, #67	; 0x43
 800c866:	3302      	adds	r3, #2
 800c868:	7011      	strb	r1, [r2, #0]
 800c86a:	e7c1      	b.n	800c7f0 <_printf_common+0x4c>
 800c86c:	0022      	movs	r2, r4
 800c86e:	2301      	movs	r3, #1
 800c870:	9901      	ldr	r1, [sp, #4]
 800c872:	9800      	ldr	r0, [sp, #0]
 800c874:	9e08      	ldr	r6, [sp, #32]
 800c876:	321a      	adds	r2, #26
 800c878:	47b0      	blx	r6
 800c87a:	1c43      	adds	r3, r0, #1
 800c87c:	d0e6      	beq.n	800c84c <_printf_common+0xa8>
 800c87e:	3701      	adds	r7, #1
 800c880:	e7d1      	b.n	800c826 <_printf_common+0x82>
	...

0800c884 <_printf_i>:
 800c884:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c886:	b08b      	sub	sp, #44	; 0x2c
 800c888:	9206      	str	r2, [sp, #24]
 800c88a:	000a      	movs	r2, r1
 800c88c:	3243      	adds	r2, #67	; 0x43
 800c88e:	9307      	str	r3, [sp, #28]
 800c890:	9005      	str	r0, [sp, #20]
 800c892:	9204      	str	r2, [sp, #16]
 800c894:	7e0a      	ldrb	r2, [r1, #24]
 800c896:	000c      	movs	r4, r1
 800c898:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c89a:	2a78      	cmp	r2, #120	; 0x78
 800c89c:	d807      	bhi.n	800c8ae <_printf_i+0x2a>
 800c89e:	2a62      	cmp	r2, #98	; 0x62
 800c8a0:	d809      	bhi.n	800c8b6 <_printf_i+0x32>
 800c8a2:	2a00      	cmp	r2, #0
 800c8a4:	d100      	bne.n	800c8a8 <_printf_i+0x24>
 800c8a6:	e0c1      	b.n	800ca2c <_printf_i+0x1a8>
 800c8a8:	2a58      	cmp	r2, #88	; 0x58
 800c8aa:	d100      	bne.n	800c8ae <_printf_i+0x2a>
 800c8ac:	e08c      	b.n	800c9c8 <_printf_i+0x144>
 800c8ae:	0026      	movs	r6, r4
 800c8b0:	3642      	adds	r6, #66	; 0x42
 800c8b2:	7032      	strb	r2, [r6, #0]
 800c8b4:	e022      	b.n	800c8fc <_printf_i+0x78>
 800c8b6:	0010      	movs	r0, r2
 800c8b8:	3863      	subs	r0, #99	; 0x63
 800c8ba:	2815      	cmp	r0, #21
 800c8bc:	d8f7      	bhi.n	800c8ae <_printf_i+0x2a>
 800c8be:	f7f3 fc35 	bl	800012c <__gnu_thumb1_case_shi>
 800c8c2:	0016      	.short	0x0016
 800c8c4:	fff6001f 	.word	0xfff6001f
 800c8c8:	fff6fff6 	.word	0xfff6fff6
 800c8cc:	001ffff6 	.word	0x001ffff6
 800c8d0:	fff6fff6 	.word	0xfff6fff6
 800c8d4:	fff6fff6 	.word	0xfff6fff6
 800c8d8:	003600a8 	.word	0x003600a8
 800c8dc:	fff6009a 	.word	0xfff6009a
 800c8e0:	00b9fff6 	.word	0x00b9fff6
 800c8e4:	0036fff6 	.word	0x0036fff6
 800c8e8:	fff6fff6 	.word	0xfff6fff6
 800c8ec:	009e      	.short	0x009e
 800c8ee:	0026      	movs	r6, r4
 800c8f0:	681a      	ldr	r2, [r3, #0]
 800c8f2:	3642      	adds	r6, #66	; 0x42
 800c8f4:	1d11      	adds	r1, r2, #4
 800c8f6:	6019      	str	r1, [r3, #0]
 800c8f8:	6813      	ldr	r3, [r2, #0]
 800c8fa:	7033      	strb	r3, [r6, #0]
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	e0a7      	b.n	800ca50 <_printf_i+0x1cc>
 800c900:	6808      	ldr	r0, [r1, #0]
 800c902:	6819      	ldr	r1, [r3, #0]
 800c904:	1d0a      	adds	r2, r1, #4
 800c906:	0605      	lsls	r5, r0, #24
 800c908:	d50b      	bpl.n	800c922 <_printf_i+0x9e>
 800c90a:	680d      	ldr	r5, [r1, #0]
 800c90c:	601a      	str	r2, [r3, #0]
 800c90e:	2d00      	cmp	r5, #0
 800c910:	da03      	bge.n	800c91a <_printf_i+0x96>
 800c912:	232d      	movs	r3, #45	; 0x2d
 800c914:	9a04      	ldr	r2, [sp, #16]
 800c916:	426d      	negs	r5, r5
 800c918:	7013      	strb	r3, [r2, #0]
 800c91a:	4b61      	ldr	r3, [pc, #388]	; (800caa0 <_printf_i+0x21c>)
 800c91c:	270a      	movs	r7, #10
 800c91e:	9303      	str	r3, [sp, #12]
 800c920:	e01b      	b.n	800c95a <_printf_i+0xd6>
 800c922:	680d      	ldr	r5, [r1, #0]
 800c924:	601a      	str	r2, [r3, #0]
 800c926:	0641      	lsls	r1, r0, #25
 800c928:	d5f1      	bpl.n	800c90e <_printf_i+0x8a>
 800c92a:	b22d      	sxth	r5, r5
 800c92c:	e7ef      	b.n	800c90e <_printf_i+0x8a>
 800c92e:	680d      	ldr	r5, [r1, #0]
 800c930:	6819      	ldr	r1, [r3, #0]
 800c932:	1d08      	adds	r0, r1, #4
 800c934:	6018      	str	r0, [r3, #0]
 800c936:	062e      	lsls	r6, r5, #24
 800c938:	d501      	bpl.n	800c93e <_printf_i+0xba>
 800c93a:	680d      	ldr	r5, [r1, #0]
 800c93c:	e003      	b.n	800c946 <_printf_i+0xc2>
 800c93e:	066d      	lsls	r5, r5, #25
 800c940:	d5fb      	bpl.n	800c93a <_printf_i+0xb6>
 800c942:	680d      	ldr	r5, [r1, #0]
 800c944:	b2ad      	uxth	r5, r5
 800c946:	4b56      	ldr	r3, [pc, #344]	; (800caa0 <_printf_i+0x21c>)
 800c948:	2708      	movs	r7, #8
 800c94a:	9303      	str	r3, [sp, #12]
 800c94c:	2a6f      	cmp	r2, #111	; 0x6f
 800c94e:	d000      	beq.n	800c952 <_printf_i+0xce>
 800c950:	3702      	adds	r7, #2
 800c952:	0023      	movs	r3, r4
 800c954:	2200      	movs	r2, #0
 800c956:	3343      	adds	r3, #67	; 0x43
 800c958:	701a      	strb	r2, [r3, #0]
 800c95a:	6863      	ldr	r3, [r4, #4]
 800c95c:	60a3      	str	r3, [r4, #8]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	db03      	blt.n	800c96a <_printf_i+0xe6>
 800c962:	2204      	movs	r2, #4
 800c964:	6821      	ldr	r1, [r4, #0]
 800c966:	4391      	bics	r1, r2
 800c968:	6021      	str	r1, [r4, #0]
 800c96a:	2d00      	cmp	r5, #0
 800c96c:	d102      	bne.n	800c974 <_printf_i+0xf0>
 800c96e:	9e04      	ldr	r6, [sp, #16]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d00c      	beq.n	800c98e <_printf_i+0x10a>
 800c974:	9e04      	ldr	r6, [sp, #16]
 800c976:	0028      	movs	r0, r5
 800c978:	0039      	movs	r1, r7
 800c97a:	f7f3 fc67 	bl	800024c <__aeabi_uidivmod>
 800c97e:	9b03      	ldr	r3, [sp, #12]
 800c980:	3e01      	subs	r6, #1
 800c982:	5c5b      	ldrb	r3, [r3, r1]
 800c984:	7033      	strb	r3, [r6, #0]
 800c986:	002b      	movs	r3, r5
 800c988:	0005      	movs	r5, r0
 800c98a:	429f      	cmp	r7, r3
 800c98c:	d9f3      	bls.n	800c976 <_printf_i+0xf2>
 800c98e:	2f08      	cmp	r7, #8
 800c990:	d109      	bne.n	800c9a6 <_printf_i+0x122>
 800c992:	6823      	ldr	r3, [r4, #0]
 800c994:	07db      	lsls	r3, r3, #31
 800c996:	d506      	bpl.n	800c9a6 <_printf_i+0x122>
 800c998:	6863      	ldr	r3, [r4, #4]
 800c99a:	6922      	ldr	r2, [r4, #16]
 800c99c:	4293      	cmp	r3, r2
 800c99e:	dc02      	bgt.n	800c9a6 <_printf_i+0x122>
 800c9a0:	2330      	movs	r3, #48	; 0x30
 800c9a2:	3e01      	subs	r6, #1
 800c9a4:	7033      	strb	r3, [r6, #0]
 800c9a6:	9b04      	ldr	r3, [sp, #16]
 800c9a8:	1b9b      	subs	r3, r3, r6
 800c9aa:	6123      	str	r3, [r4, #16]
 800c9ac:	9b07      	ldr	r3, [sp, #28]
 800c9ae:	0021      	movs	r1, r4
 800c9b0:	9300      	str	r3, [sp, #0]
 800c9b2:	9805      	ldr	r0, [sp, #20]
 800c9b4:	9b06      	ldr	r3, [sp, #24]
 800c9b6:	aa09      	add	r2, sp, #36	; 0x24
 800c9b8:	f7ff fef4 	bl	800c7a4 <_printf_common>
 800c9bc:	1c43      	adds	r3, r0, #1
 800c9be:	d14c      	bne.n	800ca5a <_printf_i+0x1d6>
 800c9c0:	2001      	movs	r0, #1
 800c9c2:	4240      	negs	r0, r0
 800c9c4:	b00b      	add	sp, #44	; 0x2c
 800c9c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9c8:	3145      	adds	r1, #69	; 0x45
 800c9ca:	700a      	strb	r2, [r1, #0]
 800c9cc:	4a34      	ldr	r2, [pc, #208]	; (800caa0 <_printf_i+0x21c>)
 800c9ce:	9203      	str	r2, [sp, #12]
 800c9d0:	681a      	ldr	r2, [r3, #0]
 800c9d2:	6821      	ldr	r1, [r4, #0]
 800c9d4:	ca20      	ldmia	r2!, {r5}
 800c9d6:	601a      	str	r2, [r3, #0]
 800c9d8:	0608      	lsls	r0, r1, #24
 800c9da:	d516      	bpl.n	800ca0a <_printf_i+0x186>
 800c9dc:	07cb      	lsls	r3, r1, #31
 800c9de:	d502      	bpl.n	800c9e6 <_printf_i+0x162>
 800c9e0:	2320      	movs	r3, #32
 800c9e2:	4319      	orrs	r1, r3
 800c9e4:	6021      	str	r1, [r4, #0]
 800c9e6:	2710      	movs	r7, #16
 800c9e8:	2d00      	cmp	r5, #0
 800c9ea:	d1b2      	bne.n	800c952 <_printf_i+0xce>
 800c9ec:	2320      	movs	r3, #32
 800c9ee:	6822      	ldr	r2, [r4, #0]
 800c9f0:	439a      	bics	r2, r3
 800c9f2:	6022      	str	r2, [r4, #0]
 800c9f4:	e7ad      	b.n	800c952 <_printf_i+0xce>
 800c9f6:	2220      	movs	r2, #32
 800c9f8:	6809      	ldr	r1, [r1, #0]
 800c9fa:	430a      	orrs	r2, r1
 800c9fc:	6022      	str	r2, [r4, #0]
 800c9fe:	0022      	movs	r2, r4
 800ca00:	2178      	movs	r1, #120	; 0x78
 800ca02:	3245      	adds	r2, #69	; 0x45
 800ca04:	7011      	strb	r1, [r2, #0]
 800ca06:	4a27      	ldr	r2, [pc, #156]	; (800caa4 <_printf_i+0x220>)
 800ca08:	e7e1      	b.n	800c9ce <_printf_i+0x14a>
 800ca0a:	0648      	lsls	r0, r1, #25
 800ca0c:	d5e6      	bpl.n	800c9dc <_printf_i+0x158>
 800ca0e:	b2ad      	uxth	r5, r5
 800ca10:	e7e4      	b.n	800c9dc <_printf_i+0x158>
 800ca12:	681a      	ldr	r2, [r3, #0]
 800ca14:	680d      	ldr	r5, [r1, #0]
 800ca16:	1d10      	adds	r0, r2, #4
 800ca18:	6949      	ldr	r1, [r1, #20]
 800ca1a:	6018      	str	r0, [r3, #0]
 800ca1c:	6813      	ldr	r3, [r2, #0]
 800ca1e:	062e      	lsls	r6, r5, #24
 800ca20:	d501      	bpl.n	800ca26 <_printf_i+0x1a2>
 800ca22:	6019      	str	r1, [r3, #0]
 800ca24:	e002      	b.n	800ca2c <_printf_i+0x1a8>
 800ca26:	066d      	lsls	r5, r5, #25
 800ca28:	d5fb      	bpl.n	800ca22 <_printf_i+0x19e>
 800ca2a:	8019      	strh	r1, [r3, #0]
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	9e04      	ldr	r6, [sp, #16]
 800ca30:	6123      	str	r3, [r4, #16]
 800ca32:	e7bb      	b.n	800c9ac <_printf_i+0x128>
 800ca34:	681a      	ldr	r2, [r3, #0]
 800ca36:	1d11      	adds	r1, r2, #4
 800ca38:	6019      	str	r1, [r3, #0]
 800ca3a:	6816      	ldr	r6, [r2, #0]
 800ca3c:	2100      	movs	r1, #0
 800ca3e:	0030      	movs	r0, r6
 800ca40:	6862      	ldr	r2, [r4, #4]
 800ca42:	f000 ff17 	bl	800d874 <memchr>
 800ca46:	2800      	cmp	r0, #0
 800ca48:	d001      	beq.n	800ca4e <_printf_i+0x1ca>
 800ca4a:	1b80      	subs	r0, r0, r6
 800ca4c:	6060      	str	r0, [r4, #4]
 800ca4e:	6863      	ldr	r3, [r4, #4]
 800ca50:	6123      	str	r3, [r4, #16]
 800ca52:	2300      	movs	r3, #0
 800ca54:	9a04      	ldr	r2, [sp, #16]
 800ca56:	7013      	strb	r3, [r2, #0]
 800ca58:	e7a8      	b.n	800c9ac <_printf_i+0x128>
 800ca5a:	6923      	ldr	r3, [r4, #16]
 800ca5c:	0032      	movs	r2, r6
 800ca5e:	9906      	ldr	r1, [sp, #24]
 800ca60:	9805      	ldr	r0, [sp, #20]
 800ca62:	9d07      	ldr	r5, [sp, #28]
 800ca64:	47a8      	blx	r5
 800ca66:	1c43      	adds	r3, r0, #1
 800ca68:	d0aa      	beq.n	800c9c0 <_printf_i+0x13c>
 800ca6a:	6823      	ldr	r3, [r4, #0]
 800ca6c:	079b      	lsls	r3, r3, #30
 800ca6e:	d415      	bmi.n	800ca9c <_printf_i+0x218>
 800ca70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca72:	68e0      	ldr	r0, [r4, #12]
 800ca74:	4298      	cmp	r0, r3
 800ca76:	daa5      	bge.n	800c9c4 <_printf_i+0x140>
 800ca78:	0018      	movs	r0, r3
 800ca7a:	e7a3      	b.n	800c9c4 <_printf_i+0x140>
 800ca7c:	0022      	movs	r2, r4
 800ca7e:	2301      	movs	r3, #1
 800ca80:	9906      	ldr	r1, [sp, #24]
 800ca82:	9805      	ldr	r0, [sp, #20]
 800ca84:	9e07      	ldr	r6, [sp, #28]
 800ca86:	3219      	adds	r2, #25
 800ca88:	47b0      	blx	r6
 800ca8a:	1c43      	adds	r3, r0, #1
 800ca8c:	d098      	beq.n	800c9c0 <_printf_i+0x13c>
 800ca8e:	3501      	adds	r5, #1
 800ca90:	68e3      	ldr	r3, [r4, #12]
 800ca92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca94:	1a9b      	subs	r3, r3, r2
 800ca96:	42ab      	cmp	r3, r5
 800ca98:	dcf0      	bgt.n	800ca7c <_printf_i+0x1f8>
 800ca9a:	e7e9      	b.n	800ca70 <_printf_i+0x1ec>
 800ca9c:	2500      	movs	r5, #0
 800ca9e:	e7f7      	b.n	800ca90 <_printf_i+0x20c>
 800caa0:	0800f55a 	.word	0x0800f55a
 800caa4:	0800f56b 	.word	0x0800f56b

0800caa8 <siprintf>:
 800caa8:	b40e      	push	{r1, r2, r3}
 800caaa:	b500      	push	{lr}
 800caac:	490b      	ldr	r1, [pc, #44]	; (800cadc <siprintf+0x34>)
 800caae:	b09c      	sub	sp, #112	; 0x70
 800cab0:	ab1d      	add	r3, sp, #116	; 0x74
 800cab2:	9002      	str	r0, [sp, #8]
 800cab4:	9006      	str	r0, [sp, #24]
 800cab6:	9107      	str	r1, [sp, #28]
 800cab8:	9104      	str	r1, [sp, #16]
 800caba:	4809      	ldr	r0, [pc, #36]	; (800cae0 <siprintf+0x38>)
 800cabc:	4909      	ldr	r1, [pc, #36]	; (800cae4 <siprintf+0x3c>)
 800cabe:	cb04      	ldmia	r3!, {r2}
 800cac0:	9105      	str	r1, [sp, #20]
 800cac2:	6800      	ldr	r0, [r0, #0]
 800cac4:	a902      	add	r1, sp, #8
 800cac6:	9301      	str	r3, [sp, #4]
 800cac8:	f001 fbec 	bl	800e2a4 <_svfiprintf_r>
 800cacc:	2300      	movs	r3, #0
 800cace:	9a02      	ldr	r2, [sp, #8]
 800cad0:	7013      	strb	r3, [r2, #0]
 800cad2:	b01c      	add	sp, #112	; 0x70
 800cad4:	bc08      	pop	{r3}
 800cad6:	b003      	add	sp, #12
 800cad8:	4718      	bx	r3
 800cada:	46c0      	nop			; (mov r8, r8)
 800cadc:	7fffffff 	.word	0x7fffffff
 800cae0:	20000014 	.word	0x20000014
 800cae4:	ffff0208 	.word	0xffff0208

0800cae8 <strncmp>:
 800cae8:	b530      	push	{r4, r5, lr}
 800caea:	0005      	movs	r5, r0
 800caec:	1e10      	subs	r0, r2, #0
 800caee:	d008      	beq.n	800cb02 <strncmp+0x1a>
 800caf0:	2400      	movs	r4, #0
 800caf2:	3a01      	subs	r2, #1
 800caf4:	5d2b      	ldrb	r3, [r5, r4]
 800caf6:	5d08      	ldrb	r0, [r1, r4]
 800caf8:	4283      	cmp	r3, r0
 800cafa:	d101      	bne.n	800cb00 <strncmp+0x18>
 800cafc:	4294      	cmp	r4, r2
 800cafe:	d101      	bne.n	800cb04 <strncmp+0x1c>
 800cb00:	1a18      	subs	r0, r3, r0
 800cb02:	bd30      	pop	{r4, r5, pc}
 800cb04:	3401      	adds	r4, #1
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d1f4      	bne.n	800caf4 <strncmp+0xc>
 800cb0a:	e7f9      	b.n	800cb00 <strncmp+0x18>

0800cb0c <quorem>:
 800cb0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb0e:	0006      	movs	r6, r0
 800cb10:	690b      	ldr	r3, [r1, #16]
 800cb12:	6932      	ldr	r2, [r6, #16]
 800cb14:	b087      	sub	sp, #28
 800cb16:	2000      	movs	r0, #0
 800cb18:	9103      	str	r1, [sp, #12]
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	db65      	blt.n	800cbea <quorem+0xde>
 800cb1e:	3b01      	subs	r3, #1
 800cb20:	009c      	lsls	r4, r3, #2
 800cb22:	9300      	str	r3, [sp, #0]
 800cb24:	000b      	movs	r3, r1
 800cb26:	3314      	adds	r3, #20
 800cb28:	9305      	str	r3, [sp, #20]
 800cb2a:	191b      	adds	r3, r3, r4
 800cb2c:	9304      	str	r3, [sp, #16]
 800cb2e:	0033      	movs	r3, r6
 800cb30:	3314      	adds	r3, #20
 800cb32:	9302      	str	r3, [sp, #8]
 800cb34:	191c      	adds	r4, r3, r4
 800cb36:	9b04      	ldr	r3, [sp, #16]
 800cb38:	6827      	ldr	r7, [r4, #0]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	0038      	movs	r0, r7
 800cb3e:	1c5d      	adds	r5, r3, #1
 800cb40:	0029      	movs	r1, r5
 800cb42:	9301      	str	r3, [sp, #4]
 800cb44:	f7f3 fafc 	bl	8000140 <__udivsi3>
 800cb48:	9001      	str	r0, [sp, #4]
 800cb4a:	42af      	cmp	r7, r5
 800cb4c:	d324      	bcc.n	800cb98 <quorem+0x8c>
 800cb4e:	2500      	movs	r5, #0
 800cb50:	46ac      	mov	ip, r5
 800cb52:	9802      	ldr	r0, [sp, #8]
 800cb54:	9f05      	ldr	r7, [sp, #20]
 800cb56:	cf08      	ldmia	r7!, {r3}
 800cb58:	9a01      	ldr	r2, [sp, #4]
 800cb5a:	b299      	uxth	r1, r3
 800cb5c:	4351      	muls	r1, r2
 800cb5e:	0c1b      	lsrs	r3, r3, #16
 800cb60:	4353      	muls	r3, r2
 800cb62:	1949      	adds	r1, r1, r5
 800cb64:	0c0a      	lsrs	r2, r1, #16
 800cb66:	189b      	adds	r3, r3, r2
 800cb68:	6802      	ldr	r2, [r0, #0]
 800cb6a:	b289      	uxth	r1, r1
 800cb6c:	b292      	uxth	r2, r2
 800cb6e:	4462      	add	r2, ip
 800cb70:	1a52      	subs	r2, r2, r1
 800cb72:	6801      	ldr	r1, [r0, #0]
 800cb74:	0c1d      	lsrs	r5, r3, #16
 800cb76:	0c09      	lsrs	r1, r1, #16
 800cb78:	b29b      	uxth	r3, r3
 800cb7a:	1acb      	subs	r3, r1, r3
 800cb7c:	1411      	asrs	r1, r2, #16
 800cb7e:	185b      	adds	r3, r3, r1
 800cb80:	1419      	asrs	r1, r3, #16
 800cb82:	b292      	uxth	r2, r2
 800cb84:	041b      	lsls	r3, r3, #16
 800cb86:	431a      	orrs	r2, r3
 800cb88:	9b04      	ldr	r3, [sp, #16]
 800cb8a:	468c      	mov	ip, r1
 800cb8c:	c004      	stmia	r0!, {r2}
 800cb8e:	42bb      	cmp	r3, r7
 800cb90:	d2e1      	bcs.n	800cb56 <quorem+0x4a>
 800cb92:	6823      	ldr	r3, [r4, #0]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d030      	beq.n	800cbfa <quorem+0xee>
 800cb98:	0030      	movs	r0, r6
 800cb9a:	9903      	ldr	r1, [sp, #12]
 800cb9c:	f001 f8fa 	bl	800dd94 <__mcmp>
 800cba0:	2800      	cmp	r0, #0
 800cba2:	db21      	blt.n	800cbe8 <quorem+0xdc>
 800cba4:	0030      	movs	r0, r6
 800cba6:	2400      	movs	r4, #0
 800cba8:	9b01      	ldr	r3, [sp, #4]
 800cbaa:	9903      	ldr	r1, [sp, #12]
 800cbac:	3301      	adds	r3, #1
 800cbae:	9301      	str	r3, [sp, #4]
 800cbb0:	3014      	adds	r0, #20
 800cbb2:	3114      	adds	r1, #20
 800cbb4:	6803      	ldr	r3, [r0, #0]
 800cbb6:	c920      	ldmia	r1!, {r5}
 800cbb8:	b29a      	uxth	r2, r3
 800cbba:	1914      	adds	r4, r2, r4
 800cbbc:	b2aa      	uxth	r2, r5
 800cbbe:	1aa2      	subs	r2, r4, r2
 800cbc0:	0c1b      	lsrs	r3, r3, #16
 800cbc2:	0c2d      	lsrs	r5, r5, #16
 800cbc4:	1414      	asrs	r4, r2, #16
 800cbc6:	1b5b      	subs	r3, r3, r5
 800cbc8:	191b      	adds	r3, r3, r4
 800cbca:	141c      	asrs	r4, r3, #16
 800cbcc:	b292      	uxth	r2, r2
 800cbce:	041b      	lsls	r3, r3, #16
 800cbd0:	4313      	orrs	r3, r2
 800cbd2:	c008      	stmia	r0!, {r3}
 800cbd4:	9b04      	ldr	r3, [sp, #16]
 800cbd6:	428b      	cmp	r3, r1
 800cbd8:	d2ec      	bcs.n	800cbb4 <quorem+0xa8>
 800cbda:	9b00      	ldr	r3, [sp, #0]
 800cbdc:	9a02      	ldr	r2, [sp, #8]
 800cbde:	009b      	lsls	r3, r3, #2
 800cbe0:	18d3      	adds	r3, r2, r3
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	2a00      	cmp	r2, #0
 800cbe6:	d015      	beq.n	800cc14 <quorem+0x108>
 800cbe8:	9801      	ldr	r0, [sp, #4]
 800cbea:	b007      	add	sp, #28
 800cbec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbee:	6823      	ldr	r3, [r4, #0]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d106      	bne.n	800cc02 <quorem+0xf6>
 800cbf4:	9b00      	ldr	r3, [sp, #0]
 800cbf6:	3b01      	subs	r3, #1
 800cbf8:	9300      	str	r3, [sp, #0]
 800cbfa:	9b02      	ldr	r3, [sp, #8]
 800cbfc:	3c04      	subs	r4, #4
 800cbfe:	42a3      	cmp	r3, r4
 800cc00:	d3f5      	bcc.n	800cbee <quorem+0xe2>
 800cc02:	9b00      	ldr	r3, [sp, #0]
 800cc04:	6133      	str	r3, [r6, #16]
 800cc06:	e7c7      	b.n	800cb98 <quorem+0x8c>
 800cc08:	681a      	ldr	r2, [r3, #0]
 800cc0a:	2a00      	cmp	r2, #0
 800cc0c:	d106      	bne.n	800cc1c <quorem+0x110>
 800cc0e:	9a00      	ldr	r2, [sp, #0]
 800cc10:	3a01      	subs	r2, #1
 800cc12:	9200      	str	r2, [sp, #0]
 800cc14:	9a02      	ldr	r2, [sp, #8]
 800cc16:	3b04      	subs	r3, #4
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d3f5      	bcc.n	800cc08 <quorem+0xfc>
 800cc1c:	9b00      	ldr	r3, [sp, #0]
 800cc1e:	6133      	str	r3, [r6, #16]
 800cc20:	e7e2      	b.n	800cbe8 <quorem+0xdc>
	...

0800cc24 <_dtoa_r>:
 800cc24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc26:	b09d      	sub	sp, #116	; 0x74
 800cc28:	9202      	str	r2, [sp, #8]
 800cc2a:	9303      	str	r3, [sp, #12]
 800cc2c:	9b02      	ldr	r3, [sp, #8]
 800cc2e:	9c03      	ldr	r4, [sp, #12]
 800cc30:	9308      	str	r3, [sp, #32]
 800cc32:	9409      	str	r4, [sp, #36]	; 0x24
 800cc34:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800cc36:	0007      	movs	r7, r0
 800cc38:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800cc3a:	2c00      	cmp	r4, #0
 800cc3c:	d10e      	bne.n	800cc5c <_dtoa_r+0x38>
 800cc3e:	2010      	movs	r0, #16
 800cc40:	f000 fe0e 	bl	800d860 <malloc>
 800cc44:	1e02      	subs	r2, r0, #0
 800cc46:	6278      	str	r0, [r7, #36]	; 0x24
 800cc48:	d104      	bne.n	800cc54 <_dtoa_r+0x30>
 800cc4a:	21ea      	movs	r1, #234	; 0xea
 800cc4c:	4bc7      	ldr	r3, [pc, #796]	; (800cf6c <_dtoa_r+0x348>)
 800cc4e:	48c8      	ldr	r0, [pc, #800]	; (800cf70 <_dtoa_r+0x34c>)
 800cc50:	f001 fc3a 	bl	800e4c8 <__assert_func>
 800cc54:	6044      	str	r4, [r0, #4]
 800cc56:	6084      	str	r4, [r0, #8]
 800cc58:	6004      	str	r4, [r0, #0]
 800cc5a:	60c4      	str	r4, [r0, #12]
 800cc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5e:	6819      	ldr	r1, [r3, #0]
 800cc60:	2900      	cmp	r1, #0
 800cc62:	d00a      	beq.n	800cc7a <_dtoa_r+0x56>
 800cc64:	685a      	ldr	r2, [r3, #4]
 800cc66:	2301      	movs	r3, #1
 800cc68:	4093      	lsls	r3, r2
 800cc6a:	604a      	str	r2, [r1, #4]
 800cc6c:	608b      	str	r3, [r1, #8]
 800cc6e:	0038      	movs	r0, r7
 800cc70:	f000 fe50 	bl	800d914 <_Bfree>
 800cc74:	2200      	movs	r2, #0
 800cc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc78:	601a      	str	r2, [r3, #0]
 800cc7a:	9b03      	ldr	r3, [sp, #12]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	da20      	bge.n	800ccc2 <_dtoa_r+0x9e>
 800cc80:	2301      	movs	r3, #1
 800cc82:	602b      	str	r3, [r5, #0]
 800cc84:	9b03      	ldr	r3, [sp, #12]
 800cc86:	005b      	lsls	r3, r3, #1
 800cc88:	085b      	lsrs	r3, r3, #1
 800cc8a:	9309      	str	r3, [sp, #36]	; 0x24
 800cc8c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800cc8e:	4bb9      	ldr	r3, [pc, #740]	; (800cf74 <_dtoa_r+0x350>)
 800cc90:	4ab8      	ldr	r2, [pc, #736]	; (800cf74 <_dtoa_r+0x350>)
 800cc92:	402b      	ands	r3, r5
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d117      	bne.n	800ccc8 <_dtoa_r+0xa4>
 800cc98:	4bb7      	ldr	r3, [pc, #732]	; (800cf78 <_dtoa_r+0x354>)
 800cc9a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cc9c:	0328      	lsls	r0, r5, #12
 800cc9e:	6013      	str	r3, [r2, #0]
 800cca0:	9b02      	ldr	r3, [sp, #8]
 800cca2:	0b00      	lsrs	r0, r0, #12
 800cca4:	4318      	orrs	r0, r3
 800cca6:	d101      	bne.n	800ccac <_dtoa_r+0x88>
 800cca8:	f000 fdbf 	bl	800d82a <_dtoa_r+0xc06>
 800ccac:	48b3      	ldr	r0, [pc, #716]	; (800cf7c <_dtoa_r+0x358>)
 800ccae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ccb0:	9006      	str	r0, [sp, #24]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d002      	beq.n	800ccbc <_dtoa_r+0x98>
 800ccb6:	4bb2      	ldr	r3, [pc, #712]	; (800cf80 <_dtoa_r+0x35c>)
 800ccb8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ccba:	6013      	str	r3, [r2, #0]
 800ccbc:	9806      	ldr	r0, [sp, #24]
 800ccbe:	b01d      	add	sp, #116	; 0x74
 800ccc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	602b      	str	r3, [r5, #0]
 800ccc6:	e7e1      	b.n	800cc8c <_dtoa_r+0x68>
 800ccc8:	9b08      	ldr	r3, [sp, #32]
 800ccca:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800cccc:	9312      	str	r3, [sp, #72]	; 0x48
 800ccce:	9413      	str	r4, [sp, #76]	; 0x4c
 800ccd0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ccd2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	f7f3 fbb8 	bl	800044c <__aeabi_dcmpeq>
 800ccdc:	1e04      	subs	r4, r0, #0
 800ccde:	d009      	beq.n	800ccf4 <_dtoa_r+0xd0>
 800cce0:	2301      	movs	r3, #1
 800cce2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800cce4:	6013      	str	r3, [r2, #0]
 800cce6:	4ba7      	ldr	r3, [pc, #668]	; (800cf84 <_dtoa_r+0x360>)
 800cce8:	9306      	str	r3, [sp, #24]
 800ccea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d0e5      	beq.n	800ccbc <_dtoa_r+0x98>
 800ccf0:	4ba5      	ldr	r3, [pc, #660]	; (800cf88 <_dtoa_r+0x364>)
 800ccf2:	e7e1      	b.n	800ccb8 <_dtoa_r+0x94>
 800ccf4:	ab1a      	add	r3, sp, #104	; 0x68
 800ccf6:	9301      	str	r3, [sp, #4]
 800ccf8:	ab1b      	add	r3, sp, #108	; 0x6c
 800ccfa:	9300      	str	r3, [sp, #0]
 800ccfc:	0038      	movs	r0, r7
 800ccfe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cd00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cd02:	f001 f8fb 	bl	800defc <__d2b>
 800cd06:	006e      	lsls	r6, r5, #1
 800cd08:	9005      	str	r0, [sp, #20]
 800cd0a:	0d76      	lsrs	r6, r6, #21
 800cd0c:	d100      	bne.n	800cd10 <_dtoa_r+0xec>
 800cd0e:	e07c      	b.n	800ce0a <_dtoa_r+0x1e6>
 800cd10:	9812      	ldr	r0, [sp, #72]	; 0x48
 800cd12:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800cd14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cd16:	4a9d      	ldr	r2, [pc, #628]	; (800cf8c <_dtoa_r+0x368>)
 800cd18:	031b      	lsls	r3, r3, #12
 800cd1a:	0b1b      	lsrs	r3, r3, #12
 800cd1c:	431a      	orrs	r2, r3
 800cd1e:	0011      	movs	r1, r2
 800cd20:	4b9b      	ldr	r3, [pc, #620]	; (800cf90 <_dtoa_r+0x36c>)
 800cd22:	9418      	str	r4, [sp, #96]	; 0x60
 800cd24:	18f6      	adds	r6, r6, r3
 800cd26:	2200      	movs	r2, #0
 800cd28:	4b9a      	ldr	r3, [pc, #616]	; (800cf94 <_dtoa_r+0x370>)
 800cd2a:	f7f5 fc81 	bl	8002630 <__aeabi_dsub>
 800cd2e:	4a9a      	ldr	r2, [pc, #616]	; (800cf98 <_dtoa_r+0x374>)
 800cd30:	4b9a      	ldr	r3, [pc, #616]	; (800cf9c <_dtoa_r+0x378>)
 800cd32:	f7f5 fa11 	bl	8002158 <__aeabi_dmul>
 800cd36:	4a9a      	ldr	r2, [pc, #616]	; (800cfa0 <_dtoa_r+0x37c>)
 800cd38:	4b9a      	ldr	r3, [pc, #616]	; (800cfa4 <_dtoa_r+0x380>)
 800cd3a:	f7f4 facf 	bl	80012dc <__aeabi_dadd>
 800cd3e:	0004      	movs	r4, r0
 800cd40:	0030      	movs	r0, r6
 800cd42:	000d      	movs	r5, r1
 800cd44:	f7f6 f85a 	bl	8002dfc <__aeabi_i2d>
 800cd48:	4a97      	ldr	r2, [pc, #604]	; (800cfa8 <_dtoa_r+0x384>)
 800cd4a:	4b98      	ldr	r3, [pc, #608]	; (800cfac <_dtoa_r+0x388>)
 800cd4c:	f7f5 fa04 	bl	8002158 <__aeabi_dmul>
 800cd50:	0002      	movs	r2, r0
 800cd52:	000b      	movs	r3, r1
 800cd54:	0020      	movs	r0, r4
 800cd56:	0029      	movs	r1, r5
 800cd58:	f7f4 fac0 	bl	80012dc <__aeabi_dadd>
 800cd5c:	0004      	movs	r4, r0
 800cd5e:	000d      	movs	r5, r1
 800cd60:	f7f6 f816 	bl	8002d90 <__aeabi_d2iz>
 800cd64:	2200      	movs	r2, #0
 800cd66:	9002      	str	r0, [sp, #8]
 800cd68:	2300      	movs	r3, #0
 800cd6a:	0020      	movs	r0, r4
 800cd6c:	0029      	movs	r1, r5
 800cd6e:	f7f3 fb73 	bl	8000458 <__aeabi_dcmplt>
 800cd72:	2800      	cmp	r0, #0
 800cd74:	d00b      	beq.n	800cd8e <_dtoa_r+0x16a>
 800cd76:	9802      	ldr	r0, [sp, #8]
 800cd78:	f7f6 f840 	bl	8002dfc <__aeabi_i2d>
 800cd7c:	002b      	movs	r3, r5
 800cd7e:	0022      	movs	r2, r4
 800cd80:	f7f3 fb64 	bl	800044c <__aeabi_dcmpeq>
 800cd84:	4243      	negs	r3, r0
 800cd86:	4158      	adcs	r0, r3
 800cd88:	9b02      	ldr	r3, [sp, #8]
 800cd8a:	1a1b      	subs	r3, r3, r0
 800cd8c:	9302      	str	r3, [sp, #8]
 800cd8e:	2301      	movs	r3, #1
 800cd90:	9316      	str	r3, [sp, #88]	; 0x58
 800cd92:	9b02      	ldr	r3, [sp, #8]
 800cd94:	2b16      	cmp	r3, #22
 800cd96:	d80f      	bhi.n	800cdb8 <_dtoa_r+0x194>
 800cd98:	9812      	ldr	r0, [sp, #72]	; 0x48
 800cd9a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800cd9c:	00da      	lsls	r2, r3, #3
 800cd9e:	4b84      	ldr	r3, [pc, #528]	; (800cfb0 <_dtoa_r+0x38c>)
 800cda0:	189b      	adds	r3, r3, r2
 800cda2:	681a      	ldr	r2, [r3, #0]
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	f7f3 fb57 	bl	8000458 <__aeabi_dcmplt>
 800cdaa:	2800      	cmp	r0, #0
 800cdac:	d049      	beq.n	800ce42 <_dtoa_r+0x21e>
 800cdae:	9b02      	ldr	r3, [sp, #8]
 800cdb0:	3b01      	subs	r3, #1
 800cdb2:	9302      	str	r3, [sp, #8]
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	9316      	str	r3, [sp, #88]	; 0x58
 800cdb8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800cdba:	1b9e      	subs	r6, r3, r6
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	930a      	str	r3, [sp, #40]	; 0x28
 800cdc0:	0033      	movs	r3, r6
 800cdc2:	3b01      	subs	r3, #1
 800cdc4:	930d      	str	r3, [sp, #52]	; 0x34
 800cdc6:	d504      	bpl.n	800cdd2 <_dtoa_r+0x1ae>
 800cdc8:	2301      	movs	r3, #1
 800cdca:	1b9b      	subs	r3, r3, r6
 800cdcc:	930a      	str	r3, [sp, #40]	; 0x28
 800cdce:	2300      	movs	r3, #0
 800cdd0:	930d      	str	r3, [sp, #52]	; 0x34
 800cdd2:	9b02      	ldr	r3, [sp, #8]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	db36      	blt.n	800ce46 <_dtoa_r+0x222>
 800cdd8:	9a02      	ldr	r2, [sp, #8]
 800cdda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cddc:	4694      	mov	ip, r2
 800cdde:	4463      	add	r3, ip
 800cde0:	930d      	str	r3, [sp, #52]	; 0x34
 800cde2:	2300      	movs	r3, #0
 800cde4:	9215      	str	r2, [sp, #84]	; 0x54
 800cde6:	930e      	str	r3, [sp, #56]	; 0x38
 800cde8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cdea:	2401      	movs	r4, #1
 800cdec:	2b09      	cmp	r3, #9
 800cdee:	d864      	bhi.n	800ceba <_dtoa_r+0x296>
 800cdf0:	2b05      	cmp	r3, #5
 800cdf2:	dd02      	ble.n	800cdfa <_dtoa_r+0x1d6>
 800cdf4:	2400      	movs	r4, #0
 800cdf6:	3b04      	subs	r3, #4
 800cdf8:	9322      	str	r3, [sp, #136]	; 0x88
 800cdfa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cdfc:	1e98      	subs	r0, r3, #2
 800cdfe:	2803      	cmp	r0, #3
 800ce00:	d864      	bhi.n	800cecc <_dtoa_r+0x2a8>
 800ce02:	f7f3 f989 	bl	8000118 <__gnu_thumb1_case_uqi>
 800ce06:	3829      	.short	0x3829
 800ce08:	5836      	.short	0x5836
 800ce0a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ce0c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ce0e:	189e      	adds	r6, r3, r2
 800ce10:	4b68      	ldr	r3, [pc, #416]	; (800cfb4 <_dtoa_r+0x390>)
 800ce12:	18f2      	adds	r2, r6, r3
 800ce14:	2a20      	cmp	r2, #32
 800ce16:	dd0f      	ble.n	800ce38 <_dtoa_r+0x214>
 800ce18:	2340      	movs	r3, #64	; 0x40
 800ce1a:	1a9b      	subs	r3, r3, r2
 800ce1c:	409d      	lsls	r5, r3
 800ce1e:	4b66      	ldr	r3, [pc, #408]	; (800cfb8 <_dtoa_r+0x394>)
 800ce20:	9802      	ldr	r0, [sp, #8]
 800ce22:	18f3      	adds	r3, r6, r3
 800ce24:	40d8      	lsrs	r0, r3
 800ce26:	4328      	orrs	r0, r5
 800ce28:	f7f6 f818 	bl	8002e5c <__aeabi_ui2d>
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	4c63      	ldr	r4, [pc, #396]	; (800cfbc <_dtoa_r+0x398>)
 800ce30:	3e01      	subs	r6, #1
 800ce32:	1909      	adds	r1, r1, r4
 800ce34:	9318      	str	r3, [sp, #96]	; 0x60
 800ce36:	e776      	b.n	800cd26 <_dtoa_r+0x102>
 800ce38:	2320      	movs	r3, #32
 800ce3a:	9802      	ldr	r0, [sp, #8]
 800ce3c:	1a9b      	subs	r3, r3, r2
 800ce3e:	4098      	lsls	r0, r3
 800ce40:	e7f2      	b.n	800ce28 <_dtoa_r+0x204>
 800ce42:	9016      	str	r0, [sp, #88]	; 0x58
 800ce44:	e7b8      	b.n	800cdb8 <_dtoa_r+0x194>
 800ce46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce48:	9a02      	ldr	r2, [sp, #8]
 800ce4a:	1a9b      	subs	r3, r3, r2
 800ce4c:	930a      	str	r3, [sp, #40]	; 0x28
 800ce4e:	4253      	negs	r3, r2
 800ce50:	930e      	str	r3, [sp, #56]	; 0x38
 800ce52:	2300      	movs	r3, #0
 800ce54:	9315      	str	r3, [sp, #84]	; 0x54
 800ce56:	e7c7      	b.n	800cde8 <_dtoa_r+0x1c4>
 800ce58:	2300      	movs	r3, #0
 800ce5a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ce5e:	930c      	str	r3, [sp, #48]	; 0x30
 800ce60:	9307      	str	r3, [sp, #28]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	dc13      	bgt.n	800ce8e <_dtoa_r+0x26a>
 800ce66:	2301      	movs	r3, #1
 800ce68:	001a      	movs	r2, r3
 800ce6a:	930c      	str	r3, [sp, #48]	; 0x30
 800ce6c:	9307      	str	r3, [sp, #28]
 800ce6e:	9223      	str	r2, [sp, #140]	; 0x8c
 800ce70:	e00d      	b.n	800ce8e <_dtoa_r+0x26a>
 800ce72:	2301      	movs	r3, #1
 800ce74:	e7f1      	b.n	800ce5a <_dtoa_r+0x236>
 800ce76:	2300      	movs	r3, #0
 800ce78:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800ce7a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce7c:	4694      	mov	ip, r2
 800ce7e:	9b02      	ldr	r3, [sp, #8]
 800ce80:	4463      	add	r3, ip
 800ce82:	930c      	str	r3, [sp, #48]	; 0x30
 800ce84:	3301      	adds	r3, #1
 800ce86:	9307      	str	r3, [sp, #28]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	dc00      	bgt.n	800ce8e <_dtoa_r+0x26a>
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	2200      	movs	r2, #0
 800ce90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce92:	6042      	str	r2, [r0, #4]
 800ce94:	3204      	adds	r2, #4
 800ce96:	0015      	movs	r5, r2
 800ce98:	3514      	adds	r5, #20
 800ce9a:	6841      	ldr	r1, [r0, #4]
 800ce9c:	429d      	cmp	r5, r3
 800ce9e:	d919      	bls.n	800ced4 <_dtoa_r+0x2b0>
 800cea0:	0038      	movs	r0, r7
 800cea2:	f000 fcf3 	bl	800d88c <_Balloc>
 800cea6:	9006      	str	r0, [sp, #24]
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	d117      	bne.n	800cedc <_dtoa_r+0x2b8>
 800ceac:	21d5      	movs	r1, #213	; 0xd5
 800ceae:	0002      	movs	r2, r0
 800ceb0:	4b43      	ldr	r3, [pc, #268]	; (800cfc0 <_dtoa_r+0x39c>)
 800ceb2:	0049      	lsls	r1, r1, #1
 800ceb4:	e6cb      	b.n	800cc4e <_dtoa_r+0x2a>
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	e7de      	b.n	800ce78 <_dtoa_r+0x254>
 800ceba:	2300      	movs	r3, #0
 800cebc:	940f      	str	r4, [sp, #60]	; 0x3c
 800cebe:	9322      	str	r3, [sp, #136]	; 0x88
 800cec0:	3b01      	subs	r3, #1
 800cec2:	930c      	str	r3, [sp, #48]	; 0x30
 800cec4:	9307      	str	r3, [sp, #28]
 800cec6:	2200      	movs	r2, #0
 800cec8:	3313      	adds	r3, #19
 800ceca:	e7d0      	b.n	800ce6e <_dtoa_r+0x24a>
 800cecc:	2301      	movs	r3, #1
 800cece:	930f      	str	r3, [sp, #60]	; 0x3c
 800ced0:	3b02      	subs	r3, #2
 800ced2:	e7f6      	b.n	800cec2 <_dtoa_r+0x29e>
 800ced4:	3101      	adds	r1, #1
 800ced6:	6041      	str	r1, [r0, #4]
 800ced8:	0052      	lsls	r2, r2, #1
 800ceda:	e7dc      	b.n	800ce96 <_dtoa_r+0x272>
 800cedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cede:	9a06      	ldr	r2, [sp, #24]
 800cee0:	601a      	str	r2, [r3, #0]
 800cee2:	9b07      	ldr	r3, [sp, #28]
 800cee4:	2b0e      	cmp	r3, #14
 800cee6:	d900      	bls.n	800ceea <_dtoa_r+0x2c6>
 800cee8:	e0eb      	b.n	800d0c2 <_dtoa_r+0x49e>
 800ceea:	2c00      	cmp	r4, #0
 800ceec:	d100      	bne.n	800cef0 <_dtoa_r+0x2cc>
 800ceee:	e0e8      	b.n	800d0c2 <_dtoa_r+0x49e>
 800cef0:	9b02      	ldr	r3, [sp, #8]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	dd68      	ble.n	800cfc8 <_dtoa_r+0x3a4>
 800cef6:	001a      	movs	r2, r3
 800cef8:	210f      	movs	r1, #15
 800cefa:	4b2d      	ldr	r3, [pc, #180]	; (800cfb0 <_dtoa_r+0x38c>)
 800cefc:	400a      	ands	r2, r1
 800cefe:	00d2      	lsls	r2, r2, #3
 800cf00:	189b      	adds	r3, r3, r2
 800cf02:	681d      	ldr	r5, [r3, #0]
 800cf04:	685e      	ldr	r6, [r3, #4]
 800cf06:	9b02      	ldr	r3, [sp, #8]
 800cf08:	111c      	asrs	r4, r3, #4
 800cf0a:	2302      	movs	r3, #2
 800cf0c:	9310      	str	r3, [sp, #64]	; 0x40
 800cf0e:	9b02      	ldr	r3, [sp, #8]
 800cf10:	05db      	lsls	r3, r3, #23
 800cf12:	d50b      	bpl.n	800cf2c <_dtoa_r+0x308>
 800cf14:	4b2b      	ldr	r3, [pc, #172]	; (800cfc4 <_dtoa_r+0x3a0>)
 800cf16:	400c      	ands	r4, r1
 800cf18:	6a1a      	ldr	r2, [r3, #32]
 800cf1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf1c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800cf1e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800cf20:	f7f4 fd18 	bl	8001954 <__aeabi_ddiv>
 800cf24:	2303      	movs	r3, #3
 800cf26:	9008      	str	r0, [sp, #32]
 800cf28:	9109      	str	r1, [sp, #36]	; 0x24
 800cf2a:	9310      	str	r3, [sp, #64]	; 0x40
 800cf2c:	4b25      	ldr	r3, [pc, #148]	; (800cfc4 <_dtoa_r+0x3a0>)
 800cf2e:	9314      	str	r3, [sp, #80]	; 0x50
 800cf30:	2c00      	cmp	r4, #0
 800cf32:	d108      	bne.n	800cf46 <_dtoa_r+0x322>
 800cf34:	9808      	ldr	r0, [sp, #32]
 800cf36:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf38:	002a      	movs	r2, r5
 800cf3a:	0033      	movs	r3, r6
 800cf3c:	f7f4 fd0a 	bl	8001954 <__aeabi_ddiv>
 800cf40:	9008      	str	r0, [sp, #32]
 800cf42:	9109      	str	r1, [sp, #36]	; 0x24
 800cf44:	e05c      	b.n	800d000 <_dtoa_r+0x3dc>
 800cf46:	2301      	movs	r3, #1
 800cf48:	421c      	tst	r4, r3
 800cf4a:	d00b      	beq.n	800cf64 <_dtoa_r+0x340>
 800cf4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf4e:	0028      	movs	r0, r5
 800cf50:	3301      	adds	r3, #1
 800cf52:	9310      	str	r3, [sp, #64]	; 0x40
 800cf54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cf56:	0031      	movs	r1, r6
 800cf58:	681a      	ldr	r2, [r3, #0]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	f7f5 f8fc 	bl	8002158 <__aeabi_dmul>
 800cf60:	0005      	movs	r5, r0
 800cf62:	000e      	movs	r6, r1
 800cf64:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cf66:	1064      	asrs	r4, r4, #1
 800cf68:	3308      	adds	r3, #8
 800cf6a:	e7e0      	b.n	800cf2e <_dtoa_r+0x30a>
 800cf6c:	0800f589 	.word	0x0800f589
 800cf70:	0800f5a0 	.word	0x0800f5a0
 800cf74:	7ff00000 	.word	0x7ff00000
 800cf78:	0000270f 	.word	0x0000270f
 800cf7c:	0800f585 	.word	0x0800f585
 800cf80:	0800f588 	.word	0x0800f588
 800cf84:	0800f558 	.word	0x0800f558
 800cf88:	0800f559 	.word	0x0800f559
 800cf8c:	3ff00000 	.word	0x3ff00000
 800cf90:	fffffc01 	.word	0xfffffc01
 800cf94:	3ff80000 	.word	0x3ff80000
 800cf98:	636f4361 	.word	0x636f4361
 800cf9c:	3fd287a7 	.word	0x3fd287a7
 800cfa0:	8b60c8b3 	.word	0x8b60c8b3
 800cfa4:	3fc68a28 	.word	0x3fc68a28
 800cfa8:	509f79fb 	.word	0x509f79fb
 800cfac:	3fd34413 	.word	0x3fd34413
 800cfb0:	0800f690 	.word	0x0800f690
 800cfb4:	00000432 	.word	0x00000432
 800cfb8:	00000412 	.word	0x00000412
 800cfbc:	fe100000 	.word	0xfe100000
 800cfc0:	0800f5fb 	.word	0x0800f5fb
 800cfc4:	0800f668 	.word	0x0800f668
 800cfc8:	2302      	movs	r3, #2
 800cfca:	9310      	str	r3, [sp, #64]	; 0x40
 800cfcc:	9b02      	ldr	r3, [sp, #8]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d016      	beq.n	800d000 <_dtoa_r+0x3dc>
 800cfd2:	9812      	ldr	r0, [sp, #72]	; 0x48
 800cfd4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800cfd6:	425c      	negs	r4, r3
 800cfd8:	230f      	movs	r3, #15
 800cfda:	4ab6      	ldr	r2, [pc, #728]	; (800d2b4 <_dtoa_r+0x690>)
 800cfdc:	4023      	ands	r3, r4
 800cfde:	00db      	lsls	r3, r3, #3
 800cfe0:	18d3      	adds	r3, r2, r3
 800cfe2:	681a      	ldr	r2, [r3, #0]
 800cfe4:	685b      	ldr	r3, [r3, #4]
 800cfe6:	f7f5 f8b7 	bl	8002158 <__aeabi_dmul>
 800cfea:	2601      	movs	r6, #1
 800cfec:	2300      	movs	r3, #0
 800cfee:	9008      	str	r0, [sp, #32]
 800cff0:	9109      	str	r1, [sp, #36]	; 0x24
 800cff2:	4db1      	ldr	r5, [pc, #708]	; (800d2b8 <_dtoa_r+0x694>)
 800cff4:	1124      	asrs	r4, r4, #4
 800cff6:	2c00      	cmp	r4, #0
 800cff8:	d000      	beq.n	800cffc <_dtoa_r+0x3d8>
 800cffa:	e094      	b.n	800d126 <_dtoa_r+0x502>
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d19f      	bne.n	800cf40 <_dtoa_r+0x31c>
 800d000:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d002:	2b00      	cmp	r3, #0
 800d004:	d100      	bne.n	800d008 <_dtoa_r+0x3e4>
 800d006:	e09b      	b.n	800d140 <_dtoa_r+0x51c>
 800d008:	9c08      	ldr	r4, [sp, #32]
 800d00a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d00c:	2200      	movs	r2, #0
 800d00e:	0020      	movs	r0, r4
 800d010:	0029      	movs	r1, r5
 800d012:	4baa      	ldr	r3, [pc, #680]	; (800d2bc <_dtoa_r+0x698>)
 800d014:	f7f3 fa20 	bl	8000458 <__aeabi_dcmplt>
 800d018:	2800      	cmp	r0, #0
 800d01a:	d100      	bne.n	800d01e <_dtoa_r+0x3fa>
 800d01c:	e090      	b.n	800d140 <_dtoa_r+0x51c>
 800d01e:	9b07      	ldr	r3, [sp, #28]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d100      	bne.n	800d026 <_dtoa_r+0x402>
 800d024:	e08c      	b.n	800d140 <_dtoa_r+0x51c>
 800d026:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d028:	2b00      	cmp	r3, #0
 800d02a:	dd46      	ble.n	800d0ba <_dtoa_r+0x496>
 800d02c:	9b02      	ldr	r3, [sp, #8]
 800d02e:	2200      	movs	r2, #0
 800d030:	0020      	movs	r0, r4
 800d032:	0029      	movs	r1, r5
 800d034:	1e5e      	subs	r6, r3, #1
 800d036:	4ba2      	ldr	r3, [pc, #648]	; (800d2c0 <_dtoa_r+0x69c>)
 800d038:	f7f5 f88e 	bl	8002158 <__aeabi_dmul>
 800d03c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d03e:	9008      	str	r0, [sp, #32]
 800d040:	9109      	str	r1, [sp, #36]	; 0x24
 800d042:	3301      	adds	r3, #1
 800d044:	9310      	str	r3, [sp, #64]	; 0x40
 800d046:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d048:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d04a:	9c08      	ldr	r4, [sp, #32]
 800d04c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d04e:	9314      	str	r3, [sp, #80]	; 0x50
 800d050:	f7f5 fed4 	bl	8002dfc <__aeabi_i2d>
 800d054:	0022      	movs	r2, r4
 800d056:	002b      	movs	r3, r5
 800d058:	f7f5 f87e 	bl	8002158 <__aeabi_dmul>
 800d05c:	2200      	movs	r2, #0
 800d05e:	4b99      	ldr	r3, [pc, #612]	; (800d2c4 <_dtoa_r+0x6a0>)
 800d060:	f7f4 f93c 	bl	80012dc <__aeabi_dadd>
 800d064:	9010      	str	r0, [sp, #64]	; 0x40
 800d066:	9111      	str	r1, [sp, #68]	; 0x44
 800d068:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d06a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d06c:	9208      	str	r2, [sp, #32]
 800d06e:	9309      	str	r3, [sp, #36]	; 0x24
 800d070:	4a95      	ldr	r2, [pc, #596]	; (800d2c8 <_dtoa_r+0x6a4>)
 800d072:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d074:	4694      	mov	ip, r2
 800d076:	4463      	add	r3, ip
 800d078:	9317      	str	r3, [sp, #92]	; 0x5c
 800d07a:	9309      	str	r3, [sp, #36]	; 0x24
 800d07c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d161      	bne.n	800d146 <_dtoa_r+0x522>
 800d082:	2200      	movs	r2, #0
 800d084:	0020      	movs	r0, r4
 800d086:	0029      	movs	r1, r5
 800d088:	4b90      	ldr	r3, [pc, #576]	; (800d2cc <_dtoa_r+0x6a8>)
 800d08a:	f7f5 fad1 	bl	8002630 <__aeabi_dsub>
 800d08e:	9a08      	ldr	r2, [sp, #32]
 800d090:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d092:	0004      	movs	r4, r0
 800d094:	000d      	movs	r5, r1
 800d096:	f7f3 f9f3 	bl	8000480 <__aeabi_dcmpgt>
 800d09a:	2800      	cmp	r0, #0
 800d09c:	d000      	beq.n	800d0a0 <_dtoa_r+0x47c>
 800d09e:	e2af      	b.n	800d600 <_dtoa_r+0x9dc>
 800d0a0:	488b      	ldr	r0, [pc, #556]	; (800d2d0 <_dtoa_r+0x6ac>)
 800d0a2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d0a4:	4684      	mov	ip, r0
 800d0a6:	4461      	add	r1, ip
 800d0a8:	000b      	movs	r3, r1
 800d0aa:	0020      	movs	r0, r4
 800d0ac:	0029      	movs	r1, r5
 800d0ae:	9a08      	ldr	r2, [sp, #32]
 800d0b0:	f7f3 f9d2 	bl	8000458 <__aeabi_dcmplt>
 800d0b4:	2800      	cmp	r0, #0
 800d0b6:	d000      	beq.n	800d0ba <_dtoa_r+0x496>
 800d0b8:	e29f      	b.n	800d5fa <_dtoa_r+0x9d6>
 800d0ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d0bc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800d0be:	9308      	str	r3, [sp, #32]
 800d0c0:	9409      	str	r4, [sp, #36]	; 0x24
 800d0c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	da00      	bge.n	800d0ca <_dtoa_r+0x4a6>
 800d0c8:	e172      	b.n	800d3b0 <_dtoa_r+0x78c>
 800d0ca:	9a02      	ldr	r2, [sp, #8]
 800d0cc:	2a0e      	cmp	r2, #14
 800d0ce:	dd00      	ble.n	800d0d2 <_dtoa_r+0x4ae>
 800d0d0:	e16e      	b.n	800d3b0 <_dtoa_r+0x78c>
 800d0d2:	4b78      	ldr	r3, [pc, #480]	; (800d2b4 <_dtoa_r+0x690>)
 800d0d4:	00d2      	lsls	r2, r2, #3
 800d0d6:	189b      	adds	r3, r3, r2
 800d0d8:	685c      	ldr	r4, [r3, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	930a      	str	r3, [sp, #40]	; 0x28
 800d0de:	940b      	str	r4, [sp, #44]	; 0x2c
 800d0e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	db00      	blt.n	800d0e8 <_dtoa_r+0x4c4>
 800d0e6:	e0f7      	b.n	800d2d8 <_dtoa_r+0x6b4>
 800d0e8:	9b07      	ldr	r3, [sp, #28]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	dd00      	ble.n	800d0f0 <_dtoa_r+0x4cc>
 800d0ee:	e0f3      	b.n	800d2d8 <_dtoa_r+0x6b4>
 800d0f0:	d000      	beq.n	800d0f4 <_dtoa_r+0x4d0>
 800d0f2:	e282      	b.n	800d5fa <_dtoa_r+0x9d6>
 800d0f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d0f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	4b74      	ldr	r3, [pc, #464]	; (800d2cc <_dtoa_r+0x6a8>)
 800d0fc:	f7f5 f82c 	bl	8002158 <__aeabi_dmul>
 800d100:	9a08      	ldr	r2, [sp, #32]
 800d102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d104:	f7f3 f9c6 	bl	8000494 <__aeabi_dcmpge>
 800d108:	9e07      	ldr	r6, [sp, #28]
 800d10a:	0035      	movs	r5, r6
 800d10c:	2800      	cmp	r0, #0
 800d10e:	d000      	beq.n	800d112 <_dtoa_r+0x4ee>
 800d110:	e259      	b.n	800d5c6 <_dtoa_r+0x9a2>
 800d112:	9b06      	ldr	r3, [sp, #24]
 800d114:	9a06      	ldr	r2, [sp, #24]
 800d116:	3301      	adds	r3, #1
 800d118:	9308      	str	r3, [sp, #32]
 800d11a:	2331      	movs	r3, #49	; 0x31
 800d11c:	7013      	strb	r3, [r2, #0]
 800d11e:	9b02      	ldr	r3, [sp, #8]
 800d120:	3301      	adds	r3, #1
 800d122:	9302      	str	r3, [sp, #8]
 800d124:	e254      	b.n	800d5d0 <_dtoa_r+0x9ac>
 800d126:	4234      	tst	r4, r6
 800d128:	d007      	beq.n	800d13a <_dtoa_r+0x516>
 800d12a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d12c:	3301      	adds	r3, #1
 800d12e:	9310      	str	r3, [sp, #64]	; 0x40
 800d130:	682a      	ldr	r2, [r5, #0]
 800d132:	686b      	ldr	r3, [r5, #4]
 800d134:	f7f5 f810 	bl	8002158 <__aeabi_dmul>
 800d138:	0033      	movs	r3, r6
 800d13a:	1064      	asrs	r4, r4, #1
 800d13c:	3508      	adds	r5, #8
 800d13e:	e75a      	b.n	800cff6 <_dtoa_r+0x3d2>
 800d140:	9e02      	ldr	r6, [sp, #8]
 800d142:	9b07      	ldr	r3, [sp, #28]
 800d144:	e780      	b.n	800d048 <_dtoa_r+0x424>
 800d146:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d148:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d14a:	1e5a      	subs	r2, r3, #1
 800d14c:	4b59      	ldr	r3, [pc, #356]	; (800d2b4 <_dtoa_r+0x690>)
 800d14e:	00d2      	lsls	r2, r2, #3
 800d150:	189b      	adds	r3, r3, r2
 800d152:	681a      	ldr	r2, [r3, #0]
 800d154:	685b      	ldr	r3, [r3, #4]
 800d156:	2900      	cmp	r1, #0
 800d158:	d051      	beq.n	800d1fe <_dtoa_r+0x5da>
 800d15a:	2000      	movs	r0, #0
 800d15c:	495d      	ldr	r1, [pc, #372]	; (800d2d4 <_dtoa_r+0x6b0>)
 800d15e:	f7f4 fbf9 	bl	8001954 <__aeabi_ddiv>
 800d162:	9a08      	ldr	r2, [sp, #32]
 800d164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d166:	f7f5 fa63 	bl	8002630 <__aeabi_dsub>
 800d16a:	9a06      	ldr	r2, [sp, #24]
 800d16c:	9b06      	ldr	r3, [sp, #24]
 800d16e:	4694      	mov	ip, r2
 800d170:	9317      	str	r3, [sp, #92]	; 0x5c
 800d172:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d174:	9010      	str	r0, [sp, #64]	; 0x40
 800d176:	9111      	str	r1, [sp, #68]	; 0x44
 800d178:	4463      	add	r3, ip
 800d17a:	9319      	str	r3, [sp, #100]	; 0x64
 800d17c:	0029      	movs	r1, r5
 800d17e:	0020      	movs	r0, r4
 800d180:	f7f5 fe06 	bl	8002d90 <__aeabi_d2iz>
 800d184:	9014      	str	r0, [sp, #80]	; 0x50
 800d186:	f7f5 fe39 	bl	8002dfc <__aeabi_i2d>
 800d18a:	0002      	movs	r2, r0
 800d18c:	000b      	movs	r3, r1
 800d18e:	0020      	movs	r0, r4
 800d190:	0029      	movs	r1, r5
 800d192:	f7f5 fa4d 	bl	8002630 <__aeabi_dsub>
 800d196:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d198:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d19a:	3301      	adds	r3, #1
 800d19c:	9308      	str	r3, [sp, #32]
 800d19e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d1a0:	0004      	movs	r4, r0
 800d1a2:	3330      	adds	r3, #48	; 0x30
 800d1a4:	7013      	strb	r3, [r2, #0]
 800d1a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d1a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d1aa:	000d      	movs	r5, r1
 800d1ac:	f7f3 f954 	bl	8000458 <__aeabi_dcmplt>
 800d1b0:	2800      	cmp	r0, #0
 800d1b2:	d175      	bne.n	800d2a0 <_dtoa_r+0x67c>
 800d1b4:	0022      	movs	r2, r4
 800d1b6:	002b      	movs	r3, r5
 800d1b8:	2000      	movs	r0, #0
 800d1ba:	4940      	ldr	r1, [pc, #256]	; (800d2bc <_dtoa_r+0x698>)
 800d1bc:	f7f5 fa38 	bl	8002630 <__aeabi_dsub>
 800d1c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d1c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d1c4:	f7f3 f948 	bl	8000458 <__aeabi_dcmplt>
 800d1c8:	2800      	cmp	r0, #0
 800d1ca:	d000      	beq.n	800d1ce <_dtoa_r+0x5aa>
 800d1cc:	e0d2      	b.n	800d374 <_dtoa_r+0x750>
 800d1ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d1d0:	9a08      	ldr	r2, [sp, #32]
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d100      	bne.n	800d1d8 <_dtoa_r+0x5b4>
 800d1d6:	e770      	b.n	800d0ba <_dtoa_r+0x496>
 800d1d8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d1da:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d1dc:	2200      	movs	r2, #0
 800d1de:	4b38      	ldr	r3, [pc, #224]	; (800d2c0 <_dtoa_r+0x69c>)
 800d1e0:	f7f4 ffba 	bl	8002158 <__aeabi_dmul>
 800d1e4:	4b36      	ldr	r3, [pc, #216]	; (800d2c0 <_dtoa_r+0x69c>)
 800d1e6:	9010      	str	r0, [sp, #64]	; 0x40
 800d1e8:	9111      	str	r1, [sp, #68]	; 0x44
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	0020      	movs	r0, r4
 800d1ee:	0029      	movs	r1, r5
 800d1f0:	f7f4 ffb2 	bl	8002158 <__aeabi_dmul>
 800d1f4:	9b08      	ldr	r3, [sp, #32]
 800d1f6:	0004      	movs	r4, r0
 800d1f8:	000d      	movs	r5, r1
 800d1fa:	9317      	str	r3, [sp, #92]	; 0x5c
 800d1fc:	e7be      	b.n	800d17c <_dtoa_r+0x558>
 800d1fe:	9808      	ldr	r0, [sp, #32]
 800d200:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d202:	f7f4 ffa9 	bl	8002158 <__aeabi_dmul>
 800d206:	9a06      	ldr	r2, [sp, #24]
 800d208:	9b06      	ldr	r3, [sp, #24]
 800d20a:	4694      	mov	ip, r2
 800d20c:	9308      	str	r3, [sp, #32]
 800d20e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d210:	9010      	str	r0, [sp, #64]	; 0x40
 800d212:	9111      	str	r1, [sp, #68]	; 0x44
 800d214:	4463      	add	r3, ip
 800d216:	9319      	str	r3, [sp, #100]	; 0x64
 800d218:	0029      	movs	r1, r5
 800d21a:	0020      	movs	r0, r4
 800d21c:	f7f5 fdb8 	bl	8002d90 <__aeabi_d2iz>
 800d220:	9017      	str	r0, [sp, #92]	; 0x5c
 800d222:	f7f5 fdeb 	bl	8002dfc <__aeabi_i2d>
 800d226:	0002      	movs	r2, r0
 800d228:	000b      	movs	r3, r1
 800d22a:	0020      	movs	r0, r4
 800d22c:	0029      	movs	r1, r5
 800d22e:	f7f5 f9ff 	bl	8002630 <__aeabi_dsub>
 800d232:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d234:	9a08      	ldr	r2, [sp, #32]
 800d236:	3330      	adds	r3, #48	; 0x30
 800d238:	7013      	strb	r3, [r2, #0]
 800d23a:	0013      	movs	r3, r2
 800d23c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d23e:	3301      	adds	r3, #1
 800d240:	0004      	movs	r4, r0
 800d242:	000d      	movs	r5, r1
 800d244:	9308      	str	r3, [sp, #32]
 800d246:	4293      	cmp	r3, r2
 800d248:	d12c      	bne.n	800d2a4 <_dtoa_r+0x680>
 800d24a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d24c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d24e:	9a06      	ldr	r2, [sp, #24]
 800d250:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d252:	4694      	mov	ip, r2
 800d254:	4463      	add	r3, ip
 800d256:	2200      	movs	r2, #0
 800d258:	9308      	str	r3, [sp, #32]
 800d25a:	4b1e      	ldr	r3, [pc, #120]	; (800d2d4 <_dtoa_r+0x6b0>)
 800d25c:	f7f4 f83e 	bl	80012dc <__aeabi_dadd>
 800d260:	0002      	movs	r2, r0
 800d262:	000b      	movs	r3, r1
 800d264:	0020      	movs	r0, r4
 800d266:	0029      	movs	r1, r5
 800d268:	f7f3 f90a 	bl	8000480 <__aeabi_dcmpgt>
 800d26c:	2800      	cmp	r0, #0
 800d26e:	d000      	beq.n	800d272 <_dtoa_r+0x64e>
 800d270:	e080      	b.n	800d374 <_dtoa_r+0x750>
 800d272:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d274:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d276:	2000      	movs	r0, #0
 800d278:	4916      	ldr	r1, [pc, #88]	; (800d2d4 <_dtoa_r+0x6b0>)
 800d27a:	f7f5 f9d9 	bl	8002630 <__aeabi_dsub>
 800d27e:	0002      	movs	r2, r0
 800d280:	000b      	movs	r3, r1
 800d282:	0020      	movs	r0, r4
 800d284:	0029      	movs	r1, r5
 800d286:	f7f3 f8e7 	bl	8000458 <__aeabi_dcmplt>
 800d28a:	2800      	cmp	r0, #0
 800d28c:	d100      	bne.n	800d290 <_dtoa_r+0x66c>
 800d28e:	e714      	b.n	800d0ba <_dtoa_r+0x496>
 800d290:	9b08      	ldr	r3, [sp, #32]
 800d292:	001a      	movs	r2, r3
 800d294:	3a01      	subs	r2, #1
 800d296:	9208      	str	r2, [sp, #32]
 800d298:	7812      	ldrb	r2, [r2, #0]
 800d29a:	2a30      	cmp	r2, #48	; 0x30
 800d29c:	d0f8      	beq.n	800d290 <_dtoa_r+0x66c>
 800d29e:	9308      	str	r3, [sp, #32]
 800d2a0:	9602      	str	r6, [sp, #8]
 800d2a2:	e055      	b.n	800d350 <_dtoa_r+0x72c>
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	4b06      	ldr	r3, [pc, #24]	; (800d2c0 <_dtoa_r+0x69c>)
 800d2a8:	f7f4 ff56 	bl	8002158 <__aeabi_dmul>
 800d2ac:	0004      	movs	r4, r0
 800d2ae:	000d      	movs	r5, r1
 800d2b0:	e7b2      	b.n	800d218 <_dtoa_r+0x5f4>
 800d2b2:	46c0      	nop			; (mov r8, r8)
 800d2b4:	0800f690 	.word	0x0800f690
 800d2b8:	0800f668 	.word	0x0800f668
 800d2bc:	3ff00000 	.word	0x3ff00000
 800d2c0:	40240000 	.word	0x40240000
 800d2c4:	401c0000 	.word	0x401c0000
 800d2c8:	fcc00000 	.word	0xfcc00000
 800d2cc:	40140000 	.word	0x40140000
 800d2d0:	7cc00000 	.word	0x7cc00000
 800d2d4:	3fe00000 	.word	0x3fe00000
 800d2d8:	9b07      	ldr	r3, [sp, #28]
 800d2da:	9e06      	ldr	r6, [sp, #24]
 800d2dc:	3b01      	subs	r3, #1
 800d2de:	199b      	adds	r3, r3, r6
 800d2e0:	930c      	str	r3, [sp, #48]	; 0x30
 800d2e2:	9c08      	ldr	r4, [sp, #32]
 800d2e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d2e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d2e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2ea:	0020      	movs	r0, r4
 800d2ec:	0029      	movs	r1, r5
 800d2ee:	f7f4 fb31 	bl	8001954 <__aeabi_ddiv>
 800d2f2:	f7f5 fd4d 	bl	8002d90 <__aeabi_d2iz>
 800d2f6:	9007      	str	r0, [sp, #28]
 800d2f8:	f7f5 fd80 	bl	8002dfc <__aeabi_i2d>
 800d2fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d2fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d300:	f7f4 ff2a 	bl	8002158 <__aeabi_dmul>
 800d304:	0002      	movs	r2, r0
 800d306:	000b      	movs	r3, r1
 800d308:	0020      	movs	r0, r4
 800d30a:	0029      	movs	r1, r5
 800d30c:	f7f5 f990 	bl	8002630 <__aeabi_dsub>
 800d310:	0033      	movs	r3, r6
 800d312:	9a07      	ldr	r2, [sp, #28]
 800d314:	3601      	adds	r6, #1
 800d316:	3230      	adds	r2, #48	; 0x30
 800d318:	701a      	strb	r2, [r3, #0]
 800d31a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d31c:	9608      	str	r6, [sp, #32]
 800d31e:	429a      	cmp	r2, r3
 800d320:	d139      	bne.n	800d396 <_dtoa_r+0x772>
 800d322:	0002      	movs	r2, r0
 800d324:	000b      	movs	r3, r1
 800d326:	f7f3 ffd9 	bl	80012dc <__aeabi_dadd>
 800d32a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d32c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d32e:	0004      	movs	r4, r0
 800d330:	000d      	movs	r5, r1
 800d332:	f7f3 f8a5 	bl	8000480 <__aeabi_dcmpgt>
 800d336:	2800      	cmp	r0, #0
 800d338:	d11b      	bne.n	800d372 <_dtoa_r+0x74e>
 800d33a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d33c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d33e:	0020      	movs	r0, r4
 800d340:	0029      	movs	r1, r5
 800d342:	f7f3 f883 	bl	800044c <__aeabi_dcmpeq>
 800d346:	2800      	cmp	r0, #0
 800d348:	d002      	beq.n	800d350 <_dtoa_r+0x72c>
 800d34a:	9b07      	ldr	r3, [sp, #28]
 800d34c:	07db      	lsls	r3, r3, #31
 800d34e:	d410      	bmi.n	800d372 <_dtoa_r+0x74e>
 800d350:	0038      	movs	r0, r7
 800d352:	9905      	ldr	r1, [sp, #20]
 800d354:	f000 fade 	bl	800d914 <_Bfree>
 800d358:	2300      	movs	r3, #0
 800d35a:	9a08      	ldr	r2, [sp, #32]
 800d35c:	9802      	ldr	r0, [sp, #8]
 800d35e:	7013      	strb	r3, [r2, #0]
 800d360:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d362:	3001      	adds	r0, #1
 800d364:	6018      	str	r0, [r3, #0]
 800d366:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d100      	bne.n	800d36e <_dtoa_r+0x74a>
 800d36c:	e4a6      	b.n	800ccbc <_dtoa_r+0x98>
 800d36e:	601a      	str	r2, [r3, #0]
 800d370:	e4a4      	b.n	800ccbc <_dtoa_r+0x98>
 800d372:	9e02      	ldr	r6, [sp, #8]
 800d374:	9b08      	ldr	r3, [sp, #32]
 800d376:	9308      	str	r3, [sp, #32]
 800d378:	3b01      	subs	r3, #1
 800d37a:	781a      	ldrb	r2, [r3, #0]
 800d37c:	2a39      	cmp	r2, #57	; 0x39
 800d37e:	d106      	bne.n	800d38e <_dtoa_r+0x76a>
 800d380:	9a06      	ldr	r2, [sp, #24]
 800d382:	429a      	cmp	r2, r3
 800d384:	d1f7      	bne.n	800d376 <_dtoa_r+0x752>
 800d386:	2230      	movs	r2, #48	; 0x30
 800d388:	9906      	ldr	r1, [sp, #24]
 800d38a:	3601      	adds	r6, #1
 800d38c:	700a      	strb	r2, [r1, #0]
 800d38e:	781a      	ldrb	r2, [r3, #0]
 800d390:	3201      	adds	r2, #1
 800d392:	701a      	strb	r2, [r3, #0]
 800d394:	e784      	b.n	800d2a0 <_dtoa_r+0x67c>
 800d396:	2200      	movs	r2, #0
 800d398:	4baa      	ldr	r3, [pc, #680]	; (800d644 <_dtoa_r+0xa20>)
 800d39a:	f7f4 fedd 	bl	8002158 <__aeabi_dmul>
 800d39e:	2200      	movs	r2, #0
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	0004      	movs	r4, r0
 800d3a4:	000d      	movs	r5, r1
 800d3a6:	f7f3 f851 	bl	800044c <__aeabi_dcmpeq>
 800d3aa:	2800      	cmp	r0, #0
 800d3ac:	d09b      	beq.n	800d2e6 <_dtoa_r+0x6c2>
 800d3ae:	e7cf      	b.n	800d350 <_dtoa_r+0x72c>
 800d3b0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d3b2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800d3b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d3b6:	2d00      	cmp	r5, #0
 800d3b8:	d012      	beq.n	800d3e0 <_dtoa_r+0x7bc>
 800d3ba:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d3bc:	2a01      	cmp	r2, #1
 800d3be:	dc66      	bgt.n	800d48e <_dtoa_r+0x86a>
 800d3c0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d3c2:	2a00      	cmp	r2, #0
 800d3c4:	d05d      	beq.n	800d482 <_dtoa_r+0x85e>
 800d3c6:	4aa0      	ldr	r2, [pc, #640]	; (800d648 <_dtoa_r+0xa24>)
 800d3c8:	189b      	adds	r3, r3, r2
 800d3ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3cc:	2101      	movs	r1, #1
 800d3ce:	18d2      	adds	r2, r2, r3
 800d3d0:	920a      	str	r2, [sp, #40]	; 0x28
 800d3d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d3d4:	0038      	movs	r0, r7
 800d3d6:	18d3      	adds	r3, r2, r3
 800d3d8:	930d      	str	r3, [sp, #52]	; 0x34
 800d3da:	f000 fb4b 	bl	800da74 <__i2b>
 800d3de:	0005      	movs	r5, r0
 800d3e0:	2c00      	cmp	r4, #0
 800d3e2:	dd0e      	ble.n	800d402 <_dtoa_r+0x7de>
 800d3e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	dd0b      	ble.n	800d402 <_dtoa_r+0x7de>
 800d3ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d3ec:	0023      	movs	r3, r4
 800d3ee:	4294      	cmp	r4, r2
 800d3f0:	dd00      	ble.n	800d3f4 <_dtoa_r+0x7d0>
 800d3f2:	0013      	movs	r3, r2
 800d3f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3f6:	1ae4      	subs	r4, r4, r3
 800d3f8:	1ad2      	subs	r2, r2, r3
 800d3fa:	920a      	str	r2, [sp, #40]	; 0x28
 800d3fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d3fe:	1ad3      	subs	r3, r2, r3
 800d400:	930d      	str	r3, [sp, #52]	; 0x34
 800d402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d404:	2b00      	cmp	r3, #0
 800d406:	d01f      	beq.n	800d448 <_dtoa_r+0x824>
 800d408:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d054      	beq.n	800d4b8 <_dtoa_r+0x894>
 800d40e:	2e00      	cmp	r6, #0
 800d410:	dd11      	ble.n	800d436 <_dtoa_r+0x812>
 800d412:	0029      	movs	r1, r5
 800d414:	0032      	movs	r2, r6
 800d416:	0038      	movs	r0, r7
 800d418:	f000 fbf2 	bl	800dc00 <__pow5mult>
 800d41c:	9a05      	ldr	r2, [sp, #20]
 800d41e:	0001      	movs	r1, r0
 800d420:	0005      	movs	r5, r0
 800d422:	0038      	movs	r0, r7
 800d424:	f000 fb3c 	bl	800daa0 <__multiply>
 800d428:	9905      	ldr	r1, [sp, #20]
 800d42a:	9014      	str	r0, [sp, #80]	; 0x50
 800d42c:	0038      	movs	r0, r7
 800d42e:	f000 fa71 	bl	800d914 <_Bfree>
 800d432:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d434:	9305      	str	r3, [sp, #20]
 800d436:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d438:	1b9a      	subs	r2, r3, r6
 800d43a:	42b3      	cmp	r3, r6
 800d43c:	d004      	beq.n	800d448 <_dtoa_r+0x824>
 800d43e:	0038      	movs	r0, r7
 800d440:	9905      	ldr	r1, [sp, #20]
 800d442:	f000 fbdd 	bl	800dc00 <__pow5mult>
 800d446:	9005      	str	r0, [sp, #20]
 800d448:	2101      	movs	r1, #1
 800d44a:	0038      	movs	r0, r7
 800d44c:	f000 fb12 	bl	800da74 <__i2b>
 800d450:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d452:	0006      	movs	r6, r0
 800d454:	2b00      	cmp	r3, #0
 800d456:	dd31      	ble.n	800d4bc <_dtoa_r+0x898>
 800d458:	001a      	movs	r2, r3
 800d45a:	0001      	movs	r1, r0
 800d45c:	0038      	movs	r0, r7
 800d45e:	f000 fbcf 	bl	800dc00 <__pow5mult>
 800d462:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d464:	0006      	movs	r6, r0
 800d466:	2b01      	cmp	r3, #1
 800d468:	dd2d      	ble.n	800d4c6 <_dtoa_r+0x8a2>
 800d46a:	2300      	movs	r3, #0
 800d46c:	930e      	str	r3, [sp, #56]	; 0x38
 800d46e:	6933      	ldr	r3, [r6, #16]
 800d470:	3303      	adds	r3, #3
 800d472:	009b      	lsls	r3, r3, #2
 800d474:	18f3      	adds	r3, r6, r3
 800d476:	6858      	ldr	r0, [r3, #4]
 800d478:	f000 fab4 	bl	800d9e4 <__hi0bits>
 800d47c:	2320      	movs	r3, #32
 800d47e:	1a18      	subs	r0, r3, r0
 800d480:	e039      	b.n	800d4f6 <_dtoa_r+0x8d2>
 800d482:	2336      	movs	r3, #54	; 0x36
 800d484:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d486:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800d488:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d48a:	1a9b      	subs	r3, r3, r2
 800d48c:	e79d      	b.n	800d3ca <_dtoa_r+0x7a6>
 800d48e:	9b07      	ldr	r3, [sp, #28]
 800d490:	1e5e      	subs	r6, r3, #1
 800d492:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d494:	42b3      	cmp	r3, r6
 800d496:	db07      	blt.n	800d4a8 <_dtoa_r+0x884>
 800d498:	1b9e      	subs	r6, r3, r6
 800d49a:	9b07      	ldr	r3, [sp, #28]
 800d49c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	da93      	bge.n	800d3ca <_dtoa_r+0x7a6>
 800d4a2:	1ae4      	subs	r4, r4, r3
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	e790      	b.n	800d3ca <_dtoa_r+0x7a6>
 800d4a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d4ac:	1af3      	subs	r3, r6, r3
 800d4ae:	18d3      	adds	r3, r2, r3
 800d4b0:	960e      	str	r6, [sp, #56]	; 0x38
 800d4b2:	9315      	str	r3, [sp, #84]	; 0x54
 800d4b4:	2600      	movs	r6, #0
 800d4b6:	e7f0      	b.n	800d49a <_dtoa_r+0x876>
 800d4b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d4ba:	e7c0      	b.n	800d43e <_dtoa_r+0x81a>
 800d4bc:	2300      	movs	r3, #0
 800d4be:	930e      	str	r3, [sp, #56]	; 0x38
 800d4c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d4c2:	2b01      	cmp	r3, #1
 800d4c4:	dc13      	bgt.n	800d4ee <_dtoa_r+0x8ca>
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	930e      	str	r3, [sp, #56]	; 0x38
 800d4ca:	9b08      	ldr	r3, [sp, #32]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d10e      	bne.n	800d4ee <_dtoa_r+0x8ca>
 800d4d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4d2:	031b      	lsls	r3, r3, #12
 800d4d4:	d10b      	bne.n	800d4ee <_dtoa_r+0x8ca>
 800d4d6:	4b5d      	ldr	r3, [pc, #372]	; (800d64c <_dtoa_r+0xa28>)
 800d4d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4da:	4213      	tst	r3, r2
 800d4dc:	d007      	beq.n	800d4ee <_dtoa_r+0x8ca>
 800d4de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	930a      	str	r3, [sp, #40]	; 0x28
 800d4e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	930d      	str	r3, [sp, #52]	; 0x34
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	930e      	str	r3, [sp, #56]	; 0x38
 800d4ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d4f0:	2001      	movs	r0, #1
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d1bb      	bne.n	800d46e <_dtoa_r+0x84a>
 800d4f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4f8:	221f      	movs	r2, #31
 800d4fa:	1818      	adds	r0, r3, r0
 800d4fc:	0003      	movs	r3, r0
 800d4fe:	4013      	ands	r3, r2
 800d500:	4210      	tst	r0, r2
 800d502:	d046      	beq.n	800d592 <_dtoa_r+0x96e>
 800d504:	3201      	adds	r2, #1
 800d506:	1ad2      	subs	r2, r2, r3
 800d508:	2a04      	cmp	r2, #4
 800d50a:	dd3f      	ble.n	800d58c <_dtoa_r+0x968>
 800d50c:	221c      	movs	r2, #28
 800d50e:	1ad3      	subs	r3, r2, r3
 800d510:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d512:	18e4      	adds	r4, r4, r3
 800d514:	18d2      	adds	r2, r2, r3
 800d516:	920a      	str	r2, [sp, #40]	; 0x28
 800d518:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d51a:	18d3      	adds	r3, r2, r3
 800d51c:	930d      	str	r3, [sp, #52]	; 0x34
 800d51e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d520:	2b00      	cmp	r3, #0
 800d522:	dd05      	ble.n	800d530 <_dtoa_r+0x90c>
 800d524:	001a      	movs	r2, r3
 800d526:	0038      	movs	r0, r7
 800d528:	9905      	ldr	r1, [sp, #20]
 800d52a:	f000 fbc5 	bl	800dcb8 <__lshift>
 800d52e:	9005      	str	r0, [sp, #20]
 800d530:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d532:	2b00      	cmp	r3, #0
 800d534:	dd05      	ble.n	800d542 <_dtoa_r+0x91e>
 800d536:	0031      	movs	r1, r6
 800d538:	001a      	movs	r2, r3
 800d53a:	0038      	movs	r0, r7
 800d53c:	f000 fbbc 	bl	800dcb8 <__lshift>
 800d540:	0006      	movs	r6, r0
 800d542:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d544:	2b00      	cmp	r3, #0
 800d546:	d026      	beq.n	800d596 <_dtoa_r+0x972>
 800d548:	0031      	movs	r1, r6
 800d54a:	9805      	ldr	r0, [sp, #20]
 800d54c:	f000 fc22 	bl	800dd94 <__mcmp>
 800d550:	2800      	cmp	r0, #0
 800d552:	da20      	bge.n	800d596 <_dtoa_r+0x972>
 800d554:	9b02      	ldr	r3, [sp, #8]
 800d556:	220a      	movs	r2, #10
 800d558:	3b01      	subs	r3, #1
 800d55a:	9302      	str	r3, [sp, #8]
 800d55c:	0038      	movs	r0, r7
 800d55e:	2300      	movs	r3, #0
 800d560:	9905      	ldr	r1, [sp, #20]
 800d562:	f000 f9fb 	bl	800d95c <__multadd>
 800d566:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d568:	9005      	str	r0, [sp, #20]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d100      	bne.n	800d570 <_dtoa_r+0x94c>
 800d56e:	e166      	b.n	800d83e <_dtoa_r+0xc1a>
 800d570:	2300      	movs	r3, #0
 800d572:	0029      	movs	r1, r5
 800d574:	220a      	movs	r2, #10
 800d576:	0038      	movs	r0, r7
 800d578:	f000 f9f0 	bl	800d95c <__multadd>
 800d57c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d57e:	0005      	movs	r5, r0
 800d580:	2b00      	cmp	r3, #0
 800d582:	dc47      	bgt.n	800d614 <_dtoa_r+0x9f0>
 800d584:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d586:	2b02      	cmp	r3, #2
 800d588:	dc0d      	bgt.n	800d5a6 <_dtoa_r+0x982>
 800d58a:	e043      	b.n	800d614 <_dtoa_r+0x9f0>
 800d58c:	2a04      	cmp	r2, #4
 800d58e:	d0c6      	beq.n	800d51e <_dtoa_r+0x8fa>
 800d590:	0013      	movs	r3, r2
 800d592:	331c      	adds	r3, #28
 800d594:	e7bc      	b.n	800d510 <_dtoa_r+0x8ec>
 800d596:	9b07      	ldr	r3, [sp, #28]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	dc35      	bgt.n	800d608 <_dtoa_r+0x9e4>
 800d59c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d59e:	2b02      	cmp	r3, #2
 800d5a0:	dd32      	ble.n	800d608 <_dtoa_r+0x9e4>
 800d5a2:	9b07      	ldr	r3, [sp, #28]
 800d5a4:	930c      	str	r3, [sp, #48]	; 0x30
 800d5a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d10c      	bne.n	800d5c6 <_dtoa_r+0x9a2>
 800d5ac:	0031      	movs	r1, r6
 800d5ae:	2205      	movs	r2, #5
 800d5b0:	0038      	movs	r0, r7
 800d5b2:	f000 f9d3 	bl	800d95c <__multadd>
 800d5b6:	0006      	movs	r6, r0
 800d5b8:	0001      	movs	r1, r0
 800d5ba:	9805      	ldr	r0, [sp, #20]
 800d5bc:	f000 fbea 	bl	800dd94 <__mcmp>
 800d5c0:	2800      	cmp	r0, #0
 800d5c2:	dd00      	ble.n	800d5c6 <_dtoa_r+0x9a2>
 800d5c4:	e5a5      	b.n	800d112 <_dtoa_r+0x4ee>
 800d5c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d5c8:	43db      	mvns	r3, r3
 800d5ca:	9302      	str	r3, [sp, #8]
 800d5cc:	9b06      	ldr	r3, [sp, #24]
 800d5ce:	9308      	str	r3, [sp, #32]
 800d5d0:	2400      	movs	r4, #0
 800d5d2:	0031      	movs	r1, r6
 800d5d4:	0038      	movs	r0, r7
 800d5d6:	f000 f99d 	bl	800d914 <_Bfree>
 800d5da:	2d00      	cmp	r5, #0
 800d5dc:	d100      	bne.n	800d5e0 <_dtoa_r+0x9bc>
 800d5de:	e6b7      	b.n	800d350 <_dtoa_r+0x72c>
 800d5e0:	2c00      	cmp	r4, #0
 800d5e2:	d005      	beq.n	800d5f0 <_dtoa_r+0x9cc>
 800d5e4:	42ac      	cmp	r4, r5
 800d5e6:	d003      	beq.n	800d5f0 <_dtoa_r+0x9cc>
 800d5e8:	0021      	movs	r1, r4
 800d5ea:	0038      	movs	r0, r7
 800d5ec:	f000 f992 	bl	800d914 <_Bfree>
 800d5f0:	0029      	movs	r1, r5
 800d5f2:	0038      	movs	r0, r7
 800d5f4:	f000 f98e 	bl	800d914 <_Bfree>
 800d5f8:	e6aa      	b.n	800d350 <_dtoa_r+0x72c>
 800d5fa:	2600      	movs	r6, #0
 800d5fc:	0035      	movs	r5, r6
 800d5fe:	e7e2      	b.n	800d5c6 <_dtoa_r+0x9a2>
 800d600:	9602      	str	r6, [sp, #8]
 800d602:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800d604:	0035      	movs	r5, r6
 800d606:	e584      	b.n	800d112 <_dtoa_r+0x4ee>
 800d608:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d100      	bne.n	800d610 <_dtoa_r+0x9ec>
 800d60e:	e0ce      	b.n	800d7ae <_dtoa_r+0xb8a>
 800d610:	9b07      	ldr	r3, [sp, #28]
 800d612:	930c      	str	r3, [sp, #48]	; 0x30
 800d614:	2c00      	cmp	r4, #0
 800d616:	dd05      	ble.n	800d624 <_dtoa_r+0xa00>
 800d618:	0029      	movs	r1, r5
 800d61a:	0022      	movs	r2, r4
 800d61c:	0038      	movs	r0, r7
 800d61e:	f000 fb4b 	bl	800dcb8 <__lshift>
 800d622:	0005      	movs	r5, r0
 800d624:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d626:	0028      	movs	r0, r5
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d022      	beq.n	800d672 <_dtoa_r+0xa4e>
 800d62c:	0038      	movs	r0, r7
 800d62e:	6869      	ldr	r1, [r5, #4]
 800d630:	f000 f92c 	bl	800d88c <_Balloc>
 800d634:	1e04      	subs	r4, r0, #0
 800d636:	d10f      	bne.n	800d658 <_dtoa_r+0xa34>
 800d638:	0002      	movs	r2, r0
 800d63a:	4b05      	ldr	r3, [pc, #20]	; (800d650 <_dtoa_r+0xa2c>)
 800d63c:	4905      	ldr	r1, [pc, #20]	; (800d654 <_dtoa_r+0xa30>)
 800d63e:	f7ff fb06 	bl	800cc4e <_dtoa_r+0x2a>
 800d642:	46c0      	nop			; (mov r8, r8)
 800d644:	40240000 	.word	0x40240000
 800d648:	00000433 	.word	0x00000433
 800d64c:	7ff00000 	.word	0x7ff00000
 800d650:	0800f5fb 	.word	0x0800f5fb
 800d654:	000002ea 	.word	0x000002ea
 800d658:	0029      	movs	r1, r5
 800d65a:	692b      	ldr	r3, [r5, #16]
 800d65c:	310c      	adds	r1, #12
 800d65e:	1c9a      	adds	r2, r3, #2
 800d660:	0092      	lsls	r2, r2, #2
 800d662:	300c      	adds	r0, #12
 800d664:	f7fe fda0 	bl	800c1a8 <memcpy>
 800d668:	2201      	movs	r2, #1
 800d66a:	0021      	movs	r1, r4
 800d66c:	0038      	movs	r0, r7
 800d66e:	f000 fb23 	bl	800dcb8 <__lshift>
 800d672:	9b06      	ldr	r3, [sp, #24]
 800d674:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d676:	930a      	str	r3, [sp, #40]	; 0x28
 800d678:	3b01      	subs	r3, #1
 800d67a:	189b      	adds	r3, r3, r2
 800d67c:	2201      	movs	r2, #1
 800d67e:	002c      	movs	r4, r5
 800d680:	0005      	movs	r5, r0
 800d682:	9314      	str	r3, [sp, #80]	; 0x50
 800d684:	9b08      	ldr	r3, [sp, #32]
 800d686:	4013      	ands	r3, r2
 800d688:	930f      	str	r3, [sp, #60]	; 0x3c
 800d68a:	0031      	movs	r1, r6
 800d68c:	9805      	ldr	r0, [sp, #20]
 800d68e:	f7ff fa3d 	bl	800cb0c <quorem>
 800d692:	0003      	movs	r3, r0
 800d694:	0021      	movs	r1, r4
 800d696:	3330      	adds	r3, #48	; 0x30
 800d698:	900d      	str	r0, [sp, #52]	; 0x34
 800d69a:	9805      	ldr	r0, [sp, #20]
 800d69c:	9307      	str	r3, [sp, #28]
 800d69e:	f000 fb79 	bl	800dd94 <__mcmp>
 800d6a2:	002a      	movs	r2, r5
 800d6a4:	900e      	str	r0, [sp, #56]	; 0x38
 800d6a6:	0031      	movs	r1, r6
 800d6a8:	0038      	movs	r0, r7
 800d6aa:	f000 fb8f 	bl	800ddcc <__mdiff>
 800d6ae:	68c3      	ldr	r3, [r0, #12]
 800d6b0:	9008      	str	r0, [sp, #32]
 800d6b2:	9310      	str	r3, [sp, #64]	; 0x40
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	930c      	str	r3, [sp, #48]	; 0x30
 800d6b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d104      	bne.n	800d6c8 <_dtoa_r+0xaa4>
 800d6be:	0001      	movs	r1, r0
 800d6c0:	9805      	ldr	r0, [sp, #20]
 800d6c2:	f000 fb67 	bl	800dd94 <__mcmp>
 800d6c6:	900c      	str	r0, [sp, #48]	; 0x30
 800d6c8:	0038      	movs	r0, r7
 800d6ca:	9908      	ldr	r1, [sp, #32]
 800d6cc:	f000 f922 	bl	800d914 <_Bfree>
 800d6d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	9308      	str	r3, [sp, #32]
 800d6d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d6da:	4313      	orrs	r3, r2
 800d6dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d6de:	4313      	orrs	r3, r2
 800d6e0:	d10c      	bne.n	800d6fc <_dtoa_r+0xad8>
 800d6e2:	9b07      	ldr	r3, [sp, #28]
 800d6e4:	2b39      	cmp	r3, #57	; 0x39
 800d6e6:	d026      	beq.n	800d736 <_dtoa_r+0xb12>
 800d6e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	dd02      	ble.n	800d6f4 <_dtoa_r+0xad0>
 800d6ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d6f0:	3331      	adds	r3, #49	; 0x31
 800d6f2:	9307      	str	r3, [sp, #28]
 800d6f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6f6:	9a07      	ldr	r2, [sp, #28]
 800d6f8:	701a      	strb	r2, [r3, #0]
 800d6fa:	e76a      	b.n	800d5d2 <_dtoa_r+0x9ae>
 800d6fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	db04      	blt.n	800d70c <_dtoa_r+0xae8>
 800d702:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d704:	4313      	orrs	r3, r2
 800d706:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d708:	4313      	orrs	r3, r2
 800d70a:	d11f      	bne.n	800d74c <_dtoa_r+0xb28>
 800d70c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d70e:	2b00      	cmp	r3, #0
 800d710:	ddf0      	ble.n	800d6f4 <_dtoa_r+0xad0>
 800d712:	9905      	ldr	r1, [sp, #20]
 800d714:	2201      	movs	r2, #1
 800d716:	0038      	movs	r0, r7
 800d718:	f000 face 	bl	800dcb8 <__lshift>
 800d71c:	0031      	movs	r1, r6
 800d71e:	9005      	str	r0, [sp, #20]
 800d720:	f000 fb38 	bl	800dd94 <__mcmp>
 800d724:	2800      	cmp	r0, #0
 800d726:	dc03      	bgt.n	800d730 <_dtoa_r+0xb0c>
 800d728:	d1e4      	bne.n	800d6f4 <_dtoa_r+0xad0>
 800d72a:	9b07      	ldr	r3, [sp, #28]
 800d72c:	07db      	lsls	r3, r3, #31
 800d72e:	d5e1      	bpl.n	800d6f4 <_dtoa_r+0xad0>
 800d730:	9b07      	ldr	r3, [sp, #28]
 800d732:	2b39      	cmp	r3, #57	; 0x39
 800d734:	d1db      	bne.n	800d6ee <_dtoa_r+0xaca>
 800d736:	2339      	movs	r3, #57	; 0x39
 800d738:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d73a:	7013      	strb	r3, [r2, #0]
 800d73c:	9b08      	ldr	r3, [sp, #32]
 800d73e:	9308      	str	r3, [sp, #32]
 800d740:	3b01      	subs	r3, #1
 800d742:	781a      	ldrb	r2, [r3, #0]
 800d744:	2a39      	cmp	r2, #57	; 0x39
 800d746:	d068      	beq.n	800d81a <_dtoa_r+0xbf6>
 800d748:	3201      	adds	r2, #1
 800d74a:	e7d5      	b.n	800d6f8 <_dtoa_r+0xad4>
 800d74c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d74e:	2b00      	cmp	r3, #0
 800d750:	dd07      	ble.n	800d762 <_dtoa_r+0xb3e>
 800d752:	9b07      	ldr	r3, [sp, #28]
 800d754:	2b39      	cmp	r3, #57	; 0x39
 800d756:	d0ee      	beq.n	800d736 <_dtoa_r+0xb12>
 800d758:	9b07      	ldr	r3, [sp, #28]
 800d75a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d75c:	3301      	adds	r3, #1
 800d75e:	7013      	strb	r3, [r2, #0]
 800d760:	e737      	b.n	800d5d2 <_dtoa_r+0x9ae>
 800d762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d764:	9a07      	ldr	r2, [sp, #28]
 800d766:	701a      	strb	r2, [r3, #0]
 800d768:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d76a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d76c:	4293      	cmp	r3, r2
 800d76e:	d03e      	beq.n	800d7ee <_dtoa_r+0xbca>
 800d770:	2300      	movs	r3, #0
 800d772:	220a      	movs	r2, #10
 800d774:	9905      	ldr	r1, [sp, #20]
 800d776:	0038      	movs	r0, r7
 800d778:	f000 f8f0 	bl	800d95c <__multadd>
 800d77c:	2300      	movs	r3, #0
 800d77e:	9005      	str	r0, [sp, #20]
 800d780:	220a      	movs	r2, #10
 800d782:	0021      	movs	r1, r4
 800d784:	0038      	movs	r0, r7
 800d786:	42ac      	cmp	r4, r5
 800d788:	d106      	bne.n	800d798 <_dtoa_r+0xb74>
 800d78a:	f000 f8e7 	bl	800d95c <__multadd>
 800d78e:	0004      	movs	r4, r0
 800d790:	0005      	movs	r5, r0
 800d792:	9b08      	ldr	r3, [sp, #32]
 800d794:	930a      	str	r3, [sp, #40]	; 0x28
 800d796:	e778      	b.n	800d68a <_dtoa_r+0xa66>
 800d798:	f000 f8e0 	bl	800d95c <__multadd>
 800d79c:	0029      	movs	r1, r5
 800d79e:	0004      	movs	r4, r0
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	220a      	movs	r2, #10
 800d7a4:	0038      	movs	r0, r7
 800d7a6:	f000 f8d9 	bl	800d95c <__multadd>
 800d7aa:	0005      	movs	r5, r0
 800d7ac:	e7f1      	b.n	800d792 <_dtoa_r+0xb6e>
 800d7ae:	9b07      	ldr	r3, [sp, #28]
 800d7b0:	930c      	str	r3, [sp, #48]	; 0x30
 800d7b2:	2400      	movs	r4, #0
 800d7b4:	0031      	movs	r1, r6
 800d7b6:	9805      	ldr	r0, [sp, #20]
 800d7b8:	f7ff f9a8 	bl	800cb0c <quorem>
 800d7bc:	9b06      	ldr	r3, [sp, #24]
 800d7be:	3030      	adds	r0, #48	; 0x30
 800d7c0:	5518      	strb	r0, [r3, r4]
 800d7c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d7c4:	3401      	adds	r4, #1
 800d7c6:	9007      	str	r0, [sp, #28]
 800d7c8:	42a3      	cmp	r3, r4
 800d7ca:	dd07      	ble.n	800d7dc <_dtoa_r+0xbb8>
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	220a      	movs	r2, #10
 800d7d0:	0038      	movs	r0, r7
 800d7d2:	9905      	ldr	r1, [sp, #20]
 800d7d4:	f000 f8c2 	bl	800d95c <__multadd>
 800d7d8:	9005      	str	r0, [sp, #20]
 800d7da:	e7eb      	b.n	800d7b4 <_dtoa_r+0xb90>
 800d7dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d7de:	2001      	movs	r0, #1
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	dd00      	ble.n	800d7e6 <_dtoa_r+0xbc2>
 800d7e4:	0018      	movs	r0, r3
 800d7e6:	2400      	movs	r4, #0
 800d7e8:	9b06      	ldr	r3, [sp, #24]
 800d7ea:	181b      	adds	r3, r3, r0
 800d7ec:	9308      	str	r3, [sp, #32]
 800d7ee:	9905      	ldr	r1, [sp, #20]
 800d7f0:	2201      	movs	r2, #1
 800d7f2:	0038      	movs	r0, r7
 800d7f4:	f000 fa60 	bl	800dcb8 <__lshift>
 800d7f8:	0031      	movs	r1, r6
 800d7fa:	9005      	str	r0, [sp, #20]
 800d7fc:	f000 faca 	bl	800dd94 <__mcmp>
 800d800:	2800      	cmp	r0, #0
 800d802:	dc9b      	bgt.n	800d73c <_dtoa_r+0xb18>
 800d804:	d102      	bne.n	800d80c <_dtoa_r+0xbe8>
 800d806:	9b07      	ldr	r3, [sp, #28]
 800d808:	07db      	lsls	r3, r3, #31
 800d80a:	d497      	bmi.n	800d73c <_dtoa_r+0xb18>
 800d80c:	9b08      	ldr	r3, [sp, #32]
 800d80e:	9308      	str	r3, [sp, #32]
 800d810:	3b01      	subs	r3, #1
 800d812:	781a      	ldrb	r2, [r3, #0]
 800d814:	2a30      	cmp	r2, #48	; 0x30
 800d816:	d0fa      	beq.n	800d80e <_dtoa_r+0xbea>
 800d818:	e6db      	b.n	800d5d2 <_dtoa_r+0x9ae>
 800d81a:	9a06      	ldr	r2, [sp, #24]
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d18e      	bne.n	800d73e <_dtoa_r+0xb1a>
 800d820:	9b02      	ldr	r3, [sp, #8]
 800d822:	3301      	adds	r3, #1
 800d824:	9302      	str	r3, [sp, #8]
 800d826:	2331      	movs	r3, #49	; 0x31
 800d828:	e799      	b.n	800d75e <_dtoa_r+0xb3a>
 800d82a:	4b09      	ldr	r3, [pc, #36]	; (800d850 <_dtoa_r+0xc2c>)
 800d82c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d82e:	9306      	str	r3, [sp, #24]
 800d830:	4b08      	ldr	r3, [pc, #32]	; (800d854 <_dtoa_r+0xc30>)
 800d832:	2a00      	cmp	r2, #0
 800d834:	d001      	beq.n	800d83a <_dtoa_r+0xc16>
 800d836:	f7ff fa3f 	bl	800ccb8 <_dtoa_r+0x94>
 800d83a:	f7ff fa3f 	bl	800ccbc <_dtoa_r+0x98>
 800d83e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d840:	2b00      	cmp	r3, #0
 800d842:	dcb6      	bgt.n	800d7b2 <_dtoa_r+0xb8e>
 800d844:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d846:	2b02      	cmp	r3, #2
 800d848:	dd00      	ble.n	800d84c <_dtoa_r+0xc28>
 800d84a:	e6ac      	b.n	800d5a6 <_dtoa_r+0x982>
 800d84c:	e7b1      	b.n	800d7b2 <_dtoa_r+0xb8e>
 800d84e:	46c0      	nop			; (mov r8, r8)
 800d850:	0800f57c 	.word	0x0800f57c
 800d854:	0800f584 	.word	0x0800f584

0800d858 <_localeconv_r>:
 800d858:	4800      	ldr	r0, [pc, #0]	; (800d85c <_localeconv_r+0x4>)
 800d85a:	4770      	bx	lr
 800d85c:	20000168 	.word	0x20000168

0800d860 <malloc>:
 800d860:	b510      	push	{r4, lr}
 800d862:	4b03      	ldr	r3, [pc, #12]	; (800d870 <malloc+0x10>)
 800d864:	0001      	movs	r1, r0
 800d866:	6818      	ldr	r0, [r3, #0]
 800d868:	f000 fc44 	bl	800e0f4 <_malloc_r>
 800d86c:	bd10      	pop	{r4, pc}
 800d86e:	46c0      	nop			; (mov r8, r8)
 800d870:	20000014 	.word	0x20000014

0800d874 <memchr>:
 800d874:	b2c9      	uxtb	r1, r1
 800d876:	1882      	adds	r2, r0, r2
 800d878:	4290      	cmp	r0, r2
 800d87a:	d101      	bne.n	800d880 <memchr+0xc>
 800d87c:	2000      	movs	r0, #0
 800d87e:	4770      	bx	lr
 800d880:	7803      	ldrb	r3, [r0, #0]
 800d882:	428b      	cmp	r3, r1
 800d884:	d0fb      	beq.n	800d87e <memchr+0xa>
 800d886:	3001      	adds	r0, #1
 800d888:	e7f6      	b.n	800d878 <memchr+0x4>
	...

0800d88c <_Balloc>:
 800d88c:	b570      	push	{r4, r5, r6, lr}
 800d88e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d890:	0006      	movs	r6, r0
 800d892:	000c      	movs	r4, r1
 800d894:	2d00      	cmp	r5, #0
 800d896:	d10e      	bne.n	800d8b6 <_Balloc+0x2a>
 800d898:	2010      	movs	r0, #16
 800d89a:	f7ff ffe1 	bl	800d860 <malloc>
 800d89e:	1e02      	subs	r2, r0, #0
 800d8a0:	6270      	str	r0, [r6, #36]	; 0x24
 800d8a2:	d104      	bne.n	800d8ae <_Balloc+0x22>
 800d8a4:	2166      	movs	r1, #102	; 0x66
 800d8a6:	4b19      	ldr	r3, [pc, #100]	; (800d90c <_Balloc+0x80>)
 800d8a8:	4819      	ldr	r0, [pc, #100]	; (800d910 <_Balloc+0x84>)
 800d8aa:	f000 fe0d 	bl	800e4c8 <__assert_func>
 800d8ae:	6045      	str	r5, [r0, #4]
 800d8b0:	6085      	str	r5, [r0, #8]
 800d8b2:	6005      	str	r5, [r0, #0]
 800d8b4:	60c5      	str	r5, [r0, #12]
 800d8b6:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800d8b8:	68eb      	ldr	r3, [r5, #12]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d013      	beq.n	800d8e6 <_Balloc+0x5a>
 800d8be:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d8c0:	00a2      	lsls	r2, r4, #2
 800d8c2:	68db      	ldr	r3, [r3, #12]
 800d8c4:	189b      	adds	r3, r3, r2
 800d8c6:	6818      	ldr	r0, [r3, #0]
 800d8c8:	2800      	cmp	r0, #0
 800d8ca:	d118      	bne.n	800d8fe <_Balloc+0x72>
 800d8cc:	2101      	movs	r1, #1
 800d8ce:	000d      	movs	r5, r1
 800d8d0:	40a5      	lsls	r5, r4
 800d8d2:	1d6a      	adds	r2, r5, #5
 800d8d4:	0030      	movs	r0, r6
 800d8d6:	0092      	lsls	r2, r2, #2
 800d8d8:	f000 fb74 	bl	800dfc4 <_calloc_r>
 800d8dc:	2800      	cmp	r0, #0
 800d8de:	d00c      	beq.n	800d8fa <_Balloc+0x6e>
 800d8e0:	6044      	str	r4, [r0, #4]
 800d8e2:	6085      	str	r5, [r0, #8]
 800d8e4:	e00d      	b.n	800d902 <_Balloc+0x76>
 800d8e6:	2221      	movs	r2, #33	; 0x21
 800d8e8:	2104      	movs	r1, #4
 800d8ea:	0030      	movs	r0, r6
 800d8ec:	f000 fb6a 	bl	800dfc4 <_calloc_r>
 800d8f0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d8f2:	60e8      	str	r0, [r5, #12]
 800d8f4:	68db      	ldr	r3, [r3, #12]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d1e1      	bne.n	800d8be <_Balloc+0x32>
 800d8fa:	2000      	movs	r0, #0
 800d8fc:	bd70      	pop	{r4, r5, r6, pc}
 800d8fe:	6802      	ldr	r2, [r0, #0]
 800d900:	601a      	str	r2, [r3, #0]
 800d902:	2300      	movs	r3, #0
 800d904:	6103      	str	r3, [r0, #16]
 800d906:	60c3      	str	r3, [r0, #12]
 800d908:	e7f8      	b.n	800d8fc <_Balloc+0x70>
 800d90a:	46c0      	nop			; (mov r8, r8)
 800d90c:	0800f589 	.word	0x0800f589
 800d910:	0800f60c 	.word	0x0800f60c

0800d914 <_Bfree>:
 800d914:	b570      	push	{r4, r5, r6, lr}
 800d916:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d918:	0005      	movs	r5, r0
 800d91a:	000c      	movs	r4, r1
 800d91c:	2e00      	cmp	r6, #0
 800d91e:	d10e      	bne.n	800d93e <_Bfree+0x2a>
 800d920:	2010      	movs	r0, #16
 800d922:	f7ff ff9d 	bl	800d860 <malloc>
 800d926:	1e02      	subs	r2, r0, #0
 800d928:	6268      	str	r0, [r5, #36]	; 0x24
 800d92a:	d104      	bne.n	800d936 <_Bfree+0x22>
 800d92c:	218a      	movs	r1, #138	; 0x8a
 800d92e:	4b09      	ldr	r3, [pc, #36]	; (800d954 <_Bfree+0x40>)
 800d930:	4809      	ldr	r0, [pc, #36]	; (800d958 <_Bfree+0x44>)
 800d932:	f000 fdc9 	bl	800e4c8 <__assert_func>
 800d936:	6046      	str	r6, [r0, #4]
 800d938:	6086      	str	r6, [r0, #8]
 800d93a:	6006      	str	r6, [r0, #0]
 800d93c:	60c6      	str	r6, [r0, #12]
 800d93e:	2c00      	cmp	r4, #0
 800d940:	d007      	beq.n	800d952 <_Bfree+0x3e>
 800d942:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d944:	6862      	ldr	r2, [r4, #4]
 800d946:	68db      	ldr	r3, [r3, #12]
 800d948:	0092      	lsls	r2, r2, #2
 800d94a:	189b      	adds	r3, r3, r2
 800d94c:	681a      	ldr	r2, [r3, #0]
 800d94e:	6022      	str	r2, [r4, #0]
 800d950:	601c      	str	r4, [r3, #0]
 800d952:	bd70      	pop	{r4, r5, r6, pc}
 800d954:	0800f589 	.word	0x0800f589
 800d958:	0800f60c 	.word	0x0800f60c

0800d95c <__multadd>:
 800d95c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d95e:	000e      	movs	r6, r1
 800d960:	9001      	str	r0, [sp, #4]
 800d962:	000c      	movs	r4, r1
 800d964:	001d      	movs	r5, r3
 800d966:	2000      	movs	r0, #0
 800d968:	690f      	ldr	r7, [r1, #16]
 800d96a:	3614      	adds	r6, #20
 800d96c:	6833      	ldr	r3, [r6, #0]
 800d96e:	3001      	adds	r0, #1
 800d970:	b299      	uxth	r1, r3
 800d972:	4351      	muls	r1, r2
 800d974:	0c1b      	lsrs	r3, r3, #16
 800d976:	4353      	muls	r3, r2
 800d978:	1949      	adds	r1, r1, r5
 800d97a:	0c0d      	lsrs	r5, r1, #16
 800d97c:	195b      	adds	r3, r3, r5
 800d97e:	0c1d      	lsrs	r5, r3, #16
 800d980:	b289      	uxth	r1, r1
 800d982:	041b      	lsls	r3, r3, #16
 800d984:	185b      	adds	r3, r3, r1
 800d986:	c608      	stmia	r6!, {r3}
 800d988:	4287      	cmp	r7, r0
 800d98a:	dcef      	bgt.n	800d96c <__multadd+0x10>
 800d98c:	2d00      	cmp	r5, #0
 800d98e:	d022      	beq.n	800d9d6 <__multadd+0x7a>
 800d990:	68a3      	ldr	r3, [r4, #8]
 800d992:	42bb      	cmp	r3, r7
 800d994:	dc19      	bgt.n	800d9ca <__multadd+0x6e>
 800d996:	6863      	ldr	r3, [r4, #4]
 800d998:	9801      	ldr	r0, [sp, #4]
 800d99a:	1c59      	adds	r1, r3, #1
 800d99c:	f7ff ff76 	bl	800d88c <_Balloc>
 800d9a0:	1e06      	subs	r6, r0, #0
 800d9a2:	d105      	bne.n	800d9b0 <__multadd+0x54>
 800d9a4:	0002      	movs	r2, r0
 800d9a6:	21b5      	movs	r1, #181	; 0xb5
 800d9a8:	4b0c      	ldr	r3, [pc, #48]	; (800d9dc <__multadd+0x80>)
 800d9aa:	480d      	ldr	r0, [pc, #52]	; (800d9e0 <__multadd+0x84>)
 800d9ac:	f000 fd8c 	bl	800e4c8 <__assert_func>
 800d9b0:	0021      	movs	r1, r4
 800d9b2:	6923      	ldr	r3, [r4, #16]
 800d9b4:	310c      	adds	r1, #12
 800d9b6:	1c9a      	adds	r2, r3, #2
 800d9b8:	0092      	lsls	r2, r2, #2
 800d9ba:	300c      	adds	r0, #12
 800d9bc:	f7fe fbf4 	bl	800c1a8 <memcpy>
 800d9c0:	0021      	movs	r1, r4
 800d9c2:	9801      	ldr	r0, [sp, #4]
 800d9c4:	f7ff ffa6 	bl	800d914 <_Bfree>
 800d9c8:	0034      	movs	r4, r6
 800d9ca:	1d3b      	adds	r3, r7, #4
 800d9cc:	009b      	lsls	r3, r3, #2
 800d9ce:	18e3      	adds	r3, r4, r3
 800d9d0:	605d      	str	r5, [r3, #4]
 800d9d2:	1c7b      	adds	r3, r7, #1
 800d9d4:	6123      	str	r3, [r4, #16]
 800d9d6:	0020      	movs	r0, r4
 800d9d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d9da:	46c0      	nop			; (mov r8, r8)
 800d9dc:	0800f5fb 	.word	0x0800f5fb
 800d9e0:	0800f60c 	.word	0x0800f60c

0800d9e4 <__hi0bits>:
 800d9e4:	0003      	movs	r3, r0
 800d9e6:	0c02      	lsrs	r2, r0, #16
 800d9e8:	2000      	movs	r0, #0
 800d9ea:	4282      	cmp	r2, r0
 800d9ec:	d101      	bne.n	800d9f2 <__hi0bits+0xe>
 800d9ee:	041b      	lsls	r3, r3, #16
 800d9f0:	3010      	adds	r0, #16
 800d9f2:	0e1a      	lsrs	r2, r3, #24
 800d9f4:	d101      	bne.n	800d9fa <__hi0bits+0x16>
 800d9f6:	3008      	adds	r0, #8
 800d9f8:	021b      	lsls	r3, r3, #8
 800d9fa:	0f1a      	lsrs	r2, r3, #28
 800d9fc:	d101      	bne.n	800da02 <__hi0bits+0x1e>
 800d9fe:	3004      	adds	r0, #4
 800da00:	011b      	lsls	r3, r3, #4
 800da02:	0f9a      	lsrs	r2, r3, #30
 800da04:	d101      	bne.n	800da0a <__hi0bits+0x26>
 800da06:	3002      	adds	r0, #2
 800da08:	009b      	lsls	r3, r3, #2
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	db03      	blt.n	800da16 <__hi0bits+0x32>
 800da0e:	3001      	adds	r0, #1
 800da10:	005b      	lsls	r3, r3, #1
 800da12:	d400      	bmi.n	800da16 <__hi0bits+0x32>
 800da14:	2020      	movs	r0, #32
 800da16:	4770      	bx	lr

0800da18 <__lo0bits>:
 800da18:	6803      	ldr	r3, [r0, #0]
 800da1a:	0002      	movs	r2, r0
 800da1c:	2107      	movs	r1, #7
 800da1e:	0018      	movs	r0, r3
 800da20:	4008      	ands	r0, r1
 800da22:	420b      	tst	r3, r1
 800da24:	d00d      	beq.n	800da42 <__lo0bits+0x2a>
 800da26:	3906      	subs	r1, #6
 800da28:	2000      	movs	r0, #0
 800da2a:	420b      	tst	r3, r1
 800da2c:	d105      	bne.n	800da3a <__lo0bits+0x22>
 800da2e:	3002      	adds	r0, #2
 800da30:	4203      	tst	r3, r0
 800da32:	d003      	beq.n	800da3c <__lo0bits+0x24>
 800da34:	40cb      	lsrs	r3, r1
 800da36:	0008      	movs	r0, r1
 800da38:	6013      	str	r3, [r2, #0]
 800da3a:	4770      	bx	lr
 800da3c:	089b      	lsrs	r3, r3, #2
 800da3e:	6013      	str	r3, [r2, #0]
 800da40:	e7fb      	b.n	800da3a <__lo0bits+0x22>
 800da42:	b299      	uxth	r1, r3
 800da44:	2900      	cmp	r1, #0
 800da46:	d101      	bne.n	800da4c <__lo0bits+0x34>
 800da48:	2010      	movs	r0, #16
 800da4a:	0c1b      	lsrs	r3, r3, #16
 800da4c:	b2d9      	uxtb	r1, r3
 800da4e:	2900      	cmp	r1, #0
 800da50:	d101      	bne.n	800da56 <__lo0bits+0x3e>
 800da52:	3008      	adds	r0, #8
 800da54:	0a1b      	lsrs	r3, r3, #8
 800da56:	0719      	lsls	r1, r3, #28
 800da58:	d101      	bne.n	800da5e <__lo0bits+0x46>
 800da5a:	3004      	adds	r0, #4
 800da5c:	091b      	lsrs	r3, r3, #4
 800da5e:	0799      	lsls	r1, r3, #30
 800da60:	d101      	bne.n	800da66 <__lo0bits+0x4e>
 800da62:	3002      	adds	r0, #2
 800da64:	089b      	lsrs	r3, r3, #2
 800da66:	07d9      	lsls	r1, r3, #31
 800da68:	d4e9      	bmi.n	800da3e <__lo0bits+0x26>
 800da6a:	3001      	adds	r0, #1
 800da6c:	085b      	lsrs	r3, r3, #1
 800da6e:	d1e6      	bne.n	800da3e <__lo0bits+0x26>
 800da70:	2020      	movs	r0, #32
 800da72:	e7e2      	b.n	800da3a <__lo0bits+0x22>

0800da74 <__i2b>:
 800da74:	b510      	push	{r4, lr}
 800da76:	000c      	movs	r4, r1
 800da78:	2101      	movs	r1, #1
 800da7a:	f7ff ff07 	bl	800d88c <_Balloc>
 800da7e:	2800      	cmp	r0, #0
 800da80:	d106      	bne.n	800da90 <__i2b+0x1c>
 800da82:	21a0      	movs	r1, #160	; 0xa0
 800da84:	0002      	movs	r2, r0
 800da86:	4b04      	ldr	r3, [pc, #16]	; (800da98 <__i2b+0x24>)
 800da88:	4804      	ldr	r0, [pc, #16]	; (800da9c <__i2b+0x28>)
 800da8a:	0049      	lsls	r1, r1, #1
 800da8c:	f000 fd1c 	bl	800e4c8 <__assert_func>
 800da90:	2301      	movs	r3, #1
 800da92:	6144      	str	r4, [r0, #20]
 800da94:	6103      	str	r3, [r0, #16]
 800da96:	bd10      	pop	{r4, pc}
 800da98:	0800f5fb 	.word	0x0800f5fb
 800da9c:	0800f60c 	.word	0x0800f60c

0800daa0 <__multiply>:
 800daa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daa2:	690b      	ldr	r3, [r1, #16]
 800daa4:	0014      	movs	r4, r2
 800daa6:	6912      	ldr	r2, [r2, #16]
 800daa8:	000d      	movs	r5, r1
 800daaa:	b089      	sub	sp, #36	; 0x24
 800daac:	4293      	cmp	r3, r2
 800daae:	da01      	bge.n	800dab4 <__multiply+0x14>
 800dab0:	0025      	movs	r5, r4
 800dab2:	000c      	movs	r4, r1
 800dab4:	692f      	ldr	r7, [r5, #16]
 800dab6:	6926      	ldr	r6, [r4, #16]
 800dab8:	6869      	ldr	r1, [r5, #4]
 800daba:	19bb      	adds	r3, r7, r6
 800dabc:	9302      	str	r3, [sp, #8]
 800dabe:	68ab      	ldr	r3, [r5, #8]
 800dac0:	19ba      	adds	r2, r7, r6
 800dac2:	4293      	cmp	r3, r2
 800dac4:	da00      	bge.n	800dac8 <__multiply+0x28>
 800dac6:	3101      	adds	r1, #1
 800dac8:	f7ff fee0 	bl	800d88c <_Balloc>
 800dacc:	9001      	str	r0, [sp, #4]
 800dace:	2800      	cmp	r0, #0
 800dad0:	d106      	bne.n	800dae0 <__multiply+0x40>
 800dad2:	215e      	movs	r1, #94	; 0x5e
 800dad4:	0002      	movs	r2, r0
 800dad6:	4b48      	ldr	r3, [pc, #288]	; (800dbf8 <__multiply+0x158>)
 800dad8:	4848      	ldr	r0, [pc, #288]	; (800dbfc <__multiply+0x15c>)
 800dada:	31ff      	adds	r1, #255	; 0xff
 800dadc:	f000 fcf4 	bl	800e4c8 <__assert_func>
 800dae0:	9b01      	ldr	r3, [sp, #4]
 800dae2:	2200      	movs	r2, #0
 800dae4:	3314      	adds	r3, #20
 800dae6:	469c      	mov	ip, r3
 800dae8:	19bb      	adds	r3, r7, r6
 800daea:	009b      	lsls	r3, r3, #2
 800daec:	4463      	add	r3, ip
 800daee:	9303      	str	r3, [sp, #12]
 800daf0:	4663      	mov	r3, ip
 800daf2:	9903      	ldr	r1, [sp, #12]
 800daf4:	428b      	cmp	r3, r1
 800daf6:	d32c      	bcc.n	800db52 <__multiply+0xb2>
 800daf8:	002b      	movs	r3, r5
 800dafa:	0022      	movs	r2, r4
 800dafc:	3314      	adds	r3, #20
 800dafe:	00bf      	lsls	r7, r7, #2
 800db00:	3214      	adds	r2, #20
 800db02:	9306      	str	r3, [sp, #24]
 800db04:	00b6      	lsls	r6, r6, #2
 800db06:	19db      	adds	r3, r3, r7
 800db08:	9304      	str	r3, [sp, #16]
 800db0a:	1993      	adds	r3, r2, r6
 800db0c:	9307      	str	r3, [sp, #28]
 800db0e:	2304      	movs	r3, #4
 800db10:	9305      	str	r3, [sp, #20]
 800db12:	002b      	movs	r3, r5
 800db14:	9904      	ldr	r1, [sp, #16]
 800db16:	3315      	adds	r3, #21
 800db18:	9200      	str	r2, [sp, #0]
 800db1a:	4299      	cmp	r1, r3
 800db1c:	d305      	bcc.n	800db2a <__multiply+0x8a>
 800db1e:	1b4b      	subs	r3, r1, r5
 800db20:	3b15      	subs	r3, #21
 800db22:	089b      	lsrs	r3, r3, #2
 800db24:	3301      	adds	r3, #1
 800db26:	009b      	lsls	r3, r3, #2
 800db28:	9305      	str	r3, [sp, #20]
 800db2a:	9b07      	ldr	r3, [sp, #28]
 800db2c:	9a00      	ldr	r2, [sp, #0]
 800db2e:	429a      	cmp	r2, r3
 800db30:	d311      	bcc.n	800db56 <__multiply+0xb6>
 800db32:	9b02      	ldr	r3, [sp, #8]
 800db34:	2b00      	cmp	r3, #0
 800db36:	dd06      	ble.n	800db46 <__multiply+0xa6>
 800db38:	9b03      	ldr	r3, [sp, #12]
 800db3a:	3b04      	subs	r3, #4
 800db3c:	9303      	str	r3, [sp, #12]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	9300      	str	r3, [sp, #0]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d053      	beq.n	800dbee <__multiply+0x14e>
 800db46:	9b01      	ldr	r3, [sp, #4]
 800db48:	9a02      	ldr	r2, [sp, #8]
 800db4a:	0018      	movs	r0, r3
 800db4c:	611a      	str	r2, [r3, #16]
 800db4e:	b009      	add	sp, #36	; 0x24
 800db50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db52:	c304      	stmia	r3!, {r2}
 800db54:	e7cd      	b.n	800daf2 <__multiply+0x52>
 800db56:	9b00      	ldr	r3, [sp, #0]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	b298      	uxth	r0, r3
 800db5c:	2800      	cmp	r0, #0
 800db5e:	d01b      	beq.n	800db98 <__multiply+0xf8>
 800db60:	4667      	mov	r7, ip
 800db62:	2400      	movs	r4, #0
 800db64:	9e06      	ldr	r6, [sp, #24]
 800db66:	ce02      	ldmia	r6!, {r1}
 800db68:	683a      	ldr	r2, [r7, #0]
 800db6a:	b28b      	uxth	r3, r1
 800db6c:	4343      	muls	r3, r0
 800db6e:	b292      	uxth	r2, r2
 800db70:	189b      	adds	r3, r3, r2
 800db72:	191b      	adds	r3, r3, r4
 800db74:	0c0c      	lsrs	r4, r1, #16
 800db76:	4344      	muls	r4, r0
 800db78:	683a      	ldr	r2, [r7, #0]
 800db7a:	0c11      	lsrs	r1, r2, #16
 800db7c:	1861      	adds	r1, r4, r1
 800db7e:	0c1c      	lsrs	r4, r3, #16
 800db80:	1909      	adds	r1, r1, r4
 800db82:	0c0c      	lsrs	r4, r1, #16
 800db84:	b29b      	uxth	r3, r3
 800db86:	0409      	lsls	r1, r1, #16
 800db88:	430b      	orrs	r3, r1
 800db8a:	c708      	stmia	r7!, {r3}
 800db8c:	9b04      	ldr	r3, [sp, #16]
 800db8e:	42b3      	cmp	r3, r6
 800db90:	d8e9      	bhi.n	800db66 <__multiply+0xc6>
 800db92:	4663      	mov	r3, ip
 800db94:	9a05      	ldr	r2, [sp, #20]
 800db96:	509c      	str	r4, [r3, r2]
 800db98:	9b00      	ldr	r3, [sp, #0]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	0c1e      	lsrs	r6, r3, #16
 800db9e:	d020      	beq.n	800dbe2 <__multiply+0x142>
 800dba0:	4663      	mov	r3, ip
 800dba2:	002c      	movs	r4, r5
 800dba4:	4660      	mov	r0, ip
 800dba6:	2700      	movs	r7, #0
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	3414      	adds	r4, #20
 800dbac:	6822      	ldr	r2, [r4, #0]
 800dbae:	b29b      	uxth	r3, r3
 800dbb0:	b291      	uxth	r1, r2
 800dbb2:	4371      	muls	r1, r6
 800dbb4:	6802      	ldr	r2, [r0, #0]
 800dbb6:	0c12      	lsrs	r2, r2, #16
 800dbb8:	1889      	adds	r1, r1, r2
 800dbba:	19cf      	adds	r7, r1, r7
 800dbbc:	0439      	lsls	r1, r7, #16
 800dbbe:	430b      	orrs	r3, r1
 800dbc0:	6003      	str	r3, [r0, #0]
 800dbc2:	cc02      	ldmia	r4!, {r1}
 800dbc4:	6843      	ldr	r3, [r0, #4]
 800dbc6:	0c09      	lsrs	r1, r1, #16
 800dbc8:	4371      	muls	r1, r6
 800dbca:	b29b      	uxth	r3, r3
 800dbcc:	0c3f      	lsrs	r7, r7, #16
 800dbce:	18cb      	adds	r3, r1, r3
 800dbd0:	9a04      	ldr	r2, [sp, #16]
 800dbd2:	19db      	adds	r3, r3, r7
 800dbd4:	0c1f      	lsrs	r7, r3, #16
 800dbd6:	3004      	adds	r0, #4
 800dbd8:	42a2      	cmp	r2, r4
 800dbda:	d8e7      	bhi.n	800dbac <__multiply+0x10c>
 800dbdc:	4662      	mov	r2, ip
 800dbde:	9905      	ldr	r1, [sp, #20]
 800dbe0:	5053      	str	r3, [r2, r1]
 800dbe2:	9b00      	ldr	r3, [sp, #0]
 800dbe4:	3304      	adds	r3, #4
 800dbe6:	9300      	str	r3, [sp, #0]
 800dbe8:	2304      	movs	r3, #4
 800dbea:	449c      	add	ip, r3
 800dbec:	e79d      	b.n	800db2a <__multiply+0x8a>
 800dbee:	9b02      	ldr	r3, [sp, #8]
 800dbf0:	3b01      	subs	r3, #1
 800dbf2:	9302      	str	r3, [sp, #8]
 800dbf4:	e79d      	b.n	800db32 <__multiply+0x92>
 800dbf6:	46c0      	nop			; (mov r8, r8)
 800dbf8:	0800f5fb 	.word	0x0800f5fb
 800dbfc:	0800f60c 	.word	0x0800f60c

0800dc00 <__pow5mult>:
 800dc00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc02:	2303      	movs	r3, #3
 800dc04:	0015      	movs	r5, r2
 800dc06:	0007      	movs	r7, r0
 800dc08:	000e      	movs	r6, r1
 800dc0a:	401a      	ands	r2, r3
 800dc0c:	421d      	tst	r5, r3
 800dc0e:	d008      	beq.n	800dc22 <__pow5mult+0x22>
 800dc10:	4925      	ldr	r1, [pc, #148]	; (800dca8 <__pow5mult+0xa8>)
 800dc12:	3a01      	subs	r2, #1
 800dc14:	0092      	lsls	r2, r2, #2
 800dc16:	5852      	ldr	r2, [r2, r1]
 800dc18:	2300      	movs	r3, #0
 800dc1a:	0031      	movs	r1, r6
 800dc1c:	f7ff fe9e 	bl	800d95c <__multadd>
 800dc20:	0006      	movs	r6, r0
 800dc22:	10ad      	asrs	r5, r5, #2
 800dc24:	d03d      	beq.n	800dca2 <__pow5mult+0xa2>
 800dc26:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800dc28:	2c00      	cmp	r4, #0
 800dc2a:	d10f      	bne.n	800dc4c <__pow5mult+0x4c>
 800dc2c:	2010      	movs	r0, #16
 800dc2e:	f7ff fe17 	bl	800d860 <malloc>
 800dc32:	1e02      	subs	r2, r0, #0
 800dc34:	6278      	str	r0, [r7, #36]	; 0x24
 800dc36:	d105      	bne.n	800dc44 <__pow5mult+0x44>
 800dc38:	21d7      	movs	r1, #215	; 0xd7
 800dc3a:	4b1c      	ldr	r3, [pc, #112]	; (800dcac <__pow5mult+0xac>)
 800dc3c:	481c      	ldr	r0, [pc, #112]	; (800dcb0 <__pow5mult+0xb0>)
 800dc3e:	0049      	lsls	r1, r1, #1
 800dc40:	f000 fc42 	bl	800e4c8 <__assert_func>
 800dc44:	6044      	str	r4, [r0, #4]
 800dc46:	6084      	str	r4, [r0, #8]
 800dc48:	6004      	str	r4, [r0, #0]
 800dc4a:	60c4      	str	r4, [r0, #12]
 800dc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc4e:	689c      	ldr	r4, [r3, #8]
 800dc50:	9301      	str	r3, [sp, #4]
 800dc52:	2c00      	cmp	r4, #0
 800dc54:	d108      	bne.n	800dc68 <__pow5mult+0x68>
 800dc56:	0038      	movs	r0, r7
 800dc58:	4916      	ldr	r1, [pc, #88]	; (800dcb4 <__pow5mult+0xb4>)
 800dc5a:	f7ff ff0b 	bl	800da74 <__i2b>
 800dc5e:	9b01      	ldr	r3, [sp, #4]
 800dc60:	0004      	movs	r4, r0
 800dc62:	6098      	str	r0, [r3, #8]
 800dc64:	2300      	movs	r3, #0
 800dc66:	6003      	str	r3, [r0, #0]
 800dc68:	2301      	movs	r3, #1
 800dc6a:	421d      	tst	r5, r3
 800dc6c:	d00a      	beq.n	800dc84 <__pow5mult+0x84>
 800dc6e:	0031      	movs	r1, r6
 800dc70:	0022      	movs	r2, r4
 800dc72:	0038      	movs	r0, r7
 800dc74:	f7ff ff14 	bl	800daa0 <__multiply>
 800dc78:	0031      	movs	r1, r6
 800dc7a:	9001      	str	r0, [sp, #4]
 800dc7c:	0038      	movs	r0, r7
 800dc7e:	f7ff fe49 	bl	800d914 <_Bfree>
 800dc82:	9e01      	ldr	r6, [sp, #4]
 800dc84:	106d      	asrs	r5, r5, #1
 800dc86:	d00c      	beq.n	800dca2 <__pow5mult+0xa2>
 800dc88:	6820      	ldr	r0, [r4, #0]
 800dc8a:	2800      	cmp	r0, #0
 800dc8c:	d107      	bne.n	800dc9e <__pow5mult+0x9e>
 800dc8e:	0022      	movs	r2, r4
 800dc90:	0021      	movs	r1, r4
 800dc92:	0038      	movs	r0, r7
 800dc94:	f7ff ff04 	bl	800daa0 <__multiply>
 800dc98:	2300      	movs	r3, #0
 800dc9a:	6020      	str	r0, [r4, #0]
 800dc9c:	6003      	str	r3, [r0, #0]
 800dc9e:	0004      	movs	r4, r0
 800dca0:	e7e2      	b.n	800dc68 <__pow5mult+0x68>
 800dca2:	0030      	movs	r0, r6
 800dca4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dca6:	46c0      	nop			; (mov r8, r8)
 800dca8:	0800f758 	.word	0x0800f758
 800dcac:	0800f589 	.word	0x0800f589
 800dcb0:	0800f60c 	.word	0x0800f60c
 800dcb4:	00000271 	.word	0x00000271

0800dcb8 <__lshift>:
 800dcb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcba:	000c      	movs	r4, r1
 800dcbc:	0017      	movs	r7, r2
 800dcbe:	6923      	ldr	r3, [r4, #16]
 800dcc0:	1155      	asrs	r5, r2, #5
 800dcc2:	b087      	sub	sp, #28
 800dcc4:	18eb      	adds	r3, r5, r3
 800dcc6:	9302      	str	r3, [sp, #8]
 800dcc8:	3301      	adds	r3, #1
 800dcca:	9301      	str	r3, [sp, #4]
 800dccc:	6849      	ldr	r1, [r1, #4]
 800dcce:	68a3      	ldr	r3, [r4, #8]
 800dcd0:	9004      	str	r0, [sp, #16]
 800dcd2:	9a01      	ldr	r2, [sp, #4]
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	db10      	blt.n	800dcfa <__lshift+0x42>
 800dcd8:	9804      	ldr	r0, [sp, #16]
 800dcda:	f7ff fdd7 	bl	800d88c <_Balloc>
 800dcde:	2300      	movs	r3, #0
 800dce0:	0002      	movs	r2, r0
 800dce2:	0006      	movs	r6, r0
 800dce4:	0019      	movs	r1, r3
 800dce6:	3214      	adds	r2, #20
 800dce8:	4298      	cmp	r0, r3
 800dcea:	d10c      	bne.n	800dd06 <__lshift+0x4e>
 800dcec:	21da      	movs	r1, #218	; 0xda
 800dcee:	0002      	movs	r2, r0
 800dcf0:	4b26      	ldr	r3, [pc, #152]	; (800dd8c <__lshift+0xd4>)
 800dcf2:	4827      	ldr	r0, [pc, #156]	; (800dd90 <__lshift+0xd8>)
 800dcf4:	31ff      	adds	r1, #255	; 0xff
 800dcf6:	f000 fbe7 	bl	800e4c8 <__assert_func>
 800dcfa:	3101      	adds	r1, #1
 800dcfc:	005b      	lsls	r3, r3, #1
 800dcfe:	e7e8      	b.n	800dcd2 <__lshift+0x1a>
 800dd00:	0098      	lsls	r0, r3, #2
 800dd02:	5011      	str	r1, [r2, r0]
 800dd04:	3301      	adds	r3, #1
 800dd06:	42ab      	cmp	r3, r5
 800dd08:	dbfa      	blt.n	800dd00 <__lshift+0x48>
 800dd0a:	43eb      	mvns	r3, r5
 800dd0c:	17db      	asrs	r3, r3, #31
 800dd0e:	401d      	ands	r5, r3
 800dd10:	211f      	movs	r1, #31
 800dd12:	0023      	movs	r3, r4
 800dd14:	0038      	movs	r0, r7
 800dd16:	00ad      	lsls	r5, r5, #2
 800dd18:	1955      	adds	r5, r2, r5
 800dd1a:	6922      	ldr	r2, [r4, #16]
 800dd1c:	3314      	adds	r3, #20
 800dd1e:	0092      	lsls	r2, r2, #2
 800dd20:	4008      	ands	r0, r1
 800dd22:	4684      	mov	ip, r0
 800dd24:	189a      	adds	r2, r3, r2
 800dd26:	420f      	tst	r7, r1
 800dd28:	d02a      	beq.n	800dd80 <__lshift+0xc8>
 800dd2a:	3101      	adds	r1, #1
 800dd2c:	1a09      	subs	r1, r1, r0
 800dd2e:	9105      	str	r1, [sp, #20]
 800dd30:	2100      	movs	r1, #0
 800dd32:	9503      	str	r5, [sp, #12]
 800dd34:	4667      	mov	r7, ip
 800dd36:	6818      	ldr	r0, [r3, #0]
 800dd38:	40b8      	lsls	r0, r7
 800dd3a:	4301      	orrs	r1, r0
 800dd3c:	9803      	ldr	r0, [sp, #12]
 800dd3e:	c002      	stmia	r0!, {r1}
 800dd40:	cb02      	ldmia	r3!, {r1}
 800dd42:	9003      	str	r0, [sp, #12]
 800dd44:	9805      	ldr	r0, [sp, #20]
 800dd46:	40c1      	lsrs	r1, r0
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	d8f3      	bhi.n	800dd34 <__lshift+0x7c>
 800dd4c:	0020      	movs	r0, r4
 800dd4e:	3015      	adds	r0, #21
 800dd50:	2304      	movs	r3, #4
 800dd52:	4282      	cmp	r2, r0
 800dd54:	d304      	bcc.n	800dd60 <__lshift+0xa8>
 800dd56:	1b13      	subs	r3, r2, r4
 800dd58:	3b15      	subs	r3, #21
 800dd5a:	089b      	lsrs	r3, r3, #2
 800dd5c:	3301      	adds	r3, #1
 800dd5e:	009b      	lsls	r3, r3, #2
 800dd60:	50e9      	str	r1, [r5, r3]
 800dd62:	2900      	cmp	r1, #0
 800dd64:	d002      	beq.n	800dd6c <__lshift+0xb4>
 800dd66:	9b02      	ldr	r3, [sp, #8]
 800dd68:	3302      	adds	r3, #2
 800dd6a:	9301      	str	r3, [sp, #4]
 800dd6c:	9b01      	ldr	r3, [sp, #4]
 800dd6e:	9804      	ldr	r0, [sp, #16]
 800dd70:	3b01      	subs	r3, #1
 800dd72:	0021      	movs	r1, r4
 800dd74:	6133      	str	r3, [r6, #16]
 800dd76:	f7ff fdcd 	bl	800d914 <_Bfree>
 800dd7a:	0030      	movs	r0, r6
 800dd7c:	b007      	add	sp, #28
 800dd7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd80:	cb02      	ldmia	r3!, {r1}
 800dd82:	c502      	stmia	r5!, {r1}
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d8fb      	bhi.n	800dd80 <__lshift+0xc8>
 800dd88:	e7f0      	b.n	800dd6c <__lshift+0xb4>
 800dd8a:	46c0      	nop			; (mov r8, r8)
 800dd8c:	0800f5fb 	.word	0x0800f5fb
 800dd90:	0800f60c 	.word	0x0800f60c

0800dd94 <__mcmp>:
 800dd94:	6902      	ldr	r2, [r0, #16]
 800dd96:	690b      	ldr	r3, [r1, #16]
 800dd98:	b530      	push	{r4, r5, lr}
 800dd9a:	0004      	movs	r4, r0
 800dd9c:	1ad0      	subs	r0, r2, r3
 800dd9e:	429a      	cmp	r2, r3
 800dda0:	d10d      	bne.n	800ddbe <__mcmp+0x2a>
 800dda2:	009b      	lsls	r3, r3, #2
 800dda4:	3414      	adds	r4, #20
 800dda6:	3114      	adds	r1, #20
 800dda8:	18e2      	adds	r2, r4, r3
 800ddaa:	18c9      	adds	r1, r1, r3
 800ddac:	3a04      	subs	r2, #4
 800ddae:	3904      	subs	r1, #4
 800ddb0:	6815      	ldr	r5, [r2, #0]
 800ddb2:	680b      	ldr	r3, [r1, #0]
 800ddb4:	429d      	cmp	r5, r3
 800ddb6:	d003      	beq.n	800ddc0 <__mcmp+0x2c>
 800ddb8:	2001      	movs	r0, #1
 800ddba:	429d      	cmp	r5, r3
 800ddbc:	d303      	bcc.n	800ddc6 <__mcmp+0x32>
 800ddbe:	bd30      	pop	{r4, r5, pc}
 800ddc0:	4294      	cmp	r4, r2
 800ddc2:	d3f3      	bcc.n	800ddac <__mcmp+0x18>
 800ddc4:	e7fb      	b.n	800ddbe <__mcmp+0x2a>
 800ddc6:	4240      	negs	r0, r0
 800ddc8:	e7f9      	b.n	800ddbe <__mcmp+0x2a>
	...

0800ddcc <__mdiff>:
 800ddcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddce:	000e      	movs	r6, r1
 800ddd0:	0007      	movs	r7, r0
 800ddd2:	0011      	movs	r1, r2
 800ddd4:	0030      	movs	r0, r6
 800ddd6:	b087      	sub	sp, #28
 800ddd8:	0014      	movs	r4, r2
 800ddda:	f7ff ffdb 	bl	800dd94 <__mcmp>
 800ddde:	1e05      	subs	r5, r0, #0
 800dde0:	d110      	bne.n	800de04 <__mdiff+0x38>
 800dde2:	0001      	movs	r1, r0
 800dde4:	0038      	movs	r0, r7
 800dde6:	f7ff fd51 	bl	800d88c <_Balloc>
 800ddea:	1e02      	subs	r2, r0, #0
 800ddec:	d104      	bne.n	800ddf8 <__mdiff+0x2c>
 800ddee:	4b40      	ldr	r3, [pc, #256]	; (800def0 <__mdiff+0x124>)
 800ddf0:	4940      	ldr	r1, [pc, #256]	; (800def4 <__mdiff+0x128>)
 800ddf2:	4841      	ldr	r0, [pc, #260]	; (800def8 <__mdiff+0x12c>)
 800ddf4:	f000 fb68 	bl	800e4c8 <__assert_func>
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	6145      	str	r5, [r0, #20]
 800ddfc:	6103      	str	r3, [r0, #16]
 800ddfe:	0010      	movs	r0, r2
 800de00:	b007      	add	sp, #28
 800de02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de04:	2301      	movs	r3, #1
 800de06:	9301      	str	r3, [sp, #4]
 800de08:	2800      	cmp	r0, #0
 800de0a:	db04      	blt.n	800de16 <__mdiff+0x4a>
 800de0c:	0023      	movs	r3, r4
 800de0e:	0034      	movs	r4, r6
 800de10:	001e      	movs	r6, r3
 800de12:	2300      	movs	r3, #0
 800de14:	9301      	str	r3, [sp, #4]
 800de16:	0038      	movs	r0, r7
 800de18:	6861      	ldr	r1, [r4, #4]
 800de1a:	f7ff fd37 	bl	800d88c <_Balloc>
 800de1e:	1e02      	subs	r2, r0, #0
 800de20:	d103      	bne.n	800de2a <__mdiff+0x5e>
 800de22:	2190      	movs	r1, #144	; 0x90
 800de24:	4b32      	ldr	r3, [pc, #200]	; (800def0 <__mdiff+0x124>)
 800de26:	0089      	lsls	r1, r1, #2
 800de28:	e7e3      	b.n	800ddf2 <__mdiff+0x26>
 800de2a:	9b01      	ldr	r3, [sp, #4]
 800de2c:	2700      	movs	r7, #0
 800de2e:	60c3      	str	r3, [r0, #12]
 800de30:	6920      	ldr	r0, [r4, #16]
 800de32:	3414      	adds	r4, #20
 800de34:	9401      	str	r4, [sp, #4]
 800de36:	9b01      	ldr	r3, [sp, #4]
 800de38:	0084      	lsls	r4, r0, #2
 800de3a:	191b      	adds	r3, r3, r4
 800de3c:	0034      	movs	r4, r6
 800de3e:	9302      	str	r3, [sp, #8]
 800de40:	6933      	ldr	r3, [r6, #16]
 800de42:	3414      	adds	r4, #20
 800de44:	0099      	lsls	r1, r3, #2
 800de46:	1863      	adds	r3, r4, r1
 800de48:	9303      	str	r3, [sp, #12]
 800de4a:	0013      	movs	r3, r2
 800de4c:	3314      	adds	r3, #20
 800de4e:	469c      	mov	ip, r3
 800de50:	9305      	str	r3, [sp, #20]
 800de52:	9b01      	ldr	r3, [sp, #4]
 800de54:	9304      	str	r3, [sp, #16]
 800de56:	9b04      	ldr	r3, [sp, #16]
 800de58:	cc02      	ldmia	r4!, {r1}
 800de5a:	cb20      	ldmia	r3!, {r5}
 800de5c:	9304      	str	r3, [sp, #16]
 800de5e:	b2ab      	uxth	r3, r5
 800de60:	19df      	adds	r7, r3, r7
 800de62:	b28b      	uxth	r3, r1
 800de64:	1afb      	subs	r3, r7, r3
 800de66:	0c09      	lsrs	r1, r1, #16
 800de68:	0c2d      	lsrs	r5, r5, #16
 800de6a:	1a6d      	subs	r5, r5, r1
 800de6c:	1419      	asrs	r1, r3, #16
 800de6e:	186d      	adds	r5, r5, r1
 800de70:	4661      	mov	r1, ip
 800de72:	142f      	asrs	r7, r5, #16
 800de74:	b29b      	uxth	r3, r3
 800de76:	042d      	lsls	r5, r5, #16
 800de78:	432b      	orrs	r3, r5
 800de7a:	c108      	stmia	r1!, {r3}
 800de7c:	9b03      	ldr	r3, [sp, #12]
 800de7e:	468c      	mov	ip, r1
 800de80:	42a3      	cmp	r3, r4
 800de82:	d8e8      	bhi.n	800de56 <__mdiff+0x8a>
 800de84:	0031      	movs	r1, r6
 800de86:	9c03      	ldr	r4, [sp, #12]
 800de88:	3115      	adds	r1, #21
 800de8a:	2304      	movs	r3, #4
 800de8c:	428c      	cmp	r4, r1
 800de8e:	d304      	bcc.n	800de9a <__mdiff+0xce>
 800de90:	1ba3      	subs	r3, r4, r6
 800de92:	3b15      	subs	r3, #21
 800de94:	089b      	lsrs	r3, r3, #2
 800de96:	3301      	adds	r3, #1
 800de98:	009b      	lsls	r3, r3, #2
 800de9a:	9901      	ldr	r1, [sp, #4]
 800de9c:	18cc      	adds	r4, r1, r3
 800de9e:	9905      	ldr	r1, [sp, #20]
 800dea0:	0026      	movs	r6, r4
 800dea2:	18cb      	adds	r3, r1, r3
 800dea4:	469c      	mov	ip, r3
 800dea6:	9902      	ldr	r1, [sp, #8]
 800dea8:	428e      	cmp	r6, r1
 800deaa:	d310      	bcc.n	800dece <__mdiff+0x102>
 800deac:	9e02      	ldr	r6, [sp, #8]
 800deae:	1ee1      	subs	r1, r4, #3
 800deb0:	2500      	movs	r5, #0
 800deb2:	428e      	cmp	r6, r1
 800deb4:	d304      	bcc.n	800dec0 <__mdiff+0xf4>
 800deb6:	0031      	movs	r1, r6
 800deb8:	3103      	adds	r1, #3
 800deba:	1b0c      	subs	r4, r1, r4
 800debc:	08a4      	lsrs	r4, r4, #2
 800debe:	00a5      	lsls	r5, r4, #2
 800dec0:	195b      	adds	r3, r3, r5
 800dec2:	3b04      	subs	r3, #4
 800dec4:	6819      	ldr	r1, [r3, #0]
 800dec6:	2900      	cmp	r1, #0
 800dec8:	d00f      	beq.n	800deea <__mdiff+0x11e>
 800deca:	6110      	str	r0, [r2, #16]
 800decc:	e797      	b.n	800ddfe <__mdiff+0x32>
 800dece:	ce02      	ldmia	r6!, {r1}
 800ded0:	b28d      	uxth	r5, r1
 800ded2:	19ed      	adds	r5, r5, r7
 800ded4:	0c0f      	lsrs	r7, r1, #16
 800ded6:	1429      	asrs	r1, r5, #16
 800ded8:	1879      	adds	r1, r7, r1
 800deda:	140f      	asrs	r7, r1, #16
 800dedc:	b2ad      	uxth	r5, r5
 800dede:	0409      	lsls	r1, r1, #16
 800dee0:	430d      	orrs	r5, r1
 800dee2:	4661      	mov	r1, ip
 800dee4:	c120      	stmia	r1!, {r5}
 800dee6:	468c      	mov	ip, r1
 800dee8:	e7dd      	b.n	800dea6 <__mdiff+0xda>
 800deea:	3801      	subs	r0, #1
 800deec:	e7e9      	b.n	800dec2 <__mdiff+0xf6>
 800deee:	46c0      	nop			; (mov r8, r8)
 800def0:	0800f5fb 	.word	0x0800f5fb
 800def4:	00000232 	.word	0x00000232
 800def8:	0800f60c 	.word	0x0800f60c

0800defc <__d2b>:
 800defc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800defe:	2101      	movs	r1, #1
 800df00:	0014      	movs	r4, r2
 800df02:	001e      	movs	r6, r3
 800df04:	9f08      	ldr	r7, [sp, #32]
 800df06:	f7ff fcc1 	bl	800d88c <_Balloc>
 800df0a:	1e05      	subs	r5, r0, #0
 800df0c:	d105      	bne.n	800df1a <__d2b+0x1e>
 800df0e:	0002      	movs	r2, r0
 800df10:	4b26      	ldr	r3, [pc, #152]	; (800dfac <__d2b+0xb0>)
 800df12:	4927      	ldr	r1, [pc, #156]	; (800dfb0 <__d2b+0xb4>)
 800df14:	4827      	ldr	r0, [pc, #156]	; (800dfb4 <__d2b+0xb8>)
 800df16:	f000 fad7 	bl	800e4c8 <__assert_func>
 800df1a:	0333      	lsls	r3, r6, #12
 800df1c:	0076      	lsls	r6, r6, #1
 800df1e:	0b1b      	lsrs	r3, r3, #12
 800df20:	0d76      	lsrs	r6, r6, #21
 800df22:	d124      	bne.n	800df6e <__d2b+0x72>
 800df24:	9301      	str	r3, [sp, #4]
 800df26:	2c00      	cmp	r4, #0
 800df28:	d027      	beq.n	800df7a <__d2b+0x7e>
 800df2a:	4668      	mov	r0, sp
 800df2c:	9400      	str	r4, [sp, #0]
 800df2e:	f7ff fd73 	bl	800da18 <__lo0bits>
 800df32:	9c00      	ldr	r4, [sp, #0]
 800df34:	2800      	cmp	r0, #0
 800df36:	d01e      	beq.n	800df76 <__d2b+0x7a>
 800df38:	9b01      	ldr	r3, [sp, #4]
 800df3a:	2120      	movs	r1, #32
 800df3c:	001a      	movs	r2, r3
 800df3e:	1a09      	subs	r1, r1, r0
 800df40:	408a      	lsls	r2, r1
 800df42:	40c3      	lsrs	r3, r0
 800df44:	4322      	orrs	r2, r4
 800df46:	616a      	str	r2, [r5, #20]
 800df48:	9301      	str	r3, [sp, #4]
 800df4a:	9c01      	ldr	r4, [sp, #4]
 800df4c:	61ac      	str	r4, [r5, #24]
 800df4e:	1e63      	subs	r3, r4, #1
 800df50:	419c      	sbcs	r4, r3
 800df52:	3401      	adds	r4, #1
 800df54:	612c      	str	r4, [r5, #16]
 800df56:	2e00      	cmp	r6, #0
 800df58:	d018      	beq.n	800df8c <__d2b+0x90>
 800df5a:	4b17      	ldr	r3, [pc, #92]	; (800dfb8 <__d2b+0xbc>)
 800df5c:	18f6      	adds	r6, r6, r3
 800df5e:	2335      	movs	r3, #53	; 0x35
 800df60:	1836      	adds	r6, r6, r0
 800df62:	1a18      	subs	r0, r3, r0
 800df64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df66:	603e      	str	r6, [r7, #0]
 800df68:	6018      	str	r0, [r3, #0]
 800df6a:	0028      	movs	r0, r5
 800df6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800df6e:	2280      	movs	r2, #128	; 0x80
 800df70:	0352      	lsls	r2, r2, #13
 800df72:	4313      	orrs	r3, r2
 800df74:	e7d6      	b.n	800df24 <__d2b+0x28>
 800df76:	616c      	str	r4, [r5, #20]
 800df78:	e7e7      	b.n	800df4a <__d2b+0x4e>
 800df7a:	a801      	add	r0, sp, #4
 800df7c:	f7ff fd4c 	bl	800da18 <__lo0bits>
 800df80:	2401      	movs	r4, #1
 800df82:	9b01      	ldr	r3, [sp, #4]
 800df84:	612c      	str	r4, [r5, #16]
 800df86:	616b      	str	r3, [r5, #20]
 800df88:	3020      	adds	r0, #32
 800df8a:	e7e4      	b.n	800df56 <__d2b+0x5a>
 800df8c:	4b0b      	ldr	r3, [pc, #44]	; (800dfbc <__d2b+0xc0>)
 800df8e:	18c0      	adds	r0, r0, r3
 800df90:	4b0b      	ldr	r3, [pc, #44]	; (800dfc0 <__d2b+0xc4>)
 800df92:	6038      	str	r0, [r7, #0]
 800df94:	18e3      	adds	r3, r4, r3
 800df96:	009b      	lsls	r3, r3, #2
 800df98:	18eb      	adds	r3, r5, r3
 800df9a:	6958      	ldr	r0, [r3, #20]
 800df9c:	f7ff fd22 	bl	800d9e4 <__hi0bits>
 800dfa0:	0164      	lsls	r4, r4, #5
 800dfa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfa4:	1a24      	subs	r4, r4, r0
 800dfa6:	601c      	str	r4, [r3, #0]
 800dfa8:	e7df      	b.n	800df6a <__d2b+0x6e>
 800dfaa:	46c0      	nop			; (mov r8, r8)
 800dfac:	0800f5fb 	.word	0x0800f5fb
 800dfb0:	0000030a 	.word	0x0000030a
 800dfb4:	0800f60c 	.word	0x0800f60c
 800dfb8:	fffffbcd 	.word	0xfffffbcd
 800dfbc:	fffffbce 	.word	0xfffffbce
 800dfc0:	3fffffff 	.word	0x3fffffff

0800dfc4 <_calloc_r>:
 800dfc4:	b570      	push	{r4, r5, r6, lr}
 800dfc6:	0c13      	lsrs	r3, r2, #16
 800dfc8:	0c0d      	lsrs	r5, r1, #16
 800dfca:	d11e      	bne.n	800e00a <_calloc_r+0x46>
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d10c      	bne.n	800dfea <_calloc_r+0x26>
 800dfd0:	b289      	uxth	r1, r1
 800dfd2:	b294      	uxth	r4, r2
 800dfd4:	434c      	muls	r4, r1
 800dfd6:	0021      	movs	r1, r4
 800dfd8:	f000 f88c 	bl	800e0f4 <_malloc_r>
 800dfdc:	1e05      	subs	r5, r0, #0
 800dfde:	d01b      	beq.n	800e018 <_calloc_r+0x54>
 800dfe0:	0022      	movs	r2, r4
 800dfe2:	2100      	movs	r1, #0
 800dfe4:	f7fe f8e9 	bl	800c1ba <memset>
 800dfe8:	e016      	b.n	800e018 <_calloc_r+0x54>
 800dfea:	1c1d      	adds	r5, r3, #0
 800dfec:	1c0b      	adds	r3, r1, #0
 800dfee:	b292      	uxth	r2, r2
 800dff0:	b289      	uxth	r1, r1
 800dff2:	b29c      	uxth	r4, r3
 800dff4:	4351      	muls	r1, r2
 800dff6:	b2ab      	uxth	r3, r5
 800dff8:	4363      	muls	r3, r4
 800dffa:	0c0c      	lsrs	r4, r1, #16
 800dffc:	191c      	adds	r4, r3, r4
 800dffe:	0c22      	lsrs	r2, r4, #16
 800e000:	d107      	bne.n	800e012 <_calloc_r+0x4e>
 800e002:	0424      	lsls	r4, r4, #16
 800e004:	b289      	uxth	r1, r1
 800e006:	430c      	orrs	r4, r1
 800e008:	e7e5      	b.n	800dfd6 <_calloc_r+0x12>
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d101      	bne.n	800e012 <_calloc_r+0x4e>
 800e00e:	1c13      	adds	r3, r2, #0
 800e010:	e7ed      	b.n	800dfee <_calloc_r+0x2a>
 800e012:	230c      	movs	r3, #12
 800e014:	2500      	movs	r5, #0
 800e016:	6003      	str	r3, [r0, #0]
 800e018:	0028      	movs	r0, r5
 800e01a:	bd70      	pop	{r4, r5, r6, pc}

0800e01c <_free_r>:
 800e01c:	b570      	push	{r4, r5, r6, lr}
 800e01e:	0005      	movs	r5, r0
 800e020:	2900      	cmp	r1, #0
 800e022:	d010      	beq.n	800e046 <_free_r+0x2a>
 800e024:	1f0c      	subs	r4, r1, #4
 800e026:	6823      	ldr	r3, [r4, #0]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	da00      	bge.n	800e02e <_free_r+0x12>
 800e02c:	18e4      	adds	r4, r4, r3
 800e02e:	0028      	movs	r0, r5
 800e030:	f000 fa9e 	bl	800e570 <__malloc_lock>
 800e034:	4a1d      	ldr	r2, [pc, #116]	; (800e0ac <_free_r+0x90>)
 800e036:	6813      	ldr	r3, [r2, #0]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d105      	bne.n	800e048 <_free_r+0x2c>
 800e03c:	6063      	str	r3, [r4, #4]
 800e03e:	6014      	str	r4, [r2, #0]
 800e040:	0028      	movs	r0, r5
 800e042:	f000 fa9d 	bl	800e580 <__malloc_unlock>
 800e046:	bd70      	pop	{r4, r5, r6, pc}
 800e048:	42a3      	cmp	r3, r4
 800e04a:	d908      	bls.n	800e05e <_free_r+0x42>
 800e04c:	6821      	ldr	r1, [r4, #0]
 800e04e:	1860      	adds	r0, r4, r1
 800e050:	4283      	cmp	r3, r0
 800e052:	d1f3      	bne.n	800e03c <_free_r+0x20>
 800e054:	6818      	ldr	r0, [r3, #0]
 800e056:	685b      	ldr	r3, [r3, #4]
 800e058:	1841      	adds	r1, r0, r1
 800e05a:	6021      	str	r1, [r4, #0]
 800e05c:	e7ee      	b.n	800e03c <_free_r+0x20>
 800e05e:	001a      	movs	r2, r3
 800e060:	685b      	ldr	r3, [r3, #4]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d001      	beq.n	800e06a <_free_r+0x4e>
 800e066:	42a3      	cmp	r3, r4
 800e068:	d9f9      	bls.n	800e05e <_free_r+0x42>
 800e06a:	6811      	ldr	r1, [r2, #0]
 800e06c:	1850      	adds	r0, r2, r1
 800e06e:	42a0      	cmp	r0, r4
 800e070:	d10b      	bne.n	800e08a <_free_r+0x6e>
 800e072:	6820      	ldr	r0, [r4, #0]
 800e074:	1809      	adds	r1, r1, r0
 800e076:	1850      	adds	r0, r2, r1
 800e078:	6011      	str	r1, [r2, #0]
 800e07a:	4283      	cmp	r3, r0
 800e07c:	d1e0      	bne.n	800e040 <_free_r+0x24>
 800e07e:	6818      	ldr	r0, [r3, #0]
 800e080:	685b      	ldr	r3, [r3, #4]
 800e082:	1841      	adds	r1, r0, r1
 800e084:	6011      	str	r1, [r2, #0]
 800e086:	6053      	str	r3, [r2, #4]
 800e088:	e7da      	b.n	800e040 <_free_r+0x24>
 800e08a:	42a0      	cmp	r0, r4
 800e08c:	d902      	bls.n	800e094 <_free_r+0x78>
 800e08e:	230c      	movs	r3, #12
 800e090:	602b      	str	r3, [r5, #0]
 800e092:	e7d5      	b.n	800e040 <_free_r+0x24>
 800e094:	6821      	ldr	r1, [r4, #0]
 800e096:	1860      	adds	r0, r4, r1
 800e098:	4283      	cmp	r3, r0
 800e09a:	d103      	bne.n	800e0a4 <_free_r+0x88>
 800e09c:	6818      	ldr	r0, [r3, #0]
 800e09e:	685b      	ldr	r3, [r3, #4]
 800e0a0:	1841      	adds	r1, r0, r1
 800e0a2:	6021      	str	r1, [r4, #0]
 800e0a4:	6063      	str	r3, [r4, #4]
 800e0a6:	6054      	str	r4, [r2, #4]
 800e0a8:	e7ca      	b.n	800e040 <_free_r+0x24>
 800e0aa:	46c0      	nop			; (mov r8, r8)
 800e0ac:	20000df4 	.word	0x20000df4

0800e0b0 <sbrk_aligned>:
 800e0b0:	b570      	push	{r4, r5, r6, lr}
 800e0b2:	4e0f      	ldr	r6, [pc, #60]	; (800e0f0 <sbrk_aligned+0x40>)
 800e0b4:	000d      	movs	r5, r1
 800e0b6:	6831      	ldr	r1, [r6, #0]
 800e0b8:	0004      	movs	r4, r0
 800e0ba:	2900      	cmp	r1, #0
 800e0bc:	d102      	bne.n	800e0c4 <sbrk_aligned+0x14>
 800e0be:	f000 f9f1 	bl	800e4a4 <_sbrk_r>
 800e0c2:	6030      	str	r0, [r6, #0]
 800e0c4:	0029      	movs	r1, r5
 800e0c6:	0020      	movs	r0, r4
 800e0c8:	f000 f9ec 	bl	800e4a4 <_sbrk_r>
 800e0cc:	1c43      	adds	r3, r0, #1
 800e0ce:	d00a      	beq.n	800e0e6 <sbrk_aligned+0x36>
 800e0d0:	2303      	movs	r3, #3
 800e0d2:	1cc5      	adds	r5, r0, #3
 800e0d4:	439d      	bics	r5, r3
 800e0d6:	42a8      	cmp	r0, r5
 800e0d8:	d007      	beq.n	800e0ea <sbrk_aligned+0x3a>
 800e0da:	1a29      	subs	r1, r5, r0
 800e0dc:	0020      	movs	r0, r4
 800e0de:	f000 f9e1 	bl	800e4a4 <_sbrk_r>
 800e0e2:	1c43      	adds	r3, r0, #1
 800e0e4:	d101      	bne.n	800e0ea <sbrk_aligned+0x3a>
 800e0e6:	2501      	movs	r5, #1
 800e0e8:	426d      	negs	r5, r5
 800e0ea:	0028      	movs	r0, r5
 800e0ec:	bd70      	pop	{r4, r5, r6, pc}
 800e0ee:	46c0      	nop			; (mov r8, r8)
 800e0f0:	20000df8 	.word	0x20000df8

0800e0f4 <_malloc_r>:
 800e0f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0f6:	2203      	movs	r2, #3
 800e0f8:	1ccb      	adds	r3, r1, #3
 800e0fa:	4393      	bics	r3, r2
 800e0fc:	3308      	adds	r3, #8
 800e0fe:	0006      	movs	r6, r0
 800e100:	001f      	movs	r7, r3
 800e102:	2b0c      	cmp	r3, #12
 800e104:	d232      	bcs.n	800e16c <_malloc_r+0x78>
 800e106:	270c      	movs	r7, #12
 800e108:	42b9      	cmp	r1, r7
 800e10a:	d831      	bhi.n	800e170 <_malloc_r+0x7c>
 800e10c:	0030      	movs	r0, r6
 800e10e:	f000 fa2f 	bl	800e570 <__malloc_lock>
 800e112:	4d32      	ldr	r5, [pc, #200]	; (800e1dc <_malloc_r+0xe8>)
 800e114:	682b      	ldr	r3, [r5, #0]
 800e116:	001c      	movs	r4, r3
 800e118:	2c00      	cmp	r4, #0
 800e11a:	d12e      	bne.n	800e17a <_malloc_r+0x86>
 800e11c:	0039      	movs	r1, r7
 800e11e:	0030      	movs	r0, r6
 800e120:	f7ff ffc6 	bl	800e0b0 <sbrk_aligned>
 800e124:	0004      	movs	r4, r0
 800e126:	1c43      	adds	r3, r0, #1
 800e128:	d11e      	bne.n	800e168 <_malloc_r+0x74>
 800e12a:	682c      	ldr	r4, [r5, #0]
 800e12c:	0025      	movs	r5, r4
 800e12e:	2d00      	cmp	r5, #0
 800e130:	d14a      	bne.n	800e1c8 <_malloc_r+0xd4>
 800e132:	6823      	ldr	r3, [r4, #0]
 800e134:	0029      	movs	r1, r5
 800e136:	18e3      	adds	r3, r4, r3
 800e138:	0030      	movs	r0, r6
 800e13a:	9301      	str	r3, [sp, #4]
 800e13c:	f000 f9b2 	bl	800e4a4 <_sbrk_r>
 800e140:	9b01      	ldr	r3, [sp, #4]
 800e142:	4283      	cmp	r3, r0
 800e144:	d143      	bne.n	800e1ce <_malloc_r+0xda>
 800e146:	6823      	ldr	r3, [r4, #0]
 800e148:	3703      	adds	r7, #3
 800e14a:	1aff      	subs	r7, r7, r3
 800e14c:	2303      	movs	r3, #3
 800e14e:	439f      	bics	r7, r3
 800e150:	3708      	adds	r7, #8
 800e152:	2f0c      	cmp	r7, #12
 800e154:	d200      	bcs.n	800e158 <_malloc_r+0x64>
 800e156:	270c      	movs	r7, #12
 800e158:	0039      	movs	r1, r7
 800e15a:	0030      	movs	r0, r6
 800e15c:	f7ff ffa8 	bl	800e0b0 <sbrk_aligned>
 800e160:	1c43      	adds	r3, r0, #1
 800e162:	d034      	beq.n	800e1ce <_malloc_r+0xda>
 800e164:	6823      	ldr	r3, [r4, #0]
 800e166:	19df      	adds	r7, r3, r7
 800e168:	6027      	str	r7, [r4, #0]
 800e16a:	e013      	b.n	800e194 <_malloc_r+0xa0>
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	dacb      	bge.n	800e108 <_malloc_r+0x14>
 800e170:	230c      	movs	r3, #12
 800e172:	2500      	movs	r5, #0
 800e174:	6033      	str	r3, [r6, #0]
 800e176:	0028      	movs	r0, r5
 800e178:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e17a:	6822      	ldr	r2, [r4, #0]
 800e17c:	1bd1      	subs	r1, r2, r7
 800e17e:	d420      	bmi.n	800e1c2 <_malloc_r+0xce>
 800e180:	290b      	cmp	r1, #11
 800e182:	d917      	bls.n	800e1b4 <_malloc_r+0xc0>
 800e184:	19e2      	adds	r2, r4, r7
 800e186:	6027      	str	r7, [r4, #0]
 800e188:	42a3      	cmp	r3, r4
 800e18a:	d111      	bne.n	800e1b0 <_malloc_r+0xbc>
 800e18c:	602a      	str	r2, [r5, #0]
 800e18e:	6863      	ldr	r3, [r4, #4]
 800e190:	6011      	str	r1, [r2, #0]
 800e192:	6053      	str	r3, [r2, #4]
 800e194:	0030      	movs	r0, r6
 800e196:	0025      	movs	r5, r4
 800e198:	f000 f9f2 	bl	800e580 <__malloc_unlock>
 800e19c:	2207      	movs	r2, #7
 800e19e:	350b      	adds	r5, #11
 800e1a0:	1d23      	adds	r3, r4, #4
 800e1a2:	4395      	bics	r5, r2
 800e1a4:	1aea      	subs	r2, r5, r3
 800e1a6:	429d      	cmp	r5, r3
 800e1a8:	d0e5      	beq.n	800e176 <_malloc_r+0x82>
 800e1aa:	1b5b      	subs	r3, r3, r5
 800e1ac:	50a3      	str	r3, [r4, r2]
 800e1ae:	e7e2      	b.n	800e176 <_malloc_r+0x82>
 800e1b0:	605a      	str	r2, [r3, #4]
 800e1b2:	e7ec      	b.n	800e18e <_malloc_r+0x9a>
 800e1b4:	6862      	ldr	r2, [r4, #4]
 800e1b6:	42a3      	cmp	r3, r4
 800e1b8:	d101      	bne.n	800e1be <_malloc_r+0xca>
 800e1ba:	602a      	str	r2, [r5, #0]
 800e1bc:	e7ea      	b.n	800e194 <_malloc_r+0xa0>
 800e1be:	605a      	str	r2, [r3, #4]
 800e1c0:	e7e8      	b.n	800e194 <_malloc_r+0xa0>
 800e1c2:	0023      	movs	r3, r4
 800e1c4:	6864      	ldr	r4, [r4, #4]
 800e1c6:	e7a7      	b.n	800e118 <_malloc_r+0x24>
 800e1c8:	002c      	movs	r4, r5
 800e1ca:	686d      	ldr	r5, [r5, #4]
 800e1cc:	e7af      	b.n	800e12e <_malloc_r+0x3a>
 800e1ce:	230c      	movs	r3, #12
 800e1d0:	0030      	movs	r0, r6
 800e1d2:	6033      	str	r3, [r6, #0]
 800e1d4:	f000 f9d4 	bl	800e580 <__malloc_unlock>
 800e1d8:	e7cd      	b.n	800e176 <_malloc_r+0x82>
 800e1da:	46c0      	nop			; (mov r8, r8)
 800e1dc:	20000df4 	.word	0x20000df4

0800e1e0 <__ssputs_r>:
 800e1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1e2:	688e      	ldr	r6, [r1, #8]
 800e1e4:	b085      	sub	sp, #20
 800e1e6:	0007      	movs	r7, r0
 800e1e8:	000c      	movs	r4, r1
 800e1ea:	9203      	str	r2, [sp, #12]
 800e1ec:	9301      	str	r3, [sp, #4]
 800e1ee:	429e      	cmp	r6, r3
 800e1f0:	d83c      	bhi.n	800e26c <__ssputs_r+0x8c>
 800e1f2:	2390      	movs	r3, #144	; 0x90
 800e1f4:	898a      	ldrh	r2, [r1, #12]
 800e1f6:	00db      	lsls	r3, r3, #3
 800e1f8:	421a      	tst	r2, r3
 800e1fa:	d034      	beq.n	800e266 <__ssputs_r+0x86>
 800e1fc:	6909      	ldr	r1, [r1, #16]
 800e1fe:	6823      	ldr	r3, [r4, #0]
 800e200:	6960      	ldr	r0, [r4, #20]
 800e202:	1a5b      	subs	r3, r3, r1
 800e204:	9302      	str	r3, [sp, #8]
 800e206:	2303      	movs	r3, #3
 800e208:	4343      	muls	r3, r0
 800e20a:	0fdd      	lsrs	r5, r3, #31
 800e20c:	18ed      	adds	r5, r5, r3
 800e20e:	9b01      	ldr	r3, [sp, #4]
 800e210:	9802      	ldr	r0, [sp, #8]
 800e212:	3301      	adds	r3, #1
 800e214:	181b      	adds	r3, r3, r0
 800e216:	106d      	asrs	r5, r5, #1
 800e218:	42ab      	cmp	r3, r5
 800e21a:	d900      	bls.n	800e21e <__ssputs_r+0x3e>
 800e21c:	001d      	movs	r5, r3
 800e21e:	0553      	lsls	r3, r2, #21
 800e220:	d532      	bpl.n	800e288 <__ssputs_r+0xa8>
 800e222:	0029      	movs	r1, r5
 800e224:	0038      	movs	r0, r7
 800e226:	f7ff ff65 	bl	800e0f4 <_malloc_r>
 800e22a:	1e06      	subs	r6, r0, #0
 800e22c:	d109      	bne.n	800e242 <__ssputs_r+0x62>
 800e22e:	230c      	movs	r3, #12
 800e230:	603b      	str	r3, [r7, #0]
 800e232:	2340      	movs	r3, #64	; 0x40
 800e234:	2001      	movs	r0, #1
 800e236:	89a2      	ldrh	r2, [r4, #12]
 800e238:	4240      	negs	r0, r0
 800e23a:	4313      	orrs	r3, r2
 800e23c:	81a3      	strh	r3, [r4, #12]
 800e23e:	b005      	add	sp, #20
 800e240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e242:	9a02      	ldr	r2, [sp, #8]
 800e244:	6921      	ldr	r1, [r4, #16]
 800e246:	f7fd ffaf 	bl	800c1a8 <memcpy>
 800e24a:	89a3      	ldrh	r3, [r4, #12]
 800e24c:	4a14      	ldr	r2, [pc, #80]	; (800e2a0 <__ssputs_r+0xc0>)
 800e24e:	401a      	ands	r2, r3
 800e250:	2380      	movs	r3, #128	; 0x80
 800e252:	4313      	orrs	r3, r2
 800e254:	81a3      	strh	r3, [r4, #12]
 800e256:	9b02      	ldr	r3, [sp, #8]
 800e258:	6126      	str	r6, [r4, #16]
 800e25a:	18f6      	adds	r6, r6, r3
 800e25c:	6026      	str	r6, [r4, #0]
 800e25e:	6165      	str	r5, [r4, #20]
 800e260:	9e01      	ldr	r6, [sp, #4]
 800e262:	1aed      	subs	r5, r5, r3
 800e264:	60a5      	str	r5, [r4, #8]
 800e266:	9b01      	ldr	r3, [sp, #4]
 800e268:	429e      	cmp	r6, r3
 800e26a:	d900      	bls.n	800e26e <__ssputs_r+0x8e>
 800e26c:	9e01      	ldr	r6, [sp, #4]
 800e26e:	0032      	movs	r2, r6
 800e270:	9903      	ldr	r1, [sp, #12]
 800e272:	6820      	ldr	r0, [r4, #0]
 800e274:	f000 f968 	bl	800e548 <memmove>
 800e278:	68a3      	ldr	r3, [r4, #8]
 800e27a:	2000      	movs	r0, #0
 800e27c:	1b9b      	subs	r3, r3, r6
 800e27e:	60a3      	str	r3, [r4, #8]
 800e280:	6823      	ldr	r3, [r4, #0]
 800e282:	199e      	adds	r6, r3, r6
 800e284:	6026      	str	r6, [r4, #0]
 800e286:	e7da      	b.n	800e23e <__ssputs_r+0x5e>
 800e288:	002a      	movs	r2, r5
 800e28a:	0038      	movs	r0, r7
 800e28c:	f000 f980 	bl	800e590 <_realloc_r>
 800e290:	1e06      	subs	r6, r0, #0
 800e292:	d1e0      	bne.n	800e256 <__ssputs_r+0x76>
 800e294:	0038      	movs	r0, r7
 800e296:	6921      	ldr	r1, [r4, #16]
 800e298:	f7ff fec0 	bl	800e01c <_free_r>
 800e29c:	e7c7      	b.n	800e22e <__ssputs_r+0x4e>
 800e29e:	46c0      	nop			; (mov r8, r8)
 800e2a0:	fffffb7f 	.word	0xfffffb7f

0800e2a4 <_svfiprintf_r>:
 800e2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2a6:	b0a1      	sub	sp, #132	; 0x84
 800e2a8:	9003      	str	r0, [sp, #12]
 800e2aa:	001d      	movs	r5, r3
 800e2ac:	898b      	ldrh	r3, [r1, #12]
 800e2ae:	000f      	movs	r7, r1
 800e2b0:	0016      	movs	r6, r2
 800e2b2:	061b      	lsls	r3, r3, #24
 800e2b4:	d511      	bpl.n	800e2da <_svfiprintf_r+0x36>
 800e2b6:	690b      	ldr	r3, [r1, #16]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d10e      	bne.n	800e2da <_svfiprintf_r+0x36>
 800e2bc:	2140      	movs	r1, #64	; 0x40
 800e2be:	f7ff ff19 	bl	800e0f4 <_malloc_r>
 800e2c2:	6038      	str	r0, [r7, #0]
 800e2c4:	6138      	str	r0, [r7, #16]
 800e2c6:	2800      	cmp	r0, #0
 800e2c8:	d105      	bne.n	800e2d6 <_svfiprintf_r+0x32>
 800e2ca:	230c      	movs	r3, #12
 800e2cc:	9a03      	ldr	r2, [sp, #12]
 800e2ce:	3801      	subs	r0, #1
 800e2d0:	6013      	str	r3, [r2, #0]
 800e2d2:	b021      	add	sp, #132	; 0x84
 800e2d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2d6:	2340      	movs	r3, #64	; 0x40
 800e2d8:	617b      	str	r3, [r7, #20]
 800e2da:	2300      	movs	r3, #0
 800e2dc:	ac08      	add	r4, sp, #32
 800e2de:	6163      	str	r3, [r4, #20]
 800e2e0:	3320      	adds	r3, #32
 800e2e2:	7663      	strb	r3, [r4, #25]
 800e2e4:	3310      	adds	r3, #16
 800e2e6:	76a3      	strb	r3, [r4, #26]
 800e2e8:	9507      	str	r5, [sp, #28]
 800e2ea:	0035      	movs	r5, r6
 800e2ec:	782b      	ldrb	r3, [r5, #0]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d001      	beq.n	800e2f6 <_svfiprintf_r+0x52>
 800e2f2:	2b25      	cmp	r3, #37	; 0x25
 800e2f4:	d147      	bne.n	800e386 <_svfiprintf_r+0xe2>
 800e2f6:	1bab      	subs	r3, r5, r6
 800e2f8:	9305      	str	r3, [sp, #20]
 800e2fa:	42b5      	cmp	r5, r6
 800e2fc:	d00c      	beq.n	800e318 <_svfiprintf_r+0x74>
 800e2fe:	0032      	movs	r2, r6
 800e300:	0039      	movs	r1, r7
 800e302:	9803      	ldr	r0, [sp, #12]
 800e304:	f7ff ff6c 	bl	800e1e0 <__ssputs_r>
 800e308:	1c43      	adds	r3, r0, #1
 800e30a:	d100      	bne.n	800e30e <_svfiprintf_r+0x6a>
 800e30c:	e0ae      	b.n	800e46c <_svfiprintf_r+0x1c8>
 800e30e:	6962      	ldr	r2, [r4, #20]
 800e310:	9b05      	ldr	r3, [sp, #20]
 800e312:	4694      	mov	ip, r2
 800e314:	4463      	add	r3, ip
 800e316:	6163      	str	r3, [r4, #20]
 800e318:	782b      	ldrb	r3, [r5, #0]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d100      	bne.n	800e320 <_svfiprintf_r+0x7c>
 800e31e:	e0a5      	b.n	800e46c <_svfiprintf_r+0x1c8>
 800e320:	2201      	movs	r2, #1
 800e322:	2300      	movs	r3, #0
 800e324:	4252      	negs	r2, r2
 800e326:	6062      	str	r2, [r4, #4]
 800e328:	a904      	add	r1, sp, #16
 800e32a:	3254      	adds	r2, #84	; 0x54
 800e32c:	1852      	adds	r2, r2, r1
 800e32e:	1c6e      	adds	r6, r5, #1
 800e330:	6023      	str	r3, [r4, #0]
 800e332:	60e3      	str	r3, [r4, #12]
 800e334:	60a3      	str	r3, [r4, #8]
 800e336:	7013      	strb	r3, [r2, #0]
 800e338:	65a3      	str	r3, [r4, #88]	; 0x58
 800e33a:	2205      	movs	r2, #5
 800e33c:	7831      	ldrb	r1, [r6, #0]
 800e33e:	4854      	ldr	r0, [pc, #336]	; (800e490 <_svfiprintf_r+0x1ec>)
 800e340:	f7ff fa98 	bl	800d874 <memchr>
 800e344:	1c75      	adds	r5, r6, #1
 800e346:	2800      	cmp	r0, #0
 800e348:	d11f      	bne.n	800e38a <_svfiprintf_r+0xe6>
 800e34a:	6822      	ldr	r2, [r4, #0]
 800e34c:	06d3      	lsls	r3, r2, #27
 800e34e:	d504      	bpl.n	800e35a <_svfiprintf_r+0xb6>
 800e350:	2353      	movs	r3, #83	; 0x53
 800e352:	a904      	add	r1, sp, #16
 800e354:	185b      	adds	r3, r3, r1
 800e356:	2120      	movs	r1, #32
 800e358:	7019      	strb	r1, [r3, #0]
 800e35a:	0713      	lsls	r3, r2, #28
 800e35c:	d504      	bpl.n	800e368 <_svfiprintf_r+0xc4>
 800e35e:	2353      	movs	r3, #83	; 0x53
 800e360:	a904      	add	r1, sp, #16
 800e362:	185b      	adds	r3, r3, r1
 800e364:	212b      	movs	r1, #43	; 0x2b
 800e366:	7019      	strb	r1, [r3, #0]
 800e368:	7833      	ldrb	r3, [r6, #0]
 800e36a:	2b2a      	cmp	r3, #42	; 0x2a
 800e36c:	d016      	beq.n	800e39c <_svfiprintf_r+0xf8>
 800e36e:	0035      	movs	r5, r6
 800e370:	2100      	movs	r1, #0
 800e372:	200a      	movs	r0, #10
 800e374:	68e3      	ldr	r3, [r4, #12]
 800e376:	782a      	ldrb	r2, [r5, #0]
 800e378:	1c6e      	adds	r6, r5, #1
 800e37a:	3a30      	subs	r2, #48	; 0x30
 800e37c:	2a09      	cmp	r2, #9
 800e37e:	d94e      	bls.n	800e41e <_svfiprintf_r+0x17a>
 800e380:	2900      	cmp	r1, #0
 800e382:	d111      	bne.n	800e3a8 <_svfiprintf_r+0x104>
 800e384:	e017      	b.n	800e3b6 <_svfiprintf_r+0x112>
 800e386:	3501      	adds	r5, #1
 800e388:	e7b0      	b.n	800e2ec <_svfiprintf_r+0x48>
 800e38a:	4b41      	ldr	r3, [pc, #260]	; (800e490 <_svfiprintf_r+0x1ec>)
 800e38c:	6822      	ldr	r2, [r4, #0]
 800e38e:	1ac0      	subs	r0, r0, r3
 800e390:	2301      	movs	r3, #1
 800e392:	4083      	lsls	r3, r0
 800e394:	4313      	orrs	r3, r2
 800e396:	002e      	movs	r6, r5
 800e398:	6023      	str	r3, [r4, #0]
 800e39a:	e7ce      	b.n	800e33a <_svfiprintf_r+0x96>
 800e39c:	9b07      	ldr	r3, [sp, #28]
 800e39e:	1d19      	adds	r1, r3, #4
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	9107      	str	r1, [sp, #28]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	db01      	blt.n	800e3ac <_svfiprintf_r+0x108>
 800e3a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800e3aa:	e004      	b.n	800e3b6 <_svfiprintf_r+0x112>
 800e3ac:	425b      	negs	r3, r3
 800e3ae:	60e3      	str	r3, [r4, #12]
 800e3b0:	2302      	movs	r3, #2
 800e3b2:	4313      	orrs	r3, r2
 800e3b4:	6023      	str	r3, [r4, #0]
 800e3b6:	782b      	ldrb	r3, [r5, #0]
 800e3b8:	2b2e      	cmp	r3, #46	; 0x2e
 800e3ba:	d10a      	bne.n	800e3d2 <_svfiprintf_r+0x12e>
 800e3bc:	786b      	ldrb	r3, [r5, #1]
 800e3be:	2b2a      	cmp	r3, #42	; 0x2a
 800e3c0:	d135      	bne.n	800e42e <_svfiprintf_r+0x18a>
 800e3c2:	9b07      	ldr	r3, [sp, #28]
 800e3c4:	3502      	adds	r5, #2
 800e3c6:	1d1a      	adds	r2, r3, #4
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	9207      	str	r2, [sp, #28]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	db2b      	blt.n	800e428 <_svfiprintf_r+0x184>
 800e3d0:	9309      	str	r3, [sp, #36]	; 0x24
 800e3d2:	4e30      	ldr	r6, [pc, #192]	; (800e494 <_svfiprintf_r+0x1f0>)
 800e3d4:	2203      	movs	r2, #3
 800e3d6:	0030      	movs	r0, r6
 800e3d8:	7829      	ldrb	r1, [r5, #0]
 800e3da:	f7ff fa4b 	bl	800d874 <memchr>
 800e3de:	2800      	cmp	r0, #0
 800e3e0:	d006      	beq.n	800e3f0 <_svfiprintf_r+0x14c>
 800e3e2:	2340      	movs	r3, #64	; 0x40
 800e3e4:	1b80      	subs	r0, r0, r6
 800e3e6:	4083      	lsls	r3, r0
 800e3e8:	6822      	ldr	r2, [r4, #0]
 800e3ea:	3501      	adds	r5, #1
 800e3ec:	4313      	orrs	r3, r2
 800e3ee:	6023      	str	r3, [r4, #0]
 800e3f0:	7829      	ldrb	r1, [r5, #0]
 800e3f2:	2206      	movs	r2, #6
 800e3f4:	4828      	ldr	r0, [pc, #160]	; (800e498 <_svfiprintf_r+0x1f4>)
 800e3f6:	1c6e      	adds	r6, r5, #1
 800e3f8:	7621      	strb	r1, [r4, #24]
 800e3fa:	f7ff fa3b 	bl	800d874 <memchr>
 800e3fe:	2800      	cmp	r0, #0
 800e400:	d03c      	beq.n	800e47c <_svfiprintf_r+0x1d8>
 800e402:	4b26      	ldr	r3, [pc, #152]	; (800e49c <_svfiprintf_r+0x1f8>)
 800e404:	2b00      	cmp	r3, #0
 800e406:	d125      	bne.n	800e454 <_svfiprintf_r+0x1b0>
 800e408:	2207      	movs	r2, #7
 800e40a:	9b07      	ldr	r3, [sp, #28]
 800e40c:	3307      	adds	r3, #7
 800e40e:	4393      	bics	r3, r2
 800e410:	3308      	adds	r3, #8
 800e412:	9307      	str	r3, [sp, #28]
 800e414:	6963      	ldr	r3, [r4, #20]
 800e416:	9a04      	ldr	r2, [sp, #16]
 800e418:	189b      	adds	r3, r3, r2
 800e41a:	6163      	str	r3, [r4, #20]
 800e41c:	e765      	b.n	800e2ea <_svfiprintf_r+0x46>
 800e41e:	4343      	muls	r3, r0
 800e420:	0035      	movs	r5, r6
 800e422:	2101      	movs	r1, #1
 800e424:	189b      	adds	r3, r3, r2
 800e426:	e7a6      	b.n	800e376 <_svfiprintf_r+0xd2>
 800e428:	2301      	movs	r3, #1
 800e42a:	425b      	negs	r3, r3
 800e42c:	e7d0      	b.n	800e3d0 <_svfiprintf_r+0x12c>
 800e42e:	2300      	movs	r3, #0
 800e430:	200a      	movs	r0, #10
 800e432:	001a      	movs	r2, r3
 800e434:	3501      	adds	r5, #1
 800e436:	6063      	str	r3, [r4, #4]
 800e438:	7829      	ldrb	r1, [r5, #0]
 800e43a:	1c6e      	adds	r6, r5, #1
 800e43c:	3930      	subs	r1, #48	; 0x30
 800e43e:	2909      	cmp	r1, #9
 800e440:	d903      	bls.n	800e44a <_svfiprintf_r+0x1a6>
 800e442:	2b00      	cmp	r3, #0
 800e444:	d0c5      	beq.n	800e3d2 <_svfiprintf_r+0x12e>
 800e446:	9209      	str	r2, [sp, #36]	; 0x24
 800e448:	e7c3      	b.n	800e3d2 <_svfiprintf_r+0x12e>
 800e44a:	4342      	muls	r2, r0
 800e44c:	0035      	movs	r5, r6
 800e44e:	2301      	movs	r3, #1
 800e450:	1852      	adds	r2, r2, r1
 800e452:	e7f1      	b.n	800e438 <_svfiprintf_r+0x194>
 800e454:	ab07      	add	r3, sp, #28
 800e456:	9300      	str	r3, [sp, #0]
 800e458:	003a      	movs	r2, r7
 800e45a:	0021      	movs	r1, r4
 800e45c:	4b10      	ldr	r3, [pc, #64]	; (800e4a0 <_svfiprintf_r+0x1fc>)
 800e45e:	9803      	ldr	r0, [sp, #12]
 800e460:	f7fd ff5e 	bl	800c320 <_printf_float>
 800e464:	9004      	str	r0, [sp, #16]
 800e466:	9b04      	ldr	r3, [sp, #16]
 800e468:	3301      	adds	r3, #1
 800e46a:	d1d3      	bne.n	800e414 <_svfiprintf_r+0x170>
 800e46c:	89bb      	ldrh	r3, [r7, #12]
 800e46e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e470:	065b      	lsls	r3, r3, #25
 800e472:	d400      	bmi.n	800e476 <_svfiprintf_r+0x1d2>
 800e474:	e72d      	b.n	800e2d2 <_svfiprintf_r+0x2e>
 800e476:	2001      	movs	r0, #1
 800e478:	4240      	negs	r0, r0
 800e47a:	e72a      	b.n	800e2d2 <_svfiprintf_r+0x2e>
 800e47c:	ab07      	add	r3, sp, #28
 800e47e:	9300      	str	r3, [sp, #0]
 800e480:	003a      	movs	r2, r7
 800e482:	0021      	movs	r1, r4
 800e484:	4b06      	ldr	r3, [pc, #24]	; (800e4a0 <_svfiprintf_r+0x1fc>)
 800e486:	9803      	ldr	r0, [sp, #12]
 800e488:	f7fe f9fc 	bl	800c884 <_printf_i>
 800e48c:	e7ea      	b.n	800e464 <_svfiprintf_r+0x1c0>
 800e48e:	46c0      	nop			; (mov r8, r8)
 800e490:	0800f764 	.word	0x0800f764
 800e494:	0800f76a 	.word	0x0800f76a
 800e498:	0800f76e 	.word	0x0800f76e
 800e49c:	0800c321 	.word	0x0800c321
 800e4a0:	0800e1e1 	.word	0x0800e1e1

0800e4a4 <_sbrk_r>:
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	b570      	push	{r4, r5, r6, lr}
 800e4a8:	4d06      	ldr	r5, [pc, #24]	; (800e4c4 <_sbrk_r+0x20>)
 800e4aa:	0004      	movs	r4, r0
 800e4ac:	0008      	movs	r0, r1
 800e4ae:	602b      	str	r3, [r5, #0]
 800e4b0:	f7f7 fb5c 	bl	8005b6c <_sbrk>
 800e4b4:	1c43      	adds	r3, r0, #1
 800e4b6:	d103      	bne.n	800e4c0 <_sbrk_r+0x1c>
 800e4b8:	682b      	ldr	r3, [r5, #0]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d000      	beq.n	800e4c0 <_sbrk_r+0x1c>
 800e4be:	6023      	str	r3, [r4, #0]
 800e4c0:	bd70      	pop	{r4, r5, r6, pc}
 800e4c2:	46c0      	nop			; (mov r8, r8)
 800e4c4:	20000dfc 	.word	0x20000dfc

0800e4c8 <__assert_func>:
 800e4c8:	b530      	push	{r4, r5, lr}
 800e4ca:	0014      	movs	r4, r2
 800e4cc:	001a      	movs	r2, r3
 800e4ce:	4b09      	ldr	r3, [pc, #36]	; (800e4f4 <__assert_func+0x2c>)
 800e4d0:	0005      	movs	r5, r0
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	b085      	sub	sp, #20
 800e4d6:	68d8      	ldr	r0, [r3, #12]
 800e4d8:	4b07      	ldr	r3, [pc, #28]	; (800e4f8 <__assert_func+0x30>)
 800e4da:	2c00      	cmp	r4, #0
 800e4dc:	d101      	bne.n	800e4e2 <__assert_func+0x1a>
 800e4de:	4b07      	ldr	r3, [pc, #28]	; (800e4fc <__assert_func+0x34>)
 800e4e0:	001c      	movs	r4, r3
 800e4e2:	9301      	str	r3, [sp, #4]
 800e4e4:	9100      	str	r1, [sp, #0]
 800e4e6:	002b      	movs	r3, r5
 800e4e8:	4905      	ldr	r1, [pc, #20]	; (800e500 <__assert_func+0x38>)
 800e4ea:	9402      	str	r4, [sp, #8]
 800e4ec:	f000 f80a 	bl	800e504 <fiprintf>
 800e4f0:	f000 faba 	bl	800ea68 <abort>
 800e4f4:	20000014 	.word	0x20000014
 800e4f8:	0800f775 	.word	0x0800f775
 800e4fc:	0800f7b0 	.word	0x0800f7b0
 800e500:	0800f782 	.word	0x0800f782

0800e504 <fiprintf>:
 800e504:	b40e      	push	{r1, r2, r3}
 800e506:	b503      	push	{r0, r1, lr}
 800e508:	0001      	movs	r1, r0
 800e50a:	ab03      	add	r3, sp, #12
 800e50c:	4804      	ldr	r0, [pc, #16]	; (800e520 <fiprintf+0x1c>)
 800e50e:	cb04      	ldmia	r3!, {r2}
 800e510:	6800      	ldr	r0, [r0, #0]
 800e512:	9301      	str	r3, [sp, #4]
 800e514:	f000 f892 	bl	800e63c <_vfiprintf_r>
 800e518:	b002      	add	sp, #8
 800e51a:	bc08      	pop	{r3}
 800e51c:	b003      	add	sp, #12
 800e51e:	4718      	bx	r3
 800e520:	20000014 	.word	0x20000014

0800e524 <__ascii_mbtowc>:
 800e524:	b082      	sub	sp, #8
 800e526:	2900      	cmp	r1, #0
 800e528:	d100      	bne.n	800e52c <__ascii_mbtowc+0x8>
 800e52a:	a901      	add	r1, sp, #4
 800e52c:	1e10      	subs	r0, r2, #0
 800e52e:	d006      	beq.n	800e53e <__ascii_mbtowc+0x1a>
 800e530:	2b00      	cmp	r3, #0
 800e532:	d006      	beq.n	800e542 <__ascii_mbtowc+0x1e>
 800e534:	7813      	ldrb	r3, [r2, #0]
 800e536:	600b      	str	r3, [r1, #0]
 800e538:	7810      	ldrb	r0, [r2, #0]
 800e53a:	1e43      	subs	r3, r0, #1
 800e53c:	4198      	sbcs	r0, r3
 800e53e:	b002      	add	sp, #8
 800e540:	4770      	bx	lr
 800e542:	2002      	movs	r0, #2
 800e544:	4240      	negs	r0, r0
 800e546:	e7fa      	b.n	800e53e <__ascii_mbtowc+0x1a>

0800e548 <memmove>:
 800e548:	b510      	push	{r4, lr}
 800e54a:	4288      	cmp	r0, r1
 800e54c:	d902      	bls.n	800e554 <memmove+0xc>
 800e54e:	188b      	adds	r3, r1, r2
 800e550:	4298      	cmp	r0, r3
 800e552:	d303      	bcc.n	800e55c <memmove+0x14>
 800e554:	2300      	movs	r3, #0
 800e556:	e007      	b.n	800e568 <memmove+0x20>
 800e558:	5c8b      	ldrb	r3, [r1, r2]
 800e55a:	5483      	strb	r3, [r0, r2]
 800e55c:	3a01      	subs	r2, #1
 800e55e:	d2fb      	bcs.n	800e558 <memmove+0x10>
 800e560:	bd10      	pop	{r4, pc}
 800e562:	5ccc      	ldrb	r4, [r1, r3]
 800e564:	54c4      	strb	r4, [r0, r3]
 800e566:	3301      	adds	r3, #1
 800e568:	429a      	cmp	r2, r3
 800e56a:	d1fa      	bne.n	800e562 <memmove+0x1a>
 800e56c:	e7f8      	b.n	800e560 <memmove+0x18>
	...

0800e570 <__malloc_lock>:
 800e570:	b510      	push	{r4, lr}
 800e572:	4802      	ldr	r0, [pc, #8]	; (800e57c <__malloc_lock+0xc>)
 800e574:	f000 fc4f 	bl	800ee16 <__retarget_lock_acquire_recursive>
 800e578:	bd10      	pop	{r4, pc}
 800e57a:	46c0      	nop			; (mov r8, r8)
 800e57c:	20000e00 	.word	0x20000e00

0800e580 <__malloc_unlock>:
 800e580:	b510      	push	{r4, lr}
 800e582:	4802      	ldr	r0, [pc, #8]	; (800e58c <__malloc_unlock+0xc>)
 800e584:	f000 fc48 	bl	800ee18 <__retarget_lock_release_recursive>
 800e588:	bd10      	pop	{r4, pc}
 800e58a:	46c0      	nop			; (mov r8, r8)
 800e58c:	20000e00 	.word	0x20000e00

0800e590 <_realloc_r>:
 800e590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e592:	0007      	movs	r7, r0
 800e594:	000e      	movs	r6, r1
 800e596:	0014      	movs	r4, r2
 800e598:	2900      	cmp	r1, #0
 800e59a:	d105      	bne.n	800e5a8 <_realloc_r+0x18>
 800e59c:	0011      	movs	r1, r2
 800e59e:	f7ff fda9 	bl	800e0f4 <_malloc_r>
 800e5a2:	0005      	movs	r5, r0
 800e5a4:	0028      	movs	r0, r5
 800e5a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e5a8:	2a00      	cmp	r2, #0
 800e5aa:	d103      	bne.n	800e5b4 <_realloc_r+0x24>
 800e5ac:	f7ff fd36 	bl	800e01c <_free_r>
 800e5b0:	0025      	movs	r5, r4
 800e5b2:	e7f7      	b.n	800e5a4 <_realloc_r+0x14>
 800e5b4:	f000 fc9e 	bl	800eef4 <_malloc_usable_size_r>
 800e5b8:	9001      	str	r0, [sp, #4]
 800e5ba:	4284      	cmp	r4, r0
 800e5bc:	d803      	bhi.n	800e5c6 <_realloc_r+0x36>
 800e5be:	0035      	movs	r5, r6
 800e5c0:	0843      	lsrs	r3, r0, #1
 800e5c2:	42a3      	cmp	r3, r4
 800e5c4:	d3ee      	bcc.n	800e5a4 <_realloc_r+0x14>
 800e5c6:	0021      	movs	r1, r4
 800e5c8:	0038      	movs	r0, r7
 800e5ca:	f7ff fd93 	bl	800e0f4 <_malloc_r>
 800e5ce:	1e05      	subs	r5, r0, #0
 800e5d0:	d0e8      	beq.n	800e5a4 <_realloc_r+0x14>
 800e5d2:	9b01      	ldr	r3, [sp, #4]
 800e5d4:	0022      	movs	r2, r4
 800e5d6:	429c      	cmp	r4, r3
 800e5d8:	d900      	bls.n	800e5dc <_realloc_r+0x4c>
 800e5da:	001a      	movs	r2, r3
 800e5dc:	0031      	movs	r1, r6
 800e5de:	0028      	movs	r0, r5
 800e5e0:	f7fd fde2 	bl	800c1a8 <memcpy>
 800e5e4:	0031      	movs	r1, r6
 800e5e6:	0038      	movs	r0, r7
 800e5e8:	f7ff fd18 	bl	800e01c <_free_r>
 800e5ec:	e7da      	b.n	800e5a4 <_realloc_r+0x14>

0800e5ee <__sfputc_r>:
 800e5ee:	6893      	ldr	r3, [r2, #8]
 800e5f0:	b510      	push	{r4, lr}
 800e5f2:	3b01      	subs	r3, #1
 800e5f4:	6093      	str	r3, [r2, #8]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	da04      	bge.n	800e604 <__sfputc_r+0x16>
 800e5fa:	6994      	ldr	r4, [r2, #24]
 800e5fc:	42a3      	cmp	r3, r4
 800e5fe:	db07      	blt.n	800e610 <__sfputc_r+0x22>
 800e600:	290a      	cmp	r1, #10
 800e602:	d005      	beq.n	800e610 <__sfputc_r+0x22>
 800e604:	6813      	ldr	r3, [r2, #0]
 800e606:	1c58      	adds	r0, r3, #1
 800e608:	6010      	str	r0, [r2, #0]
 800e60a:	7019      	strb	r1, [r3, #0]
 800e60c:	0008      	movs	r0, r1
 800e60e:	bd10      	pop	{r4, pc}
 800e610:	f000 f94e 	bl	800e8b0 <__swbuf_r>
 800e614:	0001      	movs	r1, r0
 800e616:	e7f9      	b.n	800e60c <__sfputc_r+0x1e>

0800e618 <__sfputs_r>:
 800e618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e61a:	0006      	movs	r6, r0
 800e61c:	000f      	movs	r7, r1
 800e61e:	0014      	movs	r4, r2
 800e620:	18d5      	adds	r5, r2, r3
 800e622:	42ac      	cmp	r4, r5
 800e624:	d101      	bne.n	800e62a <__sfputs_r+0x12>
 800e626:	2000      	movs	r0, #0
 800e628:	e007      	b.n	800e63a <__sfputs_r+0x22>
 800e62a:	7821      	ldrb	r1, [r4, #0]
 800e62c:	003a      	movs	r2, r7
 800e62e:	0030      	movs	r0, r6
 800e630:	f7ff ffdd 	bl	800e5ee <__sfputc_r>
 800e634:	3401      	adds	r4, #1
 800e636:	1c43      	adds	r3, r0, #1
 800e638:	d1f3      	bne.n	800e622 <__sfputs_r+0xa>
 800e63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e63c <_vfiprintf_r>:
 800e63c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e63e:	b0a1      	sub	sp, #132	; 0x84
 800e640:	0006      	movs	r6, r0
 800e642:	000c      	movs	r4, r1
 800e644:	001f      	movs	r7, r3
 800e646:	9203      	str	r2, [sp, #12]
 800e648:	2800      	cmp	r0, #0
 800e64a:	d004      	beq.n	800e656 <_vfiprintf_r+0x1a>
 800e64c:	6983      	ldr	r3, [r0, #24]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d101      	bne.n	800e656 <_vfiprintf_r+0x1a>
 800e652:	f000 fb3f 	bl	800ecd4 <__sinit>
 800e656:	4b8e      	ldr	r3, [pc, #568]	; (800e890 <_vfiprintf_r+0x254>)
 800e658:	429c      	cmp	r4, r3
 800e65a:	d11c      	bne.n	800e696 <_vfiprintf_r+0x5a>
 800e65c:	6874      	ldr	r4, [r6, #4]
 800e65e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e660:	07db      	lsls	r3, r3, #31
 800e662:	d405      	bmi.n	800e670 <_vfiprintf_r+0x34>
 800e664:	89a3      	ldrh	r3, [r4, #12]
 800e666:	059b      	lsls	r3, r3, #22
 800e668:	d402      	bmi.n	800e670 <_vfiprintf_r+0x34>
 800e66a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e66c:	f000 fbd3 	bl	800ee16 <__retarget_lock_acquire_recursive>
 800e670:	89a3      	ldrh	r3, [r4, #12]
 800e672:	071b      	lsls	r3, r3, #28
 800e674:	d502      	bpl.n	800e67c <_vfiprintf_r+0x40>
 800e676:	6923      	ldr	r3, [r4, #16]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d11d      	bne.n	800e6b8 <_vfiprintf_r+0x7c>
 800e67c:	0021      	movs	r1, r4
 800e67e:	0030      	movs	r0, r6
 800e680:	f000 f97a 	bl	800e978 <__swsetup_r>
 800e684:	2800      	cmp	r0, #0
 800e686:	d017      	beq.n	800e6b8 <_vfiprintf_r+0x7c>
 800e688:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e68a:	07db      	lsls	r3, r3, #31
 800e68c:	d50d      	bpl.n	800e6aa <_vfiprintf_r+0x6e>
 800e68e:	2001      	movs	r0, #1
 800e690:	4240      	negs	r0, r0
 800e692:	b021      	add	sp, #132	; 0x84
 800e694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e696:	4b7f      	ldr	r3, [pc, #508]	; (800e894 <_vfiprintf_r+0x258>)
 800e698:	429c      	cmp	r4, r3
 800e69a:	d101      	bne.n	800e6a0 <_vfiprintf_r+0x64>
 800e69c:	68b4      	ldr	r4, [r6, #8]
 800e69e:	e7de      	b.n	800e65e <_vfiprintf_r+0x22>
 800e6a0:	4b7d      	ldr	r3, [pc, #500]	; (800e898 <_vfiprintf_r+0x25c>)
 800e6a2:	429c      	cmp	r4, r3
 800e6a4:	d1db      	bne.n	800e65e <_vfiprintf_r+0x22>
 800e6a6:	68f4      	ldr	r4, [r6, #12]
 800e6a8:	e7d9      	b.n	800e65e <_vfiprintf_r+0x22>
 800e6aa:	89a3      	ldrh	r3, [r4, #12]
 800e6ac:	059b      	lsls	r3, r3, #22
 800e6ae:	d4ee      	bmi.n	800e68e <_vfiprintf_r+0x52>
 800e6b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e6b2:	f000 fbb1 	bl	800ee18 <__retarget_lock_release_recursive>
 800e6b6:	e7ea      	b.n	800e68e <_vfiprintf_r+0x52>
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	ad08      	add	r5, sp, #32
 800e6bc:	616b      	str	r3, [r5, #20]
 800e6be:	3320      	adds	r3, #32
 800e6c0:	766b      	strb	r3, [r5, #25]
 800e6c2:	3310      	adds	r3, #16
 800e6c4:	76ab      	strb	r3, [r5, #26]
 800e6c6:	9707      	str	r7, [sp, #28]
 800e6c8:	9f03      	ldr	r7, [sp, #12]
 800e6ca:	783b      	ldrb	r3, [r7, #0]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d001      	beq.n	800e6d4 <_vfiprintf_r+0x98>
 800e6d0:	2b25      	cmp	r3, #37	; 0x25
 800e6d2:	d14e      	bne.n	800e772 <_vfiprintf_r+0x136>
 800e6d4:	9b03      	ldr	r3, [sp, #12]
 800e6d6:	1afb      	subs	r3, r7, r3
 800e6d8:	9305      	str	r3, [sp, #20]
 800e6da:	9b03      	ldr	r3, [sp, #12]
 800e6dc:	429f      	cmp	r7, r3
 800e6de:	d00d      	beq.n	800e6fc <_vfiprintf_r+0xc0>
 800e6e0:	9b05      	ldr	r3, [sp, #20]
 800e6e2:	0021      	movs	r1, r4
 800e6e4:	0030      	movs	r0, r6
 800e6e6:	9a03      	ldr	r2, [sp, #12]
 800e6e8:	f7ff ff96 	bl	800e618 <__sfputs_r>
 800e6ec:	1c43      	adds	r3, r0, #1
 800e6ee:	d100      	bne.n	800e6f2 <_vfiprintf_r+0xb6>
 800e6f0:	e0b5      	b.n	800e85e <_vfiprintf_r+0x222>
 800e6f2:	696a      	ldr	r2, [r5, #20]
 800e6f4:	9b05      	ldr	r3, [sp, #20]
 800e6f6:	4694      	mov	ip, r2
 800e6f8:	4463      	add	r3, ip
 800e6fa:	616b      	str	r3, [r5, #20]
 800e6fc:	783b      	ldrb	r3, [r7, #0]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d100      	bne.n	800e704 <_vfiprintf_r+0xc8>
 800e702:	e0ac      	b.n	800e85e <_vfiprintf_r+0x222>
 800e704:	2201      	movs	r2, #1
 800e706:	1c7b      	adds	r3, r7, #1
 800e708:	9303      	str	r3, [sp, #12]
 800e70a:	2300      	movs	r3, #0
 800e70c:	4252      	negs	r2, r2
 800e70e:	606a      	str	r2, [r5, #4]
 800e710:	a904      	add	r1, sp, #16
 800e712:	3254      	adds	r2, #84	; 0x54
 800e714:	1852      	adds	r2, r2, r1
 800e716:	602b      	str	r3, [r5, #0]
 800e718:	60eb      	str	r3, [r5, #12]
 800e71a:	60ab      	str	r3, [r5, #8]
 800e71c:	7013      	strb	r3, [r2, #0]
 800e71e:	65ab      	str	r3, [r5, #88]	; 0x58
 800e720:	9b03      	ldr	r3, [sp, #12]
 800e722:	2205      	movs	r2, #5
 800e724:	7819      	ldrb	r1, [r3, #0]
 800e726:	485d      	ldr	r0, [pc, #372]	; (800e89c <_vfiprintf_r+0x260>)
 800e728:	f7ff f8a4 	bl	800d874 <memchr>
 800e72c:	9b03      	ldr	r3, [sp, #12]
 800e72e:	1c5f      	adds	r7, r3, #1
 800e730:	2800      	cmp	r0, #0
 800e732:	d120      	bne.n	800e776 <_vfiprintf_r+0x13a>
 800e734:	682a      	ldr	r2, [r5, #0]
 800e736:	06d3      	lsls	r3, r2, #27
 800e738:	d504      	bpl.n	800e744 <_vfiprintf_r+0x108>
 800e73a:	2353      	movs	r3, #83	; 0x53
 800e73c:	a904      	add	r1, sp, #16
 800e73e:	185b      	adds	r3, r3, r1
 800e740:	2120      	movs	r1, #32
 800e742:	7019      	strb	r1, [r3, #0]
 800e744:	0713      	lsls	r3, r2, #28
 800e746:	d504      	bpl.n	800e752 <_vfiprintf_r+0x116>
 800e748:	2353      	movs	r3, #83	; 0x53
 800e74a:	a904      	add	r1, sp, #16
 800e74c:	185b      	adds	r3, r3, r1
 800e74e:	212b      	movs	r1, #43	; 0x2b
 800e750:	7019      	strb	r1, [r3, #0]
 800e752:	9b03      	ldr	r3, [sp, #12]
 800e754:	781b      	ldrb	r3, [r3, #0]
 800e756:	2b2a      	cmp	r3, #42	; 0x2a
 800e758:	d016      	beq.n	800e788 <_vfiprintf_r+0x14c>
 800e75a:	2100      	movs	r1, #0
 800e75c:	68eb      	ldr	r3, [r5, #12]
 800e75e:	9f03      	ldr	r7, [sp, #12]
 800e760:	783a      	ldrb	r2, [r7, #0]
 800e762:	1c78      	adds	r0, r7, #1
 800e764:	3a30      	subs	r2, #48	; 0x30
 800e766:	4684      	mov	ip, r0
 800e768:	2a09      	cmp	r2, #9
 800e76a:	d94f      	bls.n	800e80c <_vfiprintf_r+0x1d0>
 800e76c:	2900      	cmp	r1, #0
 800e76e:	d111      	bne.n	800e794 <_vfiprintf_r+0x158>
 800e770:	e017      	b.n	800e7a2 <_vfiprintf_r+0x166>
 800e772:	3701      	adds	r7, #1
 800e774:	e7a9      	b.n	800e6ca <_vfiprintf_r+0x8e>
 800e776:	4b49      	ldr	r3, [pc, #292]	; (800e89c <_vfiprintf_r+0x260>)
 800e778:	682a      	ldr	r2, [r5, #0]
 800e77a:	1ac0      	subs	r0, r0, r3
 800e77c:	2301      	movs	r3, #1
 800e77e:	4083      	lsls	r3, r0
 800e780:	4313      	orrs	r3, r2
 800e782:	602b      	str	r3, [r5, #0]
 800e784:	9703      	str	r7, [sp, #12]
 800e786:	e7cb      	b.n	800e720 <_vfiprintf_r+0xe4>
 800e788:	9b07      	ldr	r3, [sp, #28]
 800e78a:	1d19      	adds	r1, r3, #4
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	9107      	str	r1, [sp, #28]
 800e790:	2b00      	cmp	r3, #0
 800e792:	db01      	blt.n	800e798 <_vfiprintf_r+0x15c>
 800e794:	930b      	str	r3, [sp, #44]	; 0x2c
 800e796:	e004      	b.n	800e7a2 <_vfiprintf_r+0x166>
 800e798:	425b      	negs	r3, r3
 800e79a:	60eb      	str	r3, [r5, #12]
 800e79c:	2302      	movs	r3, #2
 800e79e:	4313      	orrs	r3, r2
 800e7a0:	602b      	str	r3, [r5, #0]
 800e7a2:	783b      	ldrb	r3, [r7, #0]
 800e7a4:	2b2e      	cmp	r3, #46	; 0x2e
 800e7a6:	d10a      	bne.n	800e7be <_vfiprintf_r+0x182>
 800e7a8:	787b      	ldrb	r3, [r7, #1]
 800e7aa:	2b2a      	cmp	r3, #42	; 0x2a
 800e7ac:	d137      	bne.n	800e81e <_vfiprintf_r+0x1e2>
 800e7ae:	9b07      	ldr	r3, [sp, #28]
 800e7b0:	3702      	adds	r7, #2
 800e7b2:	1d1a      	adds	r2, r3, #4
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	9207      	str	r2, [sp, #28]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	db2d      	blt.n	800e818 <_vfiprintf_r+0x1dc>
 800e7bc:	9309      	str	r3, [sp, #36]	; 0x24
 800e7be:	2203      	movs	r2, #3
 800e7c0:	7839      	ldrb	r1, [r7, #0]
 800e7c2:	4837      	ldr	r0, [pc, #220]	; (800e8a0 <_vfiprintf_r+0x264>)
 800e7c4:	f7ff f856 	bl	800d874 <memchr>
 800e7c8:	2800      	cmp	r0, #0
 800e7ca:	d007      	beq.n	800e7dc <_vfiprintf_r+0x1a0>
 800e7cc:	4b34      	ldr	r3, [pc, #208]	; (800e8a0 <_vfiprintf_r+0x264>)
 800e7ce:	682a      	ldr	r2, [r5, #0]
 800e7d0:	1ac0      	subs	r0, r0, r3
 800e7d2:	2340      	movs	r3, #64	; 0x40
 800e7d4:	4083      	lsls	r3, r0
 800e7d6:	4313      	orrs	r3, r2
 800e7d8:	3701      	adds	r7, #1
 800e7da:	602b      	str	r3, [r5, #0]
 800e7dc:	7839      	ldrb	r1, [r7, #0]
 800e7de:	1c7b      	adds	r3, r7, #1
 800e7e0:	2206      	movs	r2, #6
 800e7e2:	4830      	ldr	r0, [pc, #192]	; (800e8a4 <_vfiprintf_r+0x268>)
 800e7e4:	9303      	str	r3, [sp, #12]
 800e7e6:	7629      	strb	r1, [r5, #24]
 800e7e8:	f7ff f844 	bl	800d874 <memchr>
 800e7ec:	2800      	cmp	r0, #0
 800e7ee:	d045      	beq.n	800e87c <_vfiprintf_r+0x240>
 800e7f0:	4b2d      	ldr	r3, [pc, #180]	; (800e8a8 <_vfiprintf_r+0x26c>)
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d127      	bne.n	800e846 <_vfiprintf_r+0x20a>
 800e7f6:	2207      	movs	r2, #7
 800e7f8:	9b07      	ldr	r3, [sp, #28]
 800e7fa:	3307      	adds	r3, #7
 800e7fc:	4393      	bics	r3, r2
 800e7fe:	3308      	adds	r3, #8
 800e800:	9307      	str	r3, [sp, #28]
 800e802:	696b      	ldr	r3, [r5, #20]
 800e804:	9a04      	ldr	r2, [sp, #16]
 800e806:	189b      	adds	r3, r3, r2
 800e808:	616b      	str	r3, [r5, #20]
 800e80a:	e75d      	b.n	800e6c8 <_vfiprintf_r+0x8c>
 800e80c:	210a      	movs	r1, #10
 800e80e:	434b      	muls	r3, r1
 800e810:	4667      	mov	r7, ip
 800e812:	189b      	adds	r3, r3, r2
 800e814:	3909      	subs	r1, #9
 800e816:	e7a3      	b.n	800e760 <_vfiprintf_r+0x124>
 800e818:	2301      	movs	r3, #1
 800e81a:	425b      	negs	r3, r3
 800e81c:	e7ce      	b.n	800e7bc <_vfiprintf_r+0x180>
 800e81e:	2300      	movs	r3, #0
 800e820:	001a      	movs	r2, r3
 800e822:	3701      	adds	r7, #1
 800e824:	606b      	str	r3, [r5, #4]
 800e826:	7839      	ldrb	r1, [r7, #0]
 800e828:	1c78      	adds	r0, r7, #1
 800e82a:	3930      	subs	r1, #48	; 0x30
 800e82c:	4684      	mov	ip, r0
 800e82e:	2909      	cmp	r1, #9
 800e830:	d903      	bls.n	800e83a <_vfiprintf_r+0x1fe>
 800e832:	2b00      	cmp	r3, #0
 800e834:	d0c3      	beq.n	800e7be <_vfiprintf_r+0x182>
 800e836:	9209      	str	r2, [sp, #36]	; 0x24
 800e838:	e7c1      	b.n	800e7be <_vfiprintf_r+0x182>
 800e83a:	230a      	movs	r3, #10
 800e83c:	435a      	muls	r2, r3
 800e83e:	4667      	mov	r7, ip
 800e840:	1852      	adds	r2, r2, r1
 800e842:	3b09      	subs	r3, #9
 800e844:	e7ef      	b.n	800e826 <_vfiprintf_r+0x1ea>
 800e846:	ab07      	add	r3, sp, #28
 800e848:	9300      	str	r3, [sp, #0]
 800e84a:	0022      	movs	r2, r4
 800e84c:	0029      	movs	r1, r5
 800e84e:	0030      	movs	r0, r6
 800e850:	4b16      	ldr	r3, [pc, #88]	; (800e8ac <_vfiprintf_r+0x270>)
 800e852:	f7fd fd65 	bl	800c320 <_printf_float>
 800e856:	9004      	str	r0, [sp, #16]
 800e858:	9b04      	ldr	r3, [sp, #16]
 800e85a:	3301      	adds	r3, #1
 800e85c:	d1d1      	bne.n	800e802 <_vfiprintf_r+0x1c6>
 800e85e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e860:	07db      	lsls	r3, r3, #31
 800e862:	d405      	bmi.n	800e870 <_vfiprintf_r+0x234>
 800e864:	89a3      	ldrh	r3, [r4, #12]
 800e866:	059b      	lsls	r3, r3, #22
 800e868:	d402      	bmi.n	800e870 <_vfiprintf_r+0x234>
 800e86a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e86c:	f000 fad4 	bl	800ee18 <__retarget_lock_release_recursive>
 800e870:	89a3      	ldrh	r3, [r4, #12]
 800e872:	065b      	lsls	r3, r3, #25
 800e874:	d500      	bpl.n	800e878 <_vfiprintf_r+0x23c>
 800e876:	e70a      	b.n	800e68e <_vfiprintf_r+0x52>
 800e878:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e87a:	e70a      	b.n	800e692 <_vfiprintf_r+0x56>
 800e87c:	ab07      	add	r3, sp, #28
 800e87e:	9300      	str	r3, [sp, #0]
 800e880:	0022      	movs	r2, r4
 800e882:	0029      	movs	r1, r5
 800e884:	0030      	movs	r0, r6
 800e886:	4b09      	ldr	r3, [pc, #36]	; (800e8ac <_vfiprintf_r+0x270>)
 800e888:	f7fd fffc 	bl	800c884 <_printf_i>
 800e88c:	e7e3      	b.n	800e856 <_vfiprintf_r+0x21a>
 800e88e:	46c0      	nop			; (mov r8, r8)
 800e890:	0800f8dc 	.word	0x0800f8dc
 800e894:	0800f8fc 	.word	0x0800f8fc
 800e898:	0800f8bc 	.word	0x0800f8bc
 800e89c:	0800f764 	.word	0x0800f764
 800e8a0:	0800f76a 	.word	0x0800f76a
 800e8a4:	0800f76e 	.word	0x0800f76e
 800e8a8:	0800c321 	.word	0x0800c321
 800e8ac:	0800e619 	.word	0x0800e619

0800e8b0 <__swbuf_r>:
 800e8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8b2:	0005      	movs	r5, r0
 800e8b4:	000e      	movs	r6, r1
 800e8b6:	0014      	movs	r4, r2
 800e8b8:	2800      	cmp	r0, #0
 800e8ba:	d004      	beq.n	800e8c6 <__swbuf_r+0x16>
 800e8bc:	6983      	ldr	r3, [r0, #24]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d101      	bne.n	800e8c6 <__swbuf_r+0x16>
 800e8c2:	f000 fa07 	bl	800ecd4 <__sinit>
 800e8c6:	4b22      	ldr	r3, [pc, #136]	; (800e950 <__swbuf_r+0xa0>)
 800e8c8:	429c      	cmp	r4, r3
 800e8ca:	d12e      	bne.n	800e92a <__swbuf_r+0x7a>
 800e8cc:	686c      	ldr	r4, [r5, #4]
 800e8ce:	69a3      	ldr	r3, [r4, #24]
 800e8d0:	60a3      	str	r3, [r4, #8]
 800e8d2:	89a3      	ldrh	r3, [r4, #12]
 800e8d4:	071b      	lsls	r3, r3, #28
 800e8d6:	d532      	bpl.n	800e93e <__swbuf_r+0x8e>
 800e8d8:	6923      	ldr	r3, [r4, #16]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d02f      	beq.n	800e93e <__swbuf_r+0x8e>
 800e8de:	6823      	ldr	r3, [r4, #0]
 800e8e0:	6922      	ldr	r2, [r4, #16]
 800e8e2:	b2f7      	uxtb	r7, r6
 800e8e4:	1a98      	subs	r0, r3, r2
 800e8e6:	6963      	ldr	r3, [r4, #20]
 800e8e8:	b2f6      	uxtb	r6, r6
 800e8ea:	4283      	cmp	r3, r0
 800e8ec:	dc05      	bgt.n	800e8fa <__swbuf_r+0x4a>
 800e8ee:	0021      	movs	r1, r4
 800e8f0:	0028      	movs	r0, r5
 800e8f2:	f000 f94d 	bl	800eb90 <_fflush_r>
 800e8f6:	2800      	cmp	r0, #0
 800e8f8:	d127      	bne.n	800e94a <__swbuf_r+0x9a>
 800e8fa:	68a3      	ldr	r3, [r4, #8]
 800e8fc:	3001      	adds	r0, #1
 800e8fe:	3b01      	subs	r3, #1
 800e900:	60a3      	str	r3, [r4, #8]
 800e902:	6823      	ldr	r3, [r4, #0]
 800e904:	1c5a      	adds	r2, r3, #1
 800e906:	6022      	str	r2, [r4, #0]
 800e908:	701f      	strb	r7, [r3, #0]
 800e90a:	6963      	ldr	r3, [r4, #20]
 800e90c:	4283      	cmp	r3, r0
 800e90e:	d004      	beq.n	800e91a <__swbuf_r+0x6a>
 800e910:	89a3      	ldrh	r3, [r4, #12]
 800e912:	07db      	lsls	r3, r3, #31
 800e914:	d507      	bpl.n	800e926 <__swbuf_r+0x76>
 800e916:	2e0a      	cmp	r6, #10
 800e918:	d105      	bne.n	800e926 <__swbuf_r+0x76>
 800e91a:	0021      	movs	r1, r4
 800e91c:	0028      	movs	r0, r5
 800e91e:	f000 f937 	bl	800eb90 <_fflush_r>
 800e922:	2800      	cmp	r0, #0
 800e924:	d111      	bne.n	800e94a <__swbuf_r+0x9a>
 800e926:	0030      	movs	r0, r6
 800e928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e92a:	4b0a      	ldr	r3, [pc, #40]	; (800e954 <__swbuf_r+0xa4>)
 800e92c:	429c      	cmp	r4, r3
 800e92e:	d101      	bne.n	800e934 <__swbuf_r+0x84>
 800e930:	68ac      	ldr	r4, [r5, #8]
 800e932:	e7cc      	b.n	800e8ce <__swbuf_r+0x1e>
 800e934:	4b08      	ldr	r3, [pc, #32]	; (800e958 <__swbuf_r+0xa8>)
 800e936:	429c      	cmp	r4, r3
 800e938:	d1c9      	bne.n	800e8ce <__swbuf_r+0x1e>
 800e93a:	68ec      	ldr	r4, [r5, #12]
 800e93c:	e7c7      	b.n	800e8ce <__swbuf_r+0x1e>
 800e93e:	0021      	movs	r1, r4
 800e940:	0028      	movs	r0, r5
 800e942:	f000 f819 	bl	800e978 <__swsetup_r>
 800e946:	2800      	cmp	r0, #0
 800e948:	d0c9      	beq.n	800e8de <__swbuf_r+0x2e>
 800e94a:	2601      	movs	r6, #1
 800e94c:	4276      	negs	r6, r6
 800e94e:	e7ea      	b.n	800e926 <__swbuf_r+0x76>
 800e950:	0800f8dc 	.word	0x0800f8dc
 800e954:	0800f8fc 	.word	0x0800f8fc
 800e958:	0800f8bc 	.word	0x0800f8bc

0800e95c <__ascii_wctomb>:
 800e95c:	0003      	movs	r3, r0
 800e95e:	1e08      	subs	r0, r1, #0
 800e960:	d005      	beq.n	800e96e <__ascii_wctomb+0x12>
 800e962:	2aff      	cmp	r2, #255	; 0xff
 800e964:	d904      	bls.n	800e970 <__ascii_wctomb+0x14>
 800e966:	228a      	movs	r2, #138	; 0x8a
 800e968:	2001      	movs	r0, #1
 800e96a:	601a      	str	r2, [r3, #0]
 800e96c:	4240      	negs	r0, r0
 800e96e:	4770      	bx	lr
 800e970:	2001      	movs	r0, #1
 800e972:	700a      	strb	r2, [r1, #0]
 800e974:	e7fb      	b.n	800e96e <__ascii_wctomb+0x12>
	...

0800e978 <__swsetup_r>:
 800e978:	4b37      	ldr	r3, [pc, #220]	; (800ea58 <__swsetup_r+0xe0>)
 800e97a:	b570      	push	{r4, r5, r6, lr}
 800e97c:	681d      	ldr	r5, [r3, #0]
 800e97e:	0006      	movs	r6, r0
 800e980:	000c      	movs	r4, r1
 800e982:	2d00      	cmp	r5, #0
 800e984:	d005      	beq.n	800e992 <__swsetup_r+0x1a>
 800e986:	69ab      	ldr	r3, [r5, #24]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d102      	bne.n	800e992 <__swsetup_r+0x1a>
 800e98c:	0028      	movs	r0, r5
 800e98e:	f000 f9a1 	bl	800ecd4 <__sinit>
 800e992:	4b32      	ldr	r3, [pc, #200]	; (800ea5c <__swsetup_r+0xe4>)
 800e994:	429c      	cmp	r4, r3
 800e996:	d10f      	bne.n	800e9b8 <__swsetup_r+0x40>
 800e998:	686c      	ldr	r4, [r5, #4]
 800e99a:	230c      	movs	r3, #12
 800e99c:	5ee2      	ldrsh	r2, [r4, r3]
 800e99e:	b293      	uxth	r3, r2
 800e9a0:	0711      	lsls	r1, r2, #28
 800e9a2:	d42d      	bmi.n	800ea00 <__swsetup_r+0x88>
 800e9a4:	06d9      	lsls	r1, r3, #27
 800e9a6:	d411      	bmi.n	800e9cc <__swsetup_r+0x54>
 800e9a8:	2309      	movs	r3, #9
 800e9aa:	2001      	movs	r0, #1
 800e9ac:	6033      	str	r3, [r6, #0]
 800e9ae:	3337      	adds	r3, #55	; 0x37
 800e9b0:	4313      	orrs	r3, r2
 800e9b2:	81a3      	strh	r3, [r4, #12]
 800e9b4:	4240      	negs	r0, r0
 800e9b6:	bd70      	pop	{r4, r5, r6, pc}
 800e9b8:	4b29      	ldr	r3, [pc, #164]	; (800ea60 <__swsetup_r+0xe8>)
 800e9ba:	429c      	cmp	r4, r3
 800e9bc:	d101      	bne.n	800e9c2 <__swsetup_r+0x4a>
 800e9be:	68ac      	ldr	r4, [r5, #8]
 800e9c0:	e7eb      	b.n	800e99a <__swsetup_r+0x22>
 800e9c2:	4b28      	ldr	r3, [pc, #160]	; (800ea64 <__swsetup_r+0xec>)
 800e9c4:	429c      	cmp	r4, r3
 800e9c6:	d1e8      	bne.n	800e99a <__swsetup_r+0x22>
 800e9c8:	68ec      	ldr	r4, [r5, #12]
 800e9ca:	e7e6      	b.n	800e99a <__swsetup_r+0x22>
 800e9cc:	075b      	lsls	r3, r3, #29
 800e9ce:	d513      	bpl.n	800e9f8 <__swsetup_r+0x80>
 800e9d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e9d2:	2900      	cmp	r1, #0
 800e9d4:	d008      	beq.n	800e9e8 <__swsetup_r+0x70>
 800e9d6:	0023      	movs	r3, r4
 800e9d8:	3344      	adds	r3, #68	; 0x44
 800e9da:	4299      	cmp	r1, r3
 800e9dc:	d002      	beq.n	800e9e4 <__swsetup_r+0x6c>
 800e9de:	0030      	movs	r0, r6
 800e9e0:	f7ff fb1c 	bl	800e01c <_free_r>
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	6363      	str	r3, [r4, #52]	; 0x34
 800e9e8:	2224      	movs	r2, #36	; 0x24
 800e9ea:	89a3      	ldrh	r3, [r4, #12]
 800e9ec:	4393      	bics	r3, r2
 800e9ee:	81a3      	strh	r3, [r4, #12]
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	6063      	str	r3, [r4, #4]
 800e9f4:	6923      	ldr	r3, [r4, #16]
 800e9f6:	6023      	str	r3, [r4, #0]
 800e9f8:	2308      	movs	r3, #8
 800e9fa:	89a2      	ldrh	r2, [r4, #12]
 800e9fc:	4313      	orrs	r3, r2
 800e9fe:	81a3      	strh	r3, [r4, #12]
 800ea00:	6923      	ldr	r3, [r4, #16]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d10b      	bne.n	800ea1e <__swsetup_r+0xa6>
 800ea06:	21a0      	movs	r1, #160	; 0xa0
 800ea08:	2280      	movs	r2, #128	; 0x80
 800ea0a:	89a3      	ldrh	r3, [r4, #12]
 800ea0c:	0089      	lsls	r1, r1, #2
 800ea0e:	0092      	lsls	r2, r2, #2
 800ea10:	400b      	ands	r3, r1
 800ea12:	4293      	cmp	r3, r2
 800ea14:	d003      	beq.n	800ea1e <__swsetup_r+0xa6>
 800ea16:	0021      	movs	r1, r4
 800ea18:	0030      	movs	r0, r6
 800ea1a:	f000 fa27 	bl	800ee6c <__smakebuf_r>
 800ea1e:	220c      	movs	r2, #12
 800ea20:	5ea3      	ldrsh	r3, [r4, r2]
 800ea22:	2001      	movs	r0, #1
 800ea24:	001a      	movs	r2, r3
 800ea26:	b299      	uxth	r1, r3
 800ea28:	4002      	ands	r2, r0
 800ea2a:	4203      	tst	r3, r0
 800ea2c:	d00f      	beq.n	800ea4e <__swsetup_r+0xd6>
 800ea2e:	2200      	movs	r2, #0
 800ea30:	60a2      	str	r2, [r4, #8]
 800ea32:	6962      	ldr	r2, [r4, #20]
 800ea34:	4252      	negs	r2, r2
 800ea36:	61a2      	str	r2, [r4, #24]
 800ea38:	2000      	movs	r0, #0
 800ea3a:	6922      	ldr	r2, [r4, #16]
 800ea3c:	4282      	cmp	r2, r0
 800ea3e:	d1ba      	bne.n	800e9b6 <__swsetup_r+0x3e>
 800ea40:	060a      	lsls	r2, r1, #24
 800ea42:	d5b8      	bpl.n	800e9b6 <__swsetup_r+0x3e>
 800ea44:	2240      	movs	r2, #64	; 0x40
 800ea46:	4313      	orrs	r3, r2
 800ea48:	81a3      	strh	r3, [r4, #12]
 800ea4a:	3801      	subs	r0, #1
 800ea4c:	e7b3      	b.n	800e9b6 <__swsetup_r+0x3e>
 800ea4e:	0788      	lsls	r0, r1, #30
 800ea50:	d400      	bmi.n	800ea54 <__swsetup_r+0xdc>
 800ea52:	6962      	ldr	r2, [r4, #20]
 800ea54:	60a2      	str	r2, [r4, #8]
 800ea56:	e7ef      	b.n	800ea38 <__swsetup_r+0xc0>
 800ea58:	20000014 	.word	0x20000014
 800ea5c:	0800f8dc 	.word	0x0800f8dc
 800ea60:	0800f8fc 	.word	0x0800f8fc
 800ea64:	0800f8bc 	.word	0x0800f8bc

0800ea68 <abort>:
 800ea68:	2006      	movs	r0, #6
 800ea6a:	b510      	push	{r4, lr}
 800ea6c:	f000 fa74 	bl	800ef58 <raise>
 800ea70:	2001      	movs	r0, #1
 800ea72:	f7f7 f809 	bl	8005a88 <_exit>
	...

0800ea78 <__sflush_r>:
 800ea78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ea7a:	898b      	ldrh	r3, [r1, #12]
 800ea7c:	0005      	movs	r5, r0
 800ea7e:	000c      	movs	r4, r1
 800ea80:	071a      	lsls	r2, r3, #28
 800ea82:	d45f      	bmi.n	800eb44 <__sflush_r+0xcc>
 800ea84:	684a      	ldr	r2, [r1, #4]
 800ea86:	2a00      	cmp	r2, #0
 800ea88:	dc04      	bgt.n	800ea94 <__sflush_r+0x1c>
 800ea8a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800ea8c:	2a00      	cmp	r2, #0
 800ea8e:	dc01      	bgt.n	800ea94 <__sflush_r+0x1c>
 800ea90:	2000      	movs	r0, #0
 800ea92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ea94:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ea96:	2f00      	cmp	r7, #0
 800ea98:	d0fa      	beq.n	800ea90 <__sflush_r+0x18>
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	2180      	movs	r1, #128	; 0x80
 800ea9e:	682e      	ldr	r6, [r5, #0]
 800eaa0:	602a      	str	r2, [r5, #0]
 800eaa2:	001a      	movs	r2, r3
 800eaa4:	0149      	lsls	r1, r1, #5
 800eaa6:	400a      	ands	r2, r1
 800eaa8:	420b      	tst	r3, r1
 800eaaa:	d034      	beq.n	800eb16 <__sflush_r+0x9e>
 800eaac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eaae:	89a3      	ldrh	r3, [r4, #12]
 800eab0:	075b      	lsls	r3, r3, #29
 800eab2:	d506      	bpl.n	800eac2 <__sflush_r+0x4a>
 800eab4:	6863      	ldr	r3, [r4, #4]
 800eab6:	1ac0      	subs	r0, r0, r3
 800eab8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d001      	beq.n	800eac2 <__sflush_r+0x4a>
 800eabe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eac0:	1ac0      	subs	r0, r0, r3
 800eac2:	0002      	movs	r2, r0
 800eac4:	6a21      	ldr	r1, [r4, #32]
 800eac6:	2300      	movs	r3, #0
 800eac8:	0028      	movs	r0, r5
 800eaca:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800eacc:	47b8      	blx	r7
 800eace:	89a1      	ldrh	r1, [r4, #12]
 800ead0:	1c43      	adds	r3, r0, #1
 800ead2:	d106      	bne.n	800eae2 <__sflush_r+0x6a>
 800ead4:	682b      	ldr	r3, [r5, #0]
 800ead6:	2b1d      	cmp	r3, #29
 800ead8:	d831      	bhi.n	800eb3e <__sflush_r+0xc6>
 800eada:	4a2c      	ldr	r2, [pc, #176]	; (800eb8c <__sflush_r+0x114>)
 800eadc:	40da      	lsrs	r2, r3
 800eade:	07d3      	lsls	r3, r2, #31
 800eae0:	d52d      	bpl.n	800eb3e <__sflush_r+0xc6>
 800eae2:	2300      	movs	r3, #0
 800eae4:	6063      	str	r3, [r4, #4]
 800eae6:	6923      	ldr	r3, [r4, #16]
 800eae8:	6023      	str	r3, [r4, #0]
 800eaea:	04cb      	lsls	r3, r1, #19
 800eaec:	d505      	bpl.n	800eafa <__sflush_r+0x82>
 800eaee:	1c43      	adds	r3, r0, #1
 800eaf0:	d102      	bne.n	800eaf8 <__sflush_r+0x80>
 800eaf2:	682b      	ldr	r3, [r5, #0]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d100      	bne.n	800eafa <__sflush_r+0x82>
 800eaf8:	6560      	str	r0, [r4, #84]	; 0x54
 800eafa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eafc:	602e      	str	r6, [r5, #0]
 800eafe:	2900      	cmp	r1, #0
 800eb00:	d0c6      	beq.n	800ea90 <__sflush_r+0x18>
 800eb02:	0023      	movs	r3, r4
 800eb04:	3344      	adds	r3, #68	; 0x44
 800eb06:	4299      	cmp	r1, r3
 800eb08:	d002      	beq.n	800eb10 <__sflush_r+0x98>
 800eb0a:	0028      	movs	r0, r5
 800eb0c:	f7ff fa86 	bl	800e01c <_free_r>
 800eb10:	2000      	movs	r0, #0
 800eb12:	6360      	str	r0, [r4, #52]	; 0x34
 800eb14:	e7bd      	b.n	800ea92 <__sflush_r+0x1a>
 800eb16:	2301      	movs	r3, #1
 800eb18:	0028      	movs	r0, r5
 800eb1a:	6a21      	ldr	r1, [r4, #32]
 800eb1c:	47b8      	blx	r7
 800eb1e:	1c43      	adds	r3, r0, #1
 800eb20:	d1c5      	bne.n	800eaae <__sflush_r+0x36>
 800eb22:	682b      	ldr	r3, [r5, #0]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d0c2      	beq.n	800eaae <__sflush_r+0x36>
 800eb28:	2b1d      	cmp	r3, #29
 800eb2a:	d001      	beq.n	800eb30 <__sflush_r+0xb8>
 800eb2c:	2b16      	cmp	r3, #22
 800eb2e:	d101      	bne.n	800eb34 <__sflush_r+0xbc>
 800eb30:	602e      	str	r6, [r5, #0]
 800eb32:	e7ad      	b.n	800ea90 <__sflush_r+0x18>
 800eb34:	2340      	movs	r3, #64	; 0x40
 800eb36:	89a2      	ldrh	r2, [r4, #12]
 800eb38:	4313      	orrs	r3, r2
 800eb3a:	81a3      	strh	r3, [r4, #12]
 800eb3c:	e7a9      	b.n	800ea92 <__sflush_r+0x1a>
 800eb3e:	2340      	movs	r3, #64	; 0x40
 800eb40:	430b      	orrs	r3, r1
 800eb42:	e7fa      	b.n	800eb3a <__sflush_r+0xc2>
 800eb44:	690f      	ldr	r7, [r1, #16]
 800eb46:	2f00      	cmp	r7, #0
 800eb48:	d0a2      	beq.n	800ea90 <__sflush_r+0x18>
 800eb4a:	680a      	ldr	r2, [r1, #0]
 800eb4c:	600f      	str	r7, [r1, #0]
 800eb4e:	1bd2      	subs	r2, r2, r7
 800eb50:	9201      	str	r2, [sp, #4]
 800eb52:	2200      	movs	r2, #0
 800eb54:	079b      	lsls	r3, r3, #30
 800eb56:	d100      	bne.n	800eb5a <__sflush_r+0xe2>
 800eb58:	694a      	ldr	r2, [r1, #20]
 800eb5a:	60a2      	str	r2, [r4, #8]
 800eb5c:	9b01      	ldr	r3, [sp, #4]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	dc00      	bgt.n	800eb64 <__sflush_r+0xec>
 800eb62:	e795      	b.n	800ea90 <__sflush_r+0x18>
 800eb64:	003a      	movs	r2, r7
 800eb66:	0028      	movs	r0, r5
 800eb68:	9b01      	ldr	r3, [sp, #4]
 800eb6a:	6a21      	ldr	r1, [r4, #32]
 800eb6c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eb6e:	47b0      	blx	r6
 800eb70:	2800      	cmp	r0, #0
 800eb72:	dc06      	bgt.n	800eb82 <__sflush_r+0x10a>
 800eb74:	2340      	movs	r3, #64	; 0x40
 800eb76:	2001      	movs	r0, #1
 800eb78:	89a2      	ldrh	r2, [r4, #12]
 800eb7a:	4240      	negs	r0, r0
 800eb7c:	4313      	orrs	r3, r2
 800eb7e:	81a3      	strh	r3, [r4, #12]
 800eb80:	e787      	b.n	800ea92 <__sflush_r+0x1a>
 800eb82:	9b01      	ldr	r3, [sp, #4]
 800eb84:	183f      	adds	r7, r7, r0
 800eb86:	1a1b      	subs	r3, r3, r0
 800eb88:	9301      	str	r3, [sp, #4]
 800eb8a:	e7e7      	b.n	800eb5c <__sflush_r+0xe4>
 800eb8c:	20400001 	.word	0x20400001

0800eb90 <_fflush_r>:
 800eb90:	690b      	ldr	r3, [r1, #16]
 800eb92:	b570      	push	{r4, r5, r6, lr}
 800eb94:	0005      	movs	r5, r0
 800eb96:	000c      	movs	r4, r1
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d102      	bne.n	800eba2 <_fflush_r+0x12>
 800eb9c:	2500      	movs	r5, #0
 800eb9e:	0028      	movs	r0, r5
 800eba0:	bd70      	pop	{r4, r5, r6, pc}
 800eba2:	2800      	cmp	r0, #0
 800eba4:	d004      	beq.n	800ebb0 <_fflush_r+0x20>
 800eba6:	6983      	ldr	r3, [r0, #24]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d101      	bne.n	800ebb0 <_fflush_r+0x20>
 800ebac:	f000 f892 	bl	800ecd4 <__sinit>
 800ebb0:	4b14      	ldr	r3, [pc, #80]	; (800ec04 <_fflush_r+0x74>)
 800ebb2:	429c      	cmp	r4, r3
 800ebb4:	d11b      	bne.n	800ebee <_fflush_r+0x5e>
 800ebb6:	686c      	ldr	r4, [r5, #4]
 800ebb8:	220c      	movs	r2, #12
 800ebba:	5ea3      	ldrsh	r3, [r4, r2]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d0ed      	beq.n	800eb9c <_fflush_r+0xc>
 800ebc0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ebc2:	07d2      	lsls	r2, r2, #31
 800ebc4:	d404      	bmi.n	800ebd0 <_fflush_r+0x40>
 800ebc6:	059b      	lsls	r3, r3, #22
 800ebc8:	d402      	bmi.n	800ebd0 <_fflush_r+0x40>
 800ebca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ebcc:	f000 f923 	bl	800ee16 <__retarget_lock_acquire_recursive>
 800ebd0:	0028      	movs	r0, r5
 800ebd2:	0021      	movs	r1, r4
 800ebd4:	f7ff ff50 	bl	800ea78 <__sflush_r>
 800ebd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ebda:	0005      	movs	r5, r0
 800ebdc:	07db      	lsls	r3, r3, #31
 800ebde:	d4de      	bmi.n	800eb9e <_fflush_r+0xe>
 800ebe0:	89a3      	ldrh	r3, [r4, #12]
 800ebe2:	059b      	lsls	r3, r3, #22
 800ebe4:	d4db      	bmi.n	800eb9e <_fflush_r+0xe>
 800ebe6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ebe8:	f000 f916 	bl	800ee18 <__retarget_lock_release_recursive>
 800ebec:	e7d7      	b.n	800eb9e <_fflush_r+0xe>
 800ebee:	4b06      	ldr	r3, [pc, #24]	; (800ec08 <_fflush_r+0x78>)
 800ebf0:	429c      	cmp	r4, r3
 800ebf2:	d101      	bne.n	800ebf8 <_fflush_r+0x68>
 800ebf4:	68ac      	ldr	r4, [r5, #8]
 800ebf6:	e7df      	b.n	800ebb8 <_fflush_r+0x28>
 800ebf8:	4b04      	ldr	r3, [pc, #16]	; (800ec0c <_fflush_r+0x7c>)
 800ebfa:	429c      	cmp	r4, r3
 800ebfc:	d1dc      	bne.n	800ebb8 <_fflush_r+0x28>
 800ebfe:	68ec      	ldr	r4, [r5, #12]
 800ec00:	e7da      	b.n	800ebb8 <_fflush_r+0x28>
 800ec02:	46c0      	nop			; (mov r8, r8)
 800ec04:	0800f8dc 	.word	0x0800f8dc
 800ec08:	0800f8fc 	.word	0x0800f8fc
 800ec0c:	0800f8bc 	.word	0x0800f8bc

0800ec10 <std>:
 800ec10:	2300      	movs	r3, #0
 800ec12:	b510      	push	{r4, lr}
 800ec14:	0004      	movs	r4, r0
 800ec16:	6003      	str	r3, [r0, #0]
 800ec18:	6043      	str	r3, [r0, #4]
 800ec1a:	6083      	str	r3, [r0, #8]
 800ec1c:	8181      	strh	r1, [r0, #12]
 800ec1e:	6643      	str	r3, [r0, #100]	; 0x64
 800ec20:	0019      	movs	r1, r3
 800ec22:	81c2      	strh	r2, [r0, #14]
 800ec24:	6103      	str	r3, [r0, #16]
 800ec26:	6143      	str	r3, [r0, #20]
 800ec28:	6183      	str	r3, [r0, #24]
 800ec2a:	2208      	movs	r2, #8
 800ec2c:	305c      	adds	r0, #92	; 0x5c
 800ec2e:	f7fd fac4 	bl	800c1ba <memset>
 800ec32:	4b05      	ldr	r3, [pc, #20]	; (800ec48 <std+0x38>)
 800ec34:	6224      	str	r4, [r4, #32]
 800ec36:	6263      	str	r3, [r4, #36]	; 0x24
 800ec38:	4b04      	ldr	r3, [pc, #16]	; (800ec4c <std+0x3c>)
 800ec3a:	62a3      	str	r3, [r4, #40]	; 0x28
 800ec3c:	4b04      	ldr	r3, [pc, #16]	; (800ec50 <std+0x40>)
 800ec3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ec40:	4b04      	ldr	r3, [pc, #16]	; (800ec54 <std+0x44>)
 800ec42:	6323      	str	r3, [r4, #48]	; 0x30
 800ec44:	bd10      	pop	{r4, pc}
 800ec46:	46c0      	nop			; (mov r8, r8)
 800ec48:	0800ef99 	.word	0x0800ef99
 800ec4c:	0800efc1 	.word	0x0800efc1
 800ec50:	0800eff9 	.word	0x0800eff9
 800ec54:	0800f025 	.word	0x0800f025

0800ec58 <_cleanup_r>:
 800ec58:	b510      	push	{r4, lr}
 800ec5a:	4902      	ldr	r1, [pc, #8]	; (800ec64 <_cleanup_r+0xc>)
 800ec5c:	f000 f8ba 	bl	800edd4 <_fwalk_reent>
 800ec60:	bd10      	pop	{r4, pc}
 800ec62:	46c0      	nop			; (mov r8, r8)
 800ec64:	0800eb91 	.word	0x0800eb91

0800ec68 <__sfmoreglue>:
 800ec68:	b570      	push	{r4, r5, r6, lr}
 800ec6a:	2568      	movs	r5, #104	; 0x68
 800ec6c:	1e4a      	subs	r2, r1, #1
 800ec6e:	4355      	muls	r5, r2
 800ec70:	000e      	movs	r6, r1
 800ec72:	0029      	movs	r1, r5
 800ec74:	3174      	adds	r1, #116	; 0x74
 800ec76:	f7ff fa3d 	bl	800e0f4 <_malloc_r>
 800ec7a:	1e04      	subs	r4, r0, #0
 800ec7c:	d008      	beq.n	800ec90 <__sfmoreglue+0x28>
 800ec7e:	2100      	movs	r1, #0
 800ec80:	002a      	movs	r2, r5
 800ec82:	6001      	str	r1, [r0, #0]
 800ec84:	6046      	str	r6, [r0, #4]
 800ec86:	300c      	adds	r0, #12
 800ec88:	60a0      	str	r0, [r4, #8]
 800ec8a:	3268      	adds	r2, #104	; 0x68
 800ec8c:	f7fd fa95 	bl	800c1ba <memset>
 800ec90:	0020      	movs	r0, r4
 800ec92:	bd70      	pop	{r4, r5, r6, pc}

0800ec94 <__sfp_lock_acquire>:
 800ec94:	b510      	push	{r4, lr}
 800ec96:	4802      	ldr	r0, [pc, #8]	; (800eca0 <__sfp_lock_acquire+0xc>)
 800ec98:	f000 f8bd 	bl	800ee16 <__retarget_lock_acquire_recursive>
 800ec9c:	bd10      	pop	{r4, pc}
 800ec9e:	46c0      	nop			; (mov r8, r8)
 800eca0:	20000e01 	.word	0x20000e01

0800eca4 <__sfp_lock_release>:
 800eca4:	b510      	push	{r4, lr}
 800eca6:	4802      	ldr	r0, [pc, #8]	; (800ecb0 <__sfp_lock_release+0xc>)
 800eca8:	f000 f8b6 	bl	800ee18 <__retarget_lock_release_recursive>
 800ecac:	bd10      	pop	{r4, pc}
 800ecae:	46c0      	nop			; (mov r8, r8)
 800ecb0:	20000e01 	.word	0x20000e01

0800ecb4 <__sinit_lock_acquire>:
 800ecb4:	b510      	push	{r4, lr}
 800ecb6:	4802      	ldr	r0, [pc, #8]	; (800ecc0 <__sinit_lock_acquire+0xc>)
 800ecb8:	f000 f8ad 	bl	800ee16 <__retarget_lock_acquire_recursive>
 800ecbc:	bd10      	pop	{r4, pc}
 800ecbe:	46c0      	nop			; (mov r8, r8)
 800ecc0:	20000e02 	.word	0x20000e02

0800ecc4 <__sinit_lock_release>:
 800ecc4:	b510      	push	{r4, lr}
 800ecc6:	4802      	ldr	r0, [pc, #8]	; (800ecd0 <__sinit_lock_release+0xc>)
 800ecc8:	f000 f8a6 	bl	800ee18 <__retarget_lock_release_recursive>
 800eccc:	bd10      	pop	{r4, pc}
 800ecce:	46c0      	nop			; (mov r8, r8)
 800ecd0:	20000e02 	.word	0x20000e02

0800ecd4 <__sinit>:
 800ecd4:	b513      	push	{r0, r1, r4, lr}
 800ecd6:	0004      	movs	r4, r0
 800ecd8:	f7ff ffec 	bl	800ecb4 <__sinit_lock_acquire>
 800ecdc:	69a3      	ldr	r3, [r4, #24]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d002      	beq.n	800ece8 <__sinit+0x14>
 800ece2:	f7ff ffef 	bl	800ecc4 <__sinit_lock_release>
 800ece6:	bd13      	pop	{r0, r1, r4, pc}
 800ece8:	64a3      	str	r3, [r4, #72]	; 0x48
 800ecea:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ecec:	6523      	str	r3, [r4, #80]	; 0x50
 800ecee:	4b13      	ldr	r3, [pc, #76]	; (800ed3c <__sinit+0x68>)
 800ecf0:	4a13      	ldr	r2, [pc, #76]	; (800ed40 <__sinit+0x6c>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	62a2      	str	r2, [r4, #40]	; 0x28
 800ecf6:	9301      	str	r3, [sp, #4]
 800ecf8:	42a3      	cmp	r3, r4
 800ecfa:	d101      	bne.n	800ed00 <__sinit+0x2c>
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	61a3      	str	r3, [r4, #24]
 800ed00:	0020      	movs	r0, r4
 800ed02:	f000 f81f 	bl	800ed44 <__sfp>
 800ed06:	6060      	str	r0, [r4, #4]
 800ed08:	0020      	movs	r0, r4
 800ed0a:	f000 f81b 	bl	800ed44 <__sfp>
 800ed0e:	60a0      	str	r0, [r4, #8]
 800ed10:	0020      	movs	r0, r4
 800ed12:	f000 f817 	bl	800ed44 <__sfp>
 800ed16:	2200      	movs	r2, #0
 800ed18:	2104      	movs	r1, #4
 800ed1a:	60e0      	str	r0, [r4, #12]
 800ed1c:	6860      	ldr	r0, [r4, #4]
 800ed1e:	f7ff ff77 	bl	800ec10 <std>
 800ed22:	2201      	movs	r2, #1
 800ed24:	2109      	movs	r1, #9
 800ed26:	68a0      	ldr	r0, [r4, #8]
 800ed28:	f7ff ff72 	bl	800ec10 <std>
 800ed2c:	2202      	movs	r2, #2
 800ed2e:	2112      	movs	r1, #18
 800ed30:	68e0      	ldr	r0, [r4, #12]
 800ed32:	f7ff ff6d 	bl	800ec10 <std>
 800ed36:	2301      	movs	r3, #1
 800ed38:	61a3      	str	r3, [r4, #24]
 800ed3a:	e7d2      	b.n	800ece2 <__sinit+0xe>
 800ed3c:	0800f544 	.word	0x0800f544
 800ed40:	0800ec59 	.word	0x0800ec59

0800ed44 <__sfp>:
 800ed44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed46:	0007      	movs	r7, r0
 800ed48:	f7ff ffa4 	bl	800ec94 <__sfp_lock_acquire>
 800ed4c:	4b1f      	ldr	r3, [pc, #124]	; (800edcc <__sfp+0x88>)
 800ed4e:	681e      	ldr	r6, [r3, #0]
 800ed50:	69b3      	ldr	r3, [r6, #24]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d102      	bne.n	800ed5c <__sfp+0x18>
 800ed56:	0030      	movs	r0, r6
 800ed58:	f7ff ffbc 	bl	800ecd4 <__sinit>
 800ed5c:	3648      	adds	r6, #72	; 0x48
 800ed5e:	68b4      	ldr	r4, [r6, #8]
 800ed60:	6873      	ldr	r3, [r6, #4]
 800ed62:	3b01      	subs	r3, #1
 800ed64:	d504      	bpl.n	800ed70 <__sfp+0x2c>
 800ed66:	6833      	ldr	r3, [r6, #0]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d022      	beq.n	800edb2 <__sfp+0x6e>
 800ed6c:	6836      	ldr	r6, [r6, #0]
 800ed6e:	e7f6      	b.n	800ed5e <__sfp+0x1a>
 800ed70:	220c      	movs	r2, #12
 800ed72:	5ea5      	ldrsh	r5, [r4, r2]
 800ed74:	2d00      	cmp	r5, #0
 800ed76:	d11a      	bne.n	800edae <__sfp+0x6a>
 800ed78:	0020      	movs	r0, r4
 800ed7a:	4b15      	ldr	r3, [pc, #84]	; (800edd0 <__sfp+0x8c>)
 800ed7c:	3058      	adds	r0, #88	; 0x58
 800ed7e:	60e3      	str	r3, [r4, #12]
 800ed80:	6665      	str	r5, [r4, #100]	; 0x64
 800ed82:	f000 f847 	bl	800ee14 <__retarget_lock_init_recursive>
 800ed86:	f7ff ff8d 	bl	800eca4 <__sfp_lock_release>
 800ed8a:	0020      	movs	r0, r4
 800ed8c:	2208      	movs	r2, #8
 800ed8e:	0029      	movs	r1, r5
 800ed90:	6025      	str	r5, [r4, #0]
 800ed92:	60a5      	str	r5, [r4, #8]
 800ed94:	6065      	str	r5, [r4, #4]
 800ed96:	6125      	str	r5, [r4, #16]
 800ed98:	6165      	str	r5, [r4, #20]
 800ed9a:	61a5      	str	r5, [r4, #24]
 800ed9c:	305c      	adds	r0, #92	; 0x5c
 800ed9e:	f7fd fa0c 	bl	800c1ba <memset>
 800eda2:	6365      	str	r5, [r4, #52]	; 0x34
 800eda4:	63a5      	str	r5, [r4, #56]	; 0x38
 800eda6:	64a5      	str	r5, [r4, #72]	; 0x48
 800eda8:	64e5      	str	r5, [r4, #76]	; 0x4c
 800edaa:	0020      	movs	r0, r4
 800edac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edae:	3468      	adds	r4, #104	; 0x68
 800edb0:	e7d7      	b.n	800ed62 <__sfp+0x1e>
 800edb2:	2104      	movs	r1, #4
 800edb4:	0038      	movs	r0, r7
 800edb6:	f7ff ff57 	bl	800ec68 <__sfmoreglue>
 800edba:	1e04      	subs	r4, r0, #0
 800edbc:	6030      	str	r0, [r6, #0]
 800edbe:	d1d5      	bne.n	800ed6c <__sfp+0x28>
 800edc0:	f7ff ff70 	bl	800eca4 <__sfp_lock_release>
 800edc4:	230c      	movs	r3, #12
 800edc6:	603b      	str	r3, [r7, #0]
 800edc8:	e7ef      	b.n	800edaa <__sfp+0x66>
 800edca:	46c0      	nop			; (mov r8, r8)
 800edcc:	0800f544 	.word	0x0800f544
 800edd0:	ffff0001 	.word	0xffff0001

0800edd4 <_fwalk_reent>:
 800edd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800edd6:	0004      	movs	r4, r0
 800edd8:	0006      	movs	r6, r0
 800edda:	2700      	movs	r7, #0
 800eddc:	9101      	str	r1, [sp, #4]
 800edde:	3448      	adds	r4, #72	; 0x48
 800ede0:	6863      	ldr	r3, [r4, #4]
 800ede2:	68a5      	ldr	r5, [r4, #8]
 800ede4:	9300      	str	r3, [sp, #0]
 800ede6:	9b00      	ldr	r3, [sp, #0]
 800ede8:	3b01      	subs	r3, #1
 800edea:	9300      	str	r3, [sp, #0]
 800edec:	d504      	bpl.n	800edf8 <_fwalk_reent+0x24>
 800edee:	6824      	ldr	r4, [r4, #0]
 800edf0:	2c00      	cmp	r4, #0
 800edf2:	d1f5      	bne.n	800ede0 <_fwalk_reent+0xc>
 800edf4:	0038      	movs	r0, r7
 800edf6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800edf8:	89ab      	ldrh	r3, [r5, #12]
 800edfa:	2b01      	cmp	r3, #1
 800edfc:	d908      	bls.n	800ee10 <_fwalk_reent+0x3c>
 800edfe:	220e      	movs	r2, #14
 800ee00:	5eab      	ldrsh	r3, [r5, r2]
 800ee02:	3301      	adds	r3, #1
 800ee04:	d004      	beq.n	800ee10 <_fwalk_reent+0x3c>
 800ee06:	0029      	movs	r1, r5
 800ee08:	0030      	movs	r0, r6
 800ee0a:	9b01      	ldr	r3, [sp, #4]
 800ee0c:	4798      	blx	r3
 800ee0e:	4307      	orrs	r7, r0
 800ee10:	3568      	adds	r5, #104	; 0x68
 800ee12:	e7e8      	b.n	800ede6 <_fwalk_reent+0x12>

0800ee14 <__retarget_lock_init_recursive>:
 800ee14:	4770      	bx	lr

0800ee16 <__retarget_lock_acquire_recursive>:
 800ee16:	4770      	bx	lr

0800ee18 <__retarget_lock_release_recursive>:
 800ee18:	4770      	bx	lr
	...

0800ee1c <__swhatbuf_r>:
 800ee1c:	b570      	push	{r4, r5, r6, lr}
 800ee1e:	000e      	movs	r6, r1
 800ee20:	001d      	movs	r5, r3
 800ee22:	230e      	movs	r3, #14
 800ee24:	5ec9      	ldrsh	r1, [r1, r3]
 800ee26:	0014      	movs	r4, r2
 800ee28:	b096      	sub	sp, #88	; 0x58
 800ee2a:	2900      	cmp	r1, #0
 800ee2c:	da08      	bge.n	800ee40 <__swhatbuf_r+0x24>
 800ee2e:	220c      	movs	r2, #12
 800ee30:	5eb3      	ldrsh	r3, [r6, r2]
 800ee32:	2200      	movs	r2, #0
 800ee34:	602a      	str	r2, [r5, #0]
 800ee36:	061b      	lsls	r3, r3, #24
 800ee38:	d411      	bmi.n	800ee5e <__swhatbuf_r+0x42>
 800ee3a:	2380      	movs	r3, #128	; 0x80
 800ee3c:	00db      	lsls	r3, r3, #3
 800ee3e:	e00f      	b.n	800ee60 <__swhatbuf_r+0x44>
 800ee40:	466a      	mov	r2, sp
 800ee42:	f000 f91b 	bl	800f07c <_fstat_r>
 800ee46:	2800      	cmp	r0, #0
 800ee48:	dbf1      	blt.n	800ee2e <__swhatbuf_r+0x12>
 800ee4a:	23f0      	movs	r3, #240	; 0xf0
 800ee4c:	9901      	ldr	r1, [sp, #4]
 800ee4e:	021b      	lsls	r3, r3, #8
 800ee50:	4019      	ands	r1, r3
 800ee52:	4b05      	ldr	r3, [pc, #20]	; (800ee68 <__swhatbuf_r+0x4c>)
 800ee54:	18c9      	adds	r1, r1, r3
 800ee56:	424b      	negs	r3, r1
 800ee58:	4159      	adcs	r1, r3
 800ee5a:	6029      	str	r1, [r5, #0]
 800ee5c:	e7ed      	b.n	800ee3a <__swhatbuf_r+0x1e>
 800ee5e:	2340      	movs	r3, #64	; 0x40
 800ee60:	2000      	movs	r0, #0
 800ee62:	6023      	str	r3, [r4, #0]
 800ee64:	b016      	add	sp, #88	; 0x58
 800ee66:	bd70      	pop	{r4, r5, r6, pc}
 800ee68:	ffffe000 	.word	0xffffe000

0800ee6c <__smakebuf_r>:
 800ee6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee6e:	2602      	movs	r6, #2
 800ee70:	898b      	ldrh	r3, [r1, #12]
 800ee72:	0005      	movs	r5, r0
 800ee74:	000c      	movs	r4, r1
 800ee76:	4233      	tst	r3, r6
 800ee78:	d006      	beq.n	800ee88 <__smakebuf_r+0x1c>
 800ee7a:	0023      	movs	r3, r4
 800ee7c:	3347      	adds	r3, #71	; 0x47
 800ee7e:	6023      	str	r3, [r4, #0]
 800ee80:	6123      	str	r3, [r4, #16]
 800ee82:	2301      	movs	r3, #1
 800ee84:	6163      	str	r3, [r4, #20]
 800ee86:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ee88:	466a      	mov	r2, sp
 800ee8a:	ab01      	add	r3, sp, #4
 800ee8c:	f7ff ffc6 	bl	800ee1c <__swhatbuf_r>
 800ee90:	9900      	ldr	r1, [sp, #0]
 800ee92:	0007      	movs	r7, r0
 800ee94:	0028      	movs	r0, r5
 800ee96:	f7ff f92d 	bl	800e0f4 <_malloc_r>
 800ee9a:	2800      	cmp	r0, #0
 800ee9c:	d108      	bne.n	800eeb0 <__smakebuf_r+0x44>
 800ee9e:	220c      	movs	r2, #12
 800eea0:	5ea3      	ldrsh	r3, [r4, r2]
 800eea2:	059a      	lsls	r2, r3, #22
 800eea4:	d4ef      	bmi.n	800ee86 <__smakebuf_r+0x1a>
 800eea6:	2203      	movs	r2, #3
 800eea8:	4393      	bics	r3, r2
 800eeaa:	431e      	orrs	r6, r3
 800eeac:	81a6      	strh	r6, [r4, #12]
 800eeae:	e7e4      	b.n	800ee7a <__smakebuf_r+0xe>
 800eeb0:	4b0f      	ldr	r3, [pc, #60]	; (800eef0 <__smakebuf_r+0x84>)
 800eeb2:	62ab      	str	r3, [r5, #40]	; 0x28
 800eeb4:	2380      	movs	r3, #128	; 0x80
 800eeb6:	89a2      	ldrh	r2, [r4, #12]
 800eeb8:	6020      	str	r0, [r4, #0]
 800eeba:	4313      	orrs	r3, r2
 800eebc:	81a3      	strh	r3, [r4, #12]
 800eebe:	9b00      	ldr	r3, [sp, #0]
 800eec0:	6120      	str	r0, [r4, #16]
 800eec2:	6163      	str	r3, [r4, #20]
 800eec4:	9b01      	ldr	r3, [sp, #4]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d00d      	beq.n	800eee6 <__smakebuf_r+0x7a>
 800eeca:	0028      	movs	r0, r5
 800eecc:	230e      	movs	r3, #14
 800eece:	5ee1      	ldrsh	r1, [r4, r3]
 800eed0:	f000 f8e6 	bl	800f0a0 <_isatty_r>
 800eed4:	2800      	cmp	r0, #0
 800eed6:	d006      	beq.n	800eee6 <__smakebuf_r+0x7a>
 800eed8:	2203      	movs	r2, #3
 800eeda:	89a3      	ldrh	r3, [r4, #12]
 800eedc:	4393      	bics	r3, r2
 800eede:	001a      	movs	r2, r3
 800eee0:	2301      	movs	r3, #1
 800eee2:	4313      	orrs	r3, r2
 800eee4:	81a3      	strh	r3, [r4, #12]
 800eee6:	89a0      	ldrh	r0, [r4, #12]
 800eee8:	4307      	orrs	r7, r0
 800eeea:	81a7      	strh	r7, [r4, #12]
 800eeec:	e7cb      	b.n	800ee86 <__smakebuf_r+0x1a>
 800eeee:	46c0      	nop			; (mov r8, r8)
 800eef0:	0800ec59 	.word	0x0800ec59

0800eef4 <_malloc_usable_size_r>:
 800eef4:	1f0b      	subs	r3, r1, #4
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	1f18      	subs	r0, r3, #4
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	da01      	bge.n	800ef02 <_malloc_usable_size_r+0xe>
 800eefe:	580b      	ldr	r3, [r1, r0]
 800ef00:	18c0      	adds	r0, r0, r3
 800ef02:	4770      	bx	lr

0800ef04 <_raise_r>:
 800ef04:	b570      	push	{r4, r5, r6, lr}
 800ef06:	0004      	movs	r4, r0
 800ef08:	000d      	movs	r5, r1
 800ef0a:	291f      	cmp	r1, #31
 800ef0c:	d904      	bls.n	800ef18 <_raise_r+0x14>
 800ef0e:	2316      	movs	r3, #22
 800ef10:	6003      	str	r3, [r0, #0]
 800ef12:	2001      	movs	r0, #1
 800ef14:	4240      	negs	r0, r0
 800ef16:	bd70      	pop	{r4, r5, r6, pc}
 800ef18:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d004      	beq.n	800ef28 <_raise_r+0x24>
 800ef1e:	008a      	lsls	r2, r1, #2
 800ef20:	189b      	adds	r3, r3, r2
 800ef22:	681a      	ldr	r2, [r3, #0]
 800ef24:	2a00      	cmp	r2, #0
 800ef26:	d108      	bne.n	800ef3a <_raise_r+0x36>
 800ef28:	0020      	movs	r0, r4
 800ef2a:	f000 f831 	bl	800ef90 <_getpid_r>
 800ef2e:	002a      	movs	r2, r5
 800ef30:	0001      	movs	r1, r0
 800ef32:	0020      	movs	r0, r4
 800ef34:	f000 f81a 	bl	800ef6c <_kill_r>
 800ef38:	e7ed      	b.n	800ef16 <_raise_r+0x12>
 800ef3a:	2000      	movs	r0, #0
 800ef3c:	2a01      	cmp	r2, #1
 800ef3e:	d0ea      	beq.n	800ef16 <_raise_r+0x12>
 800ef40:	1c51      	adds	r1, r2, #1
 800ef42:	d103      	bne.n	800ef4c <_raise_r+0x48>
 800ef44:	2316      	movs	r3, #22
 800ef46:	3001      	adds	r0, #1
 800ef48:	6023      	str	r3, [r4, #0]
 800ef4a:	e7e4      	b.n	800ef16 <_raise_r+0x12>
 800ef4c:	2400      	movs	r4, #0
 800ef4e:	0028      	movs	r0, r5
 800ef50:	601c      	str	r4, [r3, #0]
 800ef52:	4790      	blx	r2
 800ef54:	0020      	movs	r0, r4
 800ef56:	e7de      	b.n	800ef16 <_raise_r+0x12>

0800ef58 <raise>:
 800ef58:	b510      	push	{r4, lr}
 800ef5a:	4b03      	ldr	r3, [pc, #12]	; (800ef68 <raise+0x10>)
 800ef5c:	0001      	movs	r1, r0
 800ef5e:	6818      	ldr	r0, [r3, #0]
 800ef60:	f7ff ffd0 	bl	800ef04 <_raise_r>
 800ef64:	bd10      	pop	{r4, pc}
 800ef66:	46c0      	nop			; (mov r8, r8)
 800ef68:	20000014 	.word	0x20000014

0800ef6c <_kill_r>:
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	b570      	push	{r4, r5, r6, lr}
 800ef70:	4d06      	ldr	r5, [pc, #24]	; (800ef8c <_kill_r+0x20>)
 800ef72:	0004      	movs	r4, r0
 800ef74:	0008      	movs	r0, r1
 800ef76:	0011      	movs	r1, r2
 800ef78:	602b      	str	r3, [r5, #0]
 800ef7a:	f7f6 fd75 	bl	8005a68 <_kill>
 800ef7e:	1c43      	adds	r3, r0, #1
 800ef80:	d103      	bne.n	800ef8a <_kill_r+0x1e>
 800ef82:	682b      	ldr	r3, [r5, #0]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d000      	beq.n	800ef8a <_kill_r+0x1e>
 800ef88:	6023      	str	r3, [r4, #0]
 800ef8a:	bd70      	pop	{r4, r5, r6, pc}
 800ef8c:	20000dfc 	.word	0x20000dfc

0800ef90 <_getpid_r>:
 800ef90:	b510      	push	{r4, lr}
 800ef92:	f7f6 fd63 	bl	8005a5c <_getpid>
 800ef96:	bd10      	pop	{r4, pc}

0800ef98 <__sread>:
 800ef98:	b570      	push	{r4, r5, r6, lr}
 800ef9a:	000c      	movs	r4, r1
 800ef9c:	250e      	movs	r5, #14
 800ef9e:	5f49      	ldrsh	r1, [r1, r5]
 800efa0:	f000 f8a4 	bl	800f0ec <_read_r>
 800efa4:	2800      	cmp	r0, #0
 800efa6:	db03      	blt.n	800efb0 <__sread+0x18>
 800efa8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800efaa:	181b      	adds	r3, r3, r0
 800efac:	6563      	str	r3, [r4, #84]	; 0x54
 800efae:	bd70      	pop	{r4, r5, r6, pc}
 800efb0:	89a3      	ldrh	r3, [r4, #12]
 800efb2:	4a02      	ldr	r2, [pc, #8]	; (800efbc <__sread+0x24>)
 800efb4:	4013      	ands	r3, r2
 800efb6:	81a3      	strh	r3, [r4, #12]
 800efb8:	e7f9      	b.n	800efae <__sread+0x16>
 800efba:	46c0      	nop			; (mov r8, r8)
 800efbc:	ffffefff 	.word	0xffffefff

0800efc0 <__swrite>:
 800efc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efc2:	001f      	movs	r7, r3
 800efc4:	898b      	ldrh	r3, [r1, #12]
 800efc6:	0005      	movs	r5, r0
 800efc8:	000c      	movs	r4, r1
 800efca:	0016      	movs	r6, r2
 800efcc:	05db      	lsls	r3, r3, #23
 800efce:	d505      	bpl.n	800efdc <__swrite+0x1c>
 800efd0:	230e      	movs	r3, #14
 800efd2:	5ec9      	ldrsh	r1, [r1, r3]
 800efd4:	2200      	movs	r2, #0
 800efd6:	2302      	movs	r3, #2
 800efd8:	f000 f874 	bl	800f0c4 <_lseek_r>
 800efdc:	89a3      	ldrh	r3, [r4, #12]
 800efde:	4a05      	ldr	r2, [pc, #20]	; (800eff4 <__swrite+0x34>)
 800efe0:	0028      	movs	r0, r5
 800efe2:	4013      	ands	r3, r2
 800efe4:	81a3      	strh	r3, [r4, #12]
 800efe6:	0032      	movs	r2, r6
 800efe8:	230e      	movs	r3, #14
 800efea:	5ee1      	ldrsh	r1, [r4, r3]
 800efec:	003b      	movs	r3, r7
 800efee:	f000 f81f 	bl	800f030 <_write_r>
 800eff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eff4:	ffffefff 	.word	0xffffefff

0800eff8 <__sseek>:
 800eff8:	b570      	push	{r4, r5, r6, lr}
 800effa:	000c      	movs	r4, r1
 800effc:	250e      	movs	r5, #14
 800effe:	5f49      	ldrsh	r1, [r1, r5]
 800f000:	f000 f860 	bl	800f0c4 <_lseek_r>
 800f004:	89a3      	ldrh	r3, [r4, #12]
 800f006:	1c42      	adds	r2, r0, #1
 800f008:	d103      	bne.n	800f012 <__sseek+0x1a>
 800f00a:	4a05      	ldr	r2, [pc, #20]	; (800f020 <__sseek+0x28>)
 800f00c:	4013      	ands	r3, r2
 800f00e:	81a3      	strh	r3, [r4, #12]
 800f010:	bd70      	pop	{r4, r5, r6, pc}
 800f012:	2280      	movs	r2, #128	; 0x80
 800f014:	0152      	lsls	r2, r2, #5
 800f016:	4313      	orrs	r3, r2
 800f018:	81a3      	strh	r3, [r4, #12]
 800f01a:	6560      	str	r0, [r4, #84]	; 0x54
 800f01c:	e7f8      	b.n	800f010 <__sseek+0x18>
 800f01e:	46c0      	nop			; (mov r8, r8)
 800f020:	ffffefff 	.word	0xffffefff

0800f024 <__sclose>:
 800f024:	b510      	push	{r4, lr}
 800f026:	230e      	movs	r3, #14
 800f028:	5ec9      	ldrsh	r1, [r1, r3]
 800f02a:	f000 f815 	bl	800f058 <_close_r>
 800f02e:	bd10      	pop	{r4, pc}

0800f030 <_write_r>:
 800f030:	b570      	push	{r4, r5, r6, lr}
 800f032:	0004      	movs	r4, r0
 800f034:	0008      	movs	r0, r1
 800f036:	0011      	movs	r1, r2
 800f038:	001a      	movs	r2, r3
 800f03a:	2300      	movs	r3, #0
 800f03c:	4d05      	ldr	r5, [pc, #20]	; (800f054 <_write_r+0x24>)
 800f03e:	602b      	str	r3, [r5, #0]
 800f040:	f7f6 fd4b 	bl	8005ada <_write>
 800f044:	1c43      	adds	r3, r0, #1
 800f046:	d103      	bne.n	800f050 <_write_r+0x20>
 800f048:	682b      	ldr	r3, [r5, #0]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d000      	beq.n	800f050 <_write_r+0x20>
 800f04e:	6023      	str	r3, [r4, #0]
 800f050:	bd70      	pop	{r4, r5, r6, pc}
 800f052:	46c0      	nop			; (mov r8, r8)
 800f054:	20000dfc 	.word	0x20000dfc

0800f058 <_close_r>:
 800f058:	2300      	movs	r3, #0
 800f05a:	b570      	push	{r4, r5, r6, lr}
 800f05c:	4d06      	ldr	r5, [pc, #24]	; (800f078 <_close_r+0x20>)
 800f05e:	0004      	movs	r4, r0
 800f060:	0008      	movs	r0, r1
 800f062:	602b      	str	r3, [r5, #0]
 800f064:	f7f6 fd55 	bl	8005b12 <_close>
 800f068:	1c43      	adds	r3, r0, #1
 800f06a:	d103      	bne.n	800f074 <_close_r+0x1c>
 800f06c:	682b      	ldr	r3, [r5, #0]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d000      	beq.n	800f074 <_close_r+0x1c>
 800f072:	6023      	str	r3, [r4, #0]
 800f074:	bd70      	pop	{r4, r5, r6, pc}
 800f076:	46c0      	nop			; (mov r8, r8)
 800f078:	20000dfc 	.word	0x20000dfc

0800f07c <_fstat_r>:
 800f07c:	2300      	movs	r3, #0
 800f07e:	b570      	push	{r4, r5, r6, lr}
 800f080:	4d06      	ldr	r5, [pc, #24]	; (800f09c <_fstat_r+0x20>)
 800f082:	0004      	movs	r4, r0
 800f084:	0008      	movs	r0, r1
 800f086:	0011      	movs	r1, r2
 800f088:	602b      	str	r3, [r5, #0]
 800f08a:	f7f6 fd4c 	bl	8005b26 <_fstat>
 800f08e:	1c43      	adds	r3, r0, #1
 800f090:	d103      	bne.n	800f09a <_fstat_r+0x1e>
 800f092:	682b      	ldr	r3, [r5, #0]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d000      	beq.n	800f09a <_fstat_r+0x1e>
 800f098:	6023      	str	r3, [r4, #0]
 800f09a:	bd70      	pop	{r4, r5, r6, pc}
 800f09c:	20000dfc 	.word	0x20000dfc

0800f0a0 <_isatty_r>:
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	b570      	push	{r4, r5, r6, lr}
 800f0a4:	4d06      	ldr	r5, [pc, #24]	; (800f0c0 <_isatty_r+0x20>)
 800f0a6:	0004      	movs	r4, r0
 800f0a8:	0008      	movs	r0, r1
 800f0aa:	602b      	str	r3, [r5, #0]
 800f0ac:	f7f6 fd49 	bl	8005b42 <_isatty>
 800f0b0:	1c43      	adds	r3, r0, #1
 800f0b2:	d103      	bne.n	800f0bc <_isatty_r+0x1c>
 800f0b4:	682b      	ldr	r3, [r5, #0]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d000      	beq.n	800f0bc <_isatty_r+0x1c>
 800f0ba:	6023      	str	r3, [r4, #0]
 800f0bc:	bd70      	pop	{r4, r5, r6, pc}
 800f0be:	46c0      	nop			; (mov r8, r8)
 800f0c0:	20000dfc 	.word	0x20000dfc

0800f0c4 <_lseek_r>:
 800f0c4:	b570      	push	{r4, r5, r6, lr}
 800f0c6:	0004      	movs	r4, r0
 800f0c8:	0008      	movs	r0, r1
 800f0ca:	0011      	movs	r1, r2
 800f0cc:	001a      	movs	r2, r3
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	4d05      	ldr	r5, [pc, #20]	; (800f0e8 <_lseek_r+0x24>)
 800f0d2:	602b      	str	r3, [r5, #0]
 800f0d4:	f7f6 fd3e 	bl	8005b54 <_lseek>
 800f0d8:	1c43      	adds	r3, r0, #1
 800f0da:	d103      	bne.n	800f0e4 <_lseek_r+0x20>
 800f0dc:	682b      	ldr	r3, [r5, #0]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d000      	beq.n	800f0e4 <_lseek_r+0x20>
 800f0e2:	6023      	str	r3, [r4, #0]
 800f0e4:	bd70      	pop	{r4, r5, r6, pc}
 800f0e6:	46c0      	nop			; (mov r8, r8)
 800f0e8:	20000dfc 	.word	0x20000dfc

0800f0ec <_read_r>:
 800f0ec:	b570      	push	{r4, r5, r6, lr}
 800f0ee:	0004      	movs	r4, r0
 800f0f0:	0008      	movs	r0, r1
 800f0f2:	0011      	movs	r1, r2
 800f0f4:	001a      	movs	r2, r3
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	4d05      	ldr	r5, [pc, #20]	; (800f110 <_read_r+0x24>)
 800f0fa:	602b      	str	r3, [r5, #0]
 800f0fc:	f7f6 fcd0 	bl	8005aa0 <_read>
 800f100:	1c43      	adds	r3, r0, #1
 800f102:	d103      	bne.n	800f10c <_read_r+0x20>
 800f104:	682b      	ldr	r3, [r5, #0]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d000      	beq.n	800f10c <_read_r+0x20>
 800f10a:	6023      	str	r3, [r4, #0]
 800f10c:	bd70      	pop	{r4, r5, r6, pc}
 800f10e:	46c0      	nop			; (mov r8, r8)
 800f110:	20000dfc 	.word	0x20000dfc

0800f114 <sqrtf>:
 800f114:	b570      	push	{r4, r5, r6, lr}
 800f116:	1c05      	adds	r5, r0, #0
 800f118:	f000 f818 	bl	800f14c <__ieee754_sqrtf>
 800f11c:	1c29      	adds	r1, r5, #0
 800f11e:	1c04      	adds	r4, r0, #0
 800f120:	1c28      	adds	r0, r5, #0
 800f122:	f7f2 f835 	bl	8001190 <__aeabi_fcmpun>
 800f126:	2800      	cmp	r0, #0
 800f128:	d10e      	bne.n	800f148 <sqrtf+0x34>
 800f12a:	2100      	movs	r1, #0
 800f12c:	1c28      	adds	r0, r5, #0
 800f12e:	f7f1 f9cd 	bl	80004cc <__aeabi_fcmplt>
 800f132:	2800      	cmp	r0, #0
 800f134:	d008      	beq.n	800f148 <sqrtf+0x34>
 800f136:	f7fd f80d 	bl	800c154 <__errno>
 800f13a:	2321      	movs	r3, #33	; 0x21
 800f13c:	2100      	movs	r1, #0
 800f13e:	6003      	str	r3, [r0, #0]
 800f140:	1c08      	adds	r0, r1, #0
 800f142:	f7f1 fb89 	bl	8000858 <__aeabi_fdiv>
 800f146:	1c04      	adds	r4, r0, #0
 800f148:	1c20      	adds	r0, r4, #0
 800f14a:	bd70      	pop	{r4, r5, r6, pc}

0800f14c <__ieee754_sqrtf>:
 800f14c:	0042      	lsls	r2, r0, #1
 800f14e:	0003      	movs	r3, r0
 800f150:	b570      	push	{r4, r5, r6, lr}
 800f152:	1c04      	adds	r4, r0, #0
 800f154:	20ff      	movs	r0, #255	; 0xff
 800f156:	0852      	lsrs	r2, r2, #1
 800f158:	05c0      	lsls	r0, r0, #23
 800f15a:	4282      	cmp	r2, r0
 800f15c:	d30a      	bcc.n	800f174 <__ieee754_sqrtf+0x28>
 800f15e:	1c21      	adds	r1, r4, #0
 800f160:	1c20      	adds	r0, r4, #0
 800f162:	f7f1 fd41 	bl	8000be8 <__aeabi_fmul>
 800f166:	1c01      	adds	r1, r0, #0
 800f168:	1c20      	adds	r0, r4, #0
 800f16a:	f7f1 f9d7 	bl	800051c <__aeabi_fadd>
 800f16e:	1c04      	adds	r4, r0, #0
 800f170:	1c20      	adds	r0, r4, #0
 800f172:	bd70      	pop	{r4, r5, r6, pc}
 800f174:	2a00      	cmp	r2, #0
 800f176:	d0fb      	beq.n	800f170 <__ieee754_sqrtf+0x24>
 800f178:	2c00      	cmp	r4, #0
 800f17a:	da07      	bge.n	800f18c <__ieee754_sqrtf+0x40>
 800f17c:	1c21      	adds	r1, r4, #0
 800f17e:	1c20      	adds	r0, r4, #0
 800f180:	f7f1 fe58 	bl	8000e34 <__aeabi_fsub>
 800f184:	1c01      	adds	r1, r0, #0
 800f186:	f7f1 fb67 	bl	8000858 <__aeabi_fdiv>
 800f18a:	e7f0      	b.n	800f16e <__ieee754_sqrtf+0x22>
 800f18c:	0022      	movs	r2, r4
 800f18e:	15e1      	asrs	r1, r4, #23
 800f190:	4002      	ands	r2, r0
 800f192:	4204      	tst	r4, r0
 800f194:	d02e      	beq.n	800f1f4 <__ieee754_sqrtf+0xa8>
 800f196:	2280      	movs	r2, #128	; 0x80
 800f198:	000c      	movs	r4, r1
 800f19a:	025b      	lsls	r3, r3, #9
 800f19c:	0a5b      	lsrs	r3, r3, #9
 800f19e:	0412      	lsls	r2, r2, #16
 800f1a0:	3c7f      	subs	r4, #127	; 0x7f
 800f1a2:	4313      	orrs	r3, r2
 800f1a4:	07ca      	lsls	r2, r1, #31
 800f1a6:	d400      	bmi.n	800f1aa <__ieee754_sqrtf+0x5e>
 800f1a8:	005b      	lsls	r3, r3, #1
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	2180      	movs	r1, #128	; 0x80
 800f1ae:	2019      	movs	r0, #25
 800f1b0:	0016      	movs	r6, r2
 800f1b2:	1064      	asrs	r4, r4, #1
 800f1b4:	005b      	lsls	r3, r3, #1
 800f1b6:	0449      	lsls	r1, r1, #17
 800f1b8:	1875      	adds	r5, r6, r1
 800f1ba:	429d      	cmp	r5, r3
 800f1bc:	dc02      	bgt.n	800f1c4 <__ieee754_sqrtf+0x78>
 800f1be:	186e      	adds	r6, r5, r1
 800f1c0:	1b5b      	subs	r3, r3, r5
 800f1c2:	1852      	adds	r2, r2, r1
 800f1c4:	3801      	subs	r0, #1
 800f1c6:	005b      	lsls	r3, r3, #1
 800f1c8:	0849      	lsrs	r1, r1, #1
 800f1ca:	2800      	cmp	r0, #0
 800f1cc:	d1f4      	bne.n	800f1b8 <__ieee754_sqrtf+0x6c>
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d002      	beq.n	800f1d8 <__ieee754_sqrtf+0x8c>
 800f1d2:	2301      	movs	r3, #1
 800f1d4:	3201      	adds	r2, #1
 800f1d6:	439a      	bics	r2, r3
 800f1d8:	23fc      	movs	r3, #252	; 0xfc
 800f1da:	1052      	asrs	r2, r2, #1
 800f1dc:	059b      	lsls	r3, r3, #22
 800f1de:	18d2      	adds	r2, r2, r3
 800f1e0:	05e4      	lsls	r4, r4, #23
 800f1e2:	18a4      	adds	r4, r4, r2
 800f1e4:	e7c4      	b.n	800f170 <__ieee754_sqrtf+0x24>
 800f1e6:	005b      	lsls	r3, r3, #1
 800f1e8:	3201      	adds	r2, #1
 800f1ea:	4203      	tst	r3, r0
 800f1ec:	d0fb      	beq.n	800f1e6 <__ieee754_sqrtf+0x9a>
 800f1ee:	3a01      	subs	r2, #1
 800f1f0:	1a89      	subs	r1, r1, r2
 800f1f2:	e7d0      	b.n	800f196 <__ieee754_sqrtf+0x4a>
 800f1f4:	2080      	movs	r0, #128	; 0x80
 800f1f6:	0400      	lsls	r0, r0, #16
 800f1f8:	e7f7      	b.n	800f1ea <__ieee754_sqrtf+0x9e>
	...

0800f1fc <_init>:
 800f1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1fe:	46c0      	nop			; (mov r8, r8)
 800f200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f202:	bc08      	pop	{r3}
 800f204:	469e      	mov	lr, r3
 800f206:	4770      	bx	lr

0800f208 <_fini>:
 800f208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f20a:	46c0      	nop			; (mov r8, r8)
 800f20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f20e:	bc08      	pop	{r3}
 800f210:	469e      	mov	lr, r3
 800f212:	4770      	bx	lr
